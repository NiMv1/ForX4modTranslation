--[[
    Yapılanlar
    3.28
        Commander name üzerine RFM Tagın eklenip kalırılması.

    3.27
        1- RFM Commander isimleri manager ekranı üzerinde güncellenebiliyor.
        2- Farklı çözünürlüklerde oluşan manager ekranındaki aşırı sütun daralmaları iyileştirildi.

    3.26
        1- Bottom buttons yeniden düzenlendi
        2- rfm kargo kaydında 0 lanan equipmentlar loadout kaydından çıkarıldı.
        3- Manager ekranı üzerinden yapılan Clone ve resetBuild gibi işlemlerdeki ekran donmaları iyileştirildi.

    3.25 - 5.04.25-21.58
        version 3.24 deki hatalı paketlemeden kaynaklanan rebuild işlemi esnasında oluşan oyun çökme sorunu giderildi.
        XL gemilerde kalkansız üretim hatası düzeltildi.

    3.23 resetleme 3.24 bozuk paketleme
    3.22
        Swi 'Dreadnaughts and Battlecruisers' modu ile birlikte çakışma yaşanması ve oyun çökmesi düzeltildi.
        Ayarlar ekranında Pilot Onay kutusunun onaylama hatası giderildi.
        RFM Ship bir istayona bağlandığında istasyon propertysi ship kalıyordu. düzeltildi.
        patch 19 da düzeltilmeye çalışılan shiptrader olyı az önceki durum yüzüdnen düzeltilememiş oldu. düzeltildi.
        kayıt içindeki fleet hasarlı durum verisi sorunun sebebi düzeltildi.
        XL Shieldlere sahip gemilerde loadout record kaydı yanlış bir slot üzerine alındığı için gemi üretildiğinde kalkansız üretilmiş oluyor. Düzeltme için hazırlık yapılıyor.

    3.21 
        3.20 ile bozulan buildtask eklemelerinde oluşan hata düzeltildi.

    3.20
        Gemiye ait Paint Modifikasyon kayıt altına alındı.
        Üretilen gemi için kaydedilen Pilot skilllerinin yeni pilota aktarılma izni getirildi.
        RFM içindeki bir gemiyi kullanırken gemi patladığında nadiren oluşan bir debug döküm hatası düzltildi.
        RFM Warf ya da Shipyard İstasyonlarına sonradan atanan shiptraderler RFMCommander (Manager) Entitysi olarak kaydediliyordu. Düzeltildi.
        player istasyon seçimlerinde üretim maliyeti denetimi yapılıyordu. düzeltildi.

    3.12
        Fixed a record corruption issue caused by using the ship_names mod on rfm. This will be tested on every game load.

    3.10
        1- RFM kapatılmadan gemi kayıtlarının manager ekranı üzerinde güncellenebilmesi için kod yapısında büyük değişiklikler yapıldı. 
            Şimdilik sadece kargo envanterleri (missiles, drones, deployables ve countermeasures) güncellenebiliyor.
            (Ayarlar içinde izin durumuna göre istasyonlarda equipment değişimi ile zaten kayıt bilgileri rfm kapatılıp açılmaya gerek kalmadan güncellenebiliyordu.)
        2- Manager ekranı açıkken MD ile haberleşme esnasındaki anlık ekran donmalarında iyileştirme yapıldı.
        3- Fleet yapısı bozulmuş rfmlerde üretilen gemiler içinde promoted commander görevini mevcut gemiler içinde en iyi skora sahip olan geminin devralması özelliği sağlandı.
        4- Equipment değişimi sonrasında gemiye atanan yeni isim kayıt üzerinde güncellenirken promoted gemi için rfm tagı da otomatik güncelleniyor.
        5- Rusça dil desteği eklendi.
        6- İstasyon RFM'lerin sector bilgisi kayıt altına alınmamıştı. Düzeltildi.
        7- RFM gemilerindeki group ve assigment değişimlerindeki güncelleme hatası giderildi. (RFM ver 3.0 sonrası ile uyumlu hale getirildi.)
        8- Clone RFM içindeki key hatası düzeltildi. (RFM ver 3.0 ile bozuldu)
        9- Sadece commanderdan oluşan RFM'lerde commanderin patlaması durumunda oluşan otomatik kapanma hatası giderildi. (RFM ver 3.0 ile bozuldu)
        10- RFM Defaultorderın çalışma zamanında yapılan defaultorder değişimi güncellenmiyordu, düzeltildi. (RFM ver 3.0 ile bozuldu.)
        11- RFM ver 3.4 ile oluşan bazı kayıt güncelleme hataları düzeltildi.
        12- Debug sistemi yeniden düzenlendi.
        
        
    3.03-3.04
        1-Clone RFM hatası düzeltildi.
        2-Toplu başlatma ile üretimlerde oluşan tek tip gemi üretim hatası düzeltildi.
        3- üretimi başlamayan gemilerin record yapısındaki ammo, drone, deployables ve countermeasure miktarları manager ekranı üzerinden güncellenebilir.
        4- Manager ekranında pilota ait avarage skill 0 için gösterim hatası düzeltildi.

    3.02
        1-Personel sayısı fazla olan fleetlerin rfm başlatmalarındaki ekran donması düzeltildi.
        2-RFM Promoted Commander gemisini oyuncu devraldığında oluşan rfm hatası giderildi.
        3- 'Protect Sector' (v:104 author:Chem O`Dun) modu rfm default orderlara dahil edildi.
        4- birkaç ufak bug giderildi.

    3.00-3.01
        1- RFM Alert, seviye ve renkleri tekrar düzenlendi.
        2- konuşulan entity, rfm içinde bir gemi ise manager ekranında seçili gelecek şekilde ayarlama yapıldı.
        3- Manager ekranındaki filo içi gemiler listesine expand özelliği getirildi.
        4- RFM_Record Yapısını görebilmek için Management ekranı Sağ paneli ve ilgili data yapısı tekrar düzenlendi.
        5- Manager ekranı üzerinde Clone alma işlemi seçili gemi ve altındakiler olacak şekilde tekrar düzenlendi.
        6- Manager ekranı üzerindeki yeniden başlatma Rebuild Timer özelliği olarak değiştirildi. Özellik açıksa rebuild check işlemleri aktif olacak, değilse açılana kadar rebuild check yapılmayacak. 

    Yapılması düşünülenler listesi:
        
        * md içinde patlama anında sub promoted oluştuğunda egosoftun tercihi yerine score gemi bulunup tekrar bağlanma rutinleri çalıştırılacak

        * sağ panel onUpdate için refresh almayacak (slider olan sayfalar için önemli). sadece değişiklik bilgisi geldiğinde refreshe dahil olacak.
    
        * rebuildtime genel ayar süresi her rebuildcue tablosuna alınacak ve geri sayım kontrolü ordaki değerden alınıp yapılacak
            rebuild cueler oluşturulurken genel ayardaki rebuildtime değeri default değer olarak alınacak
            genel ayar değiştirildiğinde de rebuildcue tablosuna eklediğimiz değeri değiştrebileceğiz
                - reBuildStartTime ve reBuildTryNum record propertylerine eklendi, rebuild işlemleri için md kodları düzenlenecek ,üretim sonrası değerleri sıfırlayacağız

    * Fikir : 
        Üretime başlanamayan Best Shipyard sonuçlarının hepsini manager ekranına alıp Manager ekranında istenilen için build seçeneği eklenebilir.

    * Fikir : rebuild için istasyon ile uyumsuz çıkarılan ekipmanlar yerine enginelerde olduğu gibi
        1- Engine haricindeki itemlerin değişilip değişilmeyeceğini sormak için Checkbox konacak
            a- Ek checkbox ile değişim yapılması istenebilir. 
                Ekipman, kendi türünde iastayonun mk versiyonlarına karşılık gelen ekipman
                (muadil bulma işini yapamazsak seçim için mk versiyonları da listelenebilir (low mk1, medium mk2, high mk3 gibi) ) 
                ile değiştirilecek

    * ? fleet. datasına subordinate ve constructions tablolarını fonksiyonla alınacak şekilde yazılacak

    * tWare bilgisi üzerinden macro kullanarak patlamış gemilerin tShipPlanı çıkartılacak
    * tanımlı 7.0 Color yapılarından birinin datasını sColor a yazacağız

]]
--call in md  param == { 0, 0, varsa pencere açıldığında konumlanacak $RFMKey, md options table global.$upbRF_DATA }

local utf8 = require("utf8")
-- ffi setup
local ffi = require("ffi")
local C = ffi.C

local playerID = ConvertStringTo64Bit(tostring(C.GetPlayerID()))

local debug0 = false         -- menu.çekirdekfonksiyonlarının giriş çıkışlarını görmek için
local debug1 = false        -- init (lua yükleme zamanı) için
local debug2 = false        -- menu.functionları içindeki detaylı döküm için
local debugW = false         -- table satırlarında ve widget olaylarında debug zamanı görünmesini istediğimiz değerler için
local debugWProps = false   -- tablelerin x,y width ve height değerlerini görmek için
local debugVCreated = false  -- viewCreated için
local debugCheat = false    -- cheat penceresini eklemek için

local debugColorMod = false -- option mode da, frame tablelerinin zemin renkliliği için
local debugGetData = false           -- Player.entity.$md_RFM_DataChanged   değişim durumu kontrol dökümü

local tPg = 1134010 -- dil dosyası ID'si

-- menu variable - used by Helper and used for dynamic variables (e.g. inventory content, etc.)
local menu = {
    name = "RFM_Menu",
    title = ReadText(tPg, 2),
    fleetsTableData = {
        selected = nil,
        settoprow = nil,
        setselectedrow = nil,
    },
    shipsTableData = {
        selected = nil,
        settoprow = nil,
        setselectedrow = nil,
    },
}


local gameversion = C.GetGameVersion()
--DebugError(" gameversion major = " .. tostring(gameversion.major) .. " minor = " .. tostring(gameversion.minor) )

local function getVersionString()
    local s = GetVersionString()
    local theSplitStart, theSplitEnd = string.find( s, " ", 1 )
    return string.sub( s, 1, theSplitStart-1 )
end
local X4VerStr = getVersionString()
local x4Ver = tonumber(string.match(GetVersionString(), "(%w+)%."))

--DebugError("X4VerStr = " .. X4VerStr .. " X4Ver + 1.2 = " .. tostring(tonumber(X4VerStr) + 1.2 ) )


local xdebug = debug1 and DebugError(menu.name .. " .lua. X4 Ver:" .. tostring(x4Ver) .. " , str:" .. tostring(X4VerStr))
local colors = {}

if x4Ver < 7 then
    colors.Color = {
        
        boxtext_box_default = { r = 49, g = 69, b = 83, a = 60 },			        -- defaultBoxTextBoxColor ya da { r = 0,  g = 57, b = 76, a = 88 } olabilir
        boxtext_box_hidden = { r = 0, g = 0, b = 0, a = 0 },                        -- color.transparent

        button_background_default = { r = 49, g = 69, b = 83, a = 60 },             -- defaultButtonBackgroundColor
        button_background_hidden = { r = 0, g = 0, b = 0, a = 0 },                  -- color.transparent
        button_background_inactive = { r = 32, g = 32, b = 32, a = 100 },           -- color.darkgrey
        button_highlight_bigbutton = { r = 0, g = 149, b = 203, a = 100 },          -- { r = 0, g = 149, b = 203, a = 100 }
        button_highlight_default = { r = 71, g = 136, b = 184, a = 100 },           -- defaultButtonHighlightColor
        button_highlight_hidden = { r = 0, g = 0, b = 0, a = 0 },                   -- color.transparent
        button_highlight_inactive = { r = 80, g = 80, b = 80, a = 100 },            -- defaultUnselectableButtonHighlightColor
        
        crew_transfer = { r = 255, g = 255, b = 0, a = 100 },                       -- color.brightyellow

        dropdown_background_default = { r = 49, g = 69, b = 83, a = 60 },           -- defaultButtonBackgroundColor
        dropdown_background_inactive = { r = 31, g = 31, b = 31, a = 100 },         -- defaultUnselectableButtonBackgroundColor
        dropdown_highlight_default = { r = 71, g = 136, b = 184, a = 100 },         -- defaultButtonHighlightColor
        dropdown_highlight_inactive = { r = 80, g = 80, b = 80, a = 100 },          -- defaultUnselectableButtonHighlightColor
        
        checkbox_background_default = { r = 66, g = 92, b = 111, a = 100 },         -- defaultCheckBoxBackgroundColor

        editbox_background_default = { r = 49, g = 69, b = 83, a = 60 },            -- defaultEditBoxBackgroundColor

        flowchart_border_default = { r = 90, g = 146, b = 186, a = 100 },		-- light cyan
        flowchart_edge_default = { r = 255, g = 255, b = 255, a = 100 },            -- color.white
        flowchart_node_background = { r = 25, g = 25, b = 25, a = 100 },		-- dark grey
        flowchart_node_default = { r = 90, g = 146, b = 186, a = 100 },			    -- defaultFlowchartOutlineColor
        flowchart_value_default = { r = 0, g = 116, b = 153, a = 100 },		    -- cyan
        flowchart_slider_value1 = { r = 225, g = 149, b = 0, a = 100 },			-- orange
        flowchart_slider_diff1 = { r = 89, g = 52, b = 0, a = 100 },				-- defaultFlowchartDiff1Color brown
        flowchart_slider_value2 = { r = 66, g = 171, b = 61, a = 100 },			-- green
        flowchart_slider_diff2 = { r = 4, g = 89, b = 0, a = 100 },					-- defaultFlowchartDiff2Color dark green

        frame_background_black = { r = 0, g = 0, b = 0, a = 100 },                  -- color.black
        frame_background_semitransparent = { r = 0, g = 0, b = 0, a = 95 },         -- color.semitransparent
        frame_background2_notification = { r = 90, g = 146, b = 186, a = 100 },     -- color.blue

        graph_data_1 ={ r = 253, g =  91, b =  91, a = 100 },				        -- { r = 253, g =  91, b =  91, a = 100 }
        graph_data_2 = { r = 252, g = 171, b =  92, a = 100 },                      -- { r = 252, g = 171, b =  92, a = 100 }
        graph_data_3 = { r =  85, g = 172, b =   0, a = 100 },                      -- { r =  85, g = 172, b =   0, a = 100 }
        graph_data_4 = { r = 180, g = 250, b = 200, a = 100 },                      -- { r = 180, g = 250, b = 200, a = 100 }
        graph_data_5 = { r =   0, g = 175, b = 180, a = 100 },                      -- { r =   0, g = 175, b = 180, a = 100 }
        graph_data_6 = { r =  91, g = 133, b = 253, a = 100 },                      -- { r =  91, g = 133, b = 253, a = 100 }
        graph_data_7 = { r = 171, g =  91, b = 253, a = 100 },                      -- { r = 171, g =  91, b = 253, a = 100 }
        graph_data_8 = { r = 253, g =  91, b = 213, a = 100 },                      -- { r = 253, g =  91, b = 213, a = 100 }
        graph_grid = {r = 96, g = 96, b = 96, a = 80},                              -- {r = 96, g = 96, b = 96, a = 80}

        hint_background_orange = { r = 255, g = 192, b = 0, a = 100 },  	        -- color.orange
        hint_background_azure = { r = 90, g = 146, b = 186, a = 100 },	            -- color.blue
        
        icon_error = { r = 255, g = 0, b = 88, a = 100 },                           -- { r = 255, g = 0, b = 88, a = 100 }
        icon_error_inactive = { r = 179, g = 0, b = 62, a = 100 },                  -- { r = 179, g = 0, b = 62, a = 100 }
        icon_hidden = { r = 0, g = 0, b = 0, a = 0 },                               -- color.transparent
        icon_inactive = { r = 0, g = 0, b = 0, a = 60 },                            -- color.transparent60
        icon_mission = { r = 255, g = 190, b = 0, a = 100 },                        -- color.mission
        icon_normal = { r = 255, g = 255, b = 255, a = 100 },                       -- color.white
        icon_transparent = { r = 0, g = 0, b = 0, a = 1 },                          -- { r = 0, g = 0, b = 0, a = 1 }
        icon_warning = { r = 249, g = 132, b = 31, a = 100 },                       -- color.warningorange

        lso_node_error = { r = 255, g = 0, b = 0, a = 100 },                        -- color.red
        lso_node_warning = { r = 249, g = 132, b = 31, a = 100 },                   -- color.warningorange
        lso_node_removed = { r = 255, g = 0, b = 0, a = 100 },                      -- color.red
        lso_node_inactive = { r = 128, g = 128, b = 128, a = 100 },                 -- color.grey
        lso_slot_container = { r = 224, g = 79, b = 0, a = 100 },                   -- defaultFlowchartConnector3Color
        lso_slot_liquid = { r = 0, g = 154, b = 204, a = 100 },                     -- defaultFlowchartConnector2Color	
        lso_slot_solid = { r = 255, g = 220, b = 0, a = 100 },                      -- defaultFlowchartConnector1Color
        lso_slot_condensate = { r = 255, g = 153, b = 255, a = 100 },               -- defaultFlowchartConnector4Color
        
        order_override = { r = 255, g = 0, b = 0, a = 100 },                        -- color.red
        order_temp = { r = 90, g = 146, b = 186, a = 100 }, 				        -- color.blue

        player_cover = { r = 231, g = 244, b = 70, a = 100 },                       -- color.cover
        player_info_background = { r = 0, g = 0, b = 0, a = 60 },                   -- color.transparent60

        research_incomplete = { r = 128, g = 128, b = 128, a = 100 },               -- color.grey

        resource_liquid = { r = 0, g = 0, b = 255, a = 100 },                       -- { r = 0, g = 0, b = 255, a = 100 }
        resource_mineral = { r = 255, g = 0, b = 0, a = 100 },                      -- { r = 255, g = 0, b = 0, a = 100 } 
        resource_mineral_liquid = { r = 255, g = 0, b = 255, a = 100 },             -- { r = 255, g = 0, b = 255, a = 100 }

        row_background = { r = 0, g = 0, b = 0, a = 0 },                            -- color.transparent
        row_background_blue = { r = 0, g = 57, b = 76, a = 88 },                   -- { r = 0,  g = 57, b = 76, a = 88 }
        row_background_blue_opaque = { r = 0, g = 99, b = 134, a = 100 },          -- defaultTitleTrapezoidBackgroundColor { r = 66, g = 92, b = 111, a = 100 },
        row_background_immediate = { r = 0, g = 243, b = 0, a = 100 },              --  r = 0, g = 243, b = 0, a = 100 }
        row_background_selected = { r = 83, g = 116, b = 139, a = 60 },             -- defaultArrowRowBackgroundColor
        row_background_unselectable = { r = 32, g = 32, b = 32, a = 100 },          -- color.unselectable (color.darkgrey)
        row_separator = { r = 128, g = 128, b = 128, a = 100 },                     -- color.grey
        row_separator_encyclopedia = { r = 7, g = 29, b = 46, a = 100 },            -- color.available
        row_separator_white = { r = 255, g = 255, b = 255, a = 100 },               -- color.white
        row_title = { r = 66, g = 92, b = 111, a = 60 },                            -- defaultSimpleBackgroundColor
        row_title_background = { r = 49, g = 69, b = 83, a = 60 },                  -- defaultTitleBackgroundColor
        
        scenario_button_background = { r = 0, g = 0, b = 0, a = 100 },             -- { r = 0,  g = 0, b = 0, a = 100 }
        scenario_button_inactive = { r = 121, g = 121, b = 119, a = 100 },         -- { r = 121,  g = 121, b = 119, a = 100 }
        scenario_completed = { r = 246, g = 176, b = 114, a = 100 },               -- { r = 246,  g = 176, b = 114, a = 100 }
        scenario_completed_border = { r = 246, g = 176, b = 114, a = 100 },        -- { r = 246,  g = 176, b = 114, a = 100 }
        
        ship_retrieval = { r = 163, g = 193, b = 227, a = 100 },    				-- defaultUnselectableFontColor
        ship_stat_background = { r = 0, g = 0, b = 0, a = 60 },                    -- color.transparent60

        slider_arrow_click = { r = 0, g = 57, b = 76, a = 100},                     -- { r = 0, g = 57, b = 76, a = 100}  
        slider_arrow_disabled = { r = 91, g = 91, b = 89, a = 100 },                -- { r = 91, g = 91, b = 89, a = 100 }
        slider_arrow_highlight = { r = 255, g = 255, b = 255, a = 100 },            -- { r = 255, g = 255, b = 255, a = 100 }
        slider_arrow_normal = { r = 255, g = 255, b = 255, a = 100 },               -- { r = 255, g = 255, b = 255, a = 100 }
        slider_background_default = { r = 22, g = 34, b = 41, a = 60 },             -- defaultSliderCellBackgroundColor
        slider_background_inactive = { r = 40, g = 40, b = 40, a = 60 },            -- defaultSliderCellInactiveBackgroundColor
        slider_background_transparent = { r = 0, g = 0, b = 0, a = 0 },             -- color.transparent
        slider_diff_neg = { r = 216, g = 68, b = 29, a = 30 },                      -- defaultSliderCellNegativeValueColor
        slider_diff_pos = { r = 29, g = 216, b = 35, a = 30 },                      -- defaultSliderCellPositiveValueColor
        slider_value = { r = 99, g = 138, b = 166, a = 100 },                       -- defaultSliderCellValueColor , color.slidervalue
        slider_value_inactive = { r = 128, g = 128, b = 128, a = 100 },             -- color.grey

        statusbar_diff_neg_default = { r = 236, g = 53, b = 0, a = 30 },            -- defaultStatusBarNegChangeColor
        statusbar_diff_pos = { r = 66, g = 92, b = 111, a = 60 },                   -- defaultSimpleBackgroundColor
        statusbar_diff_pos_default = { r = 20, g = 222, b = 20, a = 30 },           -- defaultStatusBarPosChangeColor
        statusbar_marker_default = { r = 153, g = 213, b = 234, a = 100 },
        statusbar_marker_hidden = { r = 0, g = 0, b = 0, a = 0 },                   -- color.transparent
        statusbar_value_default = { r = 71, g = 136, b = 184, a = 100 },            -- defaultStatusBarValueColor
        statusbar_value_grey = { r = 128, g = 128, b = 128, a = 100 },              -- color.grey
        statusbar_value_orange = { r = 255, g = 192, b = 0, a = 100 },  	        -- color.orange
        statusbar_value_white = { r = 255, g = 255, b = 255, a = 100 },             -- color.white

        table_background_3d_editor = { r = 0, g = 0, b = 0, a = 60 },               -- color.transparent60
        table_background_default = { r = 255, g = 255, b = 255, a = 100 },          -- color.white

        text_boarding_done = { r = 0, g = 255, b = 0, a = 100 },                    -- color.green
        text_boarding_risk_verylow = { r = 0, g = 255, b = 0, a = 100 },            -- color.green
        text_boarding_risk_low = { r = 144, g = 144, b = 0, a = 100 },	            -- color.yellow		
        text_boarding_risk_medium = { r = 255, g = 192, b = 0, a = 100 },           -- color.orange
        text_boarding_risk_high = { r = 255, g = 0, b = 0, a = 100 },               -- color.red
        text_boarding_risk_veryhigh = { r = 255, g = 0, b = 0, a = 100 },           -- color.red
        text_boarding_risk_impossible = { r = 255, g = 0, b = 0, a = 100 },         -- color.red
        text_boarding_started = { r = 255, g = 192, b = 0, a = 100 },               -- color.orange
        text_boarding_waiting = { r = 255, g = 0, b = 0, a = 100 },                 -- color.red
        text_criticalerror = { r = 255, g = 0, b = 0, a = 100 },                    -- color.red
        text_enemy = { r = 248, g = 145, b = 178, a = 100 },                        -- holomapcolor.enemycolor
        text_error = { r = 255, g = 0, b = 0, a = 100 },                            -- color.red
        text_failure = { r = 255, g = 0, b = 0, a = 100 },                          -- color.red
        text_hidden = { r = 0, g = 0, b = 0, a = 0 },                               -- color.transparent
        text_hostile = { r = 255, g = 0, b = 88, a = 100 },                         -- holomapcolor.hostilecolor
        text_illegal = { r = 255, g = 64, b = 0, a = 100 },                         -- color.illegal
        text_illegal_inactive = { r = 128, g = 32, b = 0, a = 100 },                -- color.illegaldark
        text_inactive = { r = 128, g = 128, b = 128, a = 100 },                     -- color.grey
        text_inprogress = { r = 242, g = 242, b = 135, a = 100 },                   -- { r = 242, g = 242, b = 135, a = 100 }
        text_logbook_highlight = { r = 255, g = 0, b = 0, a = 100 },                -- color.red
        text_mission = { r = 255, g = 190, b = 0, a = 100 },                        -- color.mission
        text_negative = { r = 255, g = 0, b = 0, a = 100 },                         -- color.red
        text_neutral = { r = 242, g = 242, b = 135, a = 100 },                      -- { r = 242, g = 242, b = 135, a = 100 }
        text_normal = { r = 255, g = 255, b = 255, a = 100 },                       -- color.white
        text_player = { r = 0, g = 255, b = 0, a = 100 },                           -- color.green
        text_player_current = { r = 170, g = 255, b = 139, a = 100 },               -- color.playergreen
        text_positive = { r = 0, g = 255, b = 0, a = 100 },                         -- color.green
        text_skills = { r = 255, g = 255, b = 0, a = 100 },                         -- color.brightyellow
        text_skills_irrelevant = { r = 144, g = 144, b = 0, a = 100 },              -- color.yellow
        text_success = { r = 0, g = 255, b = 0, a = 100 },                          -- color.green
        text_warning = { r = 249, g = 132, b = 31, a = 100 },                       -- color.warningorange

        toplevel_arrow = { r = 128, g = 196, b = 255, a = 100 },                    -- { r = 128, g = 196, b = 255, a = 100 }
        toplevel_arrow_inactive = { r = 64, g = 98, b = 128, a = 100 },             -- { r = 64, g = 98, b = 128, a = 100 }

        trade_buyoffer = { r = 91, g = 148, b = 188, a = 100 },                     -- { r = 91, g = 148, b = 188, a = 100 }

        weapon_group_highlight = { r = 0, g = 102, b = 238, a = 60 },               -- color.checkboxgroup

    }
else
    colors.Color = Color
end


colors.sColor = {
    
    white = { r = 255, g = 255, b = 255, a = 100 },
    grey64 = { r = 64, g = 64, b = 64, a = 100 },
    lightgrey = { r = 192, g = 192, b = 192, a = 100 },
    grey = { r = 128, g = 128, b = 128, a = 100 },
    darkgrey = { r = 88, g = 88, b = 88, a = 100 },
    black = { r = 0, g = 0, b = 0, a = 100 },
    darkred = { r = 136, g = 0, b = 21, a = 100 },
    red = { r = 255, g = 0, b = 0, a = 100 },
    orange = { r = 255, g = 192, b = 0, a = 100 },
    darkorange = { r = 128, g = 95, b = 0, a = 100 },
    gold = { r = 255, g = 202, b = 24, a = 100 },
    lightyellow = { r = 253, g = 236, b = 166, a = 100 },
    brightyellow = { r = 255, g = 255, b = 0, a = 100 },
    yellow = { r = 255, g = 242, b = 0, a = 100 },
    dirtyyellow = { r = 220, g = 220, b = 0, a = 100 },
    darkyellow = { r = 120, g = 120, b = 0, a = 100 },
    lightgreen = { r = 100, g = 225, b = 0, a = 100 },
    lemongreen = { r = 196, g = 255, b = 14, a = 100 },
    playergreen = { r = 170, g = 255, b = 139, a = 100 },
    green = { r = 0, g = 255, b = 0, a = 100 },
    darkgreen = { r = 32, g = 150, b = 32, a = 100 },
    lightseablue = { r = 140, g = 255, b = 251, a = 100 },
    cyan = { r = 46, g = 209, b = 255, a = 100 },
    turquoiseblue = { r = 0, g = 168, b = 243, a = 100 },
    blue = { r = 90, g = 146, b = 186, a = 100 },
    indigoblue = { r = 63, g = 72, b = 204, a = 100 },
    pink = { r = 184, g = 61, b = 186, a = 100 },
    purple = { r = 163, g = 73, b = 164, a = 100 },
    copperyellow = { r = 255, g = 174, b = 200, a = 100 },    
    brown = { r = 185, g = 122, b = 86, a = 100 },    

    available = { r = 7, g = 29, b = 46, a = 100 },
    changedvalue = { r = 255, g = 236, b = 81, a = 100 },
    checkboxgroup = { r = 0, g = 102, b = 238, a = 60 },
    cover = { r = 231, g = 244, b = 70, a = 100 },
    
    done = { r = 38, g = 61, b = 78, a = 100 },
    illegal = { r = 255, g = 64, b = 0, a = 100 },
    illegaldark = { r = 128, g = 32, b = 0, a = 100 },
    mission = { r = 255, g = 190, b = 0, a = 100 },
    
    semitransparent = { r = 0, g = 0, b = 0, a = 97 },
    slidervalue = { r = 71, g = 136, b = 184, a = 100 },
    textred = { r = 255, g = 80, b = 80, a = 100 },
    transparent80 = { r = 0, g = 0, b = 0, a = 80 },
    transparent60 = { r = 0, g = 0, b = 0, a = 60 },
    transparent40 = { r = 0, g = 0, b = 0, a = 40 },
    transparent = { r = 0, g = 0, b = 0, a = 0 },
    unselectable = { r = 32, g = 32, b = 32, a = 100 },
    warning = { r = 192, g = 192, b = 0, a = 100 },
    warningorange = { r = 255, g = 138, b = 0, a = 100 },
    
    
    alertnormal = {r = 248, g = 145, b = 178, a = 100},
    alerthigh = {r = 236, g = 28, b = 28, a = 100},

    statusRed = {r = 255, g = 0, b = 0, a = 100},
    statusOrange = {r = 255, g = 64, b = 0, a = 100},
    statusYellow = {r = 255, g = 255, b = 0, a = 100},
    statusGreen = {r = 0, g = 255, b = 0, a = 100},

    --female1 = {r = 214, g = 127, b = 255, a = 100},
    female1 = {r = 184, g = 67, b = 195, a = 100},
    --female2 = {r = 107, g = 63, b = 127, a = 100},
    female2 = {r = 77, g = 3, b = 107, a = 100},
    male1 = {r = 127, g = 146, b = 255, a = 100},
    male2 = {r = 63, g = 73, b = 127, a = 100},
}

-- max 6 layer açabiliyoruz, layer 1 alamıyoruz
local config = {
	mainLayer = 6,
    recordsLayer = 5,
    shipsLayer = 4,
    optionsLayer = 3,
    fleetsLayer = 3,
	contextLayer = 2,
    -- layerInfo , sadece debug dökümlerinde layer ismini görmek için kullanılacak 
    layerInfo = {
        [1] = { id = 2, text = "Bottom" },
        [2] = { id = 2, text = "Context" },
        [3] = { id = 3, text = "Left" },
        [4] = { id = 4, text = "Center" },
        [5] = { id = 5, text = "Right" },
        [6] = { id = 6, text = "Main" },
    },
	rowHeight = 17,
    mapRowHeight = Helper.standardTextHeight,
    mapFontSize = Helper.standardFontSize,
    propertySorterType = "name",
    WindowFrameMode = "manager",
    nonetext = ReadText(tPg, 11200) .. " " .. ReadText(tPg, 1270) .. " " .. ReadText(tPg, 11200),
    notinstalledtext = ReadText(tPg, 11200) .. " " .. ReadText(tPg, 1301) .. " " .. ReadText(tPg, 11200),
	leftBar = {
		{ name = ReadText(tPg, 1055),   icon = "mapst_ol_stations", mode = "manager",   helpOverlayID = "mapst_po_stations",    helpOverlayText = ReadText(tPg, 7500) },
        { spacing = true },
        { name = ReadText(tPg, 1060),   icon = "mapst_objectlist",	mode = "options",   helpOverlayID = "mapst_ol_objectlist",	helpOverlayText = ReadText(tPg, 7501) },
        { spacing = true },
        { name = "Cheat",	            icon = "mapst_objectlist",	mode = "cheats",    helpOverlayID = "mapst_ol_objectlist",	helpOverlayText = "This category shows cheats." },
	},
	assignments = {
		["defence"]					= { name = ReadText(20208, 40301) },
		["positiondefence"]			= { name = ReadText(20208, 41501) },
		["attack"]					= { name = ReadText(20208, 40901) },
		["interception"]			= { name = ReadText(20208, 41001) },
		["bombardment"]				= { name = ReadText(20208, 41601) },
		["follow"]					= { name = ReadText(20208, 41301) },
		["supplyfleet"]				= { name = ReadText(20208, 40701) },
		["mining"]					= { name = ReadText(20208, 40201) },
		["trade"]					= { name = ReadText(20208, 40101) },
		["tradeforbuildstorage"]	= { name = ReadText(20208, 40801) },
		["assist"]					= { name = ReadText(20208, 41201) },
		["salvage"]					= { name = ReadText(20208, 41401) },
	},
    slotsizeOrder = {
        ["extralarge"] = 4,
        ["large"] = 3,
        ["medium"] = 2,
        ["small"] = 1,
    },

    ClassSlotsize = {
        ["ship_xl"]     = "extralarge",
        ["ship_l"]      = "large",
        ["ship_m"]      = "medium",
        ["ship_s"]      = "small",
    },

    classOrder = {
        ["ship_xs"]		= 1,
        ["ship_s"]		= 2,
        ["ship_m"]		= 3,
        ["ship_l"]		= 4,
        ["ship_xl"]		= 5,
        ["station"]		= 6,
    },
    selectedRowBgColor = { r = 28, g = 77, b = 160, a = 100 }, --   ,
    blacklisttypes = {
        { type = "sectortravel",	name = ReadText(1001, 9165) },
        { type = "sectoractivity",	name = ReadText(1001, 9166) },
        { type = "objectactivity",	name = ReadText(1001, 9167) },
    },
	infoCategories = {
		{ category = "objectinfo",				name = ReadText(tPg, 8000),	icon = "mapst_information",			helpOverlayID = "mapst_ao_information",			helpOverlayText = ReadText(tPg, 8001) },
        { category = "objectrespond",			name = ReadText(tPg, 8002),	icon = "pi_logbook",				helpOverlayID = "mapst_ao_info_logbook",		helpOverlayText = ReadText(tPg, 8003) },
        { empty = true },
		{ category = "objectcrew",				name = ReadText(tPg, 8004),	icon = "shipbuildst_crew",			helpOverlayID = "mapst_ao_info_crew",			helpOverlayText = ReadText(tPg, 8005) },
		{ category = "objectloadout",			name = ReadText(tPg, 8006),	icon = "mapst_loadout",				helpOverlayID = "mapst_ao_info_loadout",		helpOverlayText = ReadText(tPg, 8007) },
		{ empty = true },
		{ category = "orderqueue",				name = ReadText(1001, 8360),icon = "mapst_ao_orderqueue",	    helpOverlayID = "mapst_ao_orderqueue",			helpOverlayText = ReadText(1028, 3235) },
		{ empty = true },
		{ category = "objectstandingorders",    name = ReadText(tPg, 8008),	icon = "mapst_standing_orders",		helpOverlayID = "mapst_ao_standing_orders",		helpOverlayText = ReadText(tPg, 8009) },
	},
    RightFrameMode = "objectrespond",

	complexOrderParams = {
		["trade"] = {
			[1] = { id = "trade_location", name = ReadText(1001, 2943), type = "object", inputparams = { class = "sector" }, value = function (data) return next(data) and data.station and GetComponentData(data.station, "zoneid") or nil end },
			[2] = { id = "trade_partner", name = ReadText(1001, 23), type = "object", inputparams = { class = "container" }, value = function (data) return data.station end },
			[3] = { id = "trade_ware", name = ReadText(1001, 7104), type = "trade_ware", value = function (data) return next(data) and data.ware and {data.isbuyoffer, data.ware} or nil end },
			[4] = { id = "trade_amount", name = ReadText(1001, 6521), type = "trade_amount", value = function (data) return data.ware and {data.desiredamount, data.amount} or nil end },
			data = function (value) return (value and IsValidTrade(value) and menu.isInfoModeValidFor(menu.Selected.strComponent, "orderqueue") and tonumber(menu.Selected.Component) ~= 0 ) and GetTradeData(value, ConvertStringTo64Bit(tostring(menu.Selected.Component ))) or {} end
		}
	},

	botomButtons = {
		{ category = "autobuid",				name = ReadText(tPg, 6014),	icon = "rfm_autobuild",         
            getIconColor = function(autobuildstatus)
                if autobuildstatus == true then
                    return colors.sColor.statusGreen
                else
                    return colors.sColor.statusRed
                end
            end,
            getMouseOverText = function(autobuildstatus)
                if autobuildstatus == true then
                    return "[ " .. ReadText(tPg, 6026) .. " : " .. string.format("%s%s\027X", Helper.convertColorToText(colors.sColor.statusGreen), ReadText(tPg, 1340)) .. " ] " .. ReadText(tPg, 6027)
                else
                    return "[ " .. ReadText(tPg, 6026) .. " : " .. string.format("%s%s\027X", Helper.convertColorToText(colors.sColor.statusRed), ReadText(tPg, 1341)) .. " ] " .. ReadText(tPg, 6028)
                end
            end,
        },
        { category = "rebuildtimer",			name = ReadText(tPg, 6015),	icon = "rfm_restart",
            getIconColor = function(rebuildtimestatus)
                if rebuildtimestatus == true then
                    return colors.sColor.statusGreen
                else
                    return colors.sColor.statusRed
                end
            end,
            getMouseOverText = function(rebuildtimestatus)
                if rebuildtimestatus == true then
                    return "[ " .. ReadText(tPg, 6050) .. " : " .. string.format("%s%s\027X", Helper.convertColorToText(colors.sColor.statusGreen), ReadText(tPg, 1340)) .. " ] " .. ReadText(tPg, 6051)
                else
                    return "[ " .. ReadText(tPg, 6050) .. " : " .. string.format("%s%s\027X", Helper.convertColorToText(colors.sColor.statusRed), ReadText(tPg, 1341)) .. " ] " .. ReadText(tPg, 6052)
                end
            end,
        },
        { empty = true },
        { empty = true },
        { empty = true },
		{ category = "closerfm",				name = ReadText(tPg, 6016),	icon = "rfm_disable",
            getIconColor = function(value)
                if value then
                    return colors.Color.text_enemy
                else
                    return colors.sColor.white
                end
            end,
            getMouseOverText = function(value, color)
                if value then
                    return ReadText(tPg, 6025) .. "\n  " .. string.format("[ %s%s %s \027X]", Helper.convertColorToText(color), ReadText(tPg, 500), tostring(value))
                else
                    return ""
                end
            end,
        },
        { empty = true },
        { empty = true },
		{ category = "showonmap",			    name = ReadText(tPg, 6030),	icon = "menu_center_selection",
            getIconColor = function(value)
                return colors.sColor.white
            end,
            isActive = function(record) return record and (record.object or record.build) and true or false end,
            getMouseOverText = function(strComponent, record)
                if record and (record.object or record.build) then
                    local name = record.name or ""
                    local nameid = (record.idcode and record.idcode ~= "") and " ( " .. record.idcode .. " ) " or ""
                    return ReadText(tPg, 6030) .. "\n " .. string.format("%s%s\027X", Helper.convertColorToText(colors.sColor.blue), name .. nameid)
                else
                    return ""
                end
            end,
        },
		{ empty = true },
		{ category = "cloneship",				name = ReadText(1001, 6017),icon = "rfm_clonerfm",
            getIconColor = function()
                return colors.Color.text_inprogress
            end,
            isActive = function(record)
                return record and (not menu.cloned and (record.class ~= "station") and not menu.Selected.selectedGroup) or false
            end,
            getMouseOverText = function(strComponent, record)
                if record and (not menu.cloned and (record.class ~= "station") and not menu.Selected.selectedGroup) then
                    local subordinates = menu.GetSubordinates_From_FleetRecords(strComponent, true)
                    local cloneText = 
                        string.format(" %s%s\n%s%s \027X", 
                            Helper.convertColorToText(colors.sColor.lightgrey), 
                            tostring(strComponent), 
                            Helper.convertColorToText(colors.sColor.mission), 
                            Helper.indentText(record.name, "", GetCurrentMouseOverWidth(), GetCurrentMouseOverFont()) 
                        .. ((#subordinates > 0 ) and "\n  & " .. Helper.convertColorToText(colors.sColor.mission) .. ReadText(1001, 1503) or "")
                        ) 
                    return ReadText(tPg, 6029) .. "\n " .. cloneText
                else
                    return ""
                end
            end,
        },
		{ empty = true },
		{ category = "removeship",              name = ReadText(tPg, 6018),	icon = "rfm_removeship",
            getIconColor = function()
                return colors.Color.text_hostile
            end,
            isActive = function(record)
                return record and (not menu.removingship and record.destroyed and not record.construction.buildingcontainer and not record.object and not menu.Selected.selectedGroup) or false
            end,
            getMouseOverText = function(record)
                local isactiveremove = record and (not menu.removingship and record.destroyed and not record.construction.buildingcontainer and not record.object and not menu.Selected.selectedGroup) or false
                return isactiveremove and ReadText(tPg, 6031) or ""
            end,
        },
	},
    bottomiconheight = 36,

}

config.sColor = colors.sColor
config.Color = colors.Color
    

config.infoTableRowsColor = {
    tittle = config.sColor.gold,
    section = config.sColor.cyan,
    subsections = config.sColor.blue,
}

config.rowLabelProperties = {
    font = Helper.standardFont,
    fontsize = Helper.standardFontSize,
    x = Helper.standardTextOffsetx,
    y = Helper.standardTextOffsety,
    height = Helper.standardTextHeight - Helper.standardTextOffsety,
    color = config.sColor.blue,
    halign = "left"
}
config.rowtimeProperties = {
    font = Helper.standardFont,
    fontsize = Helper.standardFontSize,
    x = Helper.standardTextOffsetx,
    y = Helper.standardTextOffsety,
    height = Helper.standardTextHeight - Helper.standardTextOffsety,
    color = config.sColor.orange,
    halign = "center"
}
config.rowValueProperties = {
    font = Helper.standardFont,
    fontsize = Helper.standardFontSize,
    x = Helper.standardTextOffsetx,
    y = Helper.standardTextOffsety,
    height = Helper.standardTextHeight - Helper.standardTextOffsety,
    color = config.sColor.grey,
    halign = "left",
}


menu.headerWarningTextProperties = {
    font = Helper.headerRow1Font,
    fontsize = Helper.scaleFont(Helper.headerRow1Font, Helper.headerRow1FontSize),
    x = Helper.scaleX(Helper.headerRow1Offsetx),
    --y = math.floor((menu.titleData.height - Helper.scaleY(Helper.headerRow1Height)) / 2 + Helper.scaleY(Helper.headerRow1Offsety)),
    --minRowHeight = menu.titleData.height,
    scaling = false,
    cellBGColor = config.Color["row_background"],
    color = function () return menu.warningColor(config.Color["text_warning"]) end,
    titleColor = config.Color["text_warning"],
    halign = "center",
}
menu.rowAlertTextProperties = {
    font = Helper.standardFont,
    fontsize = Helper.scaleFont(Helper.standardFont, Helper.standardFontSize),
    x = Helper.scaleX(Helper.standardTextOffsetx),
    y = Helper.scaleX(Helper.standardTextOffsety),
    --y = math.floor((menu.titleData.height - Helper.scaleY(Helper.headerRow1Height)) / 2 + Helper.scaleY(Helper.headerRow1Offsety)),
    --minRowHeight = menu.titleData.height,
    scaling = false,
    cellBGColor = config.Color["row_background"],
    color = function () return menu.warningColor(config.Color.text_enemy) end,
    --titleColor = config.Color.text_enemy,
    halign = "left",
}



local function Get_mdData(str)
    -- GetNPCBlackboard  her okumada lua içinde ekran donmasına sebep veriyor
    --menu.lastDataCheck = getElapsedTime()
    menu.RFMDATA = GetNPCBlackboard(playerID, "$RFMDATA")
    menu.RM_Fleets = menu.RFMDATA["RM_Fleets"]
    menu.RM_FleetRecords = menu.RFMDATA["FleetRecords"]
    menu.RM_RebuildCues = menu.RFMDATA["RebuildCues"]
    if debugGetData then DebugError(" LUA    Get_mdData  , Event = " .. tostring(str)) end
end

--local isDebugMode = pcall(debug.debug)

-- init menu and register witdh Helper
local function init()
    
    Menus = Menus or {}

    local founded = false
    for _, imenu in ipairs(Menus) do -- note that i is simply a placeholder for an ignored variable 
        if imenu.name == menu.name then
            founded = true
            break
        end
    end
    if not founded then
        table.insert(Menus, menu)
        local xdebug = debug1 and DebugError("Inserted " .. menu.name .. " in Menus")
        if Helper then
            Helper.registerMenu(menu)
            local xdebug = debug1 and DebugError("Registered " .. menu.name .. " in Menus")
        end
    else
        local xdebug = debug1 and DebugError("" .. menu.name .. " founded in Menus, Passed Insert and Register Proccess")
    end
    DebugError (menu.name .. " .lua file Init OK...")


	menu.upgradetypes = menu.tablecopy( Helper.upgradetypes )
	local upgradetypesSorter = { 
		["engine"] = 1,
		["turret"] = 2,
		["shield"] = 3,
		["others"] = 4,
	}
	table.sort(menu.upgradetypes, function (a, b)
		local a_grouptype = upgradetypesSorter[a.grouptype] or upgradetypesSorter["others"]
		local b_grouptype = upgradetypesSorter[b.grouptype] or upgradetypesSorter["others"]
		return a_grouptype < b_grouptype
	end)
    
    -- upgradewares
    menu.planDATA = {}
	menu.planDATA.upgradewares = {}
	for _, upgradetype in ipairs(Helper.upgradetypes) do
		if upgradetype.supertype ~= "group" then
			menu.planDATA.upgradewares[upgradetype.type] = {}
		end
	end
    menu.planDATA.allownonplayerblueprints = true
    local n = 0
    local buf
    n = C.GetNumAllEquipment(not menu.planDATA.allownonplayerblueprints)
    buf = ffi.new("EquipmentWareInfo[?]", n)
    n = C.GetAllEquipment(buf, n, not menu.planDATA.allownonplayerblueprints)
    if n > 0 then
        for i = 0, n - 1 do
            local type = ffi.string(buf[i].type)
            local entry = {}
            entry.ware = ffi.string(buf[i].ware)
            entry.macro = ffi.string(buf[i].macro)
            if type == "software" then
                entry.name = GetWareData(entry.ware, "name")
            else
                entry.name = GetMacroData(entry.macro, "name")
            end
            entry.objectamount = 0
            entry.isFromShipyard = true
            if (type == "lasertower") or (type == "satellite") or (type == "mine") or (type == "navbeacon") or (type == "resourceprobe") then
                type = "deployable"
            end
            if type == "" then
                DebugError(string.format("Could not find upgrade type for the equipment ware: '%s'. Check the ware tags.", entry.ware))
            else
                if menu.planDATA.upgradewares[type] then
                    table.insert(menu.planDATA.upgradewares[type], entry)
                else
                    menu.planDATA.upgradewares[type] = { entry }
                end
            end
        end
    end

    -- Signals
    menu.signals = {}
    local numsignals = C.GetNumAllSignals()
    local allsignals = ffi.new("SignalInfo[?]", numsignals)
    numsignals = C.GetAllSignals(allsignals, numsignals)
    for i = 0, numsignals - 1 do
        local signalid = ffi.string(allsignals[i].id)
        table.insert(menu.signals, {id = signalid, name = ffi.string(allsignals[i].name), description = ffi.string(allsignals[i].description), defaultresponse = ffi.string(allsignals[i].defaultresponse), responses = {} })
    
        local numresponses = C.GetNumAllResponsesToSignal(signalid)
        local allresponses = ffi.new("ResponseInfo[?]", numresponses)
        numresponses = C.GetAllResponsesToSignal(allresponses, numresponses, signalid)
        for j = 0, numresponses - 1 do
            table.insert(menu.signals[#menu.signals].responses, {id = ffi.string(allresponses[j].id), name = ffi.string(allresponses[j].name), description = ffi.string(allresponses[j].description)})
        end
    end

    -- uint32_t GetNumWares(const char* tags, bool research, const char* licenceownerid, const char* exclusiontags);
    -- uint32_t GetWares(const char** result, uint32_t resultlen, const char* tags, bool research, const char* licenceownerid, const char* exclusiontags);
    -- tag [ inventory, paintmod ]
    -- Paint Mods
    menu.modwares = {}
    menu.modwaresByWare = {}
    local tag = "paintmod"
    local n = C.GetNumWares(tag, false, "", "")
    local buf = ffi.new("const char*[?]", n)
    n = C.GetWares(buf, n, tag, false, "", "")
    for i = 0, n - 1 do

        local ware = ffi.string(buf[i])

		local entry = {}
        entry.ware = ware
		entry.name = GetWareData(ware, "name")
		entry.quality = GetWareData(ware, "modquality" )
        entry.modclass = GetWareData(ware, "modclass" )
        entry.player = false
        entry.amount = 0
        if menu.modwares["all_paintmods"] then
            table.insert(menu.modwares["all_paintmods"], entry)
        else
            menu.modwares["all_paintmods"] = { entry }
        end
        menu.modwaresByWare[entry.ware] = entry
    end

	n = C.GetNumInventoryPaintMods()
	buf = ffi.new("UIPaintMod[?]", n)
	n = C.GetInventoryPaintMods(buf, n);
	for i = 0, n - 1 do
		local entry = {}
		entry.name = ffi.string(buf[i].Name)
		entry.ware = ffi.string(buf[i].Ware)
		entry.quality = buf[i].Quality
		entry.amount = buf[i].Amount
        entry.player = true
		if menu.modwares["player_paintmods"] then
			table.insert(menu.modwares["player_paintmods"], entry)
		else
			menu.modwares["player_paintmods"] = { entry }
		end
		if menu.modwaresByWare[entry.ware] then
            menu.modwaresByWare[entry.ware].player = not (entry.amount == 0)
            menu.modwaresByWare[entry.ware].amount = entry.amount
        else
            menu.modwaresByWare[entry.ware] = entry
        end
	end

    --menu.tablePrint(menu.modwaresByWare, "menu.modwares['paintmods'] = ", true, true )
end

function menu.get_MD_Settings(settingsMDTable)
    menu.defaultSettings = menu.tablecopy( settingsMDTable["Default"] )
    menu.editedSettings = menu.tablecopy( settingsMDTable["Editing"] )

    menu.defaultSettings.shownotification = menu.defaultSettings.shownotification == 1 
    menu.defaultSettings.showhelp = menu.defaultSettings.showhelp == 1
    menu.defaultSettings.write_to_logbook = menu.defaultSettings.write_to_logbook == 1
    menu.defaultSettings.UsePlayerYards = menu.defaultSettings.UsePlayerYards == 1
    menu.defaultSettings.UseNPCYards = menu.defaultSettings.UseNPCYards == 1
    menu.defaultSettings.ValidUpdates.PYards.equipments = menu.defaultSettings.ValidUpdates.PYards.equipments == 1
    menu.defaultSettings.ValidUpdates.PYards.peoples = menu.defaultSettings.ValidUpdates.PYards.peoples == 1
    menu.defaultSettings.ValidUpdates.NYards.equipments = menu.defaultSettings.ValidUpdates.NYards.equipments == 1
    menu.defaultSettings.ValidUpdates.NYards.peoples = menu.defaultSettings.ValidUpdates.NYards.peoples == 1
    menu.defaultSettings.personnelcloning = menu.defaultSettings.personnelcloning == 1
    menu.defaultSettings.pilotcloning = menu.defaultSettings.pilotcloning == 1
    menu.defaultSettings.autobuildafterclone = menu.defaultSettings.autobuildafterclone == 1
    menu.defaultSettings.UserQuestions.RemoveRFM = menu.defaultSettings.UserQuestions.RemoveRFM == 1
    menu.defaultSettings.UserQuestions.RemoveShip = menu.defaultSettings.UserQuestions.RemoveShip == 1
    menu.defaultSettings.useTagOnName = menu.defaultSettings.useTagOnName == 1

    menu.defaultSettings.isDebugFileMode = menu.defaultSettings.isDebugFileMode == 1
    menu.defaultSettings.DFD.MainCommands = menu.defaultSettings.DFD.MainCommands == 1
    menu.defaultSettings.DFD.MainCommandsDeep = menu.defaultSettings.DFD.MainCommandsDeep == 1
    menu.defaultSettings.DFD.RebuildCues = menu.defaultSettings.DFD.RebuildCues == 1
    menu.defaultSettings.DFD.Fleets = menu.defaultSettings.DFD.Fleets == 1
    menu.defaultSettings.DFD.FleetsDeep = menu.defaultSettings.DFD.FleetsDeep == 1
    menu.defaultSettings.DFD.Records = menu.defaultSettings.DFD.Records == 1
    menu.defaultSettings.DFD.RecordsDeep = menu.defaultSettings.DFD.RecordsDeep == 1
    menu.defaultSettings.DFD.tShipPlan = menu.defaultSettings.DFD.tShipPlan == 1
    menu.defaultSettings.DFD.tShipPlanDeep = menu.defaultSettings.DFD.tShipPlanDeep == 1
    menu.defaultSettings.DFD.tIndividualInstructions = menu.defaultSettings.DFD.tIndividualInstructions == 1
    menu.defaultSettings.DFD.tIndividualInstructionsDeep = menu.defaultSettings.DFD.tIndividualInstructionsDeep == 1
    menu.defaultSettings.DFD.tBulkCrew = menu.defaultSettings.DFD.tBulkCrew == 1
    menu.defaultSettings.DFD.Command = menu.defaultSettings.DFD.Command == 1
    menu.defaultSettings.DFD.CommandDeep = menu.defaultSettings.DFD.CommandDeep == 1
    menu.defaultSettings.DFD.reBuildCue = menu.defaultSettings.DFD.reBuildCue == 1
    menu.defaultSettings.DFD.reBuildCueDeep = menu.defaultSettings.DFD.reBuildCueDeep == 1
    menu.defaultSettings.DFD.reBuild = menu.defaultSettings.DFD.reBuild == 1
    menu.defaultSettings.DFD.reBuildDeep = menu.defaultSettings.DFD.reBuildDeep == 1
    menu.defaultSettings.DFD.reAssignment = menu.defaultSettings.DFD.reAssignment == 1
    menu.defaultSettings.DFD.reAssignmentDeep = menu.defaultSettings.DFD.reAssignmentDeep == 1

    for key, value in pairs(menu.defaultSettings.failcases) do
        menu.defaultSettings.failcases[key].check = menu.defaultSettings.failcases[key].check == 1
    end

    -- MD dosyalarındaki; true LUA ya geldiğinde 1, false ise 0 olarak geliyor. Lua için düzenlenmeli.
    menu.editedSettings.shownotification = menu.editedSettings.shownotification == 1
    menu.editedSettings.showhelp = menu.editedSettings.showhelp == 1
    menu.editedSettings.write_to_logbook = menu.editedSettings.write_to_logbook == 1
    menu.editedSettings.UsePlayerYards = menu.editedSettings.UsePlayerYards == 1
    menu.editedSettings.UseNPCYards = menu.editedSettings.UseNPCYards == 1
    menu.editedSettings.ValidUpdates.PYards.equipments = menu.editedSettings.ValidUpdates.PYards.equipments == 1
    menu.editedSettings.ValidUpdates.PYards.peoples = menu.editedSettings.ValidUpdates.PYards.peoples == 1
    menu.editedSettings.ValidUpdates.NYards.equipments = menu.editedSettings.ValidUpdates.NYards.equipments == 1
    menu.editedSettings.ValidUpdates.NYards.peoples = menu.editedSettings.ValidUpdates.NYards.peoples == 1
    menu.editedSettings.personnelcloning = menu.editedSettings.personnelcloning == 1
    menu.editedSettings.pilotcloning = menu.editedSettings.pilotcloning == 1
    menu.editedSettings.autobuildafterclone = menu.editedSettings.autobuildafterclone == 1
    menu.editedSettings.UserQuestions.RemoveRFM = menu.editedSettings.UserQuestions.RemoveRFM == 1
    menu.editedSettings.UserQuestions.RemoveShip = menu.editedSettings.UserQuestions.RemoveShip == 1
    menu.editedSettings.useTagOnName = menu.editedSettings.useTagOnName == 1

    menu.editedSettings.isDebugFileMode = menu.editedSettings.isDebugFileMode == 1
    menu.editedSettings.DFD.MainCommands = menu.editedSettings.DFD.MainCommands == 1
    menu.editedSettings.DFD.MainCommandsDeep = menu.editedSettings.DFD.MainCommandsDeep == 1
    menu.editedSettings.DFD.RebuildCues = menu.editedSettings.DFD.RebuildCues == 1
    menu.editedSettings.DFD.Fleets = menu.editedSettings.DFD.Fleets == 1
    menu.editedSettings.DFD.FleetsDeep = menu.editedSettings.DFD.FleetsDeep == 1
    menu.editedSettings.DFD.Records = menu.editedSettings.DFD.Records == 1
    menu.editedSettings.DFD.RecordsDeep = menu.editedSettings.DFD.RecordsDeep == 1
    menu.editedSettings.DFD.tShipPlan = menu.editedSettings.DFD.tShipPlan == 1
    menu.editedSettings.DFD.tShipPlanDeep = menu.editedSettings.DFD.tShipPlanDeep == 1
    menu.editedSettings.DFD.tIndividualInstructions = menu.editedSettings.DFD.tIndividualInstructions == 1
    menu.editedSettings.DFD.tIndividualInstructionsDeep = menu.editedSettings.DFD.tIndividualInstructionsDeep == 1
    menu.editedSettings.DFD.tBulkCrew = menu.editedSettings.DFD.tBulkCrew == 1
    menu.editedSettings.DFD.Command = menu.editedSettings.DFD.Command == 1
    menu.editedSettings.DFD.CommandDeep = menu.editedSettings.DFD.CommandDeep == 1
    menu.editedSettings.DFD.reBuildCue = menu.editedSettings.DFD.reBuildCue == 1
    menu.editedSettings.DFD.reBuildCueDeep = menu.editedSettings.DFD.reBuildCueDeep == 1
    menu.editedSettings.DFD.reBuild = menu.editedSettings.DFD.reBuild == 1
    menu.editedSettings.DFD.reBuildDeep = menu.editedSettings.DFD.reBuildDeep == 1
    menu.editedSettings.DFD.reAssignment = menu.editedSettings.DFD.reAssignment == 1
    menu.editedSettings.DFD.reAssignmentDeep = menu.editedSettings.DFD.reAssignmentDeep == 1
    

    for key, value in pairs(menu.editedSettings.failcases) do
        menu.editedSettings.failcases[key].check = menu.editedSettings.failcases[key].check == 1
    end
    


    menu.colorNormal = menu.HexToColor(menu.editedSettings.normalColor)
    menu.colorAlert = menu.HexToColor(menu.editedSettings.alertColor)

end
-- cleanup variables in menu, no need for the menu variable to keep all the data while the menu is not active
function menu.cleanup()
    local xdebug = debug0 and DebugError("cleanup")

    menu.mdDataChange = nil

    menu.holomapcolor = nil
    menu.isShowingMenu = nil

    menu.mainFrame = nil
    menu.BottomFrame = nil
    menu.LeftFrame = nil
    menu.CenterFrame = nil
    menu.RightFrame = nil
	--menu.contextFrame = nil

    menu.WindowFrameMode = config.WindowFrameMode
    menu.propertySorterType = config.propertySorterType
    menu.RightFrameMode = config.RightFrameMode

    menu.mdDataChanged = nil
    menu.RM_Fleets = {}
    menu.RM_FleetRecords = {}
    menu.RM_RebuildCues = {}
    menu.active_stations = {}
    menu.blacklist_stations = {}
    menu.optionsTable_showyards = nil
    menu.optionsTable_showenemy = nil
    menu.optionsTable_showunknown = nil

    menu.isremoverespondwares = nil

    menu.details = {}   -- şimdilik prodce ship owner işlemlerinde kullanıyoruz
    menu.warningShown = nil

    -- Seçilen gemiye ait loadout işlemleri için
    menu.selectedShip = {}      
    menu.shipplan = {}

    menu.editedSettings = {}

    menu.Fleets = {}
    menu.Records = {}
    menu.fleetcategories = {}
    menu.subordinates = {}
    menu.leaderShips = {}
    menu.constructionships = {}

    -- ship tablesi icindeki secili gemi ve row bilgileri icin
    menu.Selected = {}
    -- Fleet real commander on/off durumu
    menu.extendedmainproperty = {}
    -- subordinatesi olan commander on/off durumu
    menu.extendedproperty = {}
    -- subgroup alindaki subordinatelerin on/off durumu
    menu.extendedsubordinates = {}
    -- crew infosu on/off durumu
    menu.extendedinfo = {}
    -- supplyships tradewares list on/off durumu
    menu.extendedorders = {}
    -- refresh yapmadan ozel create zamanlarinda kullanicagiz.
    -- Secili row cesidi icin row grup bilgisini saklayacak. Ornek: ' "subordinate"..component..group ' bolumunu ayri bir degiskende tutacagiz.
    -- subordinate group satiri icin saklama degiskeni Ornek: "subordinate"..strComponent..group gibi
	menu.highlightedborderstationcategory = nil
    -- Secili strComponenti saklayacak  '14_3'  gibi
    menu.highlightedbordercomponent = nil
    -- Secili row grubuna gore isaretlemesini istedigimiz row'u set etmek icin genel amacli kullanilan degisken(display oncesi satiri secmek icin)
    menu.sethighlightborderrow = nil


    menu.TableID = { 
        SideBar = nil,
        Fleets = nil,
        FleetsTab = nil,
        Ships = nil,
        Records = nil,
        orderHeaderTable = nil,
        Bottom = nil,
        Options = {
            Left = nil,
            Center = nil,
            Stations = nil,
            Bottom = nil,
            Right = nil,
        },
    }

    menu.titleTable = {}
    menu.sideBarTable = {}
    menu.fleetTable = {}
    menu.sorterTable = {}
    menu.fleetShipsTable = {}
    menu.rightTable = {}
    menu.bottomLTable = {}
    menu.bottomRTable = {}

    menu.queueupdate = nil
    menu.resetrow = nil

    menu.createMainFrameRunning = nil
    menu.createLeftFrameRunning = nil
    menu.createCenterFrameRunning = nil
    menu.createRightFrameRunning = nil

    menu.lastDataCheck = 0
    menu.lastrefresh = 0
    menu.refreshed = nil
    menu.noupdate = nil

    -- özel durumlar için 
	menu.settoprow = nil
	menu.setselectedrow = nil

    -- her framedeki tablo satır sütun ve top değerlerini saklayacağız
    menu.selectedRows = { manager = {}, options = {} }  
    menu.selectedCols = { manager = {}, options = {} }
    menu.topRows = { manager = {}, options = {} }

end


function menu.onShowMenu()
    local xdebug = debug0 and DebugError("onShowMenu")

    --playerID = ConvertStringTo64Bit(tostring(C.GetPlayerID()))

    menu.cleanup()
    menu.isShowingMenu = true
    menu.holomapcolor = Helper.getHoloMapColors()
    
    menu.colorNormal, menu.colorAlert = config.sColor.statusGreen, config.sColor.statusRed
    if menu.param[5] and type(menu.param[5]) == "table"  then
        menu.get_MD_Settings(menu.param[5])
    end

    menu.extendedmainpropertydefault = true

    Get_mdData()
    if menu.param[3] then
        -- parametre ile gelen rfm ye odaklan
        menu.Selected.fleetID = tonumber(menu.param[3][1])
        menu.Selected.shipID = tonumber(menu.param[3][2])
        menu.Selected.selectedGroup = nil
        menu.Selected.strComponent = menu.Convert_ID_To_StrComponent(menu.Selected.fleetID, menu.Selected.shipID)
        menu.forcefocusfleetID = menu.Selected.fleetID
        menu.highlightedbordercomponent = menu.Selected.strComponent
        local fleetleaderShip = menu.Convert_ID_To_StrComponent(menu.Selected.fleetID, 1)
        menu.extendedmainproperty[fleetleaderShip] = menu.extendedmainpropertydefault
        menu.ExtendMainSubordinates(fleetleaderShip)
    end
    
    if menu.param[4] then
        menu.WindowFrameMode = menu.param[4]
    end
    
    -- YAPILACAK Get_buildStations() içinde tek GetNPCBlackboard olacak şekilde datayı alacağız
    --Get_buildStations()
    menu.active_stations = GetNPCBlackboard(playerID, "$active_stations") or {}
    menu.blacklist_stations = GetNPCBlackboard(playerID, "$blacklist_stations") or {}
    --menu.tablePrint(menu.blacklist_stations, "DATA LOADED .blacklist_stations (" .. tostring(#menu.blacklist_stations) .. ") = ", true, true)



	-- Possible orders
	menu.orderdefs = {}
	menu.orderdefbyid = {}
	local orderdefs_skillsorted = {}
    local orderdefcategories_skillsorted = { mining = true }

	local n = C.GetNumOrderDefinitions()
	local buf = ffi.new("OrderDefinition[?]", n)
	n = C.GetOrderDefinitions(buf, n)
	for i = 0, n - 1 do
		local entry = {}
		entry.id = ffi.string(buf[i].id)
		entry.name = ffi.string(buf[i].name)
		entry.description = ffi.string(buf[i].description)
		entry.category = ffi.string(buf[i].category)
		entry.categoryname = ffi.string(buf[i].categoryname)
		entry.infinite = buf[i].infinite
		entry.requiredSkill = buf[i].requiredSkill
		entry.loopable = C.IsOrderLoopable(entry.id)
		table.insert(menu.orderdefs, entry)
		menu.orderdefbyid[entry.id] = entry
		if (orderdefcategories_skillsorted[entry.category]) then
			table.insert(orderdefs_skillsorted, entry)
		end
	end
	table.sort(menu.orderdefs, Helper.sortName)
	table.sort(orderdefs_skillsorted, function (a, b) return a.requiredSkill < b.requiredSkill end)


    -- (conversation menusünün altında kalıyor)
    -- Pencereyi negatif daralt 
    local nWidth, nHeight = 0, 130
    -- Pencereyi negatif kaydır 
    local nPosX , nPosY = 0, 200

    menu.viewWidth = math.floor(Helper.viewWidth * 12 / 13)  - nWidth
    menu.viewHeight = math.ceil(Helper.viewHeight * 4 / 5) - nHeight
    
    local PosX = math.floor((Helper.viewWidth - menu.viewWidth) / 2)  - nPosX
    local PosX = (PosX > 0 ) and PosX or 0
    local PosY = math.floor((Helper.viewHeight - menu.viewHeight) / 2)  - nPosY
    local PosY = (PosY > 0 ) and PosY or 0

    menu.borderOffsetX = PosX
	menu.borderOffsetY = PosY

	menu.sideBarWidth = Helper.sidebarWidth -- Helper.scaleX(40)
    menu.sideBarOffsetX = 0
	menu.sideBarOffsetY = 0

    menu.FleetTableWidthRatio = 4.1 / 13
    menu.ShipTableWidthRatio = 4.4 / 13
    menu.rightTableWidthScale = 1 - menu.FleetTableWidthRatio - menu.ShipTableWidthRatio

    local kalan = menu.viewWidth - menu.sideBarWidth  - 6 * Helper.borderSize -- baş ve sonda 2, aralarda 1 er boşluk bırakcağız 2S T 1S T 1S T 2S

    -- kalan boşluğa göre genişlik belirliyoruz
    -- y ve height değerlerini mainframe oluştuktan sonra belirleyeceğiz
    menu.mainFrameData = {
        x = menu.borderOffsetX,
        width = menu.viewWidth ,
        y = menu.borderOffsetY,
        height = menu.viewHeight,
        color = not debugColorMod and config.sColor.semitransparent or config.sColor.darkyellow,
    }

    -- y ve height değerleri create zamanı hesaplanacak.
    menu.LeftFrameData = {
        x = menu.borderOffsetX +  menu.sideBarWidth  + 2 * Helper.borderSize,
        width = ( math.floor(kalan  * menu.FleetTableWidthRatio)  ) ,
        y = 0,
        height = 0,
        color = not debugColorMod and config.sColor.semitransparent or config.sColor.darkred,
    }
    menu.CenterFrameData = {
        x = menu.LeftFrameData.x + menu.LeftFrameData.width + 2 * Helper.borderSize  ,
        width = ( math.floor(kalan  * menu.ShipTableWidthRatio)  )  ,
        y = 0,
        height = 0,
        color = not debugColorMod and config.sColor.semitransparent or config.sColor.darkorange,
    }

    menu.RightFrameData = { 
        x = menu.CenterFrameData.x + menu.CenterFrameData.width + 2 * Helper.borderSize  ,
        width = ( math.floor(kalan  * menu.rightTableWidthScale)  ) - 0 *Helper.borderSize ,
        y = 0,
        height = 0,
        backgroundID = "solid",
        backgroundColor = debugColorMod and config.sColor.grey or config.sColor.black,
        table = {
            backgroundID = "solid",
            backgroundColor = debugColorMod and config.sColor.darkgrey or config.sColor.transparent,
        }
    }

    menu.BottomFrameData = {
        x = menu.borderOffsetX +  menu.sideBarWidth  + 2 * Helper.borderSize,
        width = menu.LeftFrameData.width + menu.CenterFrameData.width + 2 * Helper.borderSize,
        y = menu.mainFrameData.y + menu.mainFrameData.height + Helper.borderSize,
        height = config.bottomiconheight + 3* Helper.borderSize,
        color = not debugColorMod and config.sColor.semitransparent or config.sColor.white,
    }

    

    menu.optionsTableData1 = { 
        color = not debugColorMod and config.sColor.semitransparent or config.sColor.available,
    }
    menu.optionsTableData2 = { 
        color = not debugColorMod and config.sColor.semitransparent or config.sColor.darkred,
    }
    menu.optionsTableData3 = { 
        color = not debugColorMod and config.sColor.semitransparent or config.sColor.available,
    }
    
    menu.setdefaulttable = true
    -- add content
    menu.refreshMainFrame = true
    menu.display()

end


function menu.Check_mdData()
    menu.lastDataCheck = getElapsedTime()
    local isMdDataChanged = tonumber(GetNPCBlackboard(playerID, "$md_RFM_DataChanged")) == 1 or false
    if isMdDataChanged and not menu.createMenuFrameRunning then
        Get_mdData("Check")
        menu.mdDataChanged = true
    end
end


function menu.createFleetsTableFromMd()

    menu.Fleets = {}

    -- menu.Fleets  oluşturuluyor
    for _, entry in pairs(menu.RM_Fleets) do
        local fleetID = entry.id
        local strComponent = menu.Convert_ID_To_StrComponent(fleetID, 1)
        local strComponentP = menu.Convert_ID_To_StrComponent(fleetID, entry.shipid == 0 and 1 or entry.shipid)
        local record = menu.GetRecordFromMd(strComponent)
        local recordP = menu.GetRecordFromMd(strComponentP)
        if record and recordP then
            local data = menu.tablecopy(entry)

            data.isStation =  (tonumber(data.isStation) == 1)   --(data.isStation == 1 or data.isStation == true) and true or false
            data.isShip = not data.isStation
            data.isLockedFleet = (tonumber(data.isLockedFleet) == 1)  --(data.isLockedFleet == 1 or data.isLockedFleet == true) and true or false
            data.autobuild = (tonumber(data.autobuild) == 1)
            data.rebuildtimerstatus = (tonumber(data.rebuildtimerstatus) == 1)

            local comobject64 = ConvertStringTo64Bit(tostring(data.commander.object))
            if not data.commander.name then
                if comobject64 ~=0 then
                    data.commander.name = record.name
                else
                    data.commander.name = ""    
                end
            end
            menu.RM_Fleets[fleetID].commander.name = data.commander.name

            if not data.commander.idcode then
                if comobject64 ~=0 then
                    data.commander.idcode = ffi.string(C.GetObjectIDCode(comobject64))
                else
                    data.commander.idcode = ""
                end
            end
            menu.RM_Fleets[fleetID].commander.idcode = data.commander.idcode

            local object64 = ConvertStringTo64Bit(tostring(data.object))
            data.object64 = object64
            if not data.name then
                if object64 ~=0 then
                    data.name = recordP and recordP.name or GetMacroData(recordP.macro, "name")
                else
                    data.name = GetMacroData(recordP.macro, "name")
                end
            end
            menu.RM_Fleets[fleetID].name = data.name

            data.name = (tonumber(object64) == 0) and data.commander.name or data.name 
            data.idcode = (tonumber(object64) == 0) and data.commander.idcode or ffi.string(C.GetObjectIDCode(object64))

            if object64 == 0 then
                -- tüm gemiler patlamış. rebuildcuelerde 1 nolu gemi üretimde ise object ve idcode'unu alalım
                local rebuildcue = menu.GetReBuildCue(data.id, 1)
                local build = rebuildcue and rebuildcue.build
                local shipyardobject = rebuildcue and rebuildcue.shipyard.object
                local shipyard64 = ConvertStringTo64Bit(tostring(shipyardobject))
                local construction = (build and shipyardobject) and menu.GetConstructionFromShipyardBuilds(shipyard64, build) or {}
                if construction.inprogress then
                    data.idcode = ffi.string(C.GetObjectIDCode(construction.component))
                end
            end

            --DebugError("RFMKey = " .. tostring(RFMKey) .. " , data.commander.idcode = " .. tostring(data.commander.idcode) ..  " , data.idcode = " .. tostring(data.idcode) .. " object64 = " .. tostring(object64) .. " , isvalid = " .. tostring(isvalid) .. " , data.shipid = " .. tostring(data.shipid)  )
            --DebugError("RFMKey = " .. tostring(data.id) .. " , Record = " .. tostring(menu.RM_FleetRecords[data.id]))
            if object64 == 0 then
                data.class = record.class or ""
                data.purpose = record.purpose or ""
            else
                data.class = recordP.class or ""
                data.purpose = recordP.purpose or ""
            end

            data.locationtext = (object64 ~= 0) and  GetComponentData(object64, "sector") or record.sector or ""
            data.sectorid = record.sectorid or ""
            data.sector = record.sector or ""

            data.isdocked = false
            if object64 ~= 0 then
                data.isdocked = GetComponentData(object64, "isdocked")
            end
            --DebugError(string.format("id = %s , data.object = %s ,  object64 = %s", data.id, data.object, object64) )

            if object64 == 0 then
                data.icon = menu.RM_FleetRecords[data.id][1].icon or ""
            else
                if C.IsComponentClass(object64, "ship") then
                    data.icon = menu.RM_FleetRecords[data.id][data.shipid].icon or ""
                else
                    data.icon = GetComponentData(object64, "icon")
                    if data.icon == "" then
                        data.icon = "maptr_hexagon"
                    end
                end
            end
            data.color =  menu.HexToColor(data.alertstatus.color)
            
            data.promotedshipkey = data.shipid

            table.insert(menu.Fleets, data )
        end
    end
    table.sort(menu.Fleets, menu.componentSorter(menu.propertySorterType))

end

--- menu.RM_FleetRecords varsa donusturulmus record yoksa nil yapisini getirir
---@param strComponent string   'xx_yy'
---@return table|nil
function menu.GetRecordFromMd(strComponent)

    local fleetID, shipID = menu.Convert_StrComponent_To_ID(strComponent)

    local record = nil
    for _, entry in pairs( menu.RM_FleetRecords[fleetID] or {} ) do
        if tonumber(entry.id) == tonumber(shipID) then
            record = menu.tablecopy(entry)
            break
        end
    end

    if record then

        -- constructionships , varsa eklenecek
        -- Records yapısına eklemeler ve root değişkenlerdeki boolean türleri için düzeltme yapacağız 
        local object64 = ConvertStringTo64Bit(tostring(record.object))
        local isLost = false

        local color = menu.holomapcolor.playercolor
        if object64 == C.GetPlayerObjectID() then
            color = menu.holomapcolor.currentplayershipcolor
        end
    
        local statusIcon = ""
        local isWaitingForRebuild, respondMsg = false, ""
        local ishaverepondwares = nil
        local build = nil
        local respond = {}
        local construction = {}
        local shipyard = {
            object = nil,
            object64 = nil,
            name = "",
            idcode = "",
            faction = "",
            factioncolor = "",
            sector = "",
            sectorid = nil,
            sectorowner = nil,
            sectorownercolor = "",
        }

        record.isRecordCorrupt = (tonumber(record.isRecordCorrupt) == 1) 

        record.destroyed = (tonumber(record.destroyed) == 1) 

        menu.constructionships[strComponent] = nil
        
        record.addingTask = false
        record.shipStatus = ""

        if record.destroyed then
            local rebuildcue = menu.GetReBuildCue(fleetID, record.id)
            if rebuildcue then
                build = rebuildcue.build

                isWaitingForRebuild = ( tonumber(rebuildcue.isWaitingForRebuild) == 1 )

                respondMsg = rebuildcue.respondMsg
                respond = menu.tablecopy(rebuildcue.respond)
                ishaverepondwares = respond.equipmentwares and #respond.equipmentwares > 0
                
                local shipyardobject = rebuildcue.shipyard.object
                local shipyard64 = ConvertStringTo64Bit(tostring(shipyardobject))
                shipyard.object = shipyardobject
                shipyard.object64 = shipyard64
                if shipyard64 ~= 0 then
                    shipyard.name, shipyard.faction, shipyard.sector, shipyard.sectorid = GetComponentData(shipyard64, "name", "owner", "sector", "sectorid" )
                    shipyard.factioncolor = GetFactionData(shipyard.faction, "color")
                    shipyard.sectorowner = GetComponentData(shipyard.sectorid, "owner")
                    shipyard.sectorownercolor = GetFactionData(shipyard.sectorowner, "color")
                    shipyard.idcode = ffi.string(C.GetObjectIDCode(shipyard64))

                    construction = build and menu.GetConstructionFromShipyardBuilds(shipyard64, build) or construction

                    menu.constructionships[strComponent] = construction

                    --menu.tablePrint(construction, " construction [" .. tostring(fleetID) .. "_".. tostring(record.id) .. "] = ", true, true)

                    if construction.id then
                        statusIcon = "order_equip"
                        if construction.inprogress then
                            color = config.Color.text_inprogress
                        else
                            color = menu.HexToColor(menu.defaultSettings.alertstatues.queuedship.color) -- config.Color.text_warning
                        end
                    else
                        if object64 == 0 then
                            record.addingTask = true
                            statusIcon = "order_equip"
                            record.shipStatus = ReadText(tPg, 9056)     -- Adding Task
                            color =  menu.HexToColor(menu.defaultSettings.alertstatues.noshipyard.color)   --config.sColor.alertnormal
                            --color = menu.HexToColor(menu.defaultSettings.alertstatues.rebuild.color) -- config.sColor.alerthigh
                            --[[
                            statusIcon = "order_equip"
                            record.shipStatus = ReadText(tPg, 9058)         -- Removing Task
                            color = menu.HexToColor(menu.defaultSettings.alertstatues.rebuild.color) -- config.sColor.alerthigh
                            -- build yosa oyun pausede olduğu için build tasklarına yeni ekleniyordur (kod md içinde bekliyor). yakalayalım.
                            if not build then
                                color = menu.HexToColor(menu.defaultSettings.alertstatues.addbuildtask.color) -- config.Color.text_warning
                                record.shipStatus = ReadText(tPg, 9056)     -- Adding Task
                            end
                            ]]
                        end
                    end
                else
                    statusIcon = "order_waitforsignal"
                    color =  menu.HexToColor(menu.defaultSettings.alertstatues.noshipyard.color)   --config.sColor.alertnormal
                    record.shipStatus = ReadText(tPg, 6038)
                    if (not isWaitingForRebuild) and (not record.reBuildStartTime) then  -- rebuildtimer kapalı olduğu için
                        statusIcon = "maptr_illegal"
                        record.shipStatus = ReadText(tPg, 6024) .. "\n " .. ((not record.reBuildStartTime) and ishaverepondwares and " " .. ReadText(tPg, 6160) or " " .. ReadText(tPg, 6037))
                        color = menu.HexToColor(menu.defaultSettings.alertstatues.rebuild.color) -- config.sColor.alerthigh
                        isLost = true
                    end
                end
            else
                statusIcon = "maptr_illegal"
                record.shipStatus = ReadText(tPg, 6024) .. "\n " .. ((not record.reBuildStartTime) and ishaverepondwares and " " .. ReadText(tPg, 6160) or " " .. ReadText(tPg, 6037))
                color = menu.HexToColor(menu.defaultSettings.alertstatues.rebuild.color) -- config.sColor.alerthigh
                isLost = true
            end
        end
        
        if not record.name then
            if object64 ~=0 then
                record.name = GetComponentData(object64, "name")
            else
                record.name = GetMacroData(record.macro, "name")
            end
            menu.RM_FleetRecords[fleetID][shipID].name = record.name
        end
        if not record.idcode then
            if object64 ~=0 then
                record.idcode = ffi.string(C.GetObjectIDCode(object64))
            else
                record.idcode = ""
            end
            menu.RM_FleetRecords[fleetID][shipID].idcode = record.idcode
        end
        if not record.sector then
            if object64 ~=0 then
                if record.sectorid then
                    record.sector = GetComponentData(record.sectorid, "name")
                else
                    record.sector = GetComponentData(object64, "sector")
                end
            else
                record.sector = ""
            end
            menu.RM_FleetRecords[fleetID][shipID].sector = record.sector
        end


        record.color = color
        record.object64 = object64

        record.build = build
        record.isLost = isLost
        record.isWaitingForRebuild = isWaitingForRebuild
        record.respondMsg = respondMsg
        record.shipyard = shipyard
        record.respond = respond
        record.construction = construction
        record.statusIcon = statusIcon
        
    end

    return record
end

function menu.prepareFleetsTable()
    -- DebugError("mdRFMData : " .. tostring(menu.mdRFMData) .. " mdRBCData : ".. tostring(menu.mdRBCData) .. " mdFRData : ".. tostring(menu.mdFleetRecs))

    menu.createFleetsTableFromMd()

    -- create Fleet Categories
    local shipfleets = {}
    local stationfleets = {}
    for indx , fleet in ipairs(menu.Fleets) do
        if fleet.isStation then
            table.insert(stationfleets, fleet.id)
        else
            table.insert(shipfleets, fleet.id)
        end
    end

    -- ayrılan fleetleri kategori listelerine dönüştürüyoruz
    menu.fleetcategories = {}

    table.insert(menu.fleetcategories, {
        name = "Ship Fleets",
        id = "shipfleets",
        fleetkeys = shipfleets
    }) -- Ship Fleets


    table.insert(menu.fleetcategories, {
        name = "Station Fleets",
        id = "stationfleets",
        fleetkeys = stationfleets
    }) -- Station Fleets
    local function sortfleetcategories(a , b )
        local numA = #a.fleetkeys
        local numB = #b.fleetkeys
        if numA == numB then
            return a.name < b.name
        else
            return numA > numB
        end
    end
    table.sort(menu.fleetcategories, sortfleetcategories)

    local xdebug = debug2 and DebugError("initData  END")

end

function menu.display()

    -- frame:addTable  	açılmış frameye tablo ekler (kaç sütunlu olacağı burada bbelirlenir)
    -- table:addRow  	açılmış tabloya yeni bir satır ekler
    -- row[x]			oluşturulan (x tablo sütununa göre değerlendirilir) satır bilgisine özellik ekler

    -- create main frames  daha sonra birden fazla tablo için kullanabiliriz

    menu.lastrefresh = getElapsedTime()

    menu.createMainFrame()
    menu.createMenuFrames()
    --menu.createInfoFrame()

    menu.mdDataChanged = nil
    SetNPCBlackboard(playerID, "$md_RFM_DataChanged", false)

    local xdebug = debug0 and DebugError("display END")
end


function menu.createMainFrame()
	menu.createMainFrameRunning = true
	-- remove old data
	--Helper.removeAllWidgetScripts(menu, config.mainLayer)
    Helper.clearDataForRefresh(menu, config.mainLayer)

	menu.mainFrame = Helper.createFrameHandle(menu, {
		layer = config.mainLayer,
        x = menu.mainFrameData.x,
		width = menu.mainFrameData.width ,
        y = menu.mainFrameData.y,
		height = menu.mainFrameData.height ,
	})
    menu.mainFrame:setBackground( debugColorMod and "solid" or "", { color = menu.mainFrameData.color })

    -- sideBar, önce bunu yazalım,  menu.viewCreated içinde mainFrame için ilk layeri sideBarTableID e atıyoruz
    menu.sideBarTable = menu.createSideBar(menu.mainFrame)
    -- TopTittle
    menu.titleTable = menu.createTopTittleTable(menu.mainFrame)

    local bottomheight = config.bottomiconheight
    if (menu.WindowFrameMode == "manager") then
        -- BOTTOM Buttons TABLE
        menu.bottomBarTable = menu.createRFMBottomButtons(menu.mainFrame, menu.sideBarWidth  + 2 * Helper.borderSize, menu.LeftFrameData.width )
        bottomheight = menu.bottomBarTable:getFullHeight()
        menu.bottomBarTable.properties.y = menu.viewHeight - bottomheight - 1 * Helper.borderSize
    end

    menu.sideBarTable.properties.y = menu.titleTable:getFullHeight() + menu.titleTable.properties.y

    menu.LeftFrameData.y = menu.borderOffsetY + menu.titleTable.properties.y + menu.titleTable:getFullHeight() + Helper.borderSize
    menu.LeftFrameData.height = menu.viewHeight - menu.titleTable:getFullHeight() - bottomheight - 4 * Helper.borderSize

    menu.CenterFrameData.y = menu.LeftFrameData.y
    menu.CenterFrameData.height = menu.LeftFrameData.height

    menu.RightFrameData.y = menu.LeftFrameData.y
    menu.RightFrameData.height = menu.LeftFrameData.height

	menu.mainFrame:display()

    local xdebug = debug0 and DebugError("createMainFrame  :display")
end
function menu.createTopTittleTable(frame)
    --
    -- TITTLE TABLE
    --
    local row, ftable
    ftable = frame:addTable(1, { 
        skipTabChange = true,
      } )

    ftable:setDefaultCellProperties("text", { 
        halign = "center",
        font = Helper.titleFont,
        fontsize = 12,
    } )

    row = ftable:addRow(nil , { bgColor = config.Color.row_title_background }  )
    row[1]:createText(menu.title .. " " .. ((menu.WindowFrameMode == "manager") and ReadText(tPg, 1051) or ReadText(tPg, 1060)) , {} )

    return ftable
end
function menu.createSideBar(frame)
	local spacingHeight = menu.sideBarWidth / 4
	local defaultInteractiveObject = false
	local ftable = frame:addTable(1, { 
        tabOrder = 6, 
        x = menu.sideBarOffsetX, 
        y = menu.sideBarOffsetY, 
        width = menu.sideBarWidth, 
        scaling = false, borderEnabled = false, reserveScrollBar = false, defaultInteractiveObject = defaultInteractiveObject 
    })

	local foundselection
	local leftbar = config.leftBar

	for idx, entry in ipairs(leftbar) do
		if (entry.condition == nil) or entry.condition() then
			if entry.spacing then
                if next(leftbar,idx) then
                    if leftbar[next(leftbar,idx)].mode == "cheats" and not debugCheat then
                    else
                        local row = ftable:addRow(false, { fixed = true })
                        row[1]:createIcon("mapst_seperator_line", { width = menu.sideBarWidth, height = spacingHeight })
                    end
                end
			else
				local mode = entry.mode
				local row = ftable:addRow(true, { fixed = true })
				local bgcolor = config.Color["row_title_background"]
                if entry.mode == menu.WindowFrameMode then
                    bgcolor = config.Color["row_background_selected"]
                end
				local color = config.sColor.white   -- config.Color["icon_normal"]
                
				if mode == 'cheats' and not debugCheat then 
                
                else 
                    row[1]:createButton({ active = true, height = menu.sideBarWidth, bgColor = bgcolor, mouseOverText = entry.name, helpOverlayID = entry.helpOverlayID, helpOverlayText = entry.helpOverlayText }):setIcon(entry.icon, { color = color })
                    row[1].handlers.onClick = function () return menu.buttonToggleObjectList(mode) end
                end                    
			end
		end
	end

	ftable:setSelectedRow(menu.selectedRows.sideBar)
	menu.selectedRows.sideBar = nil

    return ftable
end
function menu.buttonToggleObjectList(objectlistparam)
    local oldidx, newidx
    local leftbar = config.leftBar
    local count = 1
	for _, entry in ipairs(leftbar) do
		if (entry.condition == nil) or entry.condition() then
			if entry.mode then
                if entry.mode == menu.WindowFrameMode then
                    oldidx = count
                end
                if entry.mode == objectlistparam then
                    newidx = count
                end
            end
			count = count + 1
		end
		if oldidx and newidx then
			break
		end
    end

	if newidx then
		Helper.updateButtonColor(menu.sideBarTableID, newidx, 1, config.Color.row_background_selected)
	end
	if oldidx then
		Helper.updateButtonColor(menu.sideBarTableID, oldidx, 1, config.Color.button_background_default)
	end
    
    --menu.createInfoFrameRunning = true

    --AddUITriggeredEvent(menu.name, objectlistparam, menu.WindowFrameMode == objectlistparam and "off" or "on")

    -- Tab değişmeden önce eski seçili durumları sakla
    if menu.WindowFrameMode == "manager" then
        menu.topRows["manager"]["LeftFrame"] = GetTopRow(menu.TableID.Fleets)
        menu.selectedRows["manager"]["LeftFrame"] = Helper.currentTableRow[menu.TableID.Fleets]

        menu.topRows["manager"]["CenterFrame"] = GetTopRow(menu.TableID.Ships)
        menu.selectedRows["manager"]["CenterFrame"] = Helper.currentTableRow[menu.TableID.Ships]

        menu.selectedRows["manager"]["BottomL"] = Helper.currentTableRow[menu.TableID.BottomL]
        menu.selectedCols["manager"]["BottomL"] = Helper.currentTableCol[menu.TableID.BottomL]

        menu.selectedRows["manager"]["BottomR"] = Helper.currentTableRow[menu.TableID.BottomR]
        menu.selectedCols["manager"]["BottomR"] = Helper.currentTableCol[menu.TableID.BottomR]

        menu.selectedRows["manager"]["orderHeaderTable"]    = Helper.currentTableRow[menu.TableID.orderHeaderTable] 
        menu.selectedCols["manager"]["orderHeaderTable"]    = Helper.currentTableCol[menu.TableID.orderHeaderTable]

        menu.topRows["manager"]["RightFrame"] = GetTopRow(menu.TableID["Records" .. menu.RightFrameMode])
        menu.selectedRows["manager"]["RightFrame"] = Helper.currentTableRow[menu.TableID["Records" .. menu.RightFrameMode]] 
        menu.selectedCols["manager"]["RightFrame"] = Helper.currentTableCol[menu.TableID["Records" .. menu.RightFrameMode]] 
        
    else
        menu.topRows["options"]["LeftFrame"] = GetTopRow(menu.TableID.Options.Left)
        menu.selectedRows["options"]["LeftFrame"] = Helper.currentTableRow[menu.TableID.Options.Left]
        menu.selectedCols["options"]["LeftFrame"] = Helper.currentTableCol[menu.TableID.Options.Left]
        
        menu.topRows["options"]["CenterFrame"] = GetTopRow(menu.TableID.Options.Center)
        menu.selectedRows["options"]["CenterFrame"] = Helper.currentTableRow[menu.TableID.Options.Center]
        menu.selectedCols["options"]["CenterFrame"] = Helper.currentTableCol[menu.TableID.Options.Center]
        
        menu.topRows["options"]["Stations"] = GetTopRow(menu.TableID.Options.Stations)
        menu.selectedRows["options"]["Stations"] = Helper.currentTableRow[menu.TableID.Options.Stations]
        
        menu.topRows["options"]["RightFrame"] = GetTopRow(menu.TableID.Options.Right)
        menu.selectedRows["options"]["RightFrame"] = Helper.currentTableRow[menu.TableID.Options.Right]
    end


    menu.WindowFrameMode = objectlistparam
    if newidx then
        SelectRow(menu.sideBarTableID, newidx)
    end

    menu.closeContextMenu()

    local xdebug = debug0 and DebugError("menu.buttonToggleObjectList(objectlistparam) .." .. " menu.WindowFrameMode = " .. tostring(menu.WindowFrameMode))
    menu.refreshMainFrame = true
    menu.setdefaulttable = true
	
    menu.createMenuFrames()

end

function menu.createMenuFrames()
    
    menu.createMenuFrameRunning = true

    menu.createLeftFrame()
    menu.createCenterFrame()
    menu.createRightFrame()

end

function menu.createRFMBottomButtons(frame, x, width)

    local strComponent = menu.Selected.strComponent
    local fleetID = menu.Selected.fleetID
    local shipID = menu.Selected.shipID
    local fleet = menu.GetFleet(fleetID)
    local record = menu.GetRecordFromMd(strComponent)

    local isactive = fleet and record and true
    isactive = isactive or false

    local ftable = frame:addTable(#config.botomButtons, {
        tabOrder = 3,
        reserveScrollBar = false,
        x = x + Helper.borderSize,
        --width = width - 2* Helper.borderSize,
        backgroundID = debugColorMod and "solid" or "",
        backgroundColor = debugColorMod and config.sColor.brown or config.sColor.transparent,
    })

    local halfcount = 0.5
    local fullcount = 1

    local count = 0
    for i, entry in ipairs(config.botomButtons) do
        if entry.empty then
            count = count + halfcount
        else
            count = count + fullcount
        end
    end
    
    local sideBarWidth = config.bottomiconheight --menu.sideBarWidth
    if (count * sideBarWidth + (#config.botomButtons - 1) * Helper.borderSize) > frame.properties.width then
        sideBarWidth = math.floor((frame.properties.width - (#config.botomButtons - 1) * Helper.borderSize) / count)
    end

    for i, entry in ipairs(config.botomButtons) do
        if entry.empty then
            ftable:setColWidth(i, sideBarWidth * halfcount, false)
        else
            ftable:setColWidth(i, sideBarWidth * fullcount, false)
        end
    end
    
    local row = ftable:addRow("bottoms_buttons", { fixed = true })
    local count = 1
    for _, entry in ipairs(config.botomButtons) do
        if not entry.empty then
            --local bgcolor = config.Color["row_title_background"]
            local color = config.Color["icon_normal"]
            local mouseOverText = ""

            local shown = true
            if shown then
                local loccount = count
                local value = nil
                local callback
                local isactivebutton = isactive
                if entry.category == "autobuid" then
                    value = isactive and fleet.autobuild or nil
                    mouseOverText = isactive and entry.getMouseOverText(value) or ""
                    color = entry.getIconColor(value)
                elseif entry.category == "rebuildtimer" then
                    value = isactive and fleet.rebuildtimerstatus or nil
                    mouseOverText = isactive and entry.getMouseOverText(value) or ""
                    color = entry.getIconColor(value)
                elseif entry.category == "closerfm" then
                    value = isactive and fleet.id or nil
                    color = entry.getIconColor(value)
                    mouseOverText = isactive and entry.getMouseOverText(value, fleet.color) or ""
                elseif entry.category == "showonmap" then
                    isactivebutton = entry.isActive(record)
                    color = entry.getIconColor()
                    mouseOverText = entry.getMouseOverText(strComponent, record)
                elseif entry.category == "cloneship" then
                    isactivebutton = entry.isActive(record)
                    color = entry.getIconColor()
                    mouseOverText = entry.getMouseOverText(strComponent, record)
                elseif entry.category == "removeship" then
                    isactivebutton = entry.isActive(record)
                    color = entry.getIconColor()
                    mouseOverText = entry.getMouseOverText(record)
                else
                    -- unknown entry, listeye yeni bir buton eklenirse burda ilgili davranışlar tanımlanacak
                end
                
                row[loccount]:createButton({ active = isactivebutton, height = sideBarWidth, mouseOverText = mouseOverText , scaling = false }):setIcon(entry.icon, { color = color})
                row[loccount].handlers.onClick = function() return menu.bottomButtonsClick(entry.category, record, value) end
                count = count + 1
            end
        else
            count = count + 1
        end
    end

    return ftable

end

-- KALDIRILACAK
--[[
function menu.isBottomButtonValidFor(strComponent, mode)
    local result
    local record = menu.GetRecordFromMd(strComponent) 
    if record then
        if mode == "objectrespond" then
            result = (record.construction.buildingcontainer or record.isLost or record.isWaitingForRebuild or record.addingTask) and true or false
        elseif  mode == "objectinfo" or mode == "objectcrew" or mode == "objectloadout" or mode == "objectstandingorders" then
            result = true
        elseif mode == "orderqueue" then
            result = (record.class ~= "station")
        end
    end
    return result or false
end
]]
function menu.refreshBottomButtons()
    if not menu.createMainFrameRunning then
        menu.createMainFrame()
    end
end

function menu.bottomButtonsClick(category, record, value)
    if category == "autobuid" then
        menu.buttonAutoBuildChanged(value)
    elseif category == "rebuildtimer" then
        menu.buttonRebuildTimerStatusChanged(not value)
    elseif category == "closerfm" then
        menu.buttonRemoveRFM()
    elseif category == "showonmap" then
        menu.buttonOnShowMap(record)
    elseif category == "cloneship" then
        menu.cloned = true
        menu.buttonRFMClone()
        menu.refreshMenuFrame()
        menu.noupdate = nil
    elseif category == "removeship" then
        menu.buttonRemoveShip(record)
    end
end

function menu.createLeftFrame()
    
    menu.createLeftFrameRunning = true
    menu.noupdate = false

    Helper.clearDataForRefresh(menu, config.fleetsLayer)

    local frameProperties = {
        x = menu.LeftFrameData.x,
        width = menu.LeftFrameData.width ,
        y = menu.LeftFrameData.y,
        height = menu.LeftFrameData.height,
        standardButtons = {},
        layer = config.fleetsLayer,
    }
    menu.LeftFrame = Helper.createFrameHandle(menu, frameProperties)
    menu.LeftFrame:setBackground("solid", { color = menu.LeftFrameData.color })    -- 7.00 da

    local xdebug = debug0 and DebugError("CREATED Left FRAME width = " .. tostring(menu.LeftFrame.properties.width) )
    
    if (menu.WindowFrameMode == "manager") then
        menu.prepareFleetsTable()
        menu.createRFMFleetTable(menu.LeftFrame)
    else
        menu.createOptionFrame_1_Table(menu.LeftFrame)
    end

    --local xdebug = debug0 and DebugError("DISPLAYING Left FRAME ")

    menu.LeftFrame:display()

    local xdebug = debug0 and DebugError("DISPLAYED Left FRAME ")
end

function menu.createCenterFrame()
    
    menu.createCenterFrameRunning = true
    menu.noupdate = false

    Helper.clearDataForRefresh(menu, config.shipsLayer)

    local frameProperties = {
        x = menu.CenterFrameData.x,
        width = menu.CenterFrameData.width ,
        y = menu.CenterFrameData.y,
        height = menu.CenterFrameData.height,
        standardButtons = {},
        layer = config.shipsLayer,
    }
    menu.CenterFrame = Helper.createFrameHandle(menu, frameProperties)
    menu.CenterFrame:setBackground("solid", { color = menu.CenterFrameData.color })    -- 7.00 da

    local xdebug = debug0 and DebugError("CREATED Center FRAME width = " .. tostring(menu.CenterFrame.properties.width) )

    if (menu.WindowFrameMode == "manager") then
        --menu.createRecordsTableFromMd()
        menu.createRFMFleetShipsTable(menu.CenterFrame, 0, 0, menu.CenterFrame.properties.width)
    else
        menu.createOptionFrame_2_Table(menu.CenterFrame)
    end

    menu.CenterFrame:display()
    
end

function menu.createRightFrame()
    
    menu.createRightFrameRunning = true
    menu.noupdate = false

    Helper.clearDataForRefresh(menu, config.recordsLayer)

    local frameProperties = {
        x = menu.RightFrameData.x,
        width = menu.RightFrameData.width ,
        y = menu.RightFrameData.y,
        height = menu.RightFrameData.height,
        standardButtons = {},
        layer = config.recordsLayer,
    }
    menu.RightFrame = Helper.createFrameHandle(menu, frameProperties)
    menu.RightFrame:setBackground(menu.RightFrameData.backgroundID, { color = menu.RightFrameData.backgroundColor })    -- 7.00 da

    --local xdebug = debug0 and DebugError("CREATED Right FRAME width = " .. tostring(menu.RightFrame.properties.width) )

    if (menu.WindowFrameMode == "manager") then

        local valid = menu.isInfoModeValidFor(menu.Selected.strComponent, menu.RightFrameMode)
        local RightFrameMode = valid and menu.RightFrameMode
        if RightFrameMode == "objectinfo" then
            menu.createInfoSubmenu(menu.RightFrame)
        elseif RightFrameMode == "objectrespond" then
            menu.createRespondInfoSubmenu(menu.RightFrame)
        elseif RightFrameMode == "objectcrew" then
            menu.createCrewInfoSubmenu(menu.RightFrame)
        elseif RightFrameMode == "objectloadout" then
            menu.createLoadoutInfoSubmenu(menu.RightFrame)
        elseif RightFrameMode == "objectstandingorders" then
            menu.createStandingOrdersMenu(menu.RightFrame)
        elseif RightFrameMode == "orderqueue" then
            menu.createOrderQueue(menu.RightFrame)
        else
            menu.createInfoSubmenu(menu.RightFrame)
        end
    
    else
        menu.createOptionFrame_3_Table(menu.RightFrame)
    end
    menu.RightFrame:display()
    
end


function menu.createOptionFrame_1_Table(frame)
    
    local row
    local font, fontsize = Helper.standardFont, Helper.standardFontSize
    local map_fontsize = fontsize
    local map_textheight = math.ceil(C.GetTextHeight("Y", font, Helper.scaleFont(font, map_fontsize), Helper.viewWidth)) + 2 * Helper.borderSize

    local HeaderTextProperties = {
        halign = "center",
	    fontsize = 10,
	    cellBGColor = { r = 0, g = 0, b = 0, a = 0 },
        color = config.sColor.gold,
	    titleColor = config.Color.row_background_selected
    }
    local subHeaderLeftTextProperties = {
        halign = "left",
	    fontsize = map_fontsize,
	    cellBGColor = { r = 0, g = 0, b = 0, a = 0 },
        color = config.sColor.dirtyyellow,
	    titleColor = config.Color.row_background_selected,
    }
    local LeftTextProperties = {
        halign = "left",
	    fontsize = map_fontsize,
	    cellBGColor = { r = 0, g = 0, b = 0, a = 0 },
        color = config.sColor.darkyellow,
    }

    local subLineProperties = {
        fontsize = 1, 
        minRowHeight = 2,
    }
    local subLineTransparentProperties = {
        fontsize = 1, 
        minRowHeight = 2,
        cellBGColor = { r = 0, g = 0, b = 0, a = 0 },
    }

    -- LEFT TABLE
    local leftTable = frame:addTable(13, {
        tabOrder = 1,
        x = Helper.borderSize ,
        width = frame.properties.width - 2 * Helper.borderSize ,
        y = Helper.borderSize,
        borderEnabled = true,
    })

    leftTable.properties.backgroundID = not debugColorMod and "" or "solid"   
    leftTable.properties.backgroundColor = menu.optionsTableData1.color
    
    -- property tablar arasında geçiş yaptığımızda default table belirliyoruz
    -- çünkü her tab aynı tableleri içermiyor
    if menu.setdefaulttable then
        leftTable.properties.defaultInteractiveObject = true   
        menu.setdefaulttable = nil
    end

    leftTable:setColWidth(1, map_textheight / 2)
    
    leftTable:setColWidth(2, map_textheight)
    leftTable:setColWidth(6, map_textheight)

    leftTable:setColWidth(8, map_textheight)
    leftTable:setColWidth(12, map_textheight)

    leftTable:setColWidth(13, map_textheight / 2)

    leftTable:addEmptyRow(2*Helper.borderSize)
    -- ----------------------------------

    -- Satır Ekle -  Kılavuz
    --row = leftTable:addRow(nil, { bgColor = config.sColor.orange })
    --row[1]:setColSpan(1):createText("", subLineProperties)

    -- 6060 Use RFM Tag
    -- 6061 Whether to use the rfm tag on the rfm fleet commander name.
    row = leftTable:addRow(true, {  } )
    row[2]:setColSpan(4):createText(ReadText(tPg, 6060), LeftTextProperties )
    row[2].properties.mouseOverText = ReadText(tPg, 6061)       
    row[6]:setColSpan(1):createCheckBox(menu.editedSettings.useTagOnName, { width = map_textheight, height = map_textheight })
    row[6].handlers.onClick = menu.checkbox_useTagOnName

    -- ----------------------------------
    leftTable:addEmptyRow()
    -- ----------------------------------

    -- ----------------------------------
    row = leftTable:addRow(false, {  })
    row[2]:setColSpan(11):createText(ReadText(tPg, 5008), HeaderTextProperties)     -- "Production Stations"
    --
    -- ----------------------------------
    --  UsePlayerYards
    row = leftTable:addRow(true, {  } )
    row[2]:setColSpan(4):createText(ReadText(tPg, 5009), LeftTextProperties )       -- "Player Yards",
    row[2].properties.mouseOverText = ReadText(tPg, 5010)       --  "Player shipyards will be checked first for the production of destroyed ships."
    
    row[6]:setColSpan(1):createCheckBox(menu.editedSettings.UsePlayerYards, { width = map_textheight, height = map_textheight })
    row[6].handlers.onClick = menu.checkbox_UsePlayerYards
    --  UseNPCYards
    row[8]:setColSpan(4):createText(ReadText(tPg, 5011), LeftTextProperties )       -- "NPC Yards"
    row[8].properties.mouseOverText = ReadText(tPg, 5012)       -- "NPC shipyards will be included for the production of destroyed ships."
    row[12]:setColSpan(1):createCheckBox(menu.editedSettings.UseNPCYards, { width = map_textheight, height = map_textheight })
    row[12].handlers.onClick = menu.checkbox_UseNPCYards

    -- ----------------------------------
    leftTable:addEmptyRow()
    -- ----------------------------------

    row = leftTable:addRow(false, {  })
    row[2]:setColSpan(11):createText(ReadText(tPg, 5013), HeaderTextProperties)  -- "Valid Updates for Ship Loadout Records"
    -- ----------------------------------
    leftTable:addEmptyRow(3)
    
    row = leftTable:addRow(false, {  })
    row[2]:setColSpan(5):createText(ReadText(tPg, 5009), subHeaderLeftTextProperties)   -- "Player Yards"
    row[8]:setColSpan(5):createText(ReadText(tPg, 5011), subHeaderLeftTextProperties)   -- "NPC Yards"
    -- ----------------------------------
    row = leftTable:addRow(true, {  } )
    row[3]:setColSpan(3):createText(ReadText(tPg, 1230), LeftTextProperties)            -- "Equipments"
    row[3].properties.mouseOverText = ReadText(tPg, 5014)       -- "It updates the ship's changing 'equipments record' during equipment change or repair at a supply player station."
    row[6]:setColSpan(1):createCheckBox(menu.editedSettings.ValidUpdates.PYards.equipments , { width = map_textheight, height = map_textheight })
    row[6].handlers.onClick = menu.checkbox_ValidUpdatesPYardsequipments

    row[9]:setColSpan(3):createText(ReadText(tPg, 1230), LeftTextProperties)            -- "Equipments"
    row[9].properties.mouseOverText = ReadText(tPg, 5015)       -- "It updates the ship's changing 'equipments record' during equipment change or repair at a supply npc station."
    row[12]:setColSpan(1):createCheckBox(menu.editedSettings.ValidUpdates.NYards.equipments, { width = map_textheight, height = map_textheight })
    row[12].handlers.onClick = menu.checkbox_ValidUpdatesNYardsequipments


    row = leftTable:addRow(true, {  } )
    row[3]:setColSpan(3):createText(ReadText(tPg, 1240), LeftTextProperties)            -- "Crew"
    row[3].properties.mouseOverText = ReadText(tPg, 5016)       -- "It updates the ship's changing 'peoples record' during equipment change or repair at a supply player station."
    row[6]:setColSpan(1):createCheckBox(menu.editedSettings.ValidUpdates.PYards.peoples, { width = map_textheight, height = map_textheight })
    row[6].handlers.onClick = menu.checkbox_ValidUpdatesPYardspeoples

    row[9]:setColSpan(3):createText(ReadText(tPg, 1240), LeftTextProperties)            -- "Crew"
    row[9].properties.mouseOverText = ReadText(tPg, 5017)       -- "Crew", "It updates the ship's changing 'peoples record' during equipment change or repair at a supply npc station."
    row[12]:setColSpan(1):createCheckBox(menu.editedSettings.ValidUpdates.NYards.peoples, { width = map_textheight, height = map_textheight })
    row[12].handlers.onClick = menu.checkbox_ValidUpdatesNYardspeoples

    -- ----------------------------------
    leftTable:addEmptyRow()
    -- ----------------------------------


    -- Satır Ekle - Başlık Altı Çizili
    row = leftTable:addRow(false, {  })
    row[2]:setColSpan(11):createText(ReadText(tPg, 5022), HeaderTextProperties)                      -- "Auto Rebuilds"
    -- ----------------------------------
    leftTable:addEmptyRow(3)
    -- NextRetryTime
    row = leftTable:addRow(true, {  })
    row[2]:setColSpan(4):createText(ReadText(tPg, 5023), LeftTextProperties)            -- "Retry Time"
    row[2].properties.mouseOverText = ReadText(tPg, 5024)       -- "Retry Time", "How long will it take for ships that failed to be produced to be attempted again automatically?"
    row[6]:setColSpan(7):createSliderCell({ min = 1, max = 30, step = 1, start = menu.editedSettings.NextRetryTime, suffix = ReadText(1001, 103), height = map_textheight })
    row[6].handlers.onSliderCellConfirm = function(_, val) menu.slidercell_NextRetryTime(_, val) end
    row[6].handlers.onSliderCellActivated = function() menu.noupdate = true end
    row[6].handlers.onSliderCellDeactivated = function() menu.noupdate = false end

    --pilotcloning
    row = leftTable:addRow(true, {  } )
    row[2]:setColSpan(4):createText(ReadText(tPg, 3100) .. " " .. ReadText(tPg, 3102), LeftTextProperties)            -- "Pilot Level"
    row[2].properties.mouseOverText = string.format(ReadText(tPg, 5029), ReadText(tPg, 3100), ReadText(tPg, 3100))        -- "Pilot Level", "It creates the same personnel ranks as in the RFM record of the produced ship. If not selected, random low-level personnel will be created."
    row[6]:setColSpan(1):createCheckBox(menu.editedSettings.pilotcloning, { width = map_textheight, height = map_textheight })
    row[6].handlers.onClick = menu.checkbox_pilotcloning

    --personnelcloning
    row = leftTable:addRow(true, {  } )
    row[2]:setColSpan(4):createText(ReadText(tPg, 3101) .. " " .. ReadText(tPg, 3102), LeftTextProperties)            -- "Crew Level"
    row[2].properties.mouseOverText = string.format(ReadText(tPg, 5029), ReadText(tPg, 3101), ReadText(tPg, 3101))        -- "Crew Level", "It creates the same personnel ranks as in the RFM record of the produced ship. If not selected, random low-level personnel will be created."
    row[6]:setColSpan(1):createCheckBox(menu.editedSettings.personnelcloning, { width = map_textheight, height = map_textheight })
    row[6].handlers.onClick = menu.checkbox_personnelcloning

    -- ----------------------------------
    leftTable:addEmptyRow(3)

    -- RFM Cloning
    row = leftTable:addRow(false, {  })
    row[2]:setColSpan(11):createText(ReadText(tPg, 5025), subHeaderLeftTextProperties)                  -- "Fleet Cloning"

    --autobuildafterclone
    row = leftTable:addRow(true, {  } )
    row[3]:setColSpan(3):createText(ReadText(tPg, 5026), LeftTextProperties )           -- "Start Build After Cloning"
    row[3].properties.mouseOverText = ReadText(tPg, 5027)       -- "If approved, the production process of the new RFM will automatically start after the RFM cloning is done."
    row[6]:setColSpan(1):createCheckBox(menu.editedSettings.autobuildafterclone, { width = map_textheight, height = map_textheight })
    row[6].handlers.onClick = menu.checkbox_autobuildafterclone


    -- ----------------------------------
    leftTable:addEmptyRow(3)

    --monetary restrictions
    row = leftTable:addRow(false, {  })
    row[2]:setColSpan(11):createText(ReadText(tPg, 5030), subHeaderLeftTextProperties) -- "Monetary Restrictions"

    local haslimitoverride = true
    -- MoneyThreshold
    row = leftTable:addRow(true, {  })
    row[3]:setColSpan(3):createText("  " .. ReadText(tPg, 5031), LeftTextProperties)        -- "Player Money Threshold"
    row[3].properties.mouseOverText = ReadText(tPg, 5032)       -- "Never rebuild ships which reduces player money below this amount."
    row[6]:setColSpan(7):createSliderCell({ 
        height = map_textheight,
        bgColor = haslimitoverride and config.Color["slider_background_default"] or config.Color["slider_background_inactive"],
        valueColor = haslimitoverride and config.Color["slider_value"] or config.Color["slider_value_inactive"],
        min = 0,
        minSelect = tonumber(menu.editedSettings.maxmoney) == 0 and 0 or 1,
        max = menu.editedSettings.maxmoney,
        step = menu.editedSettings.moneystep,
        start = menu.editedSettings.playermoneythreshold,
        hideMaxValue = true,
        suffix = ReadText(1001, 101),
        readOnly = not haslimitoverride,
        forceArrows = haslimitoverride,
    })
    row[6].handlers.onSliderCellConfirm = function(_, val) menu.slidercell_playermoneythreshold(_, val) end
    row[6].handlers.onSliderCellActivated = function() menu.noupdate = true end
    row[6].handlers.onSliderCellDeactivated = function() menu.noupdate = false end

    -- MoneyThreshold
    row = leftTable:addRow(true, {  })
    row[3]:setColSpan(3):createText("  " .. ReadText(tPg, 5033), LeftTextProperties)        -- "Max Allowed Ship Price"
    row[3].properties.mouseOverText = ReadText(tPg, 5034)       -- "Maximum price allowed for ship production. If the value requested for the ship's production fee at NPC stations exceeds this value, the ship will not be produced. To deactivate, set the value to 0."
    row[6]:setColSpan(7):createSliderCell({ 
        height = map_textheight,
        bgColor = haslimitoverride and config.Color["slider_background_default"] or config.Color["slider_background_inactive"],
        valueColor = haslimitoverride and config.Color["slider_value"] or config.Color["slider_value_inactive"],
        min = 0,
        max = 9 * menu.editedSettings.maxmoney,
        step = menu.editedSettings.moneystep,
        start = menu.editedSettings.maxallowedpricepership,
        hideMaxValue = true,
        suffix = ReadText(1001, 101),
        readOnly = not haslimitoverride,
        forceArrows = haslimitoverride,
    })
    row[6].handlers.onSliderCellConfirm = function(_, val) menu.slidercell_maxallowedpricepership(_, val) end
    row[6].handlers.onSliderCellActivated = function() menu.noupdate = true end
    row[6].handlers.onSliderCellDeactivated = function() menu.noupdate = false end
    

    -- ----------------------------------
    leftTable:addEmptyRow()
    -- ----------------------------------

    -- Satır Ekle - Başlık Altı Çizili
    row = leftTable:addRow(false, {  })
    row[2]:setColSpan(11):createText(ReadText(tPg, 1250), HeaderTextProperties)                      -- Helper
    -- ----------------------------------
    --  showhelp
    row = leftTable:addRow(true, {  } )
    row[2]:setColSpan(4):createText( ReadText(tPg, 5018), LeftTextProperties)       -- "Show Help"
    row[2].properties.mouseOverText = ReadText(tPg, 5019)       -- "Reports the destroy information of RFM ships on the Show Help popup window."
    row[6]:setColSpan(1):createCheckBox(menu.editedSettings.showhelp, { width = map_textheight, height = map_textheight })
    row[6].handlers.onClick = menu.checkbox_showhelp
    --  write_to_logbook
    row[8]:setColSpan(4):createText(ReadText(tPg, 5020), LeftTextProperties)        -- "Write to logbook"
    row[8].properties.mouseOverText = ReadText(tPg, 5021)       -- "RFMs' exploding ships and production result reports will be written in the logbook."
    row[12]:setColSpan(1):createCheckBox(menu.editedSettings.write_to_logbook, { width = map_textheight, height = map_textheight })
    row[12].handlers.onClick = menu.checkbox_write_to_logbook


    leftTable.properties.maxVisibleHeight = frame.properties.height - Helper.borderSize
    
    -- ----------------------------------
    
    --DebugError("menu.selectedRows[options][LeftFrame] = " .. tostring(menu.selectedRows["options"]["LeftFrame"]))
    --DebugError("menu.topRows[options][LeftFrame] = " .. tostring(menu.topRows["options"]["LeftFrame"]))

    if menu.selectedRows["options"]["LeftFrame"] then
        leftTable:setSelectedRow(menu.selectedRows["options"]["LeftFrame"])
        menu.selectedRows["options"]["LeftFrame"] = nil
    end
    if menu.topRows["options"]["LeftFrame"] then
        leftTable:setTopRow(menu.topRows["options"]["LeftFrame"])
        menu.topRows["options"]["LeftFrame"] = nil
    end

    --[[
    local firstRowindex = 1
    local lastRowindex = 25
    local lastRowindex = lastRowindex - 1 
    menu.topRows["options"]["LeftFrame"] = ((not menu.topRows["options"]["LeftFrame"]) or (menu.topRows["options"]["LeftFrame"] == 0)) and ((menu.selectedRows["options"]["LeftFrame"] and menu.selectedRows["options"]["LeftFrame"] > lastRowindex) and (menu.selectedRows["options"]["LeftFrame"] - (lastRowindex - firstRowindex) ) or firstRowindex) or menu.topRows["options"]["LeftFrame"]
    leftTable:setTopRow(menu.topRows["options"]["LeftFrame"])
    leftTable:setSelectedRow(menu.selectedRows["options"]["LeftFrame"])
    menu.selectedRows["options"]["LeftFrame"] = nil
    menu.topRows["options"]["LeftFrame"] = nil
    ]]

end

function menu.createOptionFrame_2_Table(frame)
    
    local row
    local font, fontsize = Helper.standardFont, Helper.standardFontSize
    local map_fontsize = fontsize
    local map_textheight = math.ceil(C.GetTextHeight("Y", font, Helper.scaleFont(font, map_fontsize), Helper.viewWidth)) + 2 * Helper.borderSize

    local subHeaderTextProperties = {
        halign = "center",
	    fontsize = 10,
	    cellBGColor = { r = 0, g = 0, b = 0, a = 0 },
	    titleColor = config.sColor.cyan
    }
    local subHeaderLeftTextProperties = {
        halign = "left",
	    fontsize = map_fontsize,
	    cellBGColor = { r = 0, g = 0, b = 0, a = 0 },
	    titleColor = config.Color.row_title
    }

    local subLineProperties = {
        fontsize = 1, 
        minRowHeight = 2,
    }
    local subLineTransparentProperties = {
        fontsize = 1, 
        minRowHeight = 2,
        cellBGColor = { r = 0, g = 0, b = 0, a = 0 },
    }

    -- CENTER TABLE
    local centerTable = frame:addTable(13, {
        tabOrder = 2,
        x = Helper.borderSize,
        width = frame.properties.width - 2* Helper.borderSize ,
        y = Helper.borderSize ,
        borderEnabled = true,
    })
    centerTable.properties.backgroundID = not debugColorMod and "" or "solid"   
    centerTable.properties.backgroundColor = menu.optionsTableData2.color

    centerTable:setColWidth(4, map_textheight)
    centerTable:setColWidth(9, map_textheight)

    --   Kontrol bars
    --row = centerTable:addRow(nil, { bgColor = config.sColor.orange })
    --row[1]:setColSpan(1):createText("", subLineProperties)

    local listfonstize = 11
    local listTextHeight = math.ceil(C.GetTextHeight("K", font, Helper.scaleFont(font, listfonstize), Helper.viewWidth)) + 2 * Helper.borderSize
    menu.activestations = {}
    for _,as in ipairs(menu.active_stations) do
        local entry = {}
        entry.object = as.object
        entry.name = as.name
        entry.sector = as.sector
        entry.object64 = ConvertStringTo64Bit(tostring(entry.object))
        entry.idcode = ffi.string(C.GetObjectIDCode(entry.object64))
        entry.macro, entry.faction, entry.sectorid = GetComponentData(entry.object64, "macro", "owner", "sectorid" )
        entry.factioncolor = GetFactionData(entry.faction, "color")
        entry.sectorowner = GetComponentData(entry.sectorid, "owner")
        entry.sectorownercolor = GetFactionData(entry.sectorowner, "color")
        entry.isplayerowned, entry.icon, entry.isenemy, entry.ishostile, entry.uirelation = GetComponentData(entry.object64, "isplayerowned", "icon", "isenemy", "ishostile", "uirelation")
        entry.isshipyard, entry.iswharf = GetComponentData(entry.object64, "isshipyard", "iswharf")
        entry.macroname = GetMacroData(entry.macro, "name")
        entry.isknownsector = C.IsKnownToPlayer(ConvertStringTo64Bit(tostring(entry.sectorid)))
        entry.isknown = C.IsKnownToPlayer(entry.object64)
        entry.islocked = false
        if (not entry.isknown) or entry.isenemy or entry.ishostile then
            entry.islocked = true
        end
        entry.selected = menu.checkInBlacklist(entry.object64)
        table.insert(menu.activestations , entry)
    end
    table.sort(menu.activestations, menu.componentSorter("name"))

    local stationsvisibleHeight = nil
    local maxrows = 23
    local totalrows = 0

    menu.optionsTable_showenemy = menu.optionsTable_showenemy or false
    menu.optionsTable_showunknown = menu.optionsTable_showunknown or false
    
    centerTable:addEmptyRow(10)

    row = centerTable:addRow(true, {  } )
    row[4]:setColSpan(1):createCheckBox(menu.optionsTable_showenemy , { width = map_textheight, height = map_textheight, mouseOverText = ReadText(tPg, 5004) })
    row[4].handlers.onClick = function () menu.optionsTable_showenemy = not menu.optionsTable_showenemy; menu.RefreshOptionsFrame(); end
    row[5]:setColSpan(4):createText(ReadText(tPg, 5003), { halign = "left", mouseOverText = ReadText(tPg, 5004), fontsize = map_fontsize }) -- "Show Enemy or Hostile","Show stations with restricted docking permission in the list."
    
    row[9]:setColSpan(1):createCheckBox(menu.optionsTable_showunknown , { width = map_textheight, height = map_textheight, mouseOverText = ReadText(tPg, 5006) })
    row[9].handlers.onClick = function (_, checked) menu.optionsTable_showunknown = checked; menu.RefreshOptionsFrame(); end
    row[10]:setColSpan(3):createText(ReadText(tPg, 5005), { halign = "left", mouseOverText = ReadText(tPg, 5006), fontsize = map_fontsize })    -- "Show Unknown","Show unknown stations in list."


    -- Marked stations will not be taken into account in station searches for ship production
    row = centerTable:addRow(false, {  } )
    row[2]:setColSpan(11):createText(ReadText(tPg, 5007), subHeaderTextProperties )
    row[2].properties.color = config.Color.text_warning
    row[2].properties.titleColor = config.Color.text_inactive

    centerTable:addEmptyRow(10)


    -- BlackList Shipyard and Wharf Stations Table
    local stationstable = nil
    if #menu.activestations then
        -- config.Color.table_background_3d_editor
        stationstable = frame:addTable(13, { 
            tabOrder = 3,
            x = Helper.borderSize,
            width = frame.properties.width - 2* Helper.borderSize ,
            y = Helper.borderSize, 
            reserveScrollBar = true, highlightMode = "off", skipTabChange = false, 
        })
        
        stationstable.properties.backgroundID = not debugColorMod and "" or "solid"   
        stationstable.properties.backgroundColor = not debugColorMod and config.Color.table_background_3d_editor or config.sColor.grey
    
        stationstable:setColWidth(1, map_textheight)
        stationstable:setColWidth(2, map_textheight)

        row = stationstable:addRow(nil, { fixed = true } )  -- sadece bu satır listede kaymayacak, bu yüzden fixed true dedik, sonradan açılan satırlar arasında fixed ture olmamalı
        row[2]:setColSpan(7):createText(ReadText(tPg, 1200), subHeaderTextProperties )  -- "Stations"
        row[9]:setColSpan(5):createText(ReadText(tPg, 1210), subHeaderTextProperties )  -- "Sector"
            
        --   Kontrol bars
        --row = stationstable:addRow(nil, { bgColor = config.sColor.orange })
        --row[1]:setColSpan(1):createText("", subLineProperties)

        for k,entry in ipairs(menu.activestations) do

            local show = false
            if ((not entry.isknown) and menu.optionsTable_showunknown) then
                show = true
            elseif (((entry.isenemy or entry.ishostile) and menu.optionsTable_showenemy )) and entry.isknown then 
                show = true
            elseif entry.isknown and not entry.isenemy and not entry.ishostile then
                show = true
            end
            if show then
                totalrows = totalrows + 1

                local unknowntext = Helper.convertColorToText(config.sColor.lightgrey) .. " " .. ReadText(tPg, 1220) .. " "
                local name = entry.name 
                local coloredicon = string.format("%s\027[%s]", Helper.convertColorToText(entry.factioncolor), entry.icon) 
                local coloredname = string.format("%s%s", Helper.convertColorToText(entry.factioncolor), name) 
                local nameUnknownText = entry.isknown and "" or unknowntext
                local ColoredIconName = string.format("%s%s%s ( %s )",coloredicon, nameUnknownText, coloredname, entry.idcode )

                local sectorUnknownText = entry.isknownsector and "" or unknowntext
                local ColoredSectorName = string.format("%s%s%s", sectorUnknownText, Helper.convertColorToText(entry.sectorownercolor), entry.sector )


                row = stationstable:addRow(entry.object64, { bgColor = config.sColor.transparent80 } )
                row[1]:setColSpan(1):createCheckBox( entry.selected , { active = not entry.islocked, width = listTextHeight , height = listTextHeight })
                row[1].handlers.onClick = function(_, checked)
                    menu.checkbox_blacklist(checked, entry.object64)
                end
                row[2]:setColSpan(7):createText(ColoredIconName , { mouseOverText = "", fontsize = listfonstize, height = listTextHeight })
                row[9]:setColSpan(5):createText(ColoredSectorName , { mouseOverText = "", fontsize = listfonstize - 1, height = listTextHeight })

                if totalrows == maxrows then
                    stationsvisibleHeight = stationstable:getFullHeight()
                end
            end
        end
        
        if stationsvisibleHeight then
            stationstable.properties.maxVisibleHeight = stationsvisibleHeight
        else
            stationstable.properties.maxVisibleHeight = stationstable:getFullHeight()
        end
        
        stationstable.properties.y = centerTable.properties.y + centerTable:getFullHeight() + 2* Helper.borderSize

    end

    --DebugError("menu.selectedRows[options][CenterFrame] = " .. tostring(menu.selectedRows["options"]["CenterFrame"]))
    --DebugError("menu.topRows[options][CenterFrame] = " .. tostring(menu.topRows["options"]["CenterFrame"]))

    if menu.selectedRows["options"]["CenterFrame"] then
        centerTable:setSelectedRow(menu.selectedRows["options"]["CenterFrame"])
        menu.selectedRows["options"]["CenterFrame"] = nil
    end
    if menu.topRows["options"]["CenterFrame"] then
        centerTable:setTopRow(menu.topRows["options"]["CenterFrame"])
        menu.topRows["options"]["CenterFrame"] = nil
    end

    if stationstable then
        
        --DebugError("menu.selectedRows[options][Stations] = " .. tostring(menu.selectedRows["options"]["Stations"]))
        --DebugError("menu.topRows[options][Stations] = " .. tostring(menu.topRows["options"]["Stations"]))
    
        if menu.selectedRows["options"]["Stations"] then
            stationstable:setSelectedRow(menu.selectedRows["options"]["Stations"])
            menu.selectedRows["options"]["Stations"] = nil
        end
        if menu.topRows["options"]["Stations"] then
            stationstable:setTopRow(menu.topRows["options"]["Stations"])
            menu.topRows["options"]["Stations"] = nil
        end
    
    end


end

function menu.createOptionFrame_3_Table(frame)
    
    local row
    local font, fontsize = Helper.standardFont, Helper.standardFontSize
    local map_fontsize = fontsize
    local map_textheight = math.ceil(C.GetTextHeight("Y", font, Helper.scaleFont(font, map_fontsize), Helper.viewWidth)) + 2 * Helper.borderSize
    local buttonHeight = map_textheight 

    local subHeaderTextProperties = {
        halign = "center",
	    fontsize = 10,
	    cellBGColor = { r = 0, g = 0, b = 0, a = 0 },
	    titleColor = config.sColor.cyan
    }
    local subHeaderLeftTextProperties = {
        halign = "left",
	    fontsize = map_fontsize,
	    cellBGColor = { r = 0, g = 0, b = 0, a = 0 },
	    titleColor = config.Color.row_title
    }

    local subLineProperties = {
        fontsize = 1, 
        minRowHeight = 2,
    }
    local subLineTransparentProperties = {
        fontsize = 1, 
        minRowHeight = 2,
        cellBGColor = { r = 0, g = 0, b = 0, a = 0 },
    }

    -- BOTTOM TABLE
    local bottomTable = frame:addTable(3, {
        tabOrder = 5,
        x = Helper.borderSize ,
        width = frame.properties.width - 2 * Helper.borderSize ,
        y = Helper.borderSize  ,
        borderEnabled = true,
        --skipTabChange = false, 
    })

    bottomTable.properties.backgroundID = not debugColorMod and "" or "solid"   
    bottomTable.properties.backgroundColor = not debugColorMod and config.Color["frame_background_semitransparent"] or config.sColor.orange

    row = bottomTable:addRow(true, { fixed = true, bgColor = config.sColor.transparent } )
    local height = math.max(config.mapRowHeight, math.ceil(C.GetTextHeight(ReadText(tPg, 5000), Helper.standardFont, Helper.standardFontSize, row[3]:getWidth())) + Helper.borderSize)
    row[3]:createButton({ height = height  }):setText( ReadText(tPg, 5000) , { halign = "center" }) -- "Restore Default Settings"
    row[3].handlers.onClick = menu.buttonRestoreDefault


    -- RIGHT TABLE
    local rightTable = frame:addTable(9, {
        tabOrder = 4,
        x = Helper.borderSize,
        width = frame.properties.width - 2* Helper.borderSize ,
        y = Helper.borderSize ,
        borderEnabled = true,
        --skipTabChange = false, 

    })

    rightTable:setColWidth(1, map_textheight )
    rightTable:setColWidth(2, map_textheight * 1.2)
    rightTable:setColWidth(3, map_textheight * 1.2)

    rightTable:setColWidth(5, map_textheight)
    rightTable:setColWidth(6, map_textheight)

    rightTable:setColWidth(8, map_textheight)
    rightTable:setColWidth(9, map_textheight )
    --   Kılavuz
    --row = rightTable:addRow(nil, { bgColor = config.sColor.orange })
    --row[1]:setColSpan(1):createText("", subLineProperties)

    rightTable.properties.backgroundID = not debugColorMod and "" or "solid"   
    rightTable.properties.backgroundColor = menu.optionsTableData3.color

    -- Satır Ekle - Başlık Altı Çizili
    row = rightTable:addRow(false, {  })
    row[2]:setColSpan(7):createText(ReadText(tPg, 1260), subHeaderTextProperties)  -- "Attention!"
    row[2].properties.color = config.Color.text_warning
    row[2].properties.titleColor = config.Color.text_inactive
    row = rightTable:addRow(false, {  })
    row[2]:setColSpan(7):createText("  " .. ReadText(tPg, 5035), { color = config.sColor.lightgrey, fontsize = map_fontsize, wordwrap = true } )    -- "If the game is opened in Debug Mode and the options here are activated;"

    row = rightTable:addRow(false, {  })
    row[2]:setColSpan(7):createText("  " .. ReadText(tPg, 5036), { color = config.sColor.lightgrey, fontsize = map_fontsize, titleColor = config.Color.text_inactive, wordwrap = true })    -- "Depending on the number of RFMs and the size of the Fleets, the screen may freeze until the logs are written to file."
    -- ----------------------------------
    rightTable:addEmptyRow()
    -- ----------------------------------
    row = rightTable:addRow(false, {  })
    row[2]:setColSpan(7):createText(ReadText(tPg, 5037), subHeaderTextProperties)  -- "Debugs"
    -- ----------------------------------
    --  DebugChance
    row = rightTable:addRow(true, {  } )
    row[2]:setColSpan(3):createText(ReadText(tPg, 5038), { mouseOverText = ReadText(tPg, 5039), color = config.sColor.lightgrey, fontsize = map_fontsize })  -- "Debug Chance", "Debug Mod. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.DebugChance == 100 and true or false, { width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_DebugChance
    --  DeepDebug
    row = rightTable:addRow(true, {  } )
    row[2]:setColSpan(3):createText(ReadText(tPg, 5040), { mouseOverText = ReadText(tPg, 5041), color = config.sColor.lightgrey, fontsize = map_fontsize })    -- "Deep Debug", "Deep Debug Mod. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.DeepDebug == 100 and true or false, { width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_DeepDebug
    --  ChangesOnFleetDebug
    row = rightTable:addRow(true, {  } )
    row[2]:setColSpan(3):createText(ReadText(tPg, 5042), { mouseOverText = ReadText(tPg, 5043), color = config.sColor.lightgrey, fontsize = map_fontsize })    -- "Changes On Fleet Debug", "It displays the changes on the fleet (addition, removal, assigment change, explosion, undock, etc.) in the debug text file. DebugChance must be turned on. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.ChangesOnFleetDebug == 100 and true or false, { width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_ChangesOnFleetDebug
    --  FleetLockStatusDebug
    row = rightTable:addRow(true, {  } )
    row[2]:setColSpan(3):createText(ReadText(tPg, 5044), { mouseOverText = ReadText(tPg, 5045), color = config.sColor.lightgrey, fontsize = map_fontsize }) -- "Fleet Lock Status", "It displays the changes on the fleet lock status  in the debug text file. DebugChance must be turned on. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.FleetLockStatusDebug == 100 and true or false, { width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_FleetLockStatusDebug
    -- ----------------------------------
    rightTable:addEmptyRow()
    -- ----------------------------------

    row = rightTable:addRow(false, {  })
    row[2]:setColSpan(6):createText(ReadText(tPg, 5046), subHeaderTextProperties)  -- "Debug Files"
    -- ----------------------------------
    --  BuildTasksChance
    row = rightTable:addRow(true, {  } )
    row[2]:setColSpan(3):createText(ReadText(tPg, 5071), { mouseOverText = ReadText(tPg, 5072), color = config.sColor.lightgrey, fontsize = map_fontsize })   -- "Build Tasks Chance", "Detailed breakdown in '_BuildTaskIDs' debugfile. DebugChance must be turned on. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.BuildTasksChance == 100 and true or false, { active = true, width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_BuildTasksChance

    -- ----------------------------------
    rightTable:addEmptyRow()
    -- ----------------------------------

    --  isDebugFileMode
    row = rightTable:addRow(true, {  } )
    row[2]:setColSpan(3):createText(ReadText(tPg, 5047), { mouseOverText = ReadText(tPg, 5048), color = config.sColor.lightgrey, fontsize = map_fontsize })   -- "Debug File Mode", "Enable debug files mode. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.isDebugFileMode, { width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_isDebugFileMode 

    --  DFD.RebuildCues
    row = rightTable:addRow(true, {  } )
    row[3]:setColSpan(2):createText(ReadText(tPg, 5051), { mouseOverText = ReadText(tPg, 5052), color = config.sColor.lightgrey, fontsize = map_fontsize })   -- "All RebuildCues", "Detailed breakdown in _RebuildCues debugfile. DebugChance must be turned on. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.RebuildCues, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_DFD_RebuildCues

    --  DFD.Fleets
    row = rightTable:addRow(true, {  } )
    row[3]:setColSpan(2):createText(ReadText(tPg, 5053), { mouseOverText = ReadText(tPg, 5054), color = config.sColor.lightgrey, fontsize = map_fontsize })   -- "Fleets", "Detailed breakdown in RM_Fleets debugfile. DebugChance must be turned on. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.Fleets, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_DFD_Fleets
    row[7]:setColSpan(1):createText(ReadText(tPg, 5040), { mouseOverText = ReadText(tPg, 5041) .. " " .. ReadText(tPg, 5054), color = config.sColor.lightgrey, fontsize = map_fontsize })   -- "Deep Debug", 
    row[8]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.FleetsDeep, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[8].handlers.onClick = menu.checkbox_DFD_FleetsDeep

    --  DFD.Records
    row = rightTable:addRow(true, {  } )
    row[3]:setColSpan(2):createText(ReadText(tPg, 5055), { mouseOverText = ReadText(tPg, 5056), color = config.sColor.lightgrey, fontsize = map_fontsize })  -- "Records", "Detailed breakdown in RM_xx_FleetRecord debugfile. DebugChance must be turned on. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.Records, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_DFD_Records
    row[7]:setColSpan(1):createText(ReadText(tPg, 5040), { mouseOverText = ReadText(tPg, 5041) .. " " .. ReadText(tPg, 5056), color = config.sColor.lightgrey, fontsize = map_fontsize })   -- "Deep Debug", 
    row[8]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.RecordsDeep, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[8].handlers.onClick = menu.checkbox_DFD_RecordsDeep

    --  DFD.tShipPlan
    row = rightTable:addRow(true, {  } )
    row[4]:setColSpan(1):createText(ReadText(tPg, 5057), { mouseOverText = ReadText(tPg, 5058), color = config.sColor.lightgrey, fontsize = map_fontsize })  -- "Loadout Plan", "Detailed breakdown in RM_xx_FleetRecord debugfile. DebugChance must be turned on. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.tShipPlan, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_DFD_tShipPlan
    row[7]:setColSpan(1):createText(ReadText(tPg, 5040), { mouseOverText = ReadText(tPg, 5041) .. " " .. ReadText(tPg, 5056), color = config.sColor.lightgrey, fontsize = map_fontsize })   -- "Deep Debug", 
    row[8]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.tShipPlanDeep, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[8].handlers.onClick = menu.checkbox_DFD_tShipPlanDeep
    --  DFD.tIndividualInstructions
    row = rightTable:addRow(true, {  } )
    row[4]:setColSpan(1):createText(ReadText(tPg, 5059), { mouseOverText = ReadText(tPg, 5060), color = config.sColor.lightgrey, fontsize = map_fontsize })  -- "Individual Instruction", "Detailed breakdown in RM_xx_FleetRecord debugfile. DebugChance must be turned on. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.tIndividualInstructions, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_DFD_tIndividualInstructions
    row[7]:setColSpan(1):createText(ReadText(tPg, 5040), { mouseOverText = ReadText(tPg, 5041) .. " " .. ReadText(tPg, 5056), color = config.sColor.lightgrey, fontsize = map_fontsize })   -- "Deep Debug", 
    row[8]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.tIndividualInstructionsDeep, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[8].handlers.onClick = menu.checkbox_DFD_tIndividualInstructionsDeep
    --  DFD.tBulkCrew
    row = rightTable:addRow(true, {  } )
    row[4]:setColSpan(1):createText(ReadText(tPg, 5061), { mouseOverText = ReadText(tPg, 5062), color = config.sColor.lightgrey, fontsize = map_fontsize })  -- "Personel", "Detailed breakdown in RM_xx_FleetRecord debugfile. DebugChance must be turned on. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.tBulkCrew, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_DFD_tBulkCrew

    
    -- ----------------------------------
    rightTable:addEmptyRow()
    -- ----------------------------------
    --  DFD.MainCommands
    row = rightTable:addRow(true, {  } )
    row[3]:setColSpan(2):createText(ReadText(tPg, 5049), { mouseOverText = ReadText(tPg, 5050), color = config.sColor.lightgrey, fontsize = map_fontsize })   -- "All Commands", "Detailed breakdown in _RestockMain debugfile. DebugChance must be turned on. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.MainCommands, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_DFD_MainCommands
    row[7]:setColSpan(1):createText(ReadText(tPg, 5040), { mouseOverText = ReadText(tPg, 5041) .. " " .. ReadText(tPg, 5050), color = config.sColor.lightgrey, fontsize = map_fontsize })   -- "Deep Debug", "Detailed breakdown in _RestockMain debugfile. DebugChance must be turned on. It is only effective when running the game with debug mod support."
    row[8]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.MainCommandsDeep, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[8].handlers.onClick = menu.checkbox_DFD_MainCommandsDeep
    -- ----------------------------------
    rightTable:addEmptyRow()
    -- ----------------------------------

    --  DFD.Command
    row = rightTable:addRow(true, {  } )
    row[3]:setColSpan(2):createText(ReadText(tPg, 5063), { mouseOverText = ReadText(tPg, 5064), color = config.sColor.lightgrey, fontsize = map_fontsize })  -- "Command", "Detailed breakdown in RM_xx_Command debugfile. DebugChance must be turned on. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.Command, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_DFD_Command
    row[7]:setColSpan(1):createText(ReadText(tPg, 5040), { mouseOverText = ReadText(tPg, 5041) .. " " .. ReadText(tPg, 5064), color = config.sColor.lightgrey, fontsize = map_fontsize })   -- "Deep Debug", 
    row[8]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.CommandDeep, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[8].handlers.onClick = menu.checkbox_DFD_CommandDeep
    --  DFD.reBuildCue
    row = rightTable:addRow(true, {  } )
    row[3]:setColSpan(2):createText(ReadText(tPg, 5065), { mouseOverText = ReadText(tPg, 5066), color = config.sColor.lightgrey, fontsize = map_fontsize })  -- "reBuildCue", "Detailed breakdown in RM_xx_reBuildCue debugfile. DebugChance must be turned on. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.reBuildCue, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_DFD_reBuildCue
    row[7]:setColSpan(1):createText(ReadText(tPg, 5040), { mouseOverText = ReadText(tPg, 5041) .. " " .. ReadText(tPg, 5066), color = config.sColor.lightgrey, fontsize = map_fontsize })   -- "Deep Debug", 
    row[8]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.reBuildCueDeep, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[8].handlers.onClick = menu.checkbox_DFD_reBuildCueDeep
    --  DFD.reBuild
    row = rightTable:addRow(true, {  } )
    row[3]:setColSpan(2):createText(ReadText(tPg, 5067), { mouseOverText = ReadText(tPg, 5068), color = config.sColor.lightgrey, fontsize = map_fontsize })  -- "reBuild", "Detailed breakdown in RM_xx_reBuild debugfile. DebugChance must be turned on. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.reBuild, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_DFD_reBuild
    row[7]:setColSpan(1):createText(ReadText(tPg, 5040), { mouseOverText = ReadText(tPg, 5041) .. " " .. ReadText(tPg, 5068), color = config.sColor.lightgrey, fontsize = map_fontsize })   -- "Deep Debug", 
    row[8]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.reBuildDeep, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[8].handlers.onClick = menu.checkbox_DFD_reBuildDeep
    --  DFD.reAssignment
    row = rightTable:addRow(true, {  } )
    row[3]:setColSpan(2):createText(ReadText(tPg, 5069), { mouseOverText = ReadText(tPg, 5070), color = config.sColor.lightgrey, fontsize = map_fontsize })  -- "reAssignment", "Detailed breakdown in RM_xx_reAssignment debugfile. DebugChance must be turned on. It is only effective when running the game with debug mod support."
    row[5]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.reAssignment, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[5].handlers.onClick = menu.checkbox_DFD_reAssignment
    row[7]:setColSpan(1):createText(ReadText(tPg, 5040), { mouseOverText = ReadText(tPg, 5041) .. " " .. ReadText(tPg, 5070), color = config.sColor.lightgrey, fontsize = map_fontsize })   -- "Deep Debug", 
    row[8]:setColSpan(1):createCheckBox(menu.editedSettings.DFD.reAssignmentDeep, { active = menu.editedSettings.isDebugFileMode, width = map_textheight, height = map_textheight })
    row[8].handlers.onClick = menu.checkbox_DFD_reAssignmentDeep

    --DebugError("menu.selectedRows[options][RightFrame] = " .. tostring(menu.selectedRows["options"]["RightFrame"]))
    --DebugError("menu.topRows[options][RightFrame] = " .. tostring(menu.topRows["options"]["RightFrame"]))

    if menu.selectedRows["options"]["RightFrame"] then
        rightTable:setSelectedRow(menu.selectedRows["options"]["RightFrame"])
        menu.selectedRows["options"]["RightFrame"] = nil
    end
    if menu.topRows["options"]["RightFrame"] then
        rightTable:setTopRow(menu.topRows["options"]["RightFrame"])
        menu.topRows["options"]["RightFrame"] = nil
    end


    bottomTable.properties.y = frame.properties.height - buttonHeight
    rightTable.properties.maxVisibleHeight = bottomTable.properties.y - Helper.borderSize - rightTable.properties.y

    
end

function menu.refreshMenuFrame(refreshbottombuttons)
    if not menu.createMenuFrameRunning then

        menu.refreshLeftFrame()
        menu.refreshCenterFrame()
        menu.refreshRightFrame()
        if refreshbottombuttons then
            menu.refreshBottomButtons()
        end

    end
end

function menu.refreshLeftFrame()
    if not menu.createLeftFrameRunning then
        if menu.WindowFrameMode == "manager" then
            menu.topRows["manager"]["LeftFrame"] =  GetTopRow(menu.TableID.Fleets)
            menu.selectedRows["manager"]["LeftFrame"] = Helper.currentTableRow[menu.TableID.Fleets]
            
            menu.topRows["manager"]["BottomL"] = GetTopRow(menu.TableID.BottomL)
            menu.selectedRows["manager"]["BottomL"] = Helper.currentTableRow[menu.TableID.BottomL]
            menu.selectedCols["manager"]["BottomL"] = Helper.currentTableCol[menu.TableID.BottomL]
        else
            menu.topRows["options"]["LeftFrame"] = GetTopRow(menu.TableID.Options.Left)
            menu.selectedRows["options"]["LeftFrame"] = Helper.currentTableRow[menu.TableID.Options.Left]
        end
        menu.createLeftFrame()
    end
end

function menu.refreshCenterFrame()
    if not menu.createCenterFrameRunning then
        if menu.WindowFrameMode == "manager" then
            menu.topRows["manager"]["CenterFrame"] = GetTopRow(menu.TableID.Ships)
            menu.selectedRows["manager"]["CenterFrame"] = Helper.currentTableRow[menu.TableID.Ships]

            menu.topRows["manager"]["BottomR"] = GetTopRow(menu.TableID.BottomR)
            menu.selectedRows["manager"]["BottomR"] = Helper.currentTableRow[menu.TableID.BottomR]
            menu.selectedCols["manager"]["BottomR"] = Helper.currentTableCol[menu.TableID.BottomR]
        else
            menu.topRows["options"]["CenterFrame"] = GetTopRow(menu.TableID.Options.Center)
            menu.selectedRows["options"]["CenterFrame"] = Helper.currentTableRow[menu.TableID.Options.Center]

            menu.topRows["options"]["Stations"] = GetTopRow(menu.TableID.Options.Stations)
            menu.selectedRows["options"]["Stations"] = Helper.currentTableRow[menu.TableID.Options.Stations]
        end
        menu.createCenterFrame()
    end
end

function menu.refreshRightFrame(setrow, setcol)
    if not menu.createRightFrameRunning then
        if menu.WindowFrameMode == "manager" then
            
            menu.topRows["manager"]["RightFrame"] = menu.topRows["manager"]["RightFrame"] or GetTopRow(menu.TableID["Records" .. menu.RightFrameMode] )
            if not menu.changedShipRow then
                menu.selectedRows["manager"]["RightFrame"] = setrow or Helper.currentTableRow[menu.TableID["Records" .. menu.RightFrameMode]]
                menu.selectedCols["manager"]["RightFrame"] = setcol or Helper.currentTableCol[menu.TableID["Records" .. menu.RightFrameMode]]
                if menu.TableID.orderHeaderTable and menu.lastactivetable == menu.TableID.orderHeaderTable then
                    menu.selectedRows["manager"]["orderHeaderTable"] = menu.selectedRows["manager"]["orderHeaderTable"] or Helper.currentTableRow[menu.TableID.orderHeaderTable] or 1
                    menu.selectedCols["manager"]["orderHeaderTable"] = menu.selectedCols["manager"]["orderHeaderTable"] or Helper.currentTableCol[menu.TableID.orderHeaderTable]
                end
            else
                menu.selectedRows["manager"]["RightFrame"] = nil
                --menu.topRows["manager"]["RightFrame"] = nil
                menu.selectedCols["manager"]["RightFrame"] = nil
            end
            --DebugError(" menu.changedShipRow = " .. tostring(menu.changedShipRow) .. " , menu.RightFrameMode = ".. tostring(menu.RightFrameMode) ..  " , menu.selectedRows.manager.RightFrame = " .. tostring(menu.selectedRows.manager.RightFrame) )
            menu.changedShipRow = nil
        else
            menu.topRows["options"]["RightFrame"] = menu.topRows["options"]["RightFrame"] or GetTopRow(menu.TableID.Options.Right)
            menu.selectedRows["options"]["RightFrame"] = setrow or menu.selectedRows["options"]["RightFrame"] or Helper.currentTableRow[menu.TableID.Options.Right]
            menu.selectedCols["options"]["RightFrame"] = setcol or menu.selectedCols["options"]["RightFrame"] or Helper.currentTableCol[menu.TableID.Options.Right]
        end
        menu.createRightFrame()
    end
end

function menu.RefreshOptionsFrame()
    if not menu.createCenterFrameRunning then
        if menu.WindowFrameMode == "manager" then
            menu.selectedRows["manager"]["CenterFrame"] = Helper.currentTableRow[menu.CenterFrameData.ShipsTableID]
            menu.topRows["manager"]["CenterFrame"] = GetTopRow(menu.CenterFrameData.ShipsTableID)
        else

            --menu.selectedRows["options"]["LeftFrame"] = Helper.currentTableRow[menu.TableID.Options.Left]
            --menu.topRows["options"]["LeftFrame"] = GetTopRow(menu.TableID.Options.Left)
            menu.selectedRows["options"]["CenterFrame"] = Helper.currentTableRow[menu.TableID.Options.Center]
            menu.topRows["options"]["CenterFrame"] = GetTopRow(menu.TableID.Options.Center)
            menu.selectedRows["options"]["Stations"] = Helper.currentTableRow[menu.TableID.Options.Stations]
            menu.topRows["options"]["Stations"] = GetTopRow(menu.TableID.Options.Stations)
            --menu.selectedRows["options"]["RightFrame"] = Helper.currentTableRow[menu.TableID.Options.Right]
            --menu.topRows["options"]["RightFrame"] = GetTopRow(menu.TableID.Options.Right)
    
        end
        menu.createCenterFrame()
    end 
end

--[[
function menu.createManagerTables()

    local frame = menu.infoFrame

    local borderSize = Helper.borderSize  
    local usablewidth = frame.properties.width 

    local row
    local keywidth = C.GetTextWidth("999", Helper.headerRow1Font,
    Helper.scaleFont(Helper.headerRow1Font, Helper.headerRow1FontSize)) + 2 * (Helper.headerRow1Offsetx + borderSize)

    --
    -- Fleet TABLE
    --
    local offsetx = 0
    local offsety = 0
    local width = menu.fleetsTableData.width
    menu.fleetTable, menu.sorterTable = menu.createRFMFleetTable(frame, offsetx, offsety, width)

    --
    -- FleetShips TABLE
    --

    offsetx = menu.Selected.x -- menu.sorterTable.properties.x + menu.sorterTable.properties.width + 2 * borderSize
    offsety = 0
    width = menu.Selected.width
    --height = menu.fleetTable.properties.y + menu.fleetTable.properties.height
    menu.fleetShipsTable = menu.createRFMFleetShipsTable(frame, offsetx, offsety, width)


    

    --menu.fleetTable.properties.defaultInteractiveObject = true

    --    
    -- Right Status Table
    --
    --offsetx = menu.rightTableData.x --menu.fleetShipsTable.properties.x + menu.fleetShipsTable.properties.width + 2 * borderSize
    --offsety = 0 -- borderSize
    --width =  menu.rightTableData.width -- usablewidth - (offsetx)  - 1 * borderSize 
    --menu.rightTable = menu.createRFMRightTable(frame, offsetx, offsety, width)
    --menu.rightTable = menu.createRFMRightTable2(frame, offsetx, offsety, width)

    --
    -- TABLE BOTTOM 
    --
    -- bottomTable TABLE
    --
    menu.bottomLTable, menu.bottomRTable = menu.createRFMFBottomTable(frame, menu.fleetTable.properties, menu.fleetShipsTable.properties )
    
    -- Table y konumlarını ayarla
    offsety = menu.bottomLTable:getVisibleHeight()
    menu.bottomLTable.properties.y = frame.properties.height - borderSize - offsety
    menu.bottomRTable.properties.y = menu.bottomLTable.properties.y
    menu.fleetTable.properties.maxVisibleHeight = menu.bottomLTable.properties.y - menu.fleetTable.properties.y 
    menu.fleetShipsTable.properties.maxVisibleHeight = menu.bottomLTable.properties.y 

    -- (table.index i atanacak)
    -- UP prevTable (ilk satırda basıldığında), DOWN nextTable (en son staırda basıldığında)
    -- LEFT prevHorizontalTable ,               RIGHT nextHorizontalTable (en son staırda basıldığında)
    menu.sorterTable.properties.prevTable = menu.bottomLTable.index
    menu.sorterTable.properties.nextTable = menu.fleetTable.index
    menu.sorterTable.properties.nextHorizontalTable = menu.fleetShipsTable.index
    menu.fleetTable.properties.prevTable = menu.sorterTable.index
    menu.fleetTable.properties.nextTable = menu.bottomLTable.index
    menu.fleetTable.properties.nextHorizontalTable = menu.fleetShipsTable.index
    menu.fleetShipsTable.properties.prevHorizontalTable = menu.fleetTable.index
    --menu.fleetShipsTable.properties.prevTable = menu.sorterTable.index
    --menu.fleetShipsTable.properties.nextTable = menu.bottomLTable.index
    menu.bottomLTable.properties.prevTable = menu.fleetTable.index
    menu.bottomLTable.properties.nextTable = menu.sorterTable.index

end
]]

function menu.createRFMFleetTable(frame)

    --
    -- SORTER TAB TABLE
    --
    local framewidth = frame.properties.width
    local tabtable
    local maxNumCategoryColumns =  math.floor((framewidth - 2* Helper.borderSize) / 40)
	if maxNumCategoryColumns > Helper.maxTableCols then
		maxNumCategoryColumns = Helper.maxTableCols
	end
    -- "sort by:", "rfm keys", "size", "name", 
    -- "sector", "Damaged", "Autobuild", "RebuildTimer"
    local numOfSorterColumns = 4 
    local colSpanPerSorterColumn = math.floor(maxNumCategoryColumns / numOfSorterColumns)

    tabtable = frame:addTable(maxNumCategoryColumns, {
        tabOrder = 1, 
        reserveScrollBar = false,
        x = Helper.borderSize,
        width = framewidth - 1 * Helper.borderSize ,
        backgroundID = debugColorMod and "solid" or "",
        backgroundColor = debugColorMod and config.sColor.turquoiseblue or config.sColor.transparent,
    })
    
    local x = false and DebugError(string.format([[ 
        framewidth = %s
        numOfSorterColumns = %s 
        math.floor((frame.properties.width - 2* Helper.borderSize) / 40) = %s
        ((framewidth - 2* Helper.borderSize) / 40) = %s
        maxNumCategoryColumns %s
        colSpanPerSorterColumn = %s
        tabtable.properties.width = %s
        ]], 
        framewidth,
        numOfSorterColumns, 
        math.floor((framewidth - 2* Helper.borderSize) / 40),
        ((framewidth - 2* Helper.borderSize) / 40),
        maxNumCategoryColumns,
        colSpanPerSorterColumn ,
        tabtable.properties.width
    )  )

    local fixed = true
    if maxNumCategoryColumns > 0 then
        --[[
            for i = 1, maxNumCategoryColumns do
                tabtable:setColWidth(i, 40, false)
            end
            local diff = tabtable.properties.width - maxNumCategoryColumns * (40 + Helper.borderSize)
            tabtable:setColWidth(maxNumCategoryColumns, 40 + diff, false)
        ]]
        -- Frame Tittle  "Active RFM Fleets"
        local row = tabtable:addRow(false, { fixed = fixed , bgColor = config.sColor.transparent } )
        row[1]:setColSpan(maxNumCategoryColumns):createText(ReadText(tPg, 6000), { halign = "center", font = Helper.headerRow1Font, fontsize = Helper.headerRow1FontSize } )    -- "Active RFM Fleets"
        row = tabtable:addRow(false, { fixed = fixed, bgColor = config.sColor.grey } )
        row[1]:setColSpan(maxNumCategoryColumns):createText("", { height = 1 } )
    
        -- sorter row
        local row = tabtable:addRow(true, { fixed = fixed, bgColor = config.sColor.transparent })

        -- "sort by"
        --row[1]:setColSpan(colSpanPerSorterColumn):createText(ReadText(tPg, 6005) .. ReadText(1001, 120))   -- "Sort by", ":"
        local buttonheight = Helper.scaleY(config.mapRowHeight)
        -- "rfm key"
        local sorterColumn = 1
        local tableColumn = (sorterColumn - 1) * colSpanPerSorterColumn + 2
        local button = row[tableColumn]:setColSpan(colSpanPerSorterColumn):createButton({ scaling = false, height = buttonheight }):setText(ReadText(tPg, 6010), { halign = "center", scaling = true }) -- RFM Key
        if menu.propertySorterType == "id" then
            button:setIcon("table_arrow_inv_down", { width = buttonheight, height = buttonheight, x = button:getColSpanWidth() - buttonheight })
        elseif menu.propertySorterType == "idinverse" then
            button:setIcon("table_arrow_inv_up", { width = buttonheight, height = buttonheight, x = button:getColSpanWidth() - buttonheight })
        end
        row[tableColumn].handlers.onClick = function () return menu.buttonPropertySorter("id") end
		-- "size"
		local sorterColumn = 2
		local tableColumn = (sorterColumn - 1) * colSpanPerSorterColumn + 2
		local button = row[tableColumn]:setColSpan(colSpanPerSorterColumn):createButton({ scaling = false, height = buttonheight }):setText(ReadText(tPg, 6011), { halign = "center", scaling = true }) -- Size
		if menu.propertySorterType == "class" then
			button:setIcon("table_arrow_inv_down", { width = buttonheight, height = buttonheight, x = button:getColSpanWidth() - buttonheight })
		elseif menu.propertySorterType == "classinverse" then
            button:setIcon("table_arrow_inv_up", { width = buttonheight, height = buttonheight, x = button:getColSpanWidth() - buttonheight })
		end
        row[tableColumn].handlers.onClick = function () return menu.buttonPropertySorter("class") end
		-- "name"
		sorterColumn = 3
		tableColumn = (sorterColumn - 1) * colSpanPerSorterColumn + 2
		local button = row[tableColumn]:setColSpan(colSpanPerSorterColumn):createButton({ scaling = false, height = buttonheight }):setText(ReadText(tPg, 6012), { halign = "center", scaling = true }) -- Name
		if menu.propertySorterType == "name" then
			button:setIcon("table_arrow_inv_down", { width = buttonheight, height = buttonheight, x = button:getColSpanWidth() - buttonheight })
		elseif menu.propertySorterType == "nameinverse" then
			button:setIcon("table_arrow_inv_up", { width = buttonheight, height = buttonheight, x = button:getColSpanWidth() - buttonheight })
		end
		row[tableColumn].handlers.onClick = function () return menu.buttonPropertySorter("name") end
		-- "sector"
		sorterColumn = 4
		tableColumn = (sorterColumn - 1) * colSpanPerSorterColumn + 2
		button = row[tableColumn]:setColSpan(colSpanPerSorterColumn):createButton({ scaling = false, height = buttonheight }):setText(ReadText(tPg, 1210), { halign = "center", scaling = true })   -- Sector
		if menu.propertySorterType == "sector" then
			button:setIcon("table_arrow_inv_down", { width = buttonheight, height = buttonheight, x = button:getColSpanWidth() - buttonheight })
		elseif menu.propertySorterType == "sectorinverse" then
			button:setIcon("table_arrow_inv_up", { width = buttonheight, height = buttonheight, x = button:getColSpanWidth() - buttonheight })
		end
		row[tableColumn].handlers.onClick = function () return menu.buttonPropertySorter("sector") end
		
        local row = tabtable:addRow(true, { fixed = fixed, bgColor = config.sColor.transparent })
        -- "damaged (Locked fleet)"
		sorterColumn = 1
		tableColumn = (sorterColumn - 1) * colSpanPerSorterColumn + 2
		button = row[tableColumn]:setColSpan(colSpanPerSorterColumn):createButton({ scaling = false, height = buttonheight }):setText(ReadText(tPg, 6013), { halign = "center", scaling = true })   -- "Damaged"
		if menu.propertySorterType == "locked" then
			button:setIcon("table_arrow_inv_down", { width = buttonheight, height = buttonheight, x = button:getColSpanWidth() - buttonheight })
		elseif menu.propertySorterType == "lockedinverse" then
			button:setIcon("table_arrow_inv_up", { width = buttonheight, height = buttonheight, x = button:getColSpanWidth() - buttonheight })
		end
		row[tableColumn].handlers.onClick = function () return menu.buttonPropertySorter("locked") end
        -- "Autobuild"
		sorterColumn = 2
		tableColumn = (sorterColumn - 1) * colSpanPerSorterColumn + 2
		button = row[tableColumn]:setColSpan(colSpanPerSorterColumn):createButton({ scaling = false, height = buttonheight }):setText(ReadText(tPg, 6014), { halign = "center", scaling = true })   -- "Autobuild"
		if menu.propertySorterType == "autobuild" then
			button:setIcon("table_arrow_inv_down", { width = buttonheight, height = buttonheight, x = button:getColSpanWidth() - buttonheight })
		elseif menu.propertySorterType == "autobuildinverse" then
			button:setIcon("table_arrow_inv_up", { width = buttonheight, height = buttonheight, x = button:getColSpanWidth() - buttonheight })
		end
		row[tableColumn].handlers.onClick = function () return menu.buttonPropertySorter("autobuild") end
        -- "Rebuild Timer"
		sorterColumn = 3
		tableColumn = (sorterColumn - 1) * colSpanPerSorterColumn + 2
		button = row[tableColumn]:setColSpan(colSpanPerSorterColumn):createButton({ scaling = false, height = buttonheight }):setText(ReadText(tPg, 6015), { halign = "center", scaling = true })   -- "Rebuild Timer"
		if menu.propertySorterType == "rebuildtimer" then
			button:setIcon("table_arrow_inv_down", { width = buttonheight, height = buttonheight, x = button:getColSpanWidth() - buttonheight })
		elseif menu.propertySorterType == "rebuildtimerinverse" then
			button:setIcon("table_arrow_inv_up", { width = buttonheight, height = buttonheight, x = button:getColSpanWidth() - buttonheight })
		end
		row[tableColumn].handlers.onClick = function () return menu.buttonPropertySorter("rebuildtimer") end

    end
    -- Kılavuz 
    --local row = tabtable:addRow(false, { fixed = true, bgColor = config.sColor.darkgrey } )
    --row[1]:setColSpan(1):createText("", { height = 1})



    -- Fleet Table
    local row, ftable
    local keywidth = C.GetTextWidth("99", Helper.headerRow1Font,
    Helper.scaleFont(Helper.headerRow1Font, Helper.headerRow1FontSize)) + 2 * (Helper.headerRow1Offsetx + Helper.borderSize)
    --
    -- Fleet TABLE
    --
    ftable = frame:addTable(6, {
        tabOrder = 2,
        x = Helper.borderSize,
        --y = tabtable.properties.y + tabtable:getFullHeight() + 2 * Helper.borderSize,
        width = frame.properties.width - 2* Helper.borderSize ,
        multiSelect = false,
        borderEnabled = true,
        -- backgroundColor satırlarını daha sonra kaldır
        backgroundID = "solid",
        backgroundColor = debugColorMod and config.sColor.purple or config.sColor.transparent,

    })

    ftable:setColWidth(1, keywidth)
    ftable:setColWidth(2, 1.5 * Helper.standardTextHeight)
    -- 3 de isim olacak, kalan boşluğu alacak
    ftable:setColWidth(4, 1.5 * Helper.standardTextHeight)
    ftable:setColWidth(5, 1.5 * Helper.standardTextHeight)
    ftable:setColWidth(6, 1.5 * Helper.standardTextHeight)

    -- Kılavuz 
    --row = ftable:addRow(false, { fixed = true, bgColor = config.sColor.orange } )
    --row[1]:setColSpan(1):createText("", { height = 1})

    ftable:setDefaultBackgroundColSpan(1, 6)

    if menu.setdefaulttable then
        ftable.properties.defaultInteractiveObject = true
        menu.setdefaulttable = nil
    end

    --
    -- fill in Fleet TABLE
    --
    menu.fillin_RFMFleetTable(ftable)


    -- 
    -- BOTTOM Buttons TABLE
    --local bottomTable = menu.createRFMBottomTable1(frame, Helper.borderSize, Helper.borderSize, frame.properties.width - 2 * Helper.borderSize)

    -- Table y konumlarını ayarla
    tabtable.properties.y = Helper.borderSize
    local ftableY = tabtable.properties.y + tabtable:getFullHeight() + 2 * Helper.borderSize
    ftable.properties.y = ftableY + 1 * Helper.borderSize
    --bottomTable.properties.y = frame.properties.height - bottomTable:getVisibleHeight()
    
    
    --ftable.properties.maxVisibleHeight = frame.properties.height - ftableY   -- menu.bottomBarTable.properties.y - ftable.properties.y + 4* Helper.borderSize
    --DebugError(" bottomTable:getVisibleHeight() = " .. tostring(bottomTable:getVisibleHeight()))



    local xdebug = debug2 and DebugError("menu.selectedRows[manager][LeftFrame] = " .. tostring(menu.selectedRows["manager"]["LeftFrame"]) .. " , menu.Selected.fleetID = " .. tostring(menu.Selected.fleetID))
    local xdebug = debug2 and DebugError("menu.topRows[manager][LeftFrame] = " .. tostring(menu.topRows["manager"]["LeftFrame"]))


end
function menu.fillin_RFMFleetTable(ftable)
    
    
    table.sort(menu.Fleets, menu.componentSorter(menu.propertySorterType))

    --
    -- fill fleet Table
    --
    local row
    local numlines = 0
    -- entries
    if #menu.Fleets > 0 then
        for i, entry in ipairs(menu.fleetcategories) do
            

            if #entry.fleetkeys > 0 then
                -- category header
                row = ftable:addRow(false, {  bgColor = config.sColor.transparent60 } ) 
                -- Helper.subHeaderTextProperties
                row[1]:setColSpan(6):createText(entry.name, Helper.headerRowCenteredProperties ) -- Kategori Adı - Ship Fleets or Station Fleets
                row[1].properties.halign = "center"

                -- category fleets
                for i, fleetkey in ipairs(entry.fleetkeys) do
                    
                    if i == 1 and (not menu.Selected or menu.Selected.fleetID == 0 or menu.Selected.shipID == 0) then
                        
                        menu.Selected.fleetID = fleetkey
                        menu.Selected.shipID = 1
                        menu.Selected.selectedGroup = nil
                        menu.Selected.strComponent = menu.Convert_ID_To_StrComponent(menu.Selected.fleetID, menu.Selected.shipID)
                        menu.highlightedbordercomponent = menu.Selected.strComponent
                        menu.forcefocusfleetID = menu.Selected.fleetID
                        menu.changedFleet = true
                
                    end

                    local row = menu.add_RFMFleetTable_FleetEntry(ftable, fleetkey)

                    if ftable:getFullHeight() == ftable:getVisibleHeight() then
                        numlines = numlines + 1
                    end
                    --DebugError("numlines = " .. tostring(numlines) .. " , i =" .. tostring(i) .. " , getVisibleHeight = " .. tostring(ftable:getVisibleHeight()) .. " , getFullHeight = " .. tostring(ftable:getFullHeight()))
    
                end


            else
                --row = ftable:addRow("none", { bgColor = config.sColor.transparent })
                --row[1]:setColSpan(6):createText( config.nonetext , { halign = "center", color = config.Color.text_inactive })   -- None
            end


        end


    else 
        local row = ftable:addRow("none", { bgColor = config.sColor.transparent })
        row[1]:setColSpan(6):createText( config.nonetext , { halign = "center", color = config.Color.text_inactive })   -- None
    end

    local firstCategoryRow = 1
    -- satır yazıldıktan sonra oluşan tablenin full yükseklik değeri (y konumu da eklenmeli) alt tablenin y pozisyonu geçerse basılan satır sayısı saymayı bırakacak.
    -- Tıklanamayan satır sayısı = 1 (Kategori satırı)
    -- Tıklanabilir, En üst Satır İndexi = 2, En alt satır indexi = 11 (tıklanamayan satırlar ekli), topIndex = 1 (tıklanmayanları da içerir)
    -- görünmeyen satırdan sonraki satırları en ütte kalacak şekilde çekmek için 11 den büyük olma durumunda (setselectedrow - (11 - görünmeyen satır sayısı) )
    local settoprow = menu.topRows["manager"]["LeftFrame"]
    local setselectedrow = menu.selectedRows["manager"]["LeftFrame"]
    --DebugError("Create: numlines = " .. tostring(numlines) .. " menu.topRows[manager][LeftFrame] = " .. tostring(settoprow) .. " , setselectedrow = " .. tostring(setselectedrow))
    settoprow = ((not settoprow) or (settoprow == 0)) and ((setselectedrow and setselectedrow > (numlines + firstCategoryRow) ) and (setselectedrow - math.ceil(numlines/2)) or 1) or settoprow
    ftable:setTopRow(settoprow)
    ftable:setSelectedRow(setselectedrow)
    menu.selectedRows["manager"]["LeftFrame"] = nil
    menu.topRows["manager"]["LeftFrame"] = nil

end
function menu.add_RFMFleetTable_FleetEntry(ftable, fleetkey)

    local fleet = menu.GetFleet(fleetkey)
    
    local sectorid = fleet.sectorid
    local sector = fleet.sector

    local font, fontsize = Helper.standardFont, Helper.standardFontSize

    local bgColor = config.sColor.transparent

    bgColor = (menu.Selected.fleetID == fleet.id) and config.selectedRowBgColor or bgColor
    local row = ftable:addRow( fleet.id  , { bgColor = bgColor })   --{ bgColor = bgColor }
    

    if menu.Selected.fleetID == fleet.id then
        menu.selectedRows["manager"]["LeftFrame"] = row.index
        if menu.forcefocusfleetID == fleet.id then
            menu.topRows["manager"]["LeftFrame"] = row.index
            menu.forcefocusfleetID = nil
        end
        
    end
    
    local object64 = ConvertStringTo64Bit(tostring(fleet.object))
    local currentordericon, currentorderrawicon, currentordercolor, currentordername, currentorderdescription, currentorderisoverride, currentordermouseovertext, targetname, behaviouricon, behaviourrawicon, behaviourname, behaviourdescription = "", "", nil, "", "", false, nil, nil, "", "", "", ""
    if C.IsComponentClass(object64, "ship") then
        currentordericon, currentorderrawicon, currentordercolor, currentordername, currentorderdescription, currentorderisoverride, currentordermouseovertext, targetname, behaviouricon, behaviourrawicon, behaviourname, behaviourdescription = menu.getOrderInfo(object64, true)
    end
    
    local fleetcolor = menu.holomapcolor.playercolor
    if object64 == C.GetPlayerObjectID() then
        fleetcolor = menu.holomapcolor.currentplayershipcolor
    end

    local isdocked = fleet.isdocked
    local locationtext = fleet.locationtext
    local normalrowcolor = fleetcolor
    local color = tonumber(fleet.alertstatus.level) > 1 and fleet.color or normalrowcolor
    local icon = fleet.icon
    
    local textheight = C.GetTextHeight(" \n ", font, Helper.scaleFont(font, fontsize), Helper.viewWidth)
    
    --DebugError(" textheight = " .. tostring(textheight) .. " row[1] = " .. tostring(row[1].properties.height) )
    local mouseovertext = tonumber(fleet.alertstatus.level) > 1 and ReadText(tPg, 6021) .. ReadText(1001, 120) .. "\n" .. Helper.convertColorToText(color) .. fleet.alertstatus.text or ""   -- "Alert Status", ":"    
    if fleet.isStation then
        row[2]:createIcon(icon, { scaling = false, y= 0  , width = row[2]:getWidth() , height = row[2]:getWidth(), color = color, mouseOverText = mouseovertext})
    else
        row[2]:createText(string.format("\027[%s]", icon), { color = color, mouseOverText = mouseovertext } )
    end

    row[1]:createText(fleet.id, { color = config.sColor.white, scaling = true, fontsize = fontsize, y = (textheight - Helper.titleHeight) / 2, halign = "right" } )
    -- debugW

    -- icon "rfm_restart"
    local rebuildtimercolor = config.Color.text_success
    local mouseovertextrebuildtimer = Helper.convertColorToText(config.sColor.white) .. "[ " .. ReadText(tPg, 6050) .. " : " .. string.format("%s%s\027X", Helper.convertColorToText(config.Color.text_success), ReadText(tPg, 1340)) .. " ] "      -- "Rebuild Timer Status", "ON",  .. ReadText(tPg, 6051) "Rebuild check timers are active. If it is turned off, the ships waiting for Rebuild in the {1134010, 500} will turn into lost ship status."
    local rebuildtimericon = string.format("\027[%s]", "rfm_restart")
    if not fleet.rebuildtimerstatus then
        rebuildtimercolor = config.Color.text_inactive
        mouseovertextrebuildtimer = Helper.convertColorToText(config.sColor.white) .. "[ " .. ReadText(tPg, 6050) .. " : " .. string.format("%s%s\027X", Helper.convertColorToText(config.Color.text_hostile), ReadText(tPg, 1341)) .. " ] "   -- "Rebuild Timer Status", "OFF", .. ReadText(tPg, 6052) "Rebuild check timers are disabled. If turned on, {1134010, 500} will restart and Rebuild countdown timers will be enabled."
    end

    -- icon "rfm_autobuild"
    local autobuildcolor = config.Color.text_success
    local mouseovertextautobuild = Helper.convertColorToText(config.sColor.white) .. "[ " .. ReadText(tPg, 6026) .. " : " .. string.format("%s%s\027X", Helper.convertColorToText(config.Color.text_success), ReadText(tPg, 1340)) .. " ] "      -- "Autobuild Status", "ON",  .. ReadText(tPg, 6027) "When the ship belonging to this RFM destroyed, the rebuild process will be started automatically."
    local autobuildicon = string.format("\027[%s]", "rfm_autobuild")
    if not fleet.autobuild then
        autobuildcolor = config.Color.text_inactive
        mouseovertextautobuild = Helper.convertColorToText(config.sColor.white) .. "[ " .. ReadText(tPg, 6026) .. " : " .. string.format("%s%s\027X", Helper.convertColorToText(config.Color.text_hostile), ReadText(tPg, 1341)) .. " ] "   -- "Autobuild Status", "OFF", .. ReadText(tPg, 6028) "When the ship belonging to this RFM destroyed, the rebuild process will NOT be started automatically."
    end
    mouseovertext = mouseovertext .. (mouseovertext ~= "" and "\n" or "") .. mouseovertextautobuild .. "\n" .. mouseovertextrebuildtimer

    local alldeadstring = "   {   " .. ReadText(tPg, 6020) .. "   }"    -- "All Ships are DEAD"
    local fleetname = ((fleet.name == "") and fleet.commander.name or fleet.name)
    local idcode = (fleet.object64 ~= 0) and fleet.idcode or alldeadstring

    --local n = C.GetNumAllFleetUnits(object64)
    local autobildstring = Helper.convertColorToText(autobuildcolor) .. autobuildicon .. "\27X"
    local rebuildtimerstring = Helper.convertColorToText(rebuildtimercolor) .. rebuildtimericon .. "\27X"
    local isfleetlead
    if tonumber(X4VerStr) < 7.50 then
        isfleetlead = false
    else
        isfleetlead = object64 ~=0 and GetComponentData(object64, "isfleetlead")
    end
    local fleetunitreplacementstring = isfleetlead and Helper.convertColorToText(config.Color.text_criticalerror) .. " \27[menu_hammer]\27X" or ""
    local shipnameid = Helper.convertColorToText(normalrowcolor) .. (fleetname .. " " .. idcode) .. "\27X" 
    local name = autobildstring .. " " .. rebuildtimerstring .. " " .. fleetunitreplacementstring .. " " .. shipnameid
    
    -- ReadText(tPg, 6053) "Via lost ship replacement is used."
    -- ReadText(tPg, 6054) "Use only one method."
    mouseovertext = mouseovertext .. (isfleetlead and "\n" .. Helper.convertColorToText(config.Color.text_criticalerror) .. ReadText(tPg, 6053) .. "\n" .. ReadText(tPg, 6054) or "")
    row[3]:createText((name .. ((debugW) and "   { row ".. tostring(row.index) .. " }" or "" ) ), { mouseOverText = mouseovertext  } )

    local Icon_OrderIconsGrp = row[4]:setColSpan(3):createIcon("solid", { scaling = false, color = { r = 0, g = 0, b = 0, a = 1 }, height = textheight })

    local mouseovertext = menu.GetMouseOverTextFromOrderIcons(currentordericon, currentordername, currentorderdescription, currentordermouseovertext, targetname, behaviouricon, behaviourname, behaviourdescription, isdocked )
    
    Icon_OrderIconsGrp.properties.mouseOverText = mouseovertext

    Icon_OrderIconsGrp:setText(
        currentorderisoverride
        and 
            function () return 
                --menu.overrideOrderIcon(currentordercolor, true, currentorderrawicon )
            menu.noneOverrideOrderIcon( menu.overrideOrderIcon(currentordercolor, true, currentorderrawicon) , behaviouricon, isdocked, sectorid)
            end
        or  
            function () return 
                menu.noneOverrideOrderIcon(currentordericon, behaviouricon, isdocked, sectorid)
            end
        , { scaling = true, font = font, halign = "right", x = Helper.standardTextOffsetx }
            
    )
    return row
end

function menu.createRFMFleetShipsTable(frame, offsetx, offsety, width)
    local row, ftable
    local doubleTextheight = C.GetTextHeight(" \n ", Helper.headerRow1Font, Helper.scaleFont(Helper.headerRow1Font, Helper.headerRow1FontSize), Helper.viewWidth)
    local singleTextheight = C.GetTextHeight("99", Helper.headerRow1Font, Helper.scaleFont(Helper.headerRow1Font, Helper.headerRow1FontSize), Helper.viewWidth)

    --local keywidth = C.GetTextWidth("999", Helper.headerRow1Font,
    --Helper.scaleFont(Helper.headerRow1Font, Helper.headerRow1FontSize)) + 2 * (Helper.headerRow1Offsetx + Helper.borderSize)
    menu.shipIconWidth = menu.getShipIconWidth()  -- Helper.headerRow1Font, Helper.headerRow1FontSize

    --
    -- FleetShips TABLE
    -- 
    -- on/off , name,   , location, 3x ordericons, hullbar
    ftable = frame:addTable(7, {
        tabOrder = 4,
        x = Helper.borderSize,
        width = frame.properties.width - 2* Helper.borderSize ,
		backgroundID = "solid",
		backgroundColor =  config.sColor.transparent,
    })

    if menu.setdefaulttableCenter then
        ftable.properties.defaultInteractiveObject = true
        menu.setdefaulttableCenter = nil
    end
    
    ftable:setColWidth(1, menu.shipIconWidth)
	ftable:setColWidth(3, 0.07 * frame.properties.width)
    for i = 1, 3 do
        ftable:setColWidth(4 + i - 1, menu.shipIconWidth, true)
    end
    ftable:setColWidth(7 , menu.shipIconWidth, false)

    -- Kılavuz 
    --row = ftable:addRow(false, { fixed = true, bgColor = config.sColor.orange } )
    --row[1]:setColSpan(1):createText("", { height = 1})

    ftable:setDefaultBackgroundColSpan(1, 7)

    -- Kılavuz 
    --local row = ftable:addRow(false, { fixed = true, bgColor = config.sColor.orange } )
    --row[1]:setColSpan(1):createText("", {})

    -- liste başı sadece real fleet commander olacak. parametre kullanılmayacak
    local fleetleaderShips = menu.Convert_ID_To_StrComponent(menu.Selected and menu.Selected.fleetID or 0 , 1)   
    

	local numdisplayed = 0
	local maxvisibleheight = ftable:getFullHeight()

    numdisplayed = menu.createPropertySection(ftable, fleetleaderShips, numdisplayed, "id")

    local xdebug = debug2 and DebugError("menu.selectedRows[manager][CenterFrame] = " .. tostring(menu.selectedRows["manager"]["CenterFrame"]))
    local xdebug = debug2 and DebugError("menu.topRows[manager][CenterFrame] = " .. tostring(menu.topRows["manager"]["CenterFrame"]))

    -- menu.selectedRows["manager"]["CenterFrame"] de değer ancak genel refresh yaptırdıysak kullanılacak, fleet row değişikliği, manager - options ekran değişikliği gibi
    -- bu yüzden özel durumlar için bu değeri sethighlightborderrow ataması yaptığımız yerde direk nil'lemek gerekiyor, böylece özel durum için else kısmı çalışacak (sethighlightborderrow)
    if menu.selectedRows["manager"]["CenterFrame"] then
        ftable:setSelectedRow(menu.selectedRows["manager"]["CenterFrame"])
        menu.selectedRows["manager"]["CenterFrame"] = nil
        if menu.topRows["manager"]["CenterFrame"] then
            ftable:setTopRow(menu.topRows["manager"]["CenterFrame"])
            menu.topRows["manager"]["CenterFrame"] = nil
        end
    else
        -- create ile özel gelince yani genel refresh yapmadan geliyorsak burdakiler kullanılacak. On/Off durumları için
		menu.settoprow = ((not menu.settoprow) or (menu.settoprow == 0)) and ((menu.setrow and menu.setrow > 21) and (menu.setrow - 17) or 3) or menu.settoprow
		ftable:setTopRow(menu.settoprow)
		local highlightborderrow = menu.sethighlightborderrow or menu.setrow
        ftable:setSelectedRow(highlightborderrow)
    end
	menu.setrow = nil
	menu.settoprow = nil
	menu.setcol = nil
	menu.sethighlightborderrow = nil



    -- 
    -- BOTTOM Buttons TABLE
    --local bottomTable = menu.createRFMBottomTable2(frame)

    -- Table y konumlarını ayarla
    ftable.properties.y =  Helper.borderSize
    --bottomTable.properties.y = frame.properties.height - bottomTable:getVisibleHeight()
    --ftable.properties.maxVisibleHeight =  frame.properties.height - frame.properties.y -- bottomTable.properties.y  - ftable.properties.y - Helper.borderSize

end
function menu.createPropertySection(ftable, array, numdisplayed, sorter)
    
    -- Fleet seçiminde multiselect yaptırmadığımız için kod bu bölüme sadece 1 kere ve seçilen fleet için girecek, sonrasında proprow ve subrow arasında dönecek kod.
    local id = "ownedfleets"
    local maxicons = 5

    --local row = ftable:addRow(false, { fixed = true } )
    --row[1]:setColSpan(7):createText("", { height = 1 } )

    --  Frame Tittle "Recorded Ships Tree"
    local row = ftable:addRow(false, { fixed = true , bgColor = config.sColor.transparent } )
    row[1]:setColSpan(7):createText(ReadText(tPg, 6022), { halign = "center", font = Helper.headerRow1Font, fontsize = Helper.headerRow1FontSize } )    -- "Recorded Ships Tree"
    row = ftable:addRow(false, { fixed = true, bgColor = config.sColor.grey } )
    row[1]:setColSpan(7):createText("", { height = 1 } )

    -- 1 tane fleet leader var ve shipkey herzaman 1 olur
    -- 1. satırı Fleet Commander için yazdırıyoruz
    local fleetID, shipID = menu.Convert_StrComponent_To_ID(array)  --menu.Selected.fleetID, 1 
    local strComponent = array -- menu.Convert_ID_To_StrComponent(fleetID, shipID)
    
    local realcommanderrecord = menu.GetRecordFromMd(strComponent)
    local sectorid = realcommanderrecord and realcommanderrecord.sectorid or 0

    if (not menu.Selected.shipID) and (not menu.Selected.selectedGroup) then
        menu.changedFleet = true
    end
    if menu.changedFleet then
        menu.topRows["manager"]["CenterFrame"]      = nil
        menu.selectedRows["manager"]["CenterFrame"] = nil
        menu.Selected.shipID = shipID
        menu.Selected.selectedGroup = nil
        menu.highlightedbordercomponent = strComponent
        
        -- Default Expand ayarları
        -- Sadece Fleet Real Commander MainSub sectionları gözüksün, alt gemiler gözükmesin
        menu.extendedmainproperty[strComponent] = menu.extendedmainpropertydefault
        menu.ExtendMainSubordinates(strComponent)
        
        menu.changedFleet = nil
    end
    
    local prevnumdisplayed = numdisplayed

	if id == menu.highlightedbordersection then
		menu.sethighlightborderrow = row.index + 1
	end

    numdisplayed = menu.createPropertyRow(ftable, strComponent, 0, sectorid, numdisplayed, sorter)

	if numdisplayed == prevnumdisplayed then
		local row = ftable:addRow(id, { interactive = false })
		row[2]:setColSpan(1 + maxicons):createText(config.nonetext)
	end

    return numdisplayed
end
function menu.createPropertyRow(ftable, strComponent, iteration, commanderlocation, numdisplayed, sorter)
    local maxicons = 0

    local fleetID, shipID = menu.Convert_StrComponent_To_ID(strComponent)
    local fleet = menu.GetFleet(fleetID)
    local record = menu.GetRecordFromMd(strComponent)

    if record then

        local subordinates
        subordinates = menu.GetSubordinates_From_FleetRecords(strComponent)
        subordinates.hasRendered = #subordinates > 0
        menu.subordinates[strComponent] = subordinates

        local constructions = menu.constructionships[strComponent] or {}

        --local maxicons = menu.infoTableData.maxIcons

        numdisplayed = numdisplayed + 1

        local font, fontsize = Helper.standardFont, Helper.standardFontSize
        local bold = ""
        bold = "_bold"
        local star = ""
        if fleet.promotedshipkey == record.id then
            star = Helper.convertColorToText(config.sColor.brightyellow) .. "\27[menu_star_04" .. bold .. "]"
            if record.destroyed then
                star = Helper.convertColorToText(config.sColor.grey) .. "\27[menu_star_04" .. bold .. "]"    
            end
        end
        record.font = font
        record.fontsize = fontsize

        local doubleTextheight = math.ceil(C.GetTextHeight(" \n ", record.font, Helper.scaleFont(record.font, record.fontsize), Helper.viewWidth))
        local singleTextheight = C.GetTextHeight("99", record.font, Helper.scaleFont(record.font, record.fontsize), Helper.viewWidth)
        local centerOffsetY = math.floor((doubleTextheight - singleTextheight) / 2)
        local ShipIconWidth = math.floor(menu.getShipIconWidth(record.font, record.fontsize))

        -- Seçili gemi kapalı gemi grubu içindeyse grubu aç
        if (not menu.isPropertyExtended(strComponent)) and menu.isCommanderOfSelectedShip(strComponent, menu.highlightedbordercomponent)  then
            menu.extendedproperty[strComponent] = true
        end

        local bgColor = config.sColor.transparent
        if strComponent == menu.highlightedbordercomponent then
            bgColor = config.selectedRowBgColor
        end

        local row = ftable:addRow( {"property", strComponent, nil, iteration}, {bgColor = bgColor} )

        if strComponent == menu.highlightedbordercomponent then
            menu.sethighlightborderrow = row.index
            menu.settoprow = menu.settoprow or menu.topRows["manager"]["CenterFrame"] or row.index
            menu.selectedRows["manager"]["CenterFrame"] = nil
        end
        
        -- row[1]  aç kapa durumu için buton içerecek 
        if (subordinates.hasRendered  and shipID > 1 )  then
            row[1]:createButton({ scaling = false }):setText(menu.isPropertyExtended(strComponent) and "-" or "+", { scaling = true, halign = "center" })
            row[1].handlers.onClick = function () return menu.buttonExtendProperty(strComponent) end
        elseif (subordinates.hasRendered  and shipID == 1 ) then
            row[1]:createButton({ scaling = false }):setText(menu.isMainPropertyExtended(strComponent) and "1" or "0", { scaling = true, halign = "center" })
            row[1].handlers.onClick = function () return menu.buttonExtendMainProperty(strComponent) end
        end

        local ordersmouseovertext = ""
        local location, locationtext, isdocked = nil, "", false
        local currentordericon, currentorderrawicon, currentordercolor, currentordername, currentorderdescription, currentorderisoverride, currentordermouseovertext, targetname, behaviouricon, behaviourrawicon, behaviourname, behaviourdescription = "", "", nil, "", "", false, nil, "", "", "", "", ""
        local componentObject64 = ConvertStringTo64Bit(tostring(record.object))
        
        if componentObject64 ~= 0 then
            location, locationtext, isdocked = GetComponentData(componentObject64, "sectorid", "sector", "isdocked")
            if IsComponentClass(componentObject64, "ship") then
                currentordericon, currentorderrawicon, currentordercolor, currentordername, currentorderdescription, currentorderisoverride, currentordermouseovertext, targetname, behaviouricon, behaviourrawicon, behaviourname, behaviourdescription = menu.getOrderInfo(componentObject64, true)
                ordersmouseovertext = menu.GetMouseOverTextFromOrderIcons(currentordericon, currentordername, currentorderdescription, currentordermouseovertext, targetname, behaviouricon, behaviourname, behaviourdescription, isdocked )
            end
        end
        local displaylocation = location and not (commanderlocation and IsSameComponent(location, commanderlocation))

        local mouseovertext = ""
        local name, nameid, ShipIconAndName, progressText, timeleftText = record.name, record.idcode, "", ""
        name = star .. Helper.convertColorToText(record.color) ..  string.format("\027[%s] %s", record.icon, name) 
        if constructions.id then
            --local err 
            locationtext = Helper.convertColorToText(record.shipyard.sectorownercolor) .. record.shipyard.sector
            mouseovertext = ReadText(tPg, 1202) .. ":\n" .. Helper.convertColorToText(record.shipyard.factioncolor) .. record.shipyard.name .. record.shipyard.idcode .. "\n" .. locationtext .. "\n"   -- "Building Container"
            if constructions.inprogress then
                
                if constructions.ismissingresources then
                    mouseovertext = mouseovertext .. Helper.convertColorToText(config.Color.text_warning) .. ReadText(1026, 3223)
                    local missingresources = {}
                    local n = C.GetNumMissingBuildProcessorResources(constructions.buildingcontainer, constructions.buildercomponent)
                    if n > 0 then
                        local buf = ffi.new("UIWareInfo[?]", n)
                        n = C.GetMissingBuildProcessorResources(buf, n)
                        for i = 0, n - 1 do
                            table.insert(missingresources, { ware = ffi.string(buf[i].ware), amount = buf[i].amount })
                        end
                    end
                    if #missingresources > 0 then
                        mouseovertext = mouseovertext .. Helper.convertColorToText(config.Color.text_normal) .. "\n\n" .. ReadText(1001, 8046) .. ReadText(1001, 120) .. Helper.convertColorToText(config.Color.text_warning)
                        for i, entry in ipairs(missingresources) do
                            mouseovertext = mouseovertext .. "\n· " .. entry.amount .. ReadText(1001, 42) .. " " .. GetWareData(entry.ware, "name")
                        end
                    end
                
                end
                -- construction ilerleme durumu var (component oluşmuş)
                nameid = ffi.string(C.GetObjectIDCode(constructions.component))
                -- *** değişken refreshden bağımsız her onUpdate de güncellenmesi için function olarak atandı
                timeleftText = 
                function () return 
                    (constructions.ismissingresources and (Helper.convertColorToText(config.Color.text_warning) .. "\27[warning] ") or "") .. 
                    Helper.formatTimeLeft(C.GetBuildProcessorEstimatedTimeLeft(constructions.buildercomponent)) ..
                    " ( " .. menu.getShipBuildProgress(constructions.component) .. " )" ..
                    " \n " .. locationtext
                end
            else

                local missingresources = {}
                local n = C.GetNumMissingBuildResources2(ConvertStringTo64Bit(tostring(constructions.buildingcontainer)), nil, 0, true)
                if n > 0 then
                    local buf = ffi.new("UIWareInfo[?]", n)
                    n = C.GetMissingBuildResources(buf, n)
                    for i = 0, n - 1 do
                        table.insert(missingresources, { ware = ffi.string(buf[i].ware), amount = buf[i].amount })
                    end
                end
                local err
                if not C.HasSuitableBuildModule(constructions.buildingcontainer, constructions.component, record.macro) then
                    err = true
                    mouseovertext = mouseovertext .. Helper.convertColorToText(config.Color.text_error)  .. ReadText(tPg, 8563)
                elseif #missingresources > 0 then
                    mouseovertext = mouseovertext .. Helper.convertColorToText(config.Color.text_warning) .. ReadText(1001, 8018) .. Helper.convertColorToText(config.Color.text_normal) .. "\n\n" .. ReadText(1001, 8046) .. ReadText(1001, 120) .. Helper.convertColorToText(config.Color.text_warning)
                    for i, entry in ipairs(missingresources) do
                        mouseovertext = mouseovertext .. "\n· " .. entry.amount .. ReadText(1001, 42) .. " " .. GetWareData(entry.ware, "name")
                    end
                end
                
                local duration = not err and C.GetBuildTaskDuration(constructions.buildingcontainer, constructions.id) or 0

                timeleftText = (err and (Helper.convertColorToText(config.Color.text_error) .. "\27[warning]") or ( (#missingresources > 0) and (Helper.convertColorToText(config.Color.text_warning) .. "\27[warning]") or "") ) .. "#" .. constructions.queueposition .. " - " .. Helper.formatTimeLeft(duration) ..
                " \n " .. locationtext
            end
            for i = 1, iteration do
                name = "    " .. name
            end
            ShipIconAndName = string.format("%s %s %s", name, nameid, (debugW and "   { row " .. tostring(row.index) .. " } " .. strComponent .. " P " or "") )
            row[2]:setColSpan(1):createText( ShipIconAndName , { font = record.font, fontsize = record.fontsize, mouseOverText = mouseovertext , minRowHeight = Helper.headerRow1Height, x = Helper.headerRow1Offsetx } )
            row[3]:setColSpan(4):createText( timeleftText , { font = record.font, fontsize = record.fontsize, halign = "right", mouseOverText = mouseovertext , minRowHeight = Helper.headerRow1Height, x = Helper.headerRow1Offsetx } )
        else
            -- construction olmayan (1-hayatta olan gemi 2-üretim bulamayıp bekleyen 3- lost gemi 4-add task alıp henüz istasyona ulaşmamış )
            for i = 1, iteration do
                name = "    " .. name
            end
            ShipIconAndName = string.format("%s %s %s", name, nameid, (debugW and "   { row " .. tostring(row.index) .. " } " .. strComponent .. " P " or "") ) 

            if record.statusIcon ~= "" then
                if record.isLost then
                    local ishaverepondwares = record.respond.equipmentwares and #record.respond.equipmentwares > 0
                    -- rebuildtimer kapalıysa da lost ship olabilir. respond oluşmuştur ancak timer yoktur
                    --ReadText(tPg, 6024) -- Lost Ship.  
                    mouseovertext = Helper.convertColorToText(record.color) .. ReadText(tPg, 6024) .. "\n" .. 
                    (
                    (not record.isWaitingForRebuild and ishaverepondwares)
                        and Helper.convertColorToText(config.sColor.white) .. ReadText(tPg, 6160)
                        or Helper.convertColorToText(config.sColor.white) .. ReadText(tPg, 6037)
                    )
                elseif record.addingTask then
                    local locationtext = Helper.convertColorToText(record.shipyard.sectorownercolor) .. record.shipyard.sector
                    mouseovertext = ReadText(tPg, 1202) .. ":\n" .. Helper.convertColorToText(record.shipyard.factioncolor) .. record.shipyard.name .. record.shipyard.idcode .. "\n" .. locationtext .. "\n"   -- "Building Container"
                else
                    --ReadText(tPg, 6038)    -- "Waiting for next rebuild check"
                    mouseovertext = Helper.convertColorToText(record.color) .. ReadText(tPg, 6038)
                end
                if record.respondMsg ~= "" then
                    if mouseovertext ~= "" then
                        mouseovertext = mouseovertext .. "\n"
                    end
                    mouseovertext = mouseovertext .. Helper.convertColorToText(config.sColor.white) .. Helper.indentText(record.respondMsg, "  ", GetCurrentMouseOverWidth(), GetCurrentMouseOverFont())
                end

                row[2]:setColSpan(1):createText( ShipIconAndName, { font = record.font, fontsize = record.fontsize, mouseOverText = record.destroyed and mouseovertext or (star == "") and "" or ReadText(tPg, 6510), minRowHeight = Helper.headerRow1Height, x = Helper.headerRow1Offsetx } )    -- "Promoted Commander"
                row[3]:setColSpan(4):createText( "\n" , { font = record.font, fontsize = record.fontsize, halign = "right", mouseOverText = mouseovertext , minRowHeight = Helper.headerRow1Height, x = Helper.headerRow1Offsetx } )
                
            else
                local iconsgroup 
                if currentorderisoverride then
                    iconsgroup = 
                    function () return 
                        menu.noneOverrideOrderIcon( menu.overrideOrderIcon(currentordercolor, true, currentorderrawicon) , behaviouricon, isdocked, location, true)
                    end
                else
                    iconsgroup = 
                    function () return 
                        menu.noneOverrideOrderIcon(currentordericon, behaviouricon, isdocked, displaylocation and location, displaylocation )
                    end
                end
                row[2]:setColSpan(1):createText( ShipIconAndName, { font = record.font, fontsize = record.fontsize, mouseOverText = record.destroyed and mouseovertext or (star == "") and "" or ReadText(tPg, 6510), minRowHeight = Helper.headerRow1Height, x = Helper.headerRow1Offsetx } )    -- "Promoted Commander"
                row[3]:setColSpan(4):createIcon("solid", { scaling = false, color = { r = 0, g = 0, b = 0, a = 1 }, height = doubleTextheight, mouseOverText = ordersmouseovertext }):setText( iconsgroup, { scaling = true, font = record.font, halign = "right", x = Helper.standardTextOffsetx } )
            end
        end

        if record.statusIcon ~= "" then
            row[7]:createText(string.format("\027[%s]", record.statusIcon), 
                { color = record.color , minRowHeight = Helper.headerRow1Height, halign = "center", y = centerOffsetY, x = 0} )
            row[7].properties.mouseOverText = mouseovertext
        else
            row[7]:createObjectShieldHullBar(record.object)
        end
        
        if row[1].type == "button" then
            row[1].properties.height = row[3]:getHeight()   --  doubleTextheight -- 
        end

        if menu.isPropertyExtended(strComponent) then
            if subordinates.hasRendered then
                numdisplayed = menu.createSubordinateSection(ftable, strComponent, iteration, location or commanderlocation, numdisplayed, sorter)
            end
        end
    end

    return numdisplayed
end
function menu.createSubordinateSection(ftable, strComponent, iteration, location, numdisplayed, sorter)
	local maxicons = 0
    
    local fleetID = menu.Convert_StrComponent_To_ID(strComponent) --menu.Selected.fleetID
    local record = menu.GetRecordFromMd(strComponent)
	--local maxicons = menu.infoTableData.maxIcons
	--local subordinates = menu.infoTableData.subordinates[strComponent] or {}

    local subordinates = menu.subordinates[strComponent] or {}
	subordinates = menu.sortKeysListWithFleetRecords(subordinates, sorter) 
    subordinates.hasRendered = #subordinates > 0

    local groups = {}
    for _, subordinate in ipairs(subordinates) do
        local recordsub = menu.GetRecordFromMd(subordinate)
        local group = recordsub.subordinategroupid

        if group and group > 0 then
            if groups[group] then
                table.insert(groups[group].subordinates, subordinate)
            else
                groups[group] = { assignment = recordsub.assignment , subordinates = { subordinate } }
            end
        end
    end
    for group = 1, 10 do
        if groups[group] then
            
            local issubordinateextended = menu.isSubordinateExtended(strComponent, group)
            -- Seçili gemi kapalı grup içindeyse grubu aç
			if (not issubordinateextended) and menu.isCommanderOfSelectedShip(strComponent, menu.highlightedbordercomponent, group) then
				menu.extendedsubordinates[strComponent .. group] = true
				issubordinateextended = true
			end

            local row = ftable:addRow({"subordinates" .. strComponent .. group, strComponent, group}, { bgColor = config.sColor.transparent })

			row[1]:createButton():setText(issubordinateextended and "-" or "+", { halign = "center" })
			row[1].handlers.onClick = function () return menu.buttonExtendSubordinate(strComponent, group) end

			local text = string.format(ReadText(tPg, 8398), ReadText(20401, group))
			for i = 1, iteration + 1 do
				text = "    " .. text
			end
			row[2]:setColSpan(1):createText(text .. (debugW and "   { row=" .. tostring(row.index) .. " } " .. strComponent .. " G_" .. tostring(group)  or "") )
            local assignmenttext = config.assignments[groups[group].assignment] and config.assignments[groups[group].assignment].name or ""
            assignmenttext = assignmenttext .. " "

            local groupiconstext = ""
            local groupmouseovertext = ""

            groupiconstext = groupiconstext .. assignmenttext
            row[3]:setColSpan(5):createText(groupiconstext, { halign = "right", mouseOverText = groupmouseovertext })
            
            -- grup line kapatılınca kapatılan satıra konumlanacak
			if menu.highlightedborderstationcategory == "subordinates" .. strComponent .. group then
				menu.sethighlightborderrow = row.index
			end
            if issubordinateextended then
                for _, subordinate in ipairs(groups[group].subordinates) do
                    numdisplayed = menu.createPropertyRow(ftable, subordinate, iteration + 2, location, numdisplayed, sorter)
                end
            end
        end
    end
    
    return numdisplayed
end



function menu.isCommanderOfSelectedShip(strComponent, strSelectedShip, group)
    -- strSelectedShip, strComponent ya da group altında olan bir gemi ise grubu açtıracağız.
    --local _, SelectedShip = menu.Convert_StrComponent_To_ID(strSelectedShip)
    --local RFMKey, Component = menu.Convert_StrComponent_To_ID(strComponent)

    local directcommander = menu.getCommander_From_Record(strSelectedShip)
    local commanderlist = menu.getAllCommanders_From_Record(strSelectedShip)
    local prevcommander

    for i, entry in ipairs(commanderlist) do
        if entry == strComponent then  -- Component, commander listesinde bulundu
            if group then
                if entry == directcommander then
                    -- This is the direct commander, check if the group matches
                    local record = menu.GetRecordFromMd(strSelectedShip)
                    local selectedgroup = record.subordinategroupid
                    return group == selectedgroup
                elseif prevcommander then
                    -- This is a commander in the chain, get the previous commander's group and check if it matches
                    local record = menu.GetRecordFromMd(prevcommander)
                    local selectedgroup = record.subordinategroupid
                    return group == selectedgroup
                else
                    -- This is a commander in the chain, but not the direct commander and there was no previous commander?
                    DebugError("menu.isCommanderOfSelectedShip() found a commander, but could not reconstruct the chain of command!" .. " strComponent = " .. tostring(strComponent) .. " , strSelectedShip = " .. tostring(strSelectedShip) .. " , group = " .. tostring(group))
                    return false
                end
            else
                return true
            end
        end
        prevcommander = entry
    end

    return false
end

function menu.isMainPropertyExtended(name)
	return menu.extendedmainproperty[name] ~= nil
end
function menu.buttonExtendMainProperty(name)
    
	if menu.isMainPropertyExtended(name) then
		menu.extendedmainproperty[name] = nil
        menu.highlightedbordercomponent = name
	else
		menu.extendedmainproperty[name] = true
        menu.highlightedborderstationcategory = nil
        -- Açıldığında da odaklansın
        menu.highlightedbordercomponent = name
	end
    menu.ExtendMainSubordinates(name)
	menu.settoprow = GetTopRow(menu.TableID.Ships)
	menu.createCenterFrame()
end
function menu.ExtendMainSubordinates(strComponent)
    local fleetID = menu.Convert_StrComponent_To_ID(strComponent)
    local subs = menu.GetSubordinates_From_FleetRecords(strComponent)
    menu.extendedproperty[strComponent] = true
    local groups = {} 
    for _, sub in ipairs( subs ) do
        local recSub = menu.GetRecordFromMd(sub)
        local group = recSub.subordinategroupid
        if group and group > 0 then
            if groups[group] then
                table.insert(groups[group].subordinates, sub)
            else
                groups[group] = { assignment = recSub.assignment , subordinates = { sub } }
            end
        end
    end
    for group = 1, 10 do
        if groups[group] then
            local issubordinateextended = menu.isSubordinateExtended(strComponent, group)
            menu.extendedsubordinates[strComponent .. group] = menu.isMainPropertyExtended(strComponent)
        end
    end
    -- Hasarlı gemi gruplarını da görünecek şekilde açalım
    menu.CheckAndExpandDestroyedShipGroups(fleetID)
end
function menu.CheckAndExpandDestroyedShipGroups(fleetID)
    for _, record in pairs( menu.RM_FleetRecords[fleetID] or {} ) do
        if (tonumber(record.destroyed) == 1)  then
            local strSelectedShip = menu.Convert_ID_To_StrComponent(fleetID, record.id)
            local commanderlist = menu.getAllCommanders_From_Record(strSelectedShip)
            local group = record.subordinategroupid

            for _, commander in ipairs( commanderlist ) do
                local recCommander = menu.GetRecordFromMd(commander)
                if group > 0 then
                    menu.extendedsubordinates[commander .. group] = true
                end
                menu.extendedproperty[commander] = true
                group = recCommander.subordinategroupid
            end

        end
    end
end


function menu.isPropertyExtended(name)
	return menu.extendedproperty[name] ~= nil
end
function menu.buttonExtendProperty(name)
    --menu.tablePrint(menu.extendedproperty, " PROP.extendedproperty = ", true, true)
	if menu.isPropertyExtended(name) then
		menu.extendedproperty[name] = nil
        menu.highlightedbordercomponent = name
	else
		menu.extendedproperty[name] = true
        menu.highlightedborderstationcategory = nil
        -- Açıldığında da odaklansın
        menu.highlightedbordercomponent = name
	end
	menu.settoprow = GetTopRow(menu.TableID.Ships)
	menu.createCenterFrame()
end

function menu.buttonExtendSubordinate(name, group)
    --menu.tablePrint(menu.extendedsubordinates, " SUB.extendedsubordinates = ", true, true)
	if menu.isSubordinateExtended(name, group) then     -- nil ya da true
		if menu.extendedsubordinates[name .. group] == false then
			menu.extendedsubordinates[name .. group] = nil
		else
			menu.extendedsubordinates[name .. group] = false
		end
		menu.highlightedbordercomponent = name
		menu.highlightedborderstationcategory = "subordinates" .. name .. group
	else    -- false
		menu.extendedsubordinates[name .. group] = true
        -- Açıldığında da odaklansın
        menu.highlightedborderstationcategory = "subordinates" .. name .. group
        menu.highlightedbordercomponent = name
	end
	menu.settoprow = GetTopRow(menu.TableID.Ships)
	menu.createCenterFrame()
end
function menu.isSubordinateExtended(name, group)
	return menu.extendedsubordinates[name .. group] ~= false
end


-- Eski KLADIRILACAK
function menu.createRFMBottomTable1(frame, x, y, width)

    local row, ftable
    local iconH = config.bottomiconheight
    local mouseOverText = ""

    local strComponent = menu.Selected.strComponent
    local fleetID = menu.Selected.fleetID
    local shipID = menu.Selected.shipID
    local fleet = menu.GetFleet(fleetID)
    local record = menu.GetRecordFromMd(strComponent)

    local isactive = fleet and record and true
    isactive = isactive or false

    --
    -- button TABLE
    --
    ftable = frame:addTable(13, {
        tabOrder = 3,
        x = x,
        width = width,
        y = y,
        backgroundID = debugColorMod and "solid" or "",
        backgroundColor = debugColorMod and config.sColor.gold or config.sColor.transparent,
        
    })

    ftable:setColWidth(1, Helper.standardTextHeight)
    ftable:setColWidth(2, iconH)
    ftable:setColWidth(3, iconH/2)
    ftable:setColWidth(4, iconH)
    ftable:setColWidth(5, iconH/2)
    ftable:setColWidth(6, iconH)
    ftable:setColWidth(7, iconH)
    ftable:setColWidth(8, iconH)
    ftable:setColWidth(9, iconH)
    ftable:setColWidth(10, iconH)
    ftable:setColWidth(11, iconH)
    ftable:setColWidth(13, iconH)

    
    -- Kılavuz - Kontrol bars
    --row = ftable:addRow(nil, { bgColor = config.sColor.orange })
    --row[1]:setColSpan(1):createText("", { fontsize = 1, minRowHeight = 2 } )
    
    -- Satır Ekle - Gri ince
    --row = ftable:addRow(false, { fixed = true, bgColor = config.sColor.grey } )
    --row[1]:setColSpan(13):createText("", { height = Helper.borderSize } )

    -- Boş Satır
    --row = ftable:addRow(false, { bgColor = config.sColor.transparent })
    --row[1]:setColSpan(1):createText("", { height = Helper.borderSize } )

    row = ftable:addRow("buttonrow1", { fixed = true, bgColor = config.sColor.transparent, } )
    
    local color = fleet and fleet.color or config.sColor.white

    local reenablebuttonText = isactive and string.format("[ %s%s %s \027X]", Helper.convertColorToText(color), ReadText(tPg, 500), tostring(fleetID)) or ""
    local disablebuttonText = isactive and string.format("[ %s%s %s \027X]", Helper.convertColorToText(color), ReadText(tPg, 500), tostring(fleetID)) or ""

    -- Autobuild
    local autobuildvalue = fleet and fleet.autobuild
    local autobuildcolor = config.Color.text_success
    mouseOverText = "[ " .. ReadText(tPg, 6026) .. " : " .. string.format("%s%s\027X", Helper.convertColorToText(config.sColor.statusGreen), ReadText(tPg, 1340)) .. " ] " .. ReadText(tPg, 6027)     -- "Autobuild Status", "ON", "When the ship belonging to this RFM destroyed, the rebuild process will be started automatically."
    if not autobuildvalue then
        autobuildcolor = config.Color.text_hostile
        mouseOverText = "[ " .. ReadText(tPg, 6026) .. " : " .. string.format("%s%s\027X", Helper.convertColorToText(config.sColor.statusRed), ReadText(tPg, 1341)) .. " ] " .. ReadText(tPg, 6028)  -- "Autobuild Status", "OFF", "When the ship belonging to this RFM destroyed, the rebuild process will NOT be started automatically."
    end
    row[2]:createButton({ active = isactive, mouseOverText = isactive and mouseOverText or "", width = iconH , height = iconH } )
    :setIcon("rfm_autobuild", { color = autobuildcolor, width = iconH, height = iconH })
    row[2].handlers.onClick = function() return menu.buttonAutoBuildChanged(autobuildvalue) end


    -- Restart RFM
    --[[
    mouseOverText = ReadText(tPg, 1022) .. "\n  " .. reenablebuttonText    -- "Restart"
    row[6]:createButton({ active = isactive,  width = iconH , height = iconH, mouseOverText = mouseOverText } )
    :setIcon("rfm_restart", {  color = menu.colorNormal, width = iconH , height = iconH })
    row[6].handlers.onClick = function() return menu.buttonReEnable() end
    ]]
    -- Rebuildtimer 
    local rebuildtimerstatus = fleet and fleet.rebuildtimerstatus
    local rebuildtimerstatuscolor = config.Color.text_success
    mouseOverText = "[ " .. ReadText(tPg, 6050) .. " : " .. string.format("%s%s\027X", Helper.convertColorToText(config.sColor.statusGreen), ReadText(tPg, 1340)) .. " ] " .. ReadText(tPg, 6051)     -- "Rebuild Timer Status", "ON", "Rebuild check timers are active. If it is turned off, the ships waiting for Rebuild in the {1134010, 500} will turn into lost ship status."
    if not rebuildtimerstatus then
        rebuildtimerstatuscolor = config.Color.text_hostile
        mouseOverText = "[ " .. ReadText(tPg, 6050) .. " : " .. string.format("%s%s\027X", Helper.convertColorToText(config.sColor.statusRed), ReadText(tPg, 1341)) .. " ] " .. ReadText(tPg, 6052)  -- "Autobuild Status", "OFF", "Rebuild check timers are disabled. If turned on, {1134010, 500} will restart and Rebuild countdown timers will be enabled."
    end
    row[4]:createButton({ active = isactive,  width = iconH , height = iconH, mouseOverText = isactive and mouseOverText or ""} )
    :setIcon("rfm_restart", {  color = rebuildtimerstatuscolor, width = iconH , height = iconH })
    row[4].handlers.onClick = function() return menu.buttonRebuildTimerStatusChanged(not rebuildtimerstatus) end

    -- Remove RFM
    mouseOverText = ReadText(tPg, 6025) .. "\n  "  .. disablebuttonText    -- "Remove RFM From Manager"
    row[13]:createButton({ active = isactive, width = iconH , height = iconH, x = row[13].properties.width /2  , mouseOverText = isactive and mouseOverText or ""} )
    :setIcon("rfm_disable", { color = config.Color.text_enemy, width = iconH , height = iconH })
    row[13].handlers.onClick = function() return isactive and menu.buttonRemoveRFM() end
    


--[[    
    local xdebug = debug2 and DebugError("menu.selectedRows[manager][BottomL] = " .. tostring(menu.selectedRows["manager"]["BottomL"]))
    local xdebug = debug2 and DebugError("menu.selectedCols[manager][BottomL] = " .. tostring(menu.selectedCols["manager"]["BottomL"]))
    local xdebug = debug2 and DebugError("menu.topRows[manager][BottomL] = " .. tostring(menu.topRows["manager"]["BottomL"]))

    if menu.selectedRows["manager"]["BottomL"] and isactive then
        ftable:setSelectedRow(menu.selectedRows["manager"]["BottomL"])
        menu.selectedRows["manager"]["BottomL"] = nil
        if menu.selectedCols["manager"]["BottomL"] then
            ftable:setSelectedCol(menu.selectedCols["manager"]["BottomL"])
            menu.selectedCols["manager"]["BottomL"] = nil
        end
        if menu.topRows["manager"]["BottomL"] then
            ftable:setTopRow(menu.topRows["manager"]["BottomL"])
            menu.topRows["manager"]["BottomL"] = nil
        end
    end
]]
    return ftable

end
-- Eski KLADIRILACAK
function menu.createRFMBottomTable2(frame)

    local row, ftable
    local iconH = config.bottomiconheight
    local mouseOverText = ""

    local strComponent = menu.Selected.strComponent
    local fleetID = menu.Selected.fleetID
    local shipID = menu.Selected.shipID

    local fleet = menu.GetFleet(menu.Selected.fleetID)
    local record = menu.GetRecordFromMd(strComponent)
    local isactive = fleet and record and true    
    isactive = isactive or false

    ftable = frame:addTable(13, {
        tabOrder = 5,
        x = Helper.borderSize,
        width = frame.properties.width - 2*Helper.borderSize,
        y = Helper.borderSize,
        backgroundID = debugColorMod and "solid" or "",
        backgroundColor = debugColorMod and config.sColor.yellow or config.sColor.transparent,
    })
    local bottomRTable = ftable
    
    ftable:setColWidth(1, Helper.standardTextHeight)
    ftable:setColWidth(2, iconH)
    ftable:setColWidth(3, iconH/2)
    ftable:setColWidth(4, iconH)
    ftable:setColWidth(5, iconH)
    ftable:setColWidth(6, iconH)
    ftable:setColWidth(7, iconH)
    ftable:setColWidth(8, iconH)
    ftable:setColWidth(9, iconH)
    ftable:setColWidth(10, iconH)
    ftable:setColWidth(11, iconH)
    ftable:setColWidth(12, iconH)
    

    -- Satır Ekle - Gri ince
    row = ftable:addRow(false, { fixed = true, bgColor = config.sColor.grey } )
    row[1]:setColSpan(13):createText("", { height = 3 } )

    -- Boş Satır
    --row = ftable:addRow(false, { bgColor = config.sColor.transparent })
    --row[1]:setColSpan(1):createText("", { height = Helper.borderSize } )

    
    row = ftable:addRow("buttonrow2", { fixed = true, bgColor = config.sColor.transparent } )

    -- Show On Map
    local name = isactive and record.name or ""
    local nameid = isactive and (record.idcode and record.idcode ~= "") and " ( " .. record.idcode .. " ) " or ""
    mouseOverText = isactive and ReadText(tPg, 6030) .. "\n " .. string.format("%s%s\027X", Helper.convertColorToText(config.sColor.blue), name .. nameid)  or ""
    row[2]:createButton({ active = function() return isactive and (record.object or record.build) and true or false end, mouseOverText = mouseOverText, width = iconH, height = iconH, cellBGColor = config.Color["row_background"] })
    :setIcon("menu_center_selection", { width = iconH, height = iconH  })
    row[2].handlers.onClick = function () menu.buttonOnShowMap(record); end

    -- Clone RFM
    local subordinates = menu.GetSubordinates_From_FleetRecords(strComponent, true)
    local cloneText = isactive and string.format(" %s%s\n%s%s \027X", Helper.convertColorToText(config.sColor.lightgrey), tostring(strComponent), Helper.convertColorToText(config.sColor.mission), Helper.indentText(record.name, "", GetCurrentMouseOverWidth(), GetCurrentMouseOverFont()) ) .. ((#subordinates > 0 ) and "\n  & " .. Helper.convertColorToText(config.sColor.mission) .. ReadText(1001, 1503) or "") or ""
    local isactiveclone = isactive and not menu.cloned and (record.class ~= "station") and not menu.Selected.selectedGroup
    mouseOverText =  isactiveclone and ReadText(tPg, 6029) .. "\n " .. cloneText or ""    -- "RFM whose clone will be taken"
    row[4]:createButton({ active = function() return isactiveclone end , scaling = true, mouseOverText = mouseOverText, width= iconH , height=iconH } )
    :setIcon("rfm_clonerfm", { color = config.Color.text_inprogress })
    row[4].handlers.onClick = function() 
        menu.cloned = true
        menu.buttonRFMClone()
        menu.refreshMenuFrame()
        menu.noupdate = nil
    end

    -- Remove Ship
    local mouseOverText = isactive and ReadText(tPg, 6031) or ""  -- "Removes the selected ship from the Restock Fleet records.\nOnly valid for exploded ships that cannot be produced."
    row[8]:createButton({ active = function() return isactive and (not menu.removingship and record.destroyed and not record.construction.buildingcontainer and not record.object and not menu.Selected.selectedGroup) end, width = iconH, height = iconH, mouseOverText = mouseOverText  } )
    :setIcon("rfm_removeship", { color = config.Color.text_hostile, width = iconH, height = iconH  })
    row[8].handlers.onClick = function() menu.buttonRemoveShip(record); end


    -- Boş Satır
    --row = ftable:addRow(false, { bgColor = config.sColor.transparent })
    --row[1]:setColSpan(1):createText("", { height = Helper.borderSize } )

    -- Satır Ekle - Gri ince
    --row = ftable:addRow(false, { fixed = true, bgColor = config.sColor.grey } )
    --row[1]:setColSpan(13):createText("", { height = 3 } )

    --local xdebug = debug2 and DebugError("menu.selectedRows[manager][BottomR] = " .. tostring(menu.selectedRows["manager"]["BottomR"]))
    --local xdebug = debug2 and DebugError("menu.selectedCols[manager][BottomR] = " .. tostring(menu.selectedCols["manager"]["BottomR"]))
    --local xdebug = debug2 and DebugError("menu.topRows[manager][BottomR] = " .. tostring(menu.topRows["manager"]["BottomR"]))

    if menu.selectedRows["manager"]["BottomR"] then
        ftable:setSelectedRow(menu.selectedRows["manager"]["BottomR"])
        menu.selectedRows["manager"]["BottomR"] = nil
        -- update ederken seçilecek butonun active olması gerekir.. bu tabledeki tüm butonların active propertysine function ile atama verilmesi gerek.
        if menu.selectedCols["manager"]["BottomR"] and row[menu.selectedCols["manager"]["BottomR"]].properties.active() then
            ftable:setSelectedCol(menu.selectedCols["manager"]["BottomR"])
        end
        menu.selectedCols["manager"]["BottomR"] = nil
        if menu.topRows["manager"]["BottomR"] then
            ftable:setTopRow(menu.topRows["manager"]["BottomR"])
        end
        menu.topRows["manager"]["BottomR"] = nil
    end

    return ftable
end


function menu.displayContextFrame(mode, record, width, x, y)
	menu.contextMode = { mode = mode, width = width, x = x, y = y }
	if mode == "RemoveRFM" then
		menu.createCP_RemoveRFMContext()
	elseif mode == "RemoveShip" then
		menu.createCP_RemoveShipContext(record)
	end
end

function menu.createCP_RemoveRFMContext()

    local fleet = menu.GetFleet(menu.Selected.fleetID)

	Helper.removeAllWidgetScripts(menu, config.contextLayer)

	menu.contextFrame = Helper.createFrameHandle(menu, {
		layer = config.contextLayer,
		standardButtons = {},
		width = menu.contextMode.width,
		x = menu.contextMode.x,
		y = menu.contextMode.y,
		autoFrameHeight = true,
	})
	menu.contextFrame:setBackground("solid", { color = config.sColor.available })

	local ftable = menu.contextFrame:addTable(6, { tabOrder = 2, defaultInteractiveObject = true })
	ftable:setColWidth(1, Helper.scaleY(Helper.standardButtonHeight), false)
	ftable:setColWidthPercent(5, 25, false)
	ftable:setColWidthPercent(6, 25, false)

	local row = ftable:addRow(false, { fixed = true })
	row[1]:setColSpan(6):createText(ReadText(tPg, 6025), Helper.headerRowCenteredProperties)  -- "Remove RFM From Manager"

    ftable:addEmptyRow()

	local row = ftable:addRow(false, { fixed = true })
	row[1]:setColSpan(6):createText(ReadText(tPg, 6033), { wordwrap = true })     -- "Are you sure you want to remove this?"

	ftable:addEmptyRow()

    local selrfmtext = string.format("[ %s%s %s \027X]", Helper.convertColorToText(config.Color.text_enemy), ReadText(tPg, 500), tostring(fleet.id))
    local row = ftable:addRow(false, { fixed = true })
    row[1]:setColSpan(2):createText(selrfmtext, { halign = "center" })   -- "RFM"
    row[3]:setColSpan(4):createText(fleet.commander.name, {  })   

    ftable:addEmptyRow()

    local mouseOverText = ReadText(tPg, 6041)   -- Once confirmed, this option will appear again when the settings are reset to default.
	local row = ftable:addRow(true, { fixed = true })
	row[1]:createCheckBox(function () return menu.contextData.saveOption == true end, { height = Helper.standardButtonHeight, mouseOverText = mouseOverText })
	row[1].handlers.onClick = function () menu.contextData.saveOption = not menu.contextData.saveOption end
	row[2]:setColSpan(3):createButton({ bgColor = config.Color["button_background_hidden"], mouseOverText = mouseOverText }):setText(ReadText(tPg, 6034)) -- "Do not show again"
	row[2].handlers.onClick = function () menu.contextData.saveOption = not menu.contextData.saveOption; menu.createCP_RemoveRFMContext(); end
	row[5]:createButton({  }):setText(ReadText(tPg, 1073), { halign = "center" })  -- Confirm
	row[5].handlers.onClick = menu.buttonCP_RemoveRFMConfirm
	row[6]:createButton({  }):setText(ReadText(tPg, 1074), { halign = "center" })    -- Cancel
	row[6].handlers.onClick = menu.buttonCP_RemoveRFMCancel

    ftable:addEmptyRow()

	ftable:setSelectedCol(6)

	menu.contextFrame:display()

    --DebugError(" CREATED ContextTable.id = " .. tostring(ftable.id) )
end

function menu.createCP_RemoveShipContext(record)

	Helper.removeAllWidgetScripts(menu, config.contextLayer)

	menu.contextFrame = Helper.createFrameHandle(menu, {
		layer = config.contextLayer,
		standardButtons = {},
		width = menu.contextMode.width,
		x = menu.contextMode.x,
		y = menu.contextMode.y,
		autoFrameHeight = true,
	})
	menu.contextFrame:setBackground("solid", { color = config.sColor.available })

	local ftable = menu.contextFrame:addTable(6, { tabOrder = 4, defaultInteractiveObject = true })
	ftable:setColWidth(1, Helper.scaleY(Helper.standardButtonHeight), false)
	ftable:setColWidthPercent(5, 25, false)
	ftable:setColWidthPercent(6, 25, false)

	local row = ftable:addRow(false, { fixed = true })
	row[1]:setColSpan(6):createText(ReadText(tPg, 6035) .. " [ " .. ReadText(tPg, 500) .. "_" .. tostring(menu.Selected.fleetID) .. " ]", Helper.headerRowCenteredProperties)        -- "Remove Ship From RFM's Records"

    ftable:addEmptyRow()

	local row = ftable:addRow(false, { fixed = true })
	row[1]:setColSpan(6):createText(ReadText(tPg, 6036), { wordwrap = true })   -- "Are you sure you want to remove this ship record?"

	ftable:addEmptyRow()

    local seltext = string.format("%s [ %s %s \027X]", ReadText(tPg, 6571), Helper.convertColorToText(config.Color.text_enemy), tostring(record.id))
    local name = string.format("%s%s\027X", Helper.convertColorToText(config.Color.text_enemy), tostring(record.name))
    local row = ftable:addRow(false, { fixed = true })
    row[1]:setColSpan(2):createText(seltext, { halign = "center" })   -- "Ship?"
    row[3]:setColSpan(4):createText( name , {  })   

    ftable:addEmptyRow()

    local mouseOverText = ReadText(tPg, 6041)   -- Once confirmed, this option will appear again when the settings are reset to default.
	local row = ftable:addRow(true, { fixed = true })
	row[1]:createCheckBox(function () return menu.contextData.saveOption or false end, { height = Helper.standardButtonHeight, mouseOverText = mouseOverText })
	row[1].handlers.onClick = function () menu.contextData.saveOption = not menu.contextData.saveOption end
	row[2]:setColSpan(3):createButton({ bgColor = config.Color["button_background_hidden"], mouseOverText = mouseOverText }):setText(ReadText(tPg, 6034)) -- "Do not show again"
	row[2].handlers.onClick = function () menu.contextData.saveOption = not menu.contextData.saveOption; menu.createCP_RemoveShipContext(record); end
	row[5]:createButton({  }):setText(ReadText(tPg, 1073), { halign = "center" })  -- Confirm
	row[5].handlers.onClick = function () return menu.buttonCP_RemoveShipConfirm() end
	row[6]:createButton({  }):setText(ReadText(tPg, 1074), { halign = "center" })    -- Cancel
	row[6].handlers.onClick = menu.buttonCP_RemoveShipCancel

    ftable:addEmptyRow()

	ftable:setSelectedCol(6)

	menu.contextFrame:display()

    --DebugError(" CREATED ContextTable.id = " .. tostring(ftable.id) )
end

function menu.closeContextMenu()
	Helper.clearFrame(menu, config.contextLayer)
    
	menu.contextFrame = nil
	menu.contextMode = nil
end


function menu.createOrdersMenuHeader(frame)

    --- tabs ---
    local orderHeaderTable = frame:addTable(#config.infoCategories + 1, { 
        tabOrder = 2,
        x = Helper.borderSize,
        y = Helper.borderSize,
        width = frame.properties.width - 2 * Helper.borderSize,
        backgroundID = menu.RightFrameData.table.backgroundID,
        backgroundColor = menu.RightFrameData.table.backgroundColor,
        borderEnabled = false,
        defaultInteractiveObject = false,
    } )
    
    local count = 0
    for i, entry in ipairs(config.infoCategories) do
        if entry.empty then
            count = count + 0.5
        else
            count = count + 1
        end
    end
    
    local sideBarWidth = menu.sideBarWidth
    if (count * menu.sideBarWidth + (#config.infoCategories - 1) * Helper.borderSize) > frame.properties.width then
        sideBarWidth = math.floor((frame.properties.width - (#config.infoCategories - 1) * Helper.borderSize) / count)
    end

    for i, entry in ipairs(config.infoCategories) do
        if entry.empty then
            orderHeaderTable:setColWidth(i, sideBarWidth / 2, false)
        else
            orderHeaderTable:setColWidth(i, sideBarWidth, false)
        end
    end
    
    local row = orderHeaderTable:addRow("orders_tabs", { fixed = true })
    local count = 1
    for _, entry in ipairs(config.infoCategories) do
        if not entry.empty then
            local bgcolor = config.Color["row_title_background"]
            local color = config.Color["icon_normal"]
            if entry.category == menu.RightFrameMode then
                bgcolor = config.Color["row_background_selected"]
            end

            local shown = true
            if shown then
                local loccount = count
                row[loccount]:createButton({ active = menu.isInfoModeValidFor(menu.Selected.strComponent, entry.category), height = sideBarWidth, bgColor = bgcolor, mouseOverText = entry.name, scaling = false, helpOverlayID = entry.helpOverlayID, helpOverlayText = entry.helpOverlayText }):setIcon(entry.icon, { color = color})
                row[loccount].handlers.onClick = function () return menu.buttonInfoSubMode(entry.category, loccount) end
                count = count + 1
            end
        else
            count = count + 1
        end
    end
    
	if menu.selectedRows["manager"]["orderHeaderTable"] then
		--orderHeaderTable.properties.defaultInteractiveObject = true
		orderHeaderTable:setSelectedRow(menu.selectedRows["manager"]["orderHeaderTable"])
        orderHeaderTable:setSelectedCol(menu.selectedCols["manager"]["orderHeaderTable"] or 0)
		menu.selectedRows["manager"]["orderHeaderTable"] = nil
		menu.selectedCols["manager"]["orderHeaderTable"] = nil
	end

    return orderHeaderTable
end

function menu.isInfoModeValidFor(strComponent, mode)
    local result
    --local fleetID, shipID = menu.Convert_StrComponent_To_ID(strComponent)
    local record = menu.GetRecordFromMd(strComponent) 
    if record then
        if mode == "objectrespond" then
            result = (record.construction.buildingcontainer or record.isLost or record.isWaitingForRebuild or record.addingTask) and true or false
        elseif  mode == "objectinfo" or mode == "objectcrew" or mode == "objectloadout" or mode == "objectstandingorders" then
            result = true
        elseif mode == "orderqueue" then
            result = (record.class ~= "station")
        end
    end
    return result or false
end


function menu.buttonInfoSubMode(mode, col)
	if mode ~= menu.RightFrameMode then
        --DebugError("TOGGLE InfoSubMode  " .. "  old = " .. tostring(menu.RightFrameMode) .. "  new = " .. tostring(mode) .. "  col = " .. tostring(col))
		menu.RightFrameMode = mode

		menu.selectedRows["manager"]["orderHeaderTable"] = 1
		menu.selectedCols["manager"]["orderHeaderTable"] = col
        
        menu.topRows["manager"]["RightFrame"] = 1

        --menu.refreshRightFrame(1,0)
        menu.refreshRightFrame()
	end
end

function menu.createInfoSubmenu(frame)

    local isvalid = menu.isInfoModeValidFor(menu.Selected.strComponent, "objectinfo")

    local produceownertable 

    local ftable = frame:addTable(9, { 
        tabOrder = 1,
        x = Helper.borderSize,
        width = frame.properties.width - 2*  Helper.borderSize,
        backgroundID = menu.RightFrameData.table.backgroundID,
        backgroundColor = debugColorMod and config.sColor.darkgreen or menu.RightFrameData.table.backgroundColor,
        })

    
    ftable:setColWidth(9, config.mapRowHeight)
    -- Kılavuz 
    --local row = ftable:addRow(false, { bgColor = config.sColor.orange } )
    --row[1]:setColSpan(1):createText("", {})

    local strComponent = menu.Selected.strComponent
    local fleetID = menu.Selected.fleetID
    local record = menu.GetRecordFromMd(strComponent)
    local strRealCommander = menu.Convert_ID_To_StrComponent(fleetID, 1)
    local realCommanderRecord = menu.GetRecordFromMd( strRealCommander )
    record = record or realCommanderRecord
    local fleet = menu.GetFleet(fleetID)
    local promoted, promotedid, commandername, commanderid, sector, sectorcolor, orderid = "", "", "", "", "", config.Color.text_normal, ""

    --- title ---
    local row = ftable:addRow(false, { fixed = true, bgColor = config.Color["row_title_background"] })
    row[1]:setColSpan(9):createText(ReadText(tPg, 1160), Helper.headerRowCenteredProperties)      -- Record Information
    row[1].properties.color = config.infoTableRowsColor.tittle
    local row = ftable:addRow(false, { fixed = true, bgColor = config.Color["row_title_background"] })
    row[1]:setColSpan(9):createText(ReadText(1001, 1111), Helper.headerRowCenteredProperties)      -- General Information
    row[1].properties.color = config.infoTableRowsColor.section
    
    if isvalid then
        -- object name
        local titlecolor, objectname, objectidcode = menu.holomapcolor.playercolor, "", ""
        local row = ftable:addRow("info_focus", { fixed = true, bgColor = config.Color["row_title_background"] })
        row[9]:createButton({ active = function() return (record.object or record.build) and true or false end, height = Helper.headerRow1Height, width = config.mapRowHeight, cellBGColor = config.Color["row_background"] }):setIcon("menu_center_selection", { width = Helper.standardTextHeight, height = Helper.standardTextHeight, y = (Helper.headerRow1Height - Helper.standardTextHeight) / 2 })
        row[9].handlers.onClick = function () return menu.buttonOnShowMap(record) end 
        if record then
            if record.object64 == C.GetPlayerObjectID() then
                titlecolor = menu.holomapcolor.currentplayershipcolor
            end
            objectname, objectidcode = record.name, record.idcode .. " "
        end
        local strComponentS = string.format("%s%s \027X", Helper.convertColorToText(config.sColor.lightgrey), strComponent) 
        objectname = string.format("%s%s\027X", Helper.convertColorToText(titlecolor), objectname) 
        row[1]:setBackgroundColSpan(8):setColSpan(5):createText(strComponentS .. objectname, Helper.headerRow1Properties)
        row[6]:setColSpan(3):createText(objectidcode, Helper.headerRow1Properties)
        row[6].properties.halign = "right"
        row[6].properties.color = titlecolor

        -- Fleet Tittle Section
        local row = ftable:addRow(false, {  } )
        row[1]:setColSpan(9):createText(ReadText(tPg, 6500), Helper.headerRowCenteredProperties )   -- "Fleet Commander"
        row[1].properties.color = config.infoTableRowsColor.subsections
    else
        row = ftable:addRow("none", { fixed = true, bgColor = config.sColor.transparent, interactive = false })
        row[1]:setColSpan(5):createText( config.nonetext , { halign = "left", color = config.Color.text_inactive })   -- None
    end

    if fleet then 

        promoted = fleet.name
        commandername = fleet.commander.name
        promotedid = fleet.idcode ~= "" and " ( " .. fleet.idcode .. " ) " or fleet.idcode
        commanderid = fleet.commander.idcode ~= "" and  " ( " .. fleet.commander.idcode .. " ) " or fleet.commander.idcode
        sector = realCommanderRecord.sector
        sectorcolor = realCommanderRecord.sectorid and GetFactionData(GetComponentData(realCommanderRecord.sectorid, "owner"), "color") or config.Color.text_inactive
        orderid = realCommanderRecord.defaultorder and realCommanderRecord.defaultorder.id or ""
        local hasloop = false

        local promotedcommander = " [ " .. menu.Convert_ID_To_StrComponent(fleet.id, fleet.shipid) .. " ] "
        promotedcommander = promotedcommander .. promoted ..  promotedid
        row = ftable:addRow(false, {  } )
        row[1]:setColSpan(2):createText(ReadText(tPg, 6520) .. ":", config.rowLabelProperties)     -- "Promoted"
        row[3]:setColSpan(7):createText(promotedcommander, config.rowValueProperties)

        local prntstrRealCommander = " [ " .. strRealCommander .. " ] "
        local realcommander = commandername ..  commanderid

        local objectname = fleet.commander.object and menu.strip_color(GetComponentData(fleet.commander.object, "name")) or commandername
        row = ftable:addRow(false, {  })
        row[1]:setColSpan(1):createText(ReadText(tPg, 6012) .. ":", config.rowLabelProperties )       -- Name
        row = ftable:addRow(false, {  })
        row[1]:setColSpan(2):createText(ReadText(tPg, 11230), { halign = "right", minRowHeight = config.mapRowHeight, fontsize = config.mapFontSize, font = Helper.standardFont, x = Helper.standardTextOffsetx })  -- Recorded

        row[3]:setColSpan(7):createText(commandername , config.rowValueProperties)

        row = ftable:addRow(true, {  })
        row[1]:setColSpan(2):createText(ReadText(tPg, 11229), { halign = "right", minRowHeight = config.mapRowHeight, fontsize = config.mapFontSize, font = Helper.standardFont, x = Helper.standardTextOffsetx })  -- active
        row[3]:setColSpan(6):createEditBox({ height = config.mapRowHeight }):setText(objectname, { halign = "right" })
        row[3].handlers.onEditBoxActivated = function (widget) return menu.editboxInfoObjectNameActivated(widget) end
        row[3].handlers.onEditBoxDeactivated = function(_, text, textchanged) return menu.infoChangeObjectName(fleetID, realCommanderRecord, text, textchanged) end
        
        --row[9]:createButton({ active = true, height = config.mapRowHeight, width = config.mapRowHeight, cellBGColor = config.Color["row_background"] }):setIcon("vt_logbook", { width = Helper.standardTextHeight, height = Helper.standardTextHeight, y = (Helper.headerRow1Height - Helper.standardTextHeight) / 2 })
        --row[9].handlers.onClick = function () return menu.buttonOnShowMap(record) end 



        row = ftable:addRow(false, {   } )
        row[1]:setColSpan(2):createText(ReadText(tPg, 6540) .. ":", config.rowLabelProperties)     -- "Order Location"
        if sector ~= "" then
            row[3]:setColSpan(7):createText(sector, config.rowValueProperties)
            row[3].properties.color = sectorcolor        
        end

        if realCommanderRecord and #realCommanderRecord.orders > 0 then
            hasloop = tonumber(realCommanderRecord.orders[1].isinloop) == 1
        end
        row = ftable:addRow(false, {  } )
        --row[1]:setColSpan(2):createText((hasloop and (utf8.char(8734) .. " ") or "") .. ReadText(1001, 3225) .. (hasloop and (" [" .. ReadText(1001, 11270) .. "]") or "") .. ":", config.rowLabelProperties)  --  [ , Order Queue , (Order )Loop 
        --row[3]:setColSpan(8):createText(not hasloop and orderid or "", config.rowValueProperties)
        row[1]:setColSpan(2):createText(ReadText(1001, 3225) .. ":", config.rowLabelProperties)  --  Order Queue :
        row[3]:setColSpan(7):createText(hasloop and ( (utf8.char(8734) .. " ") .. ReadText(1001, 3225) .. " [" .. ReadText(1001, 11270) .. "]" ) or orderid, config.rowValueProperties)
        row = ftable:addRow(false, {  } )
        row[1]:setColSpan(9):createText("", {height = 3})

    end

    local infovisibleHeight = frame.properties.height
    local prodvisibleHeight = nil

    if record then 
        -- Selected Ship Details
        local name, nameid, commanderidx, commandername, commandernameid, assignment, subordinategroupid, subordinategrouptext = "", "", "", "", "", "", "", ""
        
        local isFleetLeader = (not record.commanderidx or record.commanderidx == -1) and true
        if not record.commanderidx then DebugError("rfm_" .. tostring(fleet.id) .. "_" .. tostring(record.id) .. " no have property .commanderidx" ) end
        name = record.name
        nameid = (record.idcode ~= "") and " ( " .. record.idcode .. " ) " or record.idcode
        
        name =  Helper.convertColorToText(config.sColor.white) .. " [ " .. menu.Convert_ID_To_StrComponent(fleet.id, record.id) .. " ] " .. Helper.convertColorToText(config.rowValueProperties.color) .. name
        commanderidx = Helper.convertColorToText(config.sColor.white) .. " [ " .. menu.Convert_ID_To_StrComponent(fleet.id, record.commanderidx) .. " ] "
        commandername = not isFleetLeader and menu.RM_FleetRecords[fleetID][record.commanderidx].name or "{ " .. ReadText(tPg, 6500) .. " }"     -- "Fleet Commander"
        commandername = Helper.convertColorToText(config.rowValueProperties.color) .. commandername
        commandernameid = (not isFleetLeader and menu.RM_FleetRecords[fleetID][record.commanderidx].idcode ~= "") and " ( " .. menu.RM_FleetRecords[fleetID][record.commanderidx].idcode .. " ) " or ""
        subordinategroupid = not isFleetLeader and (debugW and " ( " .. record.subordinategroupid .. " )" or "") or ""
        subordinategrouptext = not isFleetLeader and record.subordinategrouptext or ""
        assignment = not isFleetLeader and config.assignments[record.assignment].name or ""
        local shiptypename = record.type and (record.object64 ~= 0 and tostring(GetComponentData(record.object64, "shiptypename")) or record.type) or ReadText(tPg, 1201)

        local shipStatus = ""
        local location, locationid
        local locationowner 
        local locationownercolor 

        if record.destroyed then
            if record.isLost then
                shipStatus =  ReadText(tPg, 6024) .. "\n " .. ReadText(tPg, 6037)  -- "Lost Ship. Need manual click to 'Rebuild' proccess.."
                location = ""
            else
                if record.build then
                    shipStatus = ""
                    location = record.shipyard.sector
                    locationownercolor = record.shipyard.sectorownercolor
                else
                    shipStatus = ReadText(tPg, 6038)    -- "Waiting for next rebuild check"
                    location = ""
                end
            end
        else
            location, locationid = GetComponentData(record.object64, "sector", "sectorid") 
            locationowner = GetComponentData(locationid, "owner")
            locationownercolor = GetFactionData(locationowner, "color")
        end

        -- Ship Details Section
        row = ftable:addRow(false, {  } )
        row[1]:setColSpan(9):createText(ReadText(tPg, 6560), Helper.headerRowCenteredProperties )   -- "Ship Details"
        row[1].properties.color = config.infoTableRowsColor.subsections

        -- "Ship Type"
        row = ftable:addRow(true, {  } )
        row[1]:setColSpan(2):createText(ReadText(1001, 9051) .. ReadText(1001, 120) or "", config.rowLabelProperties)
        row[3]:setColSpan(7):createText(shiptypename , config.rowValueProperties)
        row[3].properties.halign = "left"
        
        row = ftable:addRow(false, {  } )
        row[1]:setColSpan(2):createText(ReadText(tPg, 6012) .. ":", config.rowLabelProperties)      -- "Name"
        row[3]:setColSpan(7):createText(name .. nameid, config.rowValueProperties)
        
        row = ftable:addRow(false, {  } )
        row[1]:setColSpan(2):createText(ReadText(tPg, 1211) .. ":", config.rowLabelProperties)      -- "Location"
        if location ~= "" then
            row[3]:setColSpan(7):createText(location, config.rowValueProperties)
            row[3].properties.color = locationownercolor 
        end
        
        row = ftable:addRow(false, {   } )
        row[1]:setColSpan(2):createText(ReadText(tPg, 6570) .. ":", config.rowLabelProperties)     -- "Commander"
        row[3]:setColSpan(7):createText((not isFleetLeader and commanderidx or "") .. commandername .. commandernameid , config.rowValueProperties)
        
        row = ftable:addRow(false, {   } )
        row[1]:setColSpan(2):createText(not isFleetLeader and ReadText(tPg, 6580) .. ":" or "", config.rowLabelProperties)    -- "Sub. group"
        row[3]:setColSpan(7):createText(subordinategrouptext .. (debugW and subordinategroupid or "" ), config.rowValueProperties)
        row[3].properties.halign = "left"

        row = ftable:addRow(false, {  } )
        row[1]:setColSpan(2):createText(not isFleetLeader and ReadText(tPg, 6590) .. ":" or "", config.rowLabelProperties)    -- "Assignment"
        row[3]:setColSpan(7):createText(assignment , config.rowValueProperties)
        row[3].properties.halign = "left"
        

        -- blinklerin başlayacağı zaman, nil olursa kapanır
        menu.warningShown = getElapsedTime()
        local alertShipPlanMsg = record.isRecordCorrupt and ReadText(tPg, 8020) .. " " .. ReadText(tPg, 8021) or ReadText(tPg, 1345)    -- "To fix, wait for the ship to be produced."  ,  "OK"
        row = ftable:addRow(false, {  })
        row[1]:setColSpan(2):createText(ReadText(tPg, 6600) .. ":", config.rowLabelProperties)    -- "Loadout Status"
        row[3]:setColSpan(7):createText(alertShipPlanMsg , menu.rowAlertTextProperties )
        row[3].properties.wordwrap = record.isRecordCorrupt
        if (not record.isRecordCorrupt) then
            row[3].properties.color = config.sColor.grey
        end


        -- Produce Owners
        menu.details = {}
        menu.details.producedowners = {}
        local macroname, ware = GetMacroData( record.macro , "name", "ware")
        if ware then
            local n = C.GetNumWareBlueprintOwners(ware)
            local buf = ffi.new("const char*[?]", n)
            n = C.GetWareBlueprintOwners(buf, n, ware)
            local first = true
            for i = 0, n - 1 do
                local faction = ffi.string(buf[i])
                local name = GetFactionData(faction, "name")
                if IsKnownItem("factions", faction) then
                    --producedby = producedby .. ((producedby ~= "") and " , " or "" ) .. name	-- Produced by
                    table.insert(menu.details.producedowners, faction)
                end
            end
            local numblueprints = C.GetNumBlueprints("", "", "")
            local blueprints = ffi.new("UIBlueprint[?]", numblueprints)
            numblueprints = C.GetBlueprints(blueprints, numblueprints, "", "", "")
            local playerblueprints = {}
            for i = 0, numblueprints - 1 do
                local bware = ffi.string(blueprints[i].ware)
                playerblueprints[bware] = true
            end
            --menu.tablePrint(playerblueprints, "playerblueprints = ", true, true)
            local owned = playerblueprints[ware]
            if owned then
                table.insert(menu.details.producedowners, "player")
            end
        end

        -- * tabOrder verilmez ise kaydırma oluşturulmaz, ve tablo içinde kaydırmaya sebep olan satır oluşursa hata verir
        --produceownertable = frame:addTable(10, { tabOrder = 8, reserveScrollBar = true, highlightMode = "off", skipTabChange = true, backgroundID = "solid", backgroundColor = config.Color.table_background_3d_editor })
        produceownertable = frame:addTable(10, { 
            tabOrder = 8, 
            x = Helper.borderSize,
            width = frame.properties.width - 2*  Helper.borderSize,
            highlightMode = "off",
            backgroundID = menu.RightFrameData.table.backgroundID,
            backgroundColor = debugColorMod and config.sColor.female1 or menu.RightFrameData.table.backgroundColor,
            skipTabChange = true,
        })

        if #menu.details.producedowners > 0 then

            local row = produceownertable:addRow(false, { fixed = true  } )   
            row[1]:setColSpan(3):createText(ReadText(tPg, 6610), config.rowLabelProperties)     -- "Produces Chassis"
    
            local maxrows = 3
            local totalrows = 0

            for i, faction in ipairs(menu.details.producedowners) do
                totalrows = totalrows + 1
                local factionname, factioncolor = GetFactionData(faction, "name", "color")
                local row = produceownertable:addRow(true, {  } )   -- kaydırma çubuğu için row true ile açılacak ve properties boş olacak
                row[2]:setColSpan(8):createText(factionname, config.rowValueProperties)
                row[2].properties.color = factioncolor
                row[2].properties.halign = "center"
                if totalrows == maxrows then
                    prodvisibleHeight = produceownertable:getFullHeight()
                end
            end
            if totalrows < maxrows then
                for i= 1, maxrows - totalrows  do
                    local row = produceownertable:addRow(false, {  } )   -- kaydırma çubuğu için row true ile açılacak ve properties boş olacak
                    row[1]:setColSpan(10):createText(" ", config.rowValueProperties)
                end
            end
            if prodvisibleHeight then
                produceownertable.properties.maxVisibleHeight = prodvisibleHeight
            else
                produceownertable.properties.maxVisibleHeight = produceownertable:getFullHeight()
            end

        end

    end

    if menu.selectedRows["manager"]["RightFrame"] then
        ftable:setSelectedRow(menu.selectedRows["manager"]["RightFrame"])
        menu.selectedRows["manager"]["RightFrame"] = nil
    end
    if menu.topRows["manager"]["RightFrame"] then
        ftable:setTopRow(menu.topRows["manager"]["RightFrame"])
        menu.topRows["manager"]["RightFrame"] = nil
    end

    local table_header = menu.createOrdersMenuHeader(frame)

    ftable.properties.y = table_header.properties.y + table_header:getFullHeight() + 2* Helper.borderSize
    if produceownertable then
        produceownertable.properties.y = (frame.properties.height) - produceownertable:getVisibleHeight() - 1 * Helper.borderSize
        ftable.properties.maxVisibleHeight = produceownertable.properties.y - ftable.properties.y - Helper.borderSize
    else
        ftable.properties.maxVisibleHeight = infovisibleHeight - Helper.borderSize
    end
    
end

function menu.editboxInfoObjectNameActivated(widget)
	menu.noupdate = true
end
function menu.infoChangeObjectName(fleetID, record, text, textchanged)
    local objectid = record.object
    local object64 = ConvertStringTo64Bit( tostring(objectid) )
    local recname = record.name
    --DebugError("fleetID = " .. tostring(fleetID) .. " , object = " .. tostring(objectid) .. " , recname = " .. tostring(recname) .. " , textchanged = " .. tostring(textchanged) .. " , new name = " .. text )
	if textchanged then
        if text == "" then
            if recname == "" then
                recname = GetMacroData(record.macro, "name")
            end
            text = recname
        end
        if object64 ~= 0 then
            SetComponentName(objectid, text)
        end
		menu.RM_FleetRecords[fleetID][1].name = text
        menu.RM_Fleets[fleetID].commander.name = text
        if menu.RM_Fleets[fleetID].shipid == 1 then
            menu.RM_Fleets[fleetID].name = text
        end
        AddUITriggeredEvent(menu.name, "rfm_CommanderNameChanged", { fleetID, text })
	end

	menu.noupdate = false
	menu.refreshMenuFrame()
end


function menu.createRespondInfoSubmenu(frame)
    
    local table_info = frame:addTable(7, { 
        tabOrder = 1,
        x = Helper.borderSize,
        width = frame.properties.width - 2*  Helper.borderSize,
        backgroundID = menu.RightFrameData.table.backgroundID,
        backgroundColor = debugColorMod and config.sColor.darkgreen or menu.RightFrameData.table.backgroundColor,
        })


    table_info:setColWidth(7, config.mapRowHeight)
    -- Kılavuz 
    --local row = table_info:addRow(false, { bgColor = config.sColor.orange } )
    --row[1]:setColSpan(1):createText("", {})

    local strComponent = menu.Selected.strComponent
    local record = menu.GetRecordFromMd(strComponent)
    
    --- title ---
    local row = table_info:addRow(false, { fixed = true, bgColor = config.Color["row_title_background"] })
    row[1]:setColSpan(7):createText( ReadText(tPg, 1160), Helper.headerRowCenteredProperties)      -- Record Information
    row[1].properties.color = config.infoTableRowsColor.tittle
    local row = table_info:addRow(false, { fixed = true, bgColor = config.Color["row_title_background"] })
    row[1]:setColSpan(7):createText(ReadText(tPg, 8002), Helper.headerRowCenteredProperties)      -- Replacement Status
    row[1].properties.color = config.infoTableRowsColor.section
    -- object name
    local titlecolor, objectname, objectidcode = menu.holomapcolor.playercolor, "", ""
    local row = table_info:addRow("info_focus", { fixed = true, bgColor = config.Color["row_title_background"] })
	row[7]:createButton({ active = function() return (record.object or record.build) and true or false end, height = Helper.headerRow1Height, width = config.mapRowHeight, cellBGColor = config.Color["row_background"] }):setIcon("menu_center_selection", { width = Helper.standardTextHeight, height = Helper.standardTextHeight, y = (Helper.headerRow1Height - Helper.standardTextHeight) / 2 })
    row[7].handlers.onClick = function () return menu.buttonOnShowMap(record) end 
    if record then
        if record.object64 == C.GetPlayerObjectID() then
            titlecolor = menu.holomapcolor.currentplayershipcolor
        end
        objectname, objectidcode = record.name, record.idcode .. " "
    end
    local strComponentS = string.format("%s%s \027X", Helper.convertColorToText(config.sColor.lightgrey), strComponent) 
    objectname = string.format("%s%s\027X", Helper.convertColorToText(titlecolor), objectname) 
    row[1]:setBackgroundColSpan(6):setColSpan(5):createText(strComponentS .. objectname, Helper.headerRow1Properties)
    row[6]:setColSpan(1):createText(objectidcode, Helper.headerRow1Properties)
    row[6].properties.halign = "right"
    row[6].properties.color = titlecolor


    local constructiontable, destroytable = nil, nil
    local table_Middle, table_Bottom = nil,nil
    
    if record then 

        local shipStatus = record.shipStatus -- ""
        local ishaverepondwares = record.respond.equipmentwares and #record.respond.equipmentwares > 0
        --[[
        if record.destroyed then
            if record.isLost then
                -- ReadText(tPg, 6024) "Lost Ship. 
                -- ReadText(tPg, 6037) "Need 'Rebuild' proccess.."
                -- ReadText(tPg, 6160) "Need 'Rebuild' or 'Build' proccess.."
                shipStatus =  ReadText(tPg, 6024) .. "\n " .. ((not record.reBuildStartTime) and ishaverepondwares and " " .. ReadText(tPg, 6160) or " " .. ReadText(tPg, 6037)) 
            else    -- build added Or waiting for rebuild
                if record.build then
                    shipStatus = ""
                else
                    shipStatus = ReadText(tPg, 6038)    -- "Waiting for next rebuild check"
                    if record.addingTask then
                        shipStatus = record.shipStatus
                    end
                end
            end
        end
        ]]

        -- Selected Ship Destroy Details
        local name = record.name
        local reBuildTryNum = record.reBuildTryNum
        local shipyardname = record.shipyard.name
        local shipyardsector = record.shipyard.sector
        local shipyardid = shipyardname ~= "" and  " ( " .. record.shipyard.idcode .. " )" or record.shipyard.idcode
        local respondMsg = record.respondMsg
        local statusIcon = record.statusIcon
        
        local passedTime = function() return menu.getPassedTime(record.destroyedtime and record.destroyedtime or record.reBuildStartTime ) end
        local xremainTime = record.reBuildStartTime and (tonumber(record.reBuildStartTime) + tonumber(menu.editedSettings.NextRetryTime) * 60) + 0.8 or 0
        local remainTime = record.reBuildStartTime and function() return menu.getRemainingTime(xremainTime) end or ""
        menu.respondwares = {}

        --[[ConvertMoneyString 
            1. parametre parasal değer
            2. parametre true = cent kısmını gösterir (.yy)
            3. parametre true = tutardaki basamak ayracını (x,xxx,xxx) gösterir
            4. parametre nil = 0, ya da rakam = gösterilecek basamak sayısı
                (tutardaki basamak sayısı belirtilen rakamdan fazla ise tutarın yanına k, M gibi kısaltma yaparak tutarı belirtir)
            5. parametre hiç bir etki göstermiyor gibi
        ]]

        local row
        local errors = {}

        -- ' 2 TABLE , which MIDDLE & BOTTOM'

        local playermoney = GetPlayerMoney()
        local fee
        fee = function() return Helper.convertColorToText(config.Color.text_positive) .. ConvertMoneyString(playermoney, false, true, nil, true) .. " " .. ReadText(1001, 101) .. "\027X" end

        -- MIDDLE Construction & Bottom Tables  (Under Construction Section)
        if record.construction.buildingcontainer then
            constructiontable = frame:addTable(13, { 
                tabOrder = 3,
                x = Helper.borderSize,
                width = frame.properties.width - 2*  Helper.borderSize,
                backgroundID = menu.RightFrameData.table.backgroundID,
                backgroundColor = debugColorMod and config.sColor.darkred or menu.RightFrameData.table.backgroundColor,
            })

            constructiontable:setColWidth(2, config.mapRowHeight)
            constructiontable:setColWidth(3, config.mapRowHeight)
            constructiontable:setDefaultCellProperties("text", { minRowHeight = config.mapRowHeight, fontsize = config.mapFontSize })
            constructiontable:setDefaultCellProperties("button", { height = config.mapRowHeight })
            constructiontable:setDefaultCellProperties("icon",   { height = config.mapRowHeight })
            --destroytable:setDefaultCellProperties("checkbox",   { height = config.mapRowHeight })
            constructiontable:setDefaultComplexCellProperties("button", "text", { fontsize = config.mapFontSize })

            -- Kılavuz 
            --row = constructiontable:addRow(false, { fixed = true, bgColor = config.sColor.orange } )
            --row[1]:setColSpan(1):createText("", {})

            if not C.HasSuitableBuildModule(record.construction.buildingcontainer, record.construction.component, record.macro) then
                errors[4] = ReadText(tPg, 8563)
            end

            row = constructiontable:addRow(false, { fixed = true, bgColor = config.Color["row_title_background"] } )
            row[1]:setColSpan(13):createText(ReadText(tPg, 6042) , Helper.headerRowCenteredProperties)    -- "Construction Status"
            row[1].properties.color = config.infoTableRowsColor.subsections

            row = constructiontable:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
            row[1]:setColSpan(2):createText(ReadText(tPg, 1201) , config.rowLabelProperties)     -- "Station"
            row[4]:setColSpan(10):createText(Helper.convertColorToText(record.shipyard.factioncolor) .. shipyardname .. shipyardid , config.rowValueProperties)
            row[4].properties.halign = "right"
            
            local entry = { type = "build", name = ReadText(tPg, 11228) }      -- "Construction Drones"
            local row1 = constructiontable:addRow("drone_config", { fixed = true })
            row1[2]:setColSpan(5):createText(entry.name, config.rowLabelProperties)
            row1[7]:setColSpan(2):createText(function () return C.GetNumStoredUnits(record.construction.buildingcontainer, entry.type, false) end, { halign = "right", color = C.GetNumStoredUnits(record.construction.buildingcontainer, entry.type, false) > 0 and config.rowValueProperties.color or config.Color.text_warning })
            row1[7].properties.halign = "right"
            local row2 = constructiontable:addRow("drone_config", { fixed = true })
            row2[2]:setColSpan(5):createText(ReadText(tPg, 11229), config.rowLabelProperties  )     -- "Active( Drones)"
            row2[7]:setColSpan(2):createText(function () return C.GetNumUnavailableUnits(record.construction.buildingcontainer, entry.type) end, { halign = "right" , color =  C.GetNumUnavailableUnits(record.construction.buildingcontainer, entry.type) > 0 and config.Color.text_normal or record.construction.inprogress and config.Color.text_warning or config.rowValueProperties.color })
            row2[7].properties.halign = "right"

            row = constructiontable:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
            row[1]:setColSpan(2):createText(ReadText(tPg, 1211) , config.rowLabelProperties)                -- Location
            row[4]:setColSpan(10):createText(Helper.convertColorToText(record.shipyard.sectorownercolor) .. shipyardsector , config.rowValueProperties)
            row[4].properties.halign = "right"

            constructiontable:addEmptyRow()

            row = constructiontable:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
            row[2]:setColSpan(4):createText( ReadText(tPg, 6102) , { halign="left", color = config.rowLabelProperties.color } )    -- Player Money
            row[6]:setColSpan(7):createText( fee , { halign = "right" } )

            constructiontable:addEmptyRow()

            local construction = record.construction 
            local color -- = (construction.factionid == "player") and config.Color.text_player or config.Color["text_normal"]
            local errcolor
            local errtext = ""

            --DebugError(".macro = " .. tostring(record.macro) )
            --menu.tablePrint(record.tShipPlan or {}, ".tShipPlan = [" .. tostring(fleetKey) .. "][" .. tostring(SelectedShip) .. "]" , true, true)
            -- YAPILACAK: lua haberleşmeden dolayı record.tShipPlan  oluşmamış olabilir bug vs..  
            -- burda bir plan çıkarabiliriz. ayrıca md ye gödnerebiliriz güncellemek için
            local missingResources = {}
            local mouseovertext = ""
            row = constructiontable:addRow({ "construction", record.shipyard.object, construction }, { fixed = true, bgColor = config.sColor.transparent } )
            if construction.inprogress then
                color = config.sColor.lightgrey
                if construction.ismissingresources then
                    mouseovertext = ReadText(1026, 3223)
                    missingResources = menu.Get_MissingBuildProcessorResources (record.construction.buildingcontainer, construction.buildercomponent)
                    errcolor = (#missingResources > 0) and config.sColor.orange or color
                    errtext = (#missingResources > 0) and Helper.convertColorToText(errcolor) .. "\27[warning] " .. ReadText(1026, 3223) or ""
                    mouseovertext = mouseovertext .. "\n\n" .. ReadText(1001, 8046) .. ReadText(1001, 120) .. Helper.convertColorToText(errcolor)
                    for i, entry in ipairs(missingResources) do
                        mouseovertext = mouseovertext .. "\n· " .. entry.amount .. ReadText(1001, 42) .. " " .. GetWareData(entry.ware, "name")
                    end
                end
                local timeleftText = 
                function () return 
                    Helper.formatTimeLeft(C.GetBuildProcessorEstimatedTimeLeft(construction.buildercomponent)) ..
                    " ( " .. menu.getShipBuildProgress(construction.component) .. " )" 
                end

                row[2]:setColSpan(7):createText(name .. " (" .. ffi.string(C.GetObjectIDCode(construction.component)) .. ")", { halign = "left", color = color, mouseOverText = mouseovertext })
                row[9]:setColSpan(5):createText(timeleftText, { halign = "right", color = color, mouseOverText = mouseovertext })    -- "The station is missing resources for this build."
            else
                color = config.sColor.darkgrey
                missingResources = menu.Get_MissingBuildResources(record.construction.buildingcontainer, record.macro, record.tShipPlan and record.tShipPlan )
                errcolor = errors[4] and config.sColor.statusRed or (#missingResources > 0) and config.sColor.warningorange or color
                errtext = errors[4] and Helper.convertColorToText(errcolor) .. "\27[warning] " .. errors[4] or (#missingResources > 0) and Helper.convertColorToText(errcolor) .. "\27[warning] " .. ReadText(1001, 8018) or ""
                if #missingResources > 0 then
                    mouseovertext = Helper.convertColorToText(errcolor) .. ReadText(1001, 8018) .. "\n\n" .. Helper.convertColorToText(config.sColor.white) .. ReadText(1001, 8046) .. ReadText(1001, 120) .. Helper.convertColorToText(errcolor)
                    for i, entry in ipairs(missingResources) do
                        mouseovertext = mouseovertext .. "\n· " .. entry.amount .. ReadText(1001, 42) .. " " .. GetWareData(entry.ware, "name")
                    end
                end
                
                local duration = not errors[4] and C.GetBuildTaskDuration(construction.buildingcontainer, construction.id) or 0
                row[2]:setColSpan(7):createText(name, { color = color, mouseOverText = mouseovertext })
                row[9]:setColSpan(2):createText("#" .. construction.queueposition , { halign = "center", color = color, mouseOverText = mouseovertext })
                row[11]:setColSpan(3):createText(Helper.formatTimeLeft(duration), { halign = "right", color = color, mouseOverText = mouseovertext })
            end

            row[1]:createButton({  mouseOverText = construction.inprogress and "" or ReadText(tPg, 6040), active = C.CanCancelConstruction(construction.buildingcontainer, construction.id) and ((construction.factionid == "player") or GetComponentData(ConvertStringTo64Bit(tostring(construction.buildingcontainer)), "isplayerowned")) } )  -- "Cancel Construction"
            row[1]:setText("X", { halign = "center" }) 
            row[1].handlers.onClick = function()

                    return menu.buttonCancelRebuildShips()
                    --menu.buttonCancelConstruction(construction.buildingcontainer, construction.id )
                    --menu.RM_RebuildCues[menu.Selected.fleetID][menu.Selected.shipID] = nil
                    --menu.refreshMenuFrame()
                end 
            
            local emptyrow = constructiontable:addEmptyRow()
            
            local colwidth = 2 * (row[1]:getWidth() + Helper.borderSize)
            local text = errtext
            local textTable = GetTextLines(tostring(text), config.rowLabelProperties.font, config.rowLabelProperties.fontsize, constructiontable.properties.width - 2* Helper.borderSize - ( colwidth ))
            if #textTable > 0 then
                for _, line in ipairs(textTable) do
                    row = constructiontable:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                    row[2]:setColSpan(11):createText(line, { color = errcolor })
                end
            end
            
            table_Bottom = frame:addTable(2, { 
                tabOrder = 4, 
                x = Helper.borderSize ,
                width = frame.properties.width - 2 * Helper.borderSize ,
                y = 0, reserveScrollBar = true, highlightMode = "off", skipTabChange = true, backgroundID = "solid", backgroundColor = config.Color.table_background_3d_editor 
            })
            if #missingResources > 0 then

                local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.Color["row_title_background"] })
                row[1]:setColSpan(2):createText(ReadText(tPg, 8046), menu.headerWarningTextProperties)      -- "Missing Resources"
                -- disable blink effect
                --row[1].properties.color = config.Color["text_warning"]

                local visibleHeight = nil
                for i, entry in ipairs(missingResources) do
                    local row = table_Bottom:addRow(true, {  })
                    row[1]:createText(GetWareData(entry.ware, "name"), { color = config.Color["text_warning"] })
                    row[2]:createText(ConvertIntegerString(entry.amount, true, 0, true), { halign = "right", color = config.Color["text_warning"] })
                    if i == 5 then
                        visibleHeight = table_Bottom:getFullHeight()
                    end
                end
                
                if visibleHeight then
                    table_Bottom.properties.maxVisibleHeight = visibleHeight
                else
                    table_Bottom.properties.maxVisibleHeight = table_Bottom:getFullHeight()
                end
                table_Bottom.properties.y = frame.properties.height  - table_Bottom:getVisibleHeight() - 2 * Helper.borderSize - emptyrow:getHeight()

            end

            -- emptyrow:getHeight()
            

            table_Middle = constructiontable
        end

        -- MIDDLE Destroyed & Bottom Tables     (Rebuild Section)
        if record.isLost or record.isWaitingForRebuild or record.addingTask then
            
            local hasenginewares = false
            
            if record.respond.softwares or record.respond.equipmentwares then
                for i, ware in ipairs(record.respond.softwares) do
                    local entry = {}
                    entry, hasenginewares = menu.Get_respondequipmentinfo(ware)
                    table.insert(menu.respondwares, entry )
                end
                for i, ware in ipairs(record.respond.equipmentwares) do
                    local entry = {}
                    local enginewares = false
                    entry, enginewares = menu.Get_respondequipmentinfo(ware)
                    hasenginewares = hasenginewares or enginewares
                    table.insert(menu.respondwares, entry )
                end
                local wareclasssorder = {
                    thruster = 1,
                    engine = 2,
                    shield = 3,
                    missilelauncher = 4,
                    weapon = 5,
                    missileturret = 6,
                    turret = 7,
                    unit = 8,
                    missile = 9,
                    deployable = 10,
                    countermeasure = 11,
                    scanner = 12,
                    software = 13,
                    other = 14,
                }
                table.sort(menu.respondwares, function (a, b) return wareclasssorder[a.class] < wareclasssorder[b.class] end)
            end

            destroytable = frame:addTable(13, { 
                tabOrder = 3,
                x = Helper.borderSize,
                width = frame.properties.width - 2*  Helper.borderSize,
                backgroundID = menu.RightFrameData.table.backgroundID,
                backgroundColor = debugColorMod and config.sColor.male2 or menu.RightFrameData.table.backgroundColor,
            })

            destroytable:setColWidth(2, config.mapRowHeight)
            destroytable:setColWidth(3, config.mapRowHeight)
            destroytable:setDefaultCellProperties("text", { minRowHeight = config.mapRowHeight, fontsize = config.mapFontSize })
            destroytable:setDefaultCellProperties("button", { height = config.mapRowHeight })
            destroytable:setDefaultCellProperties("icon",   { height = config.mapRowHeight })
            --destroytable:setDefaultCellProperties("checkbox",   { height = config.mapRowHeight })
            destroytable:setDefaultComplexCellProperties("button", "text", { fontsize = config.mapFontSize })
        
            -- Kılavuz 
            --row = destroytable:addRow(false, { fixed = true, bgColor = config.sColor.orange } )
            --row[1]:setColSpan(1):createText("", {})

            -- Main Tittle
            row = destroytable:addRow(false, {  } )
            row[1]:setColSpan(13):createText(ReadText(tPg, 6630), Helper.headerRowCenteredProperties)         -- "Destroyed Ship Replacement Status"
            row[1].properties.color = config.infoTableRowsColor.subsections

            if not record.addingTask then
                -- Tittle
                row = destroytable:addRow(false, {  } )
                row[10]:setColSpan(4):createText(ReadText(tPg, 6045), config.rowLabelProperties)                 -- "Total Elapsed Time"
                row[10].properties.halign = "center"
                if record.reBuildStartTime then
                    row[4]:setColSpan(2):createText(ReadText(tPg, 6043), config.rowLabelProperties)             -- "Attempts"
                    row[4].properties.halign = "center"
                    row[6]:setColSpan(4):createText(ReadText(tPg, 6044), config.rowLabelProperties)             -- "Remaining Check Time"
                    row[6].properties.halign = "right"
                end
                -- Tittle Values
                if record.reBuildStartTime and record.isWaitingForRebuild then
                    row = destroytable:addRow("Cancell Timer", {  } )
                    row[1]:setColSpan(2):createText(ReadText(tPg, 1023), config.rowLabelProperties)      -- "Rebuild"
                    row[3]:setColSpan(1):createButton({  mouseOverText = ReadText(tPg, 6046), active = record.isWaitingForRebuild or false } )  -- "Cancell Rebuild Timer"
                    row[3]:setText("X", { halign = "center" })     -- "X"
                    row[3].handlers.onClick = function() return menu.buttonCancelRebuildShips() end
                    row[4]:setColSpan(2):createText("#" .. tostring(reBuildTryNum) , config.rowValueProperties)
                    row[4].properties.halign = "center"
                    row[4].properties.color = config.Color.text_normal
                    row[6]:setColSpan(4):createText(remainTime, config.rowtimeProperties)
                    row[6].properties.halign = "right"
                else
                    row = destroytable:addRow(false, {  } )
                end
                row[10]:setColSpan(4):createText(passedTime, config.rowtimeProperties)
            else
                row = destroytable:addRow(false, {  } )
                row[1]:setColSpan(2):createText(ReadText(tPg, 1201) , config.rowLabelProperties)     -- "Station"
                row[4]:setColSpan(10):createText(Helper.convertColorToText(record.shipyard.factioncolor) .. shipyardname .. shipyardid , config.rowValueProperties)
                row[4].properties.halign = "right"

                local entry = { type = "build", name = ReadText(tPg, 11228) }      -- "Construction Drones"
                local row1 = destroytable:addRow("drone_config", {  })
                row1[2]:setColSpan(5):createText(entry.name, config.rowLabelProperties)
                row1[7]:setColSpan(2):createText(function () return C.GetNumStoredUnits(record.shipyard.object64, entry.type, false) end, { halign = "right", color = C.GetNumStoredUnits(record.shipyard.object64, entry.type, false) > 0 and config.rowValueProperties.color or config.Color.text_warning })
                row1[7].properties.halign = "right"
                local row2 = destroytable:addRow("drone_config", {  })
                row2[2]:setColSpan(5):createText(ReadText(tPg, 11229), config.rowLabelProperties  )     -- "Active( Drones)"
                row2[7]:setColSpan(2):createText(function () return C.GetNumUnavailableUnits(record.shipyard.object64, entry.type) end, { halign = "right" , color =  C.GetNumUnavailableUnits(record.shipyard.object64, entry.type) > 0 and config.Color.text_normal or config.rowValueProperties.color })
                row2[7].properties.halign = "right"
    
                row = destroytable:addRow(false, {  } )
                row[1]:setColSpan(2):createText(ReadText(tPg, 1211) , config.rowLabelProperties)                -- Location
                row[4]:setColSpan(10):createText(Helper.convertColorToText(record.shipyard.sectorownercolor) .. shipyardsector , config.rowValueProperties)
                row[4].properties.halign = "right"
    
                destroytable:addEmptyRow()
    
            end
            row = destroytable:addRow(true, {  } )
            if record.isWaitingForRebuild then
                row[1]:setColSpan(13):createText(shipStatus , config.rowValueProperties)
                row[1].properties.halign = "left"
            else
                if record.addingTask then
                    row[1]:setColSpan(13):createText(" " .. record.shipStatus , config.rowValueProperties)  
                else
                    row[1]:setColSpan(13):createText(" " .. ReadText(tPg, 6165) .. shipStatus , config.rowValueProperties)  -- "No Waiting for Rebuild.."
                end
            end

            destroytable:addEmptyRow()
            
            local totalprice = 0
            local mouseOverTextF 
            local canbuild = nil
            
            menu.isremoverespondwares = (menu.isremoverespondwares == nil) and true or menu.isremoverespondwares
            --menu.isremoverespondwares = menu.isremoverespondwares or true 
            menu.usestationengines = menu.usestationengines or true     -- Seçeneği kilitledik. istasyon engineleri ile her türlü değişilmesi gerekiyor.
            --if not menu.isremoverespondwares then menu.usestationengines = false end

            --respond ware listesi
            if record.tShipPlan then

                -- respond ware listesinde birşeyler varsa
                if ishaverepondwares then

                    local yard64 = ConvertStringTo64Bit(tostring(record.respond.yard))
                    local name = ffi.string(C.GetComponentName( yard64 ))
                    local idcode = ffi.string(C.GetObjectIDCode( yard64 ))
                    local faction = GetComponentData(yard64, "owner" )
                    local factioncolor = GetFactionData(faction, "color")
                    
                    local enginelots = menu.getEngineSlotsPossibleWaresFromStation(yard64, record.macro, record.tShipPlan )
                    local newshipplan = menu.get_Removed_RespondWares_FromShipPlan(record.tShipPlan, menu.isremoverespondwares and menu.respondwares or {}, record.macro, menu.isremoverespondwares, menu.usestationengines and enginelots )
                    local objectprice, objectcrewprice = menu.get_ShipPriceFromStation(yard64, record.macro, newshipplan, record.tBulkCrew)
                    totalprice = objectprice + objectcrewprice
                    canbuild = (playermoney >= totalprice) and true or false

                    -- "Object Price", "Crews Price", "Player Money"
                    mouseOverTextF = function() return
                        ReadText(tPg, 6100) .. " = " .. Helper.convertColorToText(config.Color.text_inprogress) .. ConvertMoneyString(objectprice, false, true, nil, true) .. " " .. ReadText(1001, 101) .. "\027X" .. "\n" ..  
                        ReadText(tPg, 6101) .." " .. " = " .. Helper.convertColorToText(config.Color.text_inprogress) .. ConvertMoneyString(objectcrewprice, false, true, nil, true) .. " " .. ReadText(1001, 101) .. "\027X" .. "\n" .. 
                        Helper.convertColorToText(factioncolor) .. name .. " " .. idcode .. "\027X" 
                        .. "\n" .. ReadText(tPg, 6103) .. " = " .. Helper.convertColorToText(canbuild and config.Color.text_positive or config.Color.text_negative) .. ConvertMoneyString(totalprice, false, true, nil, true) .. " " .. ReadText(1001, 101) .. "\027X"
                        -- .. "\n" .. ReadText(tPg, 6102) .. " = " .. Helper.convertColorToText(config.Color.text_inprogress) .. ConvertMoneyString(playermoney, false, true, nil, true) .. " " .. ReadText(1001, 101) .. "\027X"
                    end

                    if record.respond.equipmentwares and #record.respond.equipmentwares > 0 then
                        row = destroytable:addRow(false, {  } )
                        row[2]:setColSpan(4):createText(ReadText(tPg, 6103), { color = config.rowLabelProperties.color , halign = "left", mouseOverText = mouseOverTextF })   -- "Build Price"
                        row[6]:setColSpan(7):createText( ConvertMoneyString(totalprice, false, true, nil, true) .. " " .. ReadText(1001, 101), { color = config.Color.text_inprogress , halign = "right" , mouseOverText = mouseOverTextF})

                        row = destroytable:addRow(false, {  } )
                        row[2]:setColSpan(4):createText(ReadText(tPg, 6102), { color =  config.rowLabelProperties.color , halign = "left", mouseOverText = mouseOverTextF })      -- "Player Money"
                        row[6]:setColSpan(7):createText( ConvertMoneyString(playermoney, false, true, nil, true) .. " " .. ReadText(1001, 101), { color = canbuild and config.Color.text_positive or config.Color.text_negative , halign = "right" , mouseOverText = mouseOverTextF})
        
                    else
                        destroytable:addEmptyRow()
                    end

                    -- "When checked, the 'reBuild' button takes action by removing all problematic ware(s)\n", "The ship's loadout record will NOT change."
                    local mouseOverText = ReadText(tPg, 6121) .. 
                    Helper.convertColorToText(config.Color.text_enemy) .. "   " .. ReadText(tPg, 6122) .. "\027X"
                    row = destroytable:addRow(true, {  } )
                    row[3]:createCheckBox(menu.isremoverespondwares , { active = true, mouseOverText = mouseOverText, height = Helper.standardTextHeight, width = Helper.standardTextHeight })
                    row[3].handlers.onClick = function (_, checked)
                        menu.isremoverespondwares = checked
                        menu.usestationengines = checked
                        menu.refreshRightFrame()
                        end
                    -- Remove all listed respond ware(s)
                    row[4]:setColSpan(9):createButton({ bgColor = config.Color["button_background_hidden"], mouseOverText = mouseOverText }):setText(ReadText(tPg, 6120), {color = config.sColor.alertnormal, halign = "left" }) -- "Do not show again"
                    row[4].handlers.onClick = function () 
                        menu.isremoverespondwares = not menu.isremoverespondwares
                        menu.usestationengines = menu.isremoverespondwares
                        menu.refreshRightFrame()
                    end

                    mouseOverText = ReadText(tPg, 6131)     -- "If it is checked, when the rebuild process is done, it selects a suitable engine(s) from the station's defined engines instead of incompatible engines."
                    if hasenginewares then
                        row = destroytable:addRow(true, {  } )
                        row[3]:createCheckBox(menu.usestationengines , { active = not hasenginewares, mouseOverText = mouseOverText, height = Helper.standardTextHeight, width = Helper.standardTextHeight })
                        row[3].handlers.onClick = function (_, checked)
                            menu.usestationengines = checked
                            menu.refreshRightFrame()
                            end
                        row[4]:setColSpan(9):createText(ReadText(tPg, 6130), { color = (menu.isremoverespondwares and hasenginewares) and config.Color.text_inactive or config.Color.text_inactive , halign = "left", mouseOverText = mouseOverText })        -- Replace engine(s) from station's defined engines
                    end
                    local btnisactive = (canbuild and (#menu.respondwares > 0 and  menu.isremoverespondwares) or false)
                    row = destroytable:addRow(true, {  } )
                    row[4]:setColSpan(3):createButton({  mouseOverText = ReadText(tPg, 6141), active = btnisactive } )  -- "Rebuild process for this ship"
                    row[4]:setText(ReadText(tPg, 1024), { halign = "center" })     -- "Build"
                    row[4].handlers.onClick = function() 
                        menu.buttonBuild(record) 
                    end
                        
                end
            end

            local emptyrow = destroytable:addEmptyRow()

            if not record.addingTask then
                if not ishaverepondwares then
                    row = destroytable:addRow(false, {  } )
                    row[2]:setColSpan(4):createText( ReadText(tPg, 6102) , { halign="left", color = config.rowLabelProperties.color } )    -- Player Money
                    row[6]:setColSpan(7):createText( fee , { halign = "right" } )
                    
                    destroytable:addEmptyRow()
                    destroytable:addEmptyRow()
                    destroytable:addEmptyRow()
                    destroytable:addEmptyRow()
                end

                local btnisactive = (record.isWaitingForRebuild  or record.isLost or false) 
                row = destroytable:addRow(true, {  } )
                row[10]:setColSpan(3):createButton({  mouseOverText = ReadText(tPg, 6140), active = btnisactive } )  -- "Rebuild process for this ship"
                row[10]:setText(ReadText(tPg, 1023), { halign = "center" })                 -- "Rebuild"
                row[10].handlers.onClick = function() 
                    menu.refreshRightFrame()
                    menu.buttonStartRebuildShips(true)
                end
            end

            -- record.isLost olanları da alt respond mesaj alalnında göster
            record.respond.statusmsg = record.respond.statusmsg or record.isLost and shipStatus
            
            --menu.warningShown = getElapsedTime()
            local visibleHeight = nil
            table_Bottom = frame:addTable(10, { 
                tabOrder = 4, 
                width = frame.properties.width - 2* Helper.borderSize, 
                x = Helper.borderSize, 
                y = 0, 
                reserveScrollBar = true, highlightMode = "off", skipTabChange = true, backgroundID = "solid", backgroundColor = config.Color.table_background_3d_editor 
            })
            if record.respond.statusmsg then

                local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.Color["row_title_background"] } )
                row[1]:setColSpan(10):createText(ReadText(tPg, 6150), menu.headerWarningTextProperties)     -- "Respond Message"

                
                local textTable = GetTextLines(tostring(record.respond.statusmsg), config.rowLabelProperties.font, config.rowLabelProperties.fontsize, table_Bottom.properties.width - 2* Helper.borderSize)
                local TextLines = {}
                for i, line in ipairs(textTable) do
                    local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                    row[1]:setColSpan(10):createText(line , config.rowLabelProperties)
                    
                end
            
                --local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                --row[1]:setColSpan(10):createText(tostring(record.respond.statusmsg) , rowLabelProperties)
            
                if record.respond.class then
                    local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                    row[1]:setColSpan(10):createText( ReadText(tPg, 1170) .. " = " .. tostring(record.respond.class)  , config.rowLabelProperties)     -- "Class"
                end
                if record.respond.chassis then
                    local name = ffi.string( GetMacroData(record.respond.chassis, "name") )
                    local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                    row[1]:setColSpan(10):createText( ReadText(tPg, 1180) .. " = " .. name  , config.rowLabelProperties)     -- "Chassis"
                end
                if record.respond.faction then
                    local factionname, factioncolor = GetFactionData(record.respond.faction, "name", "color")
                    local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                    row[1]:setColSpan(2):createText( ReadText(tPg, 1190), config.rowLabelProperties)         -- "Faction"
                    row[3]:setColSpan(8):createText( factionname, config.rowLabelProperties)
                    row[3].properties.color = factioncolor
                end
                if record.respond.yard then
                    local yard64 = ConvertStringTo64Bit( tostring(record.respond.yard) )
                    local name = ffi.string(C.GetComponentName( yard64 ))
                    local idcode = ffi.string(C.GetObjectIDCode( yard64 ))
                    local faction = GetComponentData(yard64, "owner" )
                    local factioncolor = GetFactionData(faction, "color")
                    local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                    row[1]:setColSpan(2):createText( ReadText(tPg, 1201), config.rowLabelProperties)     -- "Station"
                    row[3]:setColSpan(8):createText( name .. " ( " .. idcode .. " )"  , config.rowLabelProperties)
                    row[3].properties.color = factioncolor
                end
                if record.respond.unknown then
                    local yard64 = ConvertStringTo64Bit( tostring(record.respond.unknown) )
                    local name = ffi.string(C.GetComponentName( yard64 ))
                    local idcode = ffi.string(C.GetObjectIDCode( yard64 ))
                    local faction, sectorid, sector = GetComponentData(yard64, "owner", "sectorid", "sector")
                    local factioncolor = GetFactionData(faction, "color")
                    local sectorowner = GetComponentData(sectorid, "owner")
                    local sectorownercolor = GetFactionData(sectorowner, "color")

                    local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                    row[1]:setColSpan(2):createText( ReadText(tPg, 1201), config.rowLabelProperties)     -- "Station"
                    row[3]:setColSpan(8):createText( name .. " ( " .. idcode .. " )"  , config.rowLabelProperties)
                    row[3].properties.color = factioncolor

                    local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                    row[1]:setColSpan(2):createText( ReadText(tPg, 1210), config.rowLabelProperties)      -- "Sector"
                    row[3]:setColSpan(8):createText( sector  , config.rowLabelProperties)
                    row[3].properties.color = sectorownercolor

                end
                -- Kılavuz 
                --row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.orange } )
                --row[1]:setColSpan(1):createText("", {})

                if record.respond.price then
                    local price = ConvertMoneyString(record.respond.price, false, true, 0, true)
                    local playermoney = record.respond.playermoney and ConvertMoneyString(record.respond.playermoney, false, true, 0, true) or ""
                    local aftermoney = record.respond.playermoney and ConvertMoneyString(record.respond.playermoney - record.respond.price, false, true, 0, true) or ""
                    local checkmoney = record.respond.checkmoney and ConvertMoneyString(record.respond.checkmoney, false, true, 0, true) or ""
                    local fundsmoney = record.respond.fundsmoney and ConvertMoneyString(record.respond.fundsmoney, false, true, 0, true) or ""
                    if record.respond.playermoney then
                        local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                        row[3]:setColSpan(3):createText( ReadText(tPg, 6102), {color = config.rowLabelProperties.color, halign = "left" } )        -- "Player Money"
                        row[6]:setColSpan(3):createText( playermoney .. " " ..ReadText(1001, 101), {color = config.rowValueProperties.color, halign = "right" } )
                        local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                        row[3]:setColSpan(3):createText( ReadText(tPg, 6104), {color = config.rowLabelProperties.color, halign = "left" } )   -- "Ship Price"
                        row[6]:setColSpan(3):createText( price .. " " .. ReadText(1001, 101), {color = config.rowValueProperties.color, halign = "right", titleColor = config.sColor.grey  } )
                        local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                        row[3]:setColSpan(3):createText( ReadText(tPg, 6105), {color = config.sColor.lightgrey, halign = "left" } )    -- "After Reducing"
                        row[6]:setColSpan(3):createText( aftermoney .. " " .. ReadText(1001, 101), {color = config.sColor.orange, halign = "right" } )
                        local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                        row[3]:setColSpan(3):createText( ReadText(tPg, 6106), {color = config.sColor.lightgrey, halign = "left" } )   -- "Threshold Money"
                        row[6]:setColSpan(3):createText( checkmoney .. " " .. ReadText(1001, 101), {color = config.sColor.grey, halign = "right" } )
                    elseif record.respond.fundsmoney then
                        local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                        row[3]:setColSpan(3):createText( ReadText(tPg, 6102), {color = config.sColor.lightgrey, halign = "left" } )     -- "Player Money"
                        row[6]:setColSpan(3):createText( fundsmoney .. " " .. ReadText(1001, 101), {color = config.sColor.orange, halign = "right" } )
                        local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                        row[3]:setColSpan(3):createText( ReadText(tPg, 6104), {color = config.sColor.lightgrey , halign = "left" } )    -- "Ship Price"
                        row[6]:setColSpan(3):createText( price .. " " .. ReadText(1001, 101), {color = config.sColor.grey, halign = "right" } )
                    else
                        local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                        row[3]:setColSpan(3):createText( ReadText(tPg, 6104), {color = config.sColor.lightgrey , halign = "left" } )   -- "Ship Price"
                        row[6]:setColSpan(3):createText( price .. " " .. ReadText(1001, 101), {color = config.sColor.orange, halign = "right" } )
                        local row = table_Bottom:addRow(false, { fixed = true, bgColor = config.sColor.transparent } )
                        row[3]:setColSpan(3):createText( ReadText(tPg, 6107), {color = config.sColor.lightgrey, halign = "left" } )     -- "Allowed Money"
                        row[6]:setColSpan(3):createText( checkmoney .. " " .. ReadText(1001, 101), {color = config.sColor.grey, halign = "right" } )
                    end
                end

                -- döngü içinde row açılıcak , table scroll etkisi alacak bu yüzden table açılırken taborder > 0 verilmeli ve döngü  row lar true ile oluşturulmalı
                local maxrows = 3
                local totalrows = 0
                if #menu.respondwares > 0 then
                    for i, ware in ipairs(menu.respondwares) do
                        totalrows = totalrows + 1
                        local row = table_Bottom:addRow(true, {  } )
                        local color = (ware.class == "engine") and config.sColor.alertnormal or config.sColor.blue
                        row[1]:setColSpan(3):createText( "#" .. tostring(totalrows) .. " " .. ware.type , {color = config.rowValueProperties.color })
                        row[4]:setColSpan(7):createText( ware.name, {color = color })
                        if totalrows == maxrows then
                            visibleHeight = table_Bottom:getFullHeight()
                        end
                    end
                elseif record.respond.objects then
                    for i, line in ipairs(record.respond.objects) do
                        totalrows = totalrows + 1
                        local yard64 = ConvertStringTo64Bit( tostring(line) )
                        local name = ffi.string(C.GetComponentName( yard64 ))
                        local idcode = ffi.string(C.GetObjectIDCode( yard64 ))
                        local row = table_Bottom:addRow(true, { bgColor = config.sColor.transparent } )
                        row[1]:setColSpan(2):createText( ReadText(tPg, 1201) .. " " .. "#" .. tostring(i) , {color = config.sColor.blue })    -- "Station"
                        row[3]:setColSpan(8):createText( name .. " " .. idcode, {color = config.rowValueProperties.color })
                        if totalrows == maxrows then
                            visibleHeight = table_Bottom:getFullHeight()
                        end
                    end
                elseif  record.respond.missinglicencedwares then
                    local missinglicencedwares = {}
                    for i, entry in ipairs(record.respond.missinglicencedwares) do
                        local entry2 = {}
                        entry2, _ = menu.Get_respondequipmentinfo(entry.ware)
                        entry2.licencetype = entry.licencetype
                        entry2.faction = entry.faction
                        table.insert(missinglicencedwares, entry2)
                    end

                    for i, entry in ipairs(missinglicencedwares) do
                        totalrows = totalrows + 1
                        local row = table_Bottom:addRow(true, {  } )

                        row[1]:setColSpan(2):createText( "#" .. tostring(totalrows) .. " " .. entry.type , {color = config.rowValueProperties.color })
                        row[3]:setColSpan(4):createText( entry.name, {color = config.sColor.blue })
                        row[7]:setColSpan(4):createText( entry.licencetype, {color = config.sColor.alertnormal })
                        if totalrows == maxrows then
                            visibleHeight = table_Bottom:getFullHeight()
                        end
                    end
                end

            end
            
            if visibleHeight then
                table_Bottom.properties.maxVisibleHeight = visibleHeight
            else
                table_Bottom.properties.maxVisibleHeight = table_Bottom:getFullHeight()
            end
            table_Bottom.properties.y = frame.properties.height  - table_Bottom:getVisibleHeight() --- 1 * Helper.borderSize --- emptyrow:getHeight()


            table_Middle = destroytable
        end

    end

    -- Üretim bittiği anda sekme açık olursa
    if not table_Middle then
        
        table_Middle = frame:addTable(13, { 
            tabOrder = 3,
            x = Helper.borderSize,
            width = frame.properties.width - 2*  Helper.borderSize,
            backgroundID = menu.RightFrameData.table.backgroundID,
            backgroundColor = debugColorMod and config.sColor.gold or menu.RightFrameData.table.backgroundColor,
        })
        local row1 = table_Middle:addRow("none", { interactive = false })
        row1[2]:setColSpan(12):createText(config.nonetext, { color = config.Color.text_inactive } )

        table_Bottom = frame:addTable(13, { tabOrder = 4 })
        table_Bottom.properties.y = frame.properties.height  - table_Bottom:getVisibleHeight() --- 1 * Helper.borderSize

    end

    --DebugError(" CREATE menu.selectedRows[manager][RightFrame] = " .. tostring(menu.selectedRows["manager"]["RightFrame"]))
    --DebugError(" CREATE menu.selectedCols[manager][RightFrame] = " .. tostring(menu.selectedCols["manager"]["RightFrame"]))
    --DebugError(" CREATE menu.topRows[manager][RightFrame] = " .. tostring(menu.topRows["manager"]["RightFrame"]))

	if menu.selectedRows["manager"]["RightFrame"] then
		table_Middle:setSelectedRow(menu.selectedRows["manager"]["RightFrame"])
		menu.selectedRows["manager"]["RightFrame"] = nil
	end
    if menu.topRows["manager"]["RightFrame"] then
        table_Middle:setTopRow(menu.topRows["manager"]["RightFrame"])
        menu.topRows["manager"]["RightFrame"] = nil
    end

    local table_header = menu.createOrdersMenuHeader(frame)

    table_info.properties.y = table_header.properties.y + table_header:getVisibleHeight() + 2 * Helper.borderSize
    table_Middle.properties.y = table_info.properties.y + table_info:getVisibleHeight() + 2 * Helper.borderSize

    table_Middle.properties.maxVisibleHeight = table_Bottom.properties.y - table_Middle.properties.y - 1 * Helper.borderSize

end

function menu.Get_MissingBuildProcessorResources (container, buildercomponent)
    local missingResources = {}
    -- uint32_t GetNumMissingBuildProcessorResources(UniverseID containerid, UniverseID buildprocessorid);
    local n = C.GetNumMissingBuildProcessorResources(container, buildercomponent)
    if n > 0 then
        local buf = ffi.new("UIWareInfo[?]", n)
        n = C.GetMissingBuildProcessorResources(buf, n)
        for i = 0, n - 1 do
            table.insert(missingResources, { ware = ffi.string(buf[i].ware), amount = buf[i].amount })
        end
    end
    -- Deneme için ek satır
    --for i = 1, 10 do
        --table.insert(missingResources, { ware = "Template row", amount = 0 })
    --end
    return missingResources
end
function menu.Get_MissingBuildResources (container, macro, tShipPlan)
    local missingResources = {}
    -- Mevcut gemi zaten shipyardda ekli, burdan bir daha sorgularsak sanki yeniden ekleme yapılıyor gibi missing resources ekleniyor
    -- bu yüzden sanki eklenmemiş gibi davranıp (amount = 0) mevcut shipyardın missing değerlrini alacağız
    local considerCurrent = macro and true or false
    local numorders = (considerCurrent and 1 or 0)
    local buildorders = ffi.new("UIBuildOrderList[?]", numorders)
    if considerCurrent then
        local index = 0
        buildorders[index].shipid = 0
        buildorders[index].macroname = Helper.ffiNewString(macro)
        buildorders[index].loadout = Helper.callLoadoutFunction(tShipPlan or {}, nil, function (loadout, _) return loadout end, false) 
        buildorders[index].amount = 0
    end
    -- uint32_t GetNumMissingBuildResources2(UniverseID containerid, UIBuildOrderList* orders, uint32_t numorders, bool playercase);
    local playercase = true     -- false yaparsak bizim macrodan hariç istasyonun ihtiyaç duyduğu diğer eksik malzemeler de gelir
    local n = C.GetNumMissingBuildResources2(container, buildorders, numorders, playercase)
    local buf = ffi.new("UIWareInfo[?]", n)
    n = C.GetMissingBuildResources(buf, n)
    for i = 0, n - 1 do
        table.insert(missingResources, { ware = ffi.string(buf[i].ware), amount = buf[i].amount })
    end
    -- Deneme için ek satır
    --for i = 1, 10 do
        --table.insert(missingResources, { ware = "Template row", amount = 0 })
    --end
    return missingResources
end


function menu.createCrewInfoSubmenu(frame)
    
    local strComponent = menu.Selected.strComponent
    local record = menu.GetRecordFromMd(strComponent)
    local isvalid = menu.isInfoModeValidFor(strComponent, "objectcrew")

    local ftable = frame:addTable(7, { 
        tabOrder = 1,
        x = Helper.borderSize,
        width = frame.properties.width - 2*  Helper.borderSize,
        backgroundID = menu.RightFrameData.table.backgroundID,
        backgroundColor = debugColorMod and config.sColor.darkgreen or menu.RightFrameData.table.backgroundColor,
    } )
    ftable:setColWidth(1, config.mapRowHeight)
    ftable:setColWidth(2, config.mapRowHeight)
    ftable:setColWidthPercent(4, 20)
    ftable:setColWidth(5, 0.20 * frame.properties.width - Helper.borderSize, false)
    ftable:setColWidth(6, 0.20 * frame.properties.width - (Helper.scaleY(config.mapRowHeight) + Helper.borderSize) , false)
    ftable:setColWidth(7, config.mapRowHeight)
    -- Kılavuz 
    --local row = ftable:addRow(false, { bgColor = config.sColor.orange } )
    --row[1]:setColSpan(1):createText("", {})
    ftable:setDefaultBackgroundColSpan(1, 7)

    --- title ---
    local row = ftable:addRow(false, { fixed = true, bgColor = config.Color["row_title_background"] })
    row[1]:setColSpan(7):createText( ReadText(tPg, 1160), Helper.headerRowCenteredProperties)      -- Record Information
    row[1].properties.color = config.infoTableRowsColor.tittle
    -- section
    local row = ftable:addRow(false, { fixed = true, bgColor = config.Color["row_title_background"] })
    row[1]:setColSpan(7):createText(ReadText(1001, 80), Helper.headerRowCenteredProperties)      -- Crew
    row[1].properties.color = config.infoTableRowsColor.section

    -- object name
    local titlecolor, objectname, objectidcode = menu.holomapcolor.playercolor, "", ""
    local row = ftable:addRow("info_focus", { fixed = true, bgColor = config.Color["row_title_background"] })
	row[7]:createButton({ active = function() return (record.object or record.build) and true or false end, height = Helper.headerRow1Height, width = config.mapRowHeight, cellBGColor = config.Color["row_background"] }):setIcon("menu_center_selection", { width = Helper.standardTextHeight, height = Helper.standardTextHeight, y = (Helper.headerRow1Height - Helper.standardTextHeight) / 2 })
    row[7].handlers.onClick = function () return menu.buttonOnShowMap(record) end 
    if record then
        if record.object64 == C.GetPlayerObjectID() then
            titlecolor = menu.holomapcolor.currentplayershipcolor
        end
        objectname, objectidcode = record.name, record.idcode .. " "
    end
    local strComponentS = string.format("%s%s \027X", Helper.convertColorToText(config.sColor.lightgrey), strComponent) 
    objectname = string.format("%s%s\027X", Helper.convertColorToText(titlecolor), objectname) 
    row[1]:setBackgroundColSpan(6):setColSpan(5):createText(strComponentS .. objectname, Helper.headerRow1Properties)
    row[6]:setColSpan(1):createText(objectidcode, Helper.headerRow1Properties)
    row[6].properties.halign = "right"
    row[6].properties.color = titlecolor

    local frameheight = frame.properties.height
    if record then 

        local skillmode 
        local printedtitle
        local isfemale = record.tPilot.isfemale and (tonumber(record.tPilot.isfemale) == 1) or false
        if record.class == "station" then
            -- Manager
            printedtitle = (isfemale) and ReadText(20208, 30302) or ReadText(20208, 30301)	-- Manager
            skillmode = "management"
        else
            local isbigship = (record.class == "ship_m") or (record.class == "ship_l") or (record.class == "ship_xl")
            -- pilot
            printedtitle = isbigship and ReadText(1001, 4848) or ReadText(1001, 4847)	-- Captain, Pilot
            skillmode = "piloting"
        end
        -- Section tittle Captain, Pilot or Manager
        local row = ftable:addRow(false, { bgColor = config.Color["row_title_background"] })
        row[1]:setColSpan(7):createText(printedtitle, Helper.headerRowCenteredProperties)
        row[1].properties.color = config.infoTableRowsColor.subsections

        -- name
        local pilotname = Helper.convertColorToText( isfemale and (not record.destroyed and config.sColor.female1 or  config.sColor.female2) or (not record.destroyed and config.sColor.male1 or config.sColor.male2) ).. ( (record.tPilot.name ~= "") and record.tPilot.name or "-" ) .. "\027X"
        local pilotmacrofaction = Helper.convertColorToText( config.sColor.darkgrey ) .. " ." .. record.tPilot.faction .. "" .. "\027X"
        local printedpilotname = pilotname .. pilotmacrofaction
        local adjustedskill = math.floor(record.tPilot.combinedskill * 15 / 100)
        local printedskill = (adjustedskill >= 0) and Helper.displaySkill(adjustedskill) or ""
        local row = ftable:addRow({ "info_pilot" }, { })
        row[2]:setColSpan(2):createText(pilotname, { } )
        row[4]:setColSpan(1):createText(pilotmacrofaction, { halign = "right" } )
        local locfontcolor = not record.destroyed and config.Color["text_skills"] or config.Color.text_normal
        row[6]:setColSpan(2):createText(printedskill, { halign = "right", color = locfontcolor, mouseOverText = ReadText(1026, 2) })
        
        --Skills
        local skillRecord = record.tPilot.skill
        -- Md içindeki datayı lua içindekine göre düzenliyoruz
        local skilltable = menu.ConvertSkillTableFor(skillmode , skillRecord)
        table.sort(skilltable, function(a, b) return a.relevance > b.relevance end)
        for _, skillproperties in ipairs(skilltable) do
            local skillname = ReadText(1013, skillproperties.textid)
            local adjustedskill = skillproperties.value
            local printedskill = Helper.displaySkill(adjustedskill, skillproperties.relevance > 0)
            local mouseovertext = ReadText(1013, skillproperties.descriptionid)

            local row = ftable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
            row[3]:setColSpan(3):createText(skillname, { font = (skillproperties.relevance > 0) and Helper.standardFontBold or nil, color = (skillproperties.relevance > 0) and config.Color["text_normal"] or config.Color["text_inactive"], mouseOverText = mouseovertext })
            local locfontcolor = (skillproperties.relevance > 0) and config.Color.text_normal or config.Color.text_inactive
            if not record.destroyed then
                locfontcolor = (skillproperties.relevance > 0) and config.Color["text_skills"] or config.Color["text_skills_irrelevant"]
            end
            row[6]:setColSpan(2):createText(printedskill, { halign = "right", color = locfontcolor, mouseOverText = mouseovertext })
        end

        -- People Crews
        if record.class ~= "station" then
            --
            local crew = { capacity = 0, total = {}, service = {}, marine = {}, personel = {} }
            crew.capacity = record.tBulkCrew.capacity
            crew.total.service = (next(record.tBulkCrew.service)) and #record.tBulkCrew.service or 0
            crew.total.marine = (next(record.tBulkCrew.marine)) and #record.tBulkCrew.marine or 0
            for _, personentry in ipairs(record.tBulkCrew.service) do
                local skillRecord = personentry.skill
                skillmode = "service"
                local skilltable = menu.ConvertSkillTableFor(skillmode , skillRecord)
                table.sort(skilltable, function(a, b) return a.relevance > b.relevance end)
                personentry.skilltable = skilltable
                personentry.rolename = ReadText(1001, 1116)        -- Service Crew
                personentry.id = #crew.personel + 1
                table.insert(crew.personel, personentry)
            end
            for _, personentry in ipairs(record.tBulkCrew.marine) do
                local skillRecord = personentry.skill
                skillmode = "marine"
                local skilltable = menu.ConvertSkillTableFor(skillmode , skillRecord)
                table.sort(skilltable, function(a, b) return a.relevance > b.relevance end)
                personentry.skilltable = skilltable
                personentry.rolename = ReadText(1001, 54)        -- Marines
                personentry.id = #crew.personel + 1
                table.insert(crew.personel, personentry)
            end
            
            local totalnumpeople = crew.total.service + crew.total.marine
            local totalcrewcapacity = record.tBulkCrew.capacity

            
            local titlerow
            
            titlerow = ftable:addRow(false, { bgColor = config.Color["row_title_background"] })
            -- section Crew
            titlerow[1]:setColSpan(7):createText(ReadText(1001, 80), Helper.headerRowCenteredProperties)    -- Crew
            titlerow[1].properties.color = config.infoTableRowsColor.subsections
            titlerow[1].properties.helpOverlayID = "crew_assigncrew"
            titlerow[1].properties.helpOverlayText = " "
            titlerow[1].properties.helpOverlayHeight = titlerow:getHeight()
            titlerow[1].properties.helpOverlayHighlightOnly = true
            titlerow[1].properties.helpOverlayScaling = false
            
            local row = ftable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
            row[2]:setColSpan(4):createText(ReadText(1001, 9078) .. ReadText(1001, 120))
            row[6]:setColSpan(2):createText(tostring(totalnumpeople) .. " / " .. tostring(totalcrewcapacity), { halign = "right" })
            titlerow[1].properties.helpOverlayHeight = titlerow[1].properties.helpOverlayHeight + row:getHeight() + Helper.borderSize
        
            local row = ftable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
            row[3]:setColSpan(3):createText( ReadText(1001, 1116) )     -- "Service Crew"
            row[6]:setColSpan(2):createText(tostring(crew.total.service) .. " / " .. tostring(totalcrewcapacity), { halign = "right" })
            local row = ftable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
            row[3]:setColSpan(3):createText( ReadText(1001, 54) )       -- "Marines"
            row[6]:setColSpan(2):createText(tostring(crew.total.marine) .. " / " .. tostring(totalcrewcapacity), { halign = "right" })
            
            -- full crew list
            local row = ftable:addRow(false, { bgColor = config.Color["row_title_background"] })
            row[1]:setColSpan(7):createText(ReadText(1001, 9404), Helper.headerRowCenteredProperties) -- Full Crew List
            row[1].properties.color = config.infoTableRowsColor.subsections

            --ftable:addEmptyRow(config.mapRowHeight / 2)

            local combinedcrew = crew.personel
            for _, personentry in ipairs(combinedcrew) do

                local isfemale = record.tPilot.isfemale and (tonumber(personentry.isfemale) == 1) or false

                local adjustedcombinedskill = math.floor(personentry.combinedskill * 15 / 100) 
                local extendinfoid = string.format("info_crewperson_%s_%s", strComponent, tostring(personentry.id))

                --local name = Helper.convertColorToText( (isfemale) and config.sColor.pink or config.sColor.blue) .. ( (personentry.name ~= "") and personentry.name or "-" ) .. "\027X"
                local name = Helper.convertColorToText( isfemale and (not record.destroyed and config.sColor.female1 or  config.sColor.female2) or (not record.destroyed and config.sColor.male1 or config.sColor.male2) ).. ( (personentry.name ~= "") and personentry.name or "-" ) .. "\027X"
                --local name = Helper.convertColorToText( (isfemale) and config.sColor.pink or config.sColor.blue) .. ( (personentry.name ~= "") and personentry.name or "-" ) .. "\027X"
                local macrofaction = Helper.convertColorToText( config.sColor.darkgrey ) .. " ." .. personentry.faction .. "" .. "\027X"
                local printedname = name .. macrofaction
            
                local mouseovertext = ""
                local color

                local printedskill = Helper.displaySkill(adjustedcombinedskill)
                local row = ftable:addRow({ "info_crewperson", strComponent, personentry.id }, {  })
                row[1]:createButton({ height = config.mapRowHeight, helpOverlayID = "info_crewperson", helpOverlayText = " " }):setText(function() return menu.isInfoExtended(extendinfoid) and "-" or "+" end, { halign = "center" })
                row[1].properties.uiTriggerID = "info_crewperson"
                row[1].handlers.onClick = function() return menu.buttonExtendInfo(extendinfoid) end
                row[2]:setColSpan(2):createText(name, { mouseOverText = mouseovertext, color = color })
                row[4]:setColSpan(1):createText(macrofaction, { mouseOverText = mouseovertext, color = color, halign = "right" })
                local roleColor, mouseovertext
                local locfontcolor = not record.destroyed and config.Color["text_skills"] or config.Color.text_normal
                row[5]:createText(personentry.rolename, { color = roleColor, mouseOverText = mouseovertext })
                row[6]:setColSpan(2):createText(printedskill, { halign = "right", color = locfontcolor, mouseOverText = ReadText(1026, 2) })
                if menu.isInfoExtended(extendinfoid) then

                    for i, skill in ipairs(personentry.skilltable) do
                        local skillname = ReadText(1013, skill.textid)
                        local printedskill = Helper.displaySkill(skill.value, skill.relevance > 0)
                        local mouseovertext = ReadText(1013, skill.descriptionid)
                        local locfontcolor = (skill.relevance > 0) and config.Color.text_normal or config.Color.text_inactive
                        if not record.destroyed then
                            locfontcolor = (skill.relevance > 0) and config.Color["text_skills"] or config.Color["text_skills_irrelevant"]
                        end
                        row = ftable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
                        row[3]:setColSpan(3):createText(skillname, { font = (skill.relevance > 0) and Helper.standardFontBold or nil, color = (skill.relevance > 0) and config.Color["text_normal"] or config.Color["text_inactive"], mouseOverText = mouseovertext })
                        row[6]:setColSpan(2):createText(printedskill, { halign = "right", color = locfontcolor, mouseOverText = mouseovertext })
                    end
                end

            end
            
        end
        
    end

    --DebugError("menu.selectedRows[manager][RightFrame] = " .. tostring(menu.selectedRows["manager"]["RightFrame"]))
    --DebugError("menu.topRows[manager][RightFrame] = " .. tostring(menu.topRows["manager"]["RightFrame"]))

    if menu.selectedRows["manager"]["RightFrame"] then
        ftable:setSelectedRow(menu.selectedRows["manager"]["RightFrame"])
        menu.selectedRows["manager"]["RightFrame"] = nil
    end
    if menu.topRows["manager"]["RightFrame"] then
        ftable:setTopRow(menu.topRows["manager"]["RightFrame"])
        menu.topRows["manager"]["RightFrame"] = nil
    end

    local table_header = menu.createOrdersMenuHeader(frame)

    ftable.properties.y = table_header.properties.y + table_header:getFullHeight() + 2* Helper.borderSize

    --ftable.properties.maxVisibleHeight = ftable:getVisibleHeight() 


end


function menu.buttonExtendInfo(buttondata)
	if menu.extendedinfo[buttondata] then
		menu.extendedinfo[buttondata] = nil
	else
		menu.extendedinfo[buttondata] = true
	end

    menu.topRows["manager"]["RightFrame"] = GetTopRow(menu.TableID["Records" .. menu.RightFrameMode])
    menu.refreshRightFrame()
end

function menu.isInfoExtended(buttondata)
	if menu.extendedinfo[buttondata] then
		return true
	end
	return false
end

function menu.ConvertSkillTableFor(mode , skillRecord)
    local skilltable = {}
    if mode == "piloting" then
        for skillkey, value in pairs(skillRecord) do
            local skill = {}
            skill.value = value
            if skillkey == "piloting" then
                skill.textid = 501
                skill.descriptionid = 502
                skill.relevance = 5
            end
            if skillkey == "morale" then
                skill.textid = 401
                skill.descriptionid = 402
                skill.relevance = 4
            end
            if skillkey == "management" then
                skill.textid = 301
                skill.descriptionid = 302
                skill.relevance = -1
            end
            if skillkey == "engineering" then
                skill.textid = 201
                skill.descriptionid = 202
                skill.relevance = -2
            end
            if skillkey == "boarding" then
                skill.textid = 101
                skill.descriptionid = 102
                skill.relevance = -3
            end
            table.insert(skilltable, skill)
        end
    elseif mode == "management" then
        for skillkey, value in pairs(skillRecord) do
            local skill = {}
            skill.value = value
            if skillkey == "management" then
                skill.textid = 301
                skill.descriptionid = 302
                skill.relevance = 5
            end
            if skillkey == "morale" then
                skill.textid = 401
                skill.descriptionid = 402
                skill.relevance = 4
            end
            if skillkey == "boarding" then
                skill.textid = 101
                skill.descriptionid = 102
                skill.relevance = -1
            end
            if skillkey == "engineering" then
                skill.textid = 201
                skill.descriptionid = 202
                skill.relevance = -2
            end
            if skillkey == "piloting" then
                skill.textid = 501
                skill.descriptionid = 502
                skill.relevance = -3
            end
            table.insert(skilltable, skill)
        end
    elseif mode == "service" then
        for skillkey, value in pairs(skillRecord) do
            local skill = {}
            skill.value = value
            if skillkey == "engineering" then
                skill.textid = 201
                skill.descriptionid = 202
                skill.relevance = 5
            end
            if skillkey == "morale" then
                skill.textid = 401
                skill.descriptionid = 402
                skill.relevance = 4
            end
            if skillkey == "boarding" then
                skill.textid = 101
                skill.descriptionid = 102
                skill.relevance = -1
            end
            if skillkey == "management" then
                skill.textid = 301
                skill.descriptionid = 302
                skill.relevance = -2
            end
            if skillkey == "piloting" then
                skill.textid = 501
                skill.descriptionid = 502
                skill.relevance = -3
            end
            table.insert(skilltable, skill)
        end
    
    elseif mode == "marine" then
        for skillkey, value in pairs(skillRecord) do
            local skill = {}
            skill.value = value
            if skillkey == "boarding" then
                skill.textid = 101
                skill.descriptionid = 102
                skill.relevance = 5
            end
            if skillkey == "morale" then
                skill.textid = 401
                skill.descriptionid = 402
                skill.relevance = 4
            end
            if skillkey == "management" then
                skill.textid = 301
                skill.descriptionid = 302
                skill.relevance = -1
            end
            if skillkey == "engineering" then
                skill.textid = 201
                skill.descriptionid = 202
                skill.relevance = -2
            end
            if skillkey == "piloting" then
                skill.textid = 501
                skill.descriptionid = 502
                skill.relevance = -3
            end
            table.insert(skilltable, skill)
        end

    end

    return skilltable
end


function menu.createLoadoutInfoSubmenu(frame)
    
    local table_info = frame:addTable(11, { 
        tabOrder = 1,
        x = Helper.borderSize,
        width = frame.properties.width - 2*  Helper.borderSize,
        backgroundID = menu.RightFrameData.table.backgroundID,
        backgroundColor = menu.RightFrameData.table.backgroundColor,
    } )
    table_info:setColWidth(1, 2.25 *config.mapRowHeight)
    table_info:setColWidth(3, config.mapRowHeight)
    table_info:setColWidth(4, config.mapRowHeight)
    table_info:setColWidth(5, 2*config.mapRowHeight)

    table_info:setColWidth(6, config.mapRowHeight)
    
    table_info:setColWidth(8, config.mapRowHeight)
    table_info:setColWidth(9, config.mapRowHeight)
    table_info:setColWidth(10, 2*config.mapRowHeight)

    table_info:setColWidth(11, config.mapRowHeight)
    
    -- Kılavuz 
    --local row = table_info:addRow(false, { fixed = true, bgColor = config.sColor.orange } )
    --row[1]:setColSpan(1):createText("", {})
    
    table_info:setDefaultBackgroundColSpan(1, 10)

    local strComponent = menu.Selected.strComponent
    local record = menu.GetRecordFromMd(strComponent)
    
    --- title ---
	local row = table_info:addRow(false, { fixed = true, bgColor = config.Color["row_title_background"] })
	row[1]:setColSpan(11):createText(ReadText(tPg, 1160), Helper.headerRowCenteredProperties)      -- Record Information
    row[1].properties.color = config.infoTableRowsColor.tittle
	local row = table_info:addRow(false, { fixed = true, bgColor = config.Color["row_title_background"] })
	row[1]:setColSpan(11):createText(ReadText(1001, 9413), Helper.headerRowCenteredProperties)      -- Loadout
    row[1].properties.color = config.infoTableRowsColor.section

    -- object name
    local titlecolor, objectname, objectidcode = menu.holomapcolor.playercolor, "", ""
    local row = table_info:addRow("info_focus", { fixed = true, bgColor = config.Color["row_title_background"] })
	row[11]:createButton({ active = function() return (record.object or record.build) and true or false end, height = Helper.headerRow1Height, width = config.mapRowHeight, cellBGColor = config.Color["row_background"] }):setIcon("menu_center_selection", { width = Helper.standardTextHeight, height = Helper.standardTextHeight, y = (Helper.headerRow1Height - Helper.standardTextHeight) / 2 })
    row[11].handlers.onClick = function () return menu.buttonOnShowMap(record) end 
    if record then
        if record.object64 == C.GetPlayerObjectID() then
            titlecolor = menu.holomapcolor.currentplayershipcolor
        end
        objectname, objectidcode = record.name, record.idcode .. " "
    end
    local strComponentS = string.format("%s%s \027X", Helper.convertColorToText(config.sColor.lightgrey), strComponent) 
    objectname = string.format("%s%s\027X", Helper.convertColorToText(titlecolor), objectname) 
    row[1]:setBackgroundColSpan(10):setColSpan(7):createText(strComponentS .. objectname, Helper.headerRow1Properties)
    row[8]:setColSpan(3):createText(objectidcode, Helper.headerRow1Properties)
    row[8].properties.halign = "right"
    row[8].properties.color = titlecolor

    if record then 
        -- loadout page
        menu.setupLoadoutInfoSubmenuRows(table_info, strComponent, record)
    end

    
	if menu.selectedRows["manager"]["RightFrame"] then
		table_info:setSelectedRow(menu.selectedRows["manager"]["RightFrame"])
		menu.selectedRows["manager"]["RightFrame"] = nil
		if menu.selectedCols["manager"]["RightFrame"] then
			table_info:setSelectedCol(menu.selectedCols["manager"]["RightFrame"])
			menu.selectedCols["manager"]["RightFrame"] = nil
		end
	end
    if menu.topRows["manager"]["RightFrame"] then
        table_info:setTopRow(menu.topRows["manager"]["RightFrame"])
        menu.topRows["manager"]["RightFrame"] = nil
    end

    local table_header = menu.createOrdersMenuHeader(frame)

    table_info.properties.y = table_header.properties.y + table_header:getFullHeight() + 2 * Helper.borderSize

end

function menu.setupLoadoutInfoSubmenuRows(inputtable, strComponent, record)

    local mode 
    if record.class == "station" then
        mode = "station"
    elseif record.class == "ship_xl" or record.class == "ship_l" or record.class == "ship_m" or record.class == "ship_s" then
        mode = "ship"
    end

    local loadout = record.tShipPlan and menu.tablecopy(record.tShipPlan) 
        or 
        { 
            needfix = true,
            weapon = {}, 
            turret = {}, 
            turretgroup = {}, 
            shield = {}, 
            thruster = {}, 
            engine = {},
            drone = {}, 
            missile = {},
            deployable = {},
            countermeasure = {},
            software = {},
        }
    
    local object64 = ConvertStringTo64Bit(tostring(record.object)) 

    local canupdaterecord = true
    if menu.constructionships[strComponent] then
        canupdaterecord = false 
    end


    local liveloadout = nil
    if object64 ~= 0 then
        menu.createShipPlan(object64, record.macro)
        liveloadout = menu.shipplan
    end
    menu.shipplan = nil

    local normalcolor = config.sColor.white
    local diffcolor = config.sColor.warningorange
    local recordedcolor = config.sColor.grey
    local activecolor = config.sColor.lightgrey

    --menu.tablePrint(liveloadout, " liveloadout = " , true, true)

    if loadout.needfix then
        mode = "none"
    end
    -- loadout tipi listesi içinde macrolara göre key tablesi oluşturarak her macroya ait toplamı içine koyar geri verir.
    local function infoCombineLoadoutComponents(components)
        local locmacros = {}
        for _, val in ipairs(components) do
            if val.macro ~= "" then
                local locmacro = val.macro
                if not locmacros[locmacro] then
                        locmacros[locmacro] = { count = val.count and val.count or 1 }
                else
                    locmacros[locmacro].count = locmacros[locmacro].count + (val.count and val.count or 1)
                end
            end
        end
        return locmacros
    end

    local function convertMacroTablo(macrotable)
        local sortedtable = {}
        local rectable = {}
        local curtable = {}
        for k,v in pairs(macrotable) do
            local macro = k
            local rec_amount = v.rec_amount
            local cur_amount = v.cur_amount
            local name = v.name or GetMacroData(macro, "name")
            local capacity = v.capacity or nil
            if rec_amount > 0 then 
                table.insert(rectable, { macro = macro, rec_amount = rec_amount, cur_amount = cur_amount, name = name, capacity = capacity })
            else
                table.insert(curtable, { macro = macro, rec_amount = rec_amount, cur_amount = cur_amount, name = name, capacity = capacity })
            end    
        end
        table.sort(rectable, function (a,b) return a.name < b.name end)
        table.sort(curtable, function (a,b) return a.name < b.name end)
        for _,v in ipairs(rectable) do
            table.insert(sortedtable, v)
        end
        for _,v in ipairs(curtable) do
            table.insert(sortedtable, v)
        end
        return sortedtable
    end

    local allWaresStorageTable = { countermeasure = { }, deployable = { }, drone = { }, missile = { } }
    --menu.tablePrint(menu.planDATA.upgradewares["missile"], "missile = ", true, true)
    allWaresStorageTable.drone = menu.tablecopy(menu.planDATA.upgradewares["drone"])
    table.sort(allWaresStorageTable.drone, function (a,b) return a.name < b.name end)

    allWaresStorageTable.deployable = menu.tablecopy(menu.planDATA.upgradewares["deployable"])
    table.sort(allWaresStorageTable.deployable, function (a,b) return a.name < b.name end)

    allWaresStorageTable.countermeasure = menu.tablecopy(menu.planDATA.upgradewares["countermeasure"])
    table.sort(allWaresStorageTable.countermeasure, function (a,b) return a.name < b.name end)

    allWaresStorageTable.missile = menu.tablecopy(menu.planDATA.upgradewares["missile"])
    table.sort(allWaresStorageTable.missile, function (a,b) return a.name < b.name end)

    for upgradetype, storagetables in pairs(allWaresStorageTable) do
        for _, ammo in ipairs(storagetables) do
            ammo.compatible = menu.isAmmoCompatible(upgradetype, ammo.macro, object64, record.macro, loadout)
        end
    end

    -- Weapon Bölümü
	if mode == "ship" then
		local isbigship = (record.class == "ship_xl") or (record.class == "ship_l") or (record.class == "ship_m")
		-- weapon config
		if loadout.weapon and (#loadout.weapon > 0) then
			local row = inputtable:addRow(false, { bgColor = config.Color["row_title_background"] })
			row[1]:setColSpan(11):createText(ReadText(tPg, 3000), Helper.headerRowCenteredProperties) -- Weapons
            row[1].properties.color = config.infoTableRowsColor.subsections
			-- weapons
			for i, gun in ipairs(loadout.weapon) do
                local slot = i --gun.a_slot.slot or i
                local slotname = gun.a_slot.name or ""
                local macro = gun.macro
                local rec_ammomacro = gun.ammomacro

                local rec_macroname, rec_color, cur_macro, cur_macroname, cur_color, cur_ammomacro, cur_weaponmode, cur_count, cur_total, mouseOverText = menu.getLiveLoadoutSlotInfo(macro, slotname, slot, false, nil, "weapon", liveloadout)

                if macro ~= "" then
                    row = inputtable:addRow("info_weaponconfig" .. i, {  })
                else
                    row = inputtable:addRow("info_weaponconfig" .. i, { interactive = false })
                end
                row[1]:createText(slot .. " " .. slotname)
                row[2]:setColSpan(4):createText(rec_macroname,      { color = rec_color,        mouseOverText = mouseOverText} )
                row[7]:setColSpan(4):createText(cur_macroname,      { color = cur_color,        mouseOverText = mouseOverText} )
    
                -- Missile launcher
                if rec_ammomacro ~= "" or cur_ammomacro ~= "" then
                    row = inputtable:addRow(("info_weaponconfig" .. i .. "_ammo"), {  })
                    if rec_ammomacro ~= "" then
                        local numloadedammo = loadout.missile[rec_ammomacro] and loadout.missile[rec_ammomacro] or 0
                        local color = numloadedammo > 0 and rec_color or config.Color.text_inactive
                        row[2]:setColSpan(2):createText("  " .. ffi.string(GetMacroData(rec_ammomacro, "name")) , { color = color })
                        row[4]:setColSpan(2):createText(tostring(numloadedammo) , { halign = "left", color = color })

                        for k, ammo in ipairs(allWaresStorageTable.missile) do
                            if ammo.macro == gun.ammomacro then
                                ammo.installed = true
                                break
                            end
                        end
                            
                    end
                    if cur_ammomacro ~= rec_ammomacro and cur_ammomacro ~= "" then 
                        local numloadedammo = liveloadout.missile[cur_ammomacro] and liveloadout.missile[cur_ammomacro] or 0
                        local color = numloadedammo > 0 and cur_color or config.Color.text_inactive
                        row[7]:setColSpan(2):createText("  " .. ffi.string(GetMacroData(cur_ammomacro, "name")) , { color = color })
                        row[9]:setColSpan(2):createText(tostring(numloadedammo) , { halign = "left", color = color })
                    end
                end

			end
            
            inputtable:addEmptyRow(config.mapRowHeight /2)
		end
	end
    
    -- Turret or turretgroup, Shiled, shieldgroup, Engine, Thruster, drones, ammunition
    if (mode == "ship") or (mode == "station") then
        -- turret , turretgroups section
        if mode == "ship" then
            if #loadout.turret > 0 or #loadout.turretgroup > 0 then
                -- tittle
                local row = inputtable:addRow(false, { bgColor = config.Color["row_title_background"] })
                row[1]:setColSpan(11):createText(ReadText(tPg, 3001) .. " " .. (#loadout.turretgroup > 0 and ReadText(1001, 8023) or "") , Helper.headerRowCenteredProperties) -- Turrets Group
                row[1].properties.color = config.infoTableRowsColor.subsections
            end
            if loadout.turret and #loadout.turret > 0 then
                for i, gun in ipairs(loadout.turret) do
                    if i ~= 1 then
                        --inputtable:addEmptyRow(config.mapRowHeight / 2)
                    end
                    
                    local slot = i -- gun.a_slot.slot or i
                    local slotname = gun.a_slot.name or ""
                    local macro = gun.macro
                    local rec_ammomacro = gun.ammomacro
                    local row

                    local rec_macroname, rec_color, cur_macro, cur_macroname, cur_color, cur_ammomacro, cur_weaponmode, cur_count, cur_total, mouseOverText = menu.getLiveLoadoutSlotInfo(macro, slotname, slot, false, nil, "turret", liveloadout)

                    if macro ~= "" then
                        row = inputtable:addRow("info_turretconfig" .. i, {  })
                    else
                        row = inputtable:addRow("info_turretconfig" .. i, { interactive = false })
                    end
                    row[1]:createText(slot .. " " .. slotname)
                    row[2]:setColSpan(4):createText(rec_macroname,      { color = rec_color,        mouseOverText = mouseOverText} )
                    row[7]:setColSpan(4):createText(cur_macroname,      { color = cur_color,        mouseOverText = mouseOverText} )
    
                    -- Missile turrets
                    if rec_ammomacro ~= "" or cur_ammomacro ~= "" then
                        row = inputtable:addRow(("info_weaponconfig" .. i .. "_ammo"), {  })
                        if rec_ammomacro ~= "" then
                            local numloadedammo = loadout.missile[rec_ammomacro] and loadout.missile[rec_ammomacro] or 0
                            local color = numloadedammo > 0 and rec_color or config.Color.text_inactive
                            row[2]:setColSpan(2):createText("  " .. ffi.string(GetMacroData(rec_ammomacro, "name")) , { color = rec_color })
                            row[4]:setColSpan(2):createText(tostring(numloadedammo) , { halign = "left", color = color })

                            for k, ammo in ipairs(allWaresStorageTable.missile) do
                                if ammo.macro == gun.ammomacro then
                                    ammo.installed = true
                                    break
                                end
                            end
    
                        end
                        if cur_ammomacro ~= rec_ammomacro and cur_ammomacro ~= "" then 
                            local numloadedammo = liveloadout.missile[cur_ammomacro] and liveloadout.missile[cur_ammomacro] or 0
                            local color = numloadedammo > 0 and cur_color or config.Color.text_inactive
                            row[7]:setColSpan(2):createText("  " .. ffi.string(GetMacroData(cur_ammomacro, "name")) , { color = cur_color })
                            row[9]:setColSpan(2):createText(tostring(numloadedammo) , { halign = "left", color = color })
                        end
                    end

                end
            end

            if loadout.turretgroup and #loadout.turretgroup > 0 then
                table.sort(loadout.turretgroup, menu.sortGroupSlotSizeAndSlot)
            end
            local dropdownCount = 1
            for i, gun in ipairs(loadout.turretgroup) do
                
                if i ~= 1 then
                    --inputtable:addEmptyRow(config.mapRowHeight / 2)
                end
                
                local row
                local slot = gun.a_group and gun.a_group.slot or i
                local slotname = gun.a_group and gun.a_group.shortslotsize or ""
                local group = gun.group
                local macro = gun.macro

                local rec_macroname, rec_color, cur_macro, cur_macroname, cur_color, cur_ammomacro, cur_weaponmode, cur_count, cur_total, mouseOverText = menu.getLiveLoadoutSlotInfo(macro, slotname, slot, true, group, "turretgroup", liveloadout)
                
                if macro ~= "" then
                    row = inputtable:addRow("info_turretconfig" .. i, {  })
                else
                    row = inputtable:addRow("info_turretconfig" .. i, { interactive = false })
                end
                row[1]:createText(slot .. " " .. slotname)
                row[2]:setColSpan(4):createText(rec_macroname,      { color = rec_color,        mouseOverText = mouseOverText} )
                row[7]:setColSpan(4):createText(cur_macroname,      { color = cur_color,        mouseOverText = mouseOverText} )

                -- weapon slotunda sadece missilelauncher, turret slotlarında ise sadece missileturret olabilir
                if gun.macro ~= "" and (IsMacroClass(gun.macro, "missilelauncher") or IsMacroClass(gun.macro, "missileturret")) then
                    for _, ammo in ipairs(allWaresStorageTable.missile) do
                        -- turretgroupların loadout kaydında ammomacro yok, her uygun ammo uygun bu slot için heran kullanılabilir
                        ammo.installed = ammo.compatible
                    end
                end

            end
        elseif mode == "station" then
            local hasnormalturrets = false
            local hasmissileturrets = false
            local numMissileTurrets = 0
            local numNormalTurrets = 0
            for i, gun in ipairs(loadout.turretgroup) do
                if gun.macro ~= "" then
                    local ismissileturret = IsMacroClass(gun.macro, "missileturret")
                    numMissileTurrets = ismissileturret and (numMissileTurrets + gun.count ) or numMissileTurrets
                    numNormalTurrets = (not ismissileturret) and (numNormalTurrets + gun.count ) or numNormalTurrets
                    if (not hasmissileturrets) or (not hasnormalturrets) then
                        hasmissileturrets = hasmissileturrets or ismissileturret
                        hasnormalturrets = hasnormalturrets or (not ismissileturret)
                    end
                end
            end
            if hasnormalturrets then
                -- non-missile
                local row = inputtable:addRow("info_turretconfig", {  })
                row[2]:setColSpan(4):createText(ReadText(1001, 8397))
                row[8]:setColSpan(3):createText(numNormalTurrets, { halign = "right" } )
            end
            if hasmissileturrets then
                -- missile
                local row = inputtable:addRow("info_turretconfig_missile", {  })
                row[2]:setColSpan(4):createText(ReadText(1001, 9031))
                row[8]:setColSpan(3):createText(numMissileTurrets, { halign = "right" } )
            end
        end

        -- Shiled, Engine, Thruster sections
        if mode == "ship" then

            local macroequipment = {
                { type = "shield",      text = ReadText(tPg, 3004) },
                { type = "shieldgroup", text = ReadText(tPg, 3005), turret = ReadText(1001, 7901), engine = ReadText(1001, 8520) },
                { type = "engine",      text = ReadText(tPg, 3006) },
            }

            for _, entry in ipairs(macroequipment) do
                local loadoutentrytype = {}
                loadoutentrytype = loadout[entry.type]
                -- title
                local row = inputtable:addRow(false, { bgColor = config.Color["row_title_background"] })
                row[1]:setColSpan(11):createText(entry.text, Helper.headerRowCenteredProperties) 
                row[1].properties.color = config.infoTableRowsColor.subsections
                if #loadoutentrytype > 0 then

                    if entry.type == "shieldgroup" then
                        table.sort(loadoutentrytype, function (a, b) return (a.a_group.grouptype .. a.a_group.shortslotsize .. a.a_group.slot ) < (b.a_group.grouptype .. b.a_group.shortslotsize .. b.a_group.slot) end)
                    end
        
                    for i, data in ipairs(loadoutentrytype) do
                        
                        if entry.type == "shieldgroup" then

                            if i ~= 1 then
                                inputtable:addEmptyRow(config.mapRowHeight / 2)
                            end
            
                            local slot = data.a_group and data.a_group.slot or i
                            local slotname = data.a_group and data.a_group.shortslotsize or ""
                            local group = data.group
                            local grouptype = data.a_group and data.a_group.grouptype or ""
                            local macro = data.macro or ""
                            local rec_total = data.a_total and data.a_total or ""
                            local rec_count = data.count and data.count or ""
                            
                            local rec_macroname, rec_color, cur_macro, cur_macroname, cur_color, cur_ammomacro, cur_weaponmode, cur_count, cur_total, mouseOverText = menu.getLiveLoadoutSlotInfo(macro, slotname, slot, true, group, "shieldgroup", liveloadout)

                            local rec_strcounttotal = ((rec_count < rec_total) and Helper.convertColorToText(config.Color.text_inactive) or Helper.convertColorToText(rec_color) ) .. tostring(rec_count) .. "/" .. tostring(rec_total) 
                            local cur_strcounttotal = (liveloadout and macro ~= cur_macro) and ( ((cur_count ~= rec_count) and Helper.convertColorToText(cur_color) or Helper.convertColorToText(rec_color) ) .. tostring(cur_count) .. "/" .. tostring(cur_total) ) or ""
                            
                            row = inputtable:addRow( { "info_" .. entry.type .. "config" .. slot, macro, menu.Selected.strComponent }, {  } )
                            row[1]:createText(slot .. " " ..  slotname )
                            row[2]:createText(grouptype ~= "" and entry[grouptype] or "")
                            row[3]:setColSpan(3):createText(rec_strcounttotal   , { halign = "right", mouseOverText = mouseOverText } ) 
                            row[8]:setColSpan(3):createText(cur_strcounttotal   , { halign = "right", mouseOverText = mouseOverText } ) 

                            local row = inputtable:addRow({ "info_" .. entry.type .. "configcount" .. data.group, data.macro, tonumber(rec_count), tonumber(rec_total), menu.Selected.strComponent }, {  })
                            row[2]:setColSpan(4):createText( rec_macroname, { color = rec_color  , mouseOverText = mouseOverText } )
                            row[7]:setColSpan(4):createText( cur_macroname, { color = cur_color  , mouseOverText = mouseOverText } )
                            

                        else
                            local row
                            
                            local slotname = data.a_slot.name or ""
                            local slot = slotname ~= "" and i or data.a_slot.slot
                            local macro = data.macro

                            local rec_macroname, rec_color, cur_macro, cur_macroname, cur_color, cur_ammomacro, cur_weaponmode, cur_count, cur_total, mouseOverText = menu.getLiveLoadoutSlotInfo(macro, slotname, slot, false, nil, entry.type, liveloadout)

                            if macro ~= "" then
                                row = inputtable:addRow("info_" .. entry.type .. "config" .. i, {  })
                            else
                                row = inputtable:addRow("info_" .. entry.type .. "config" .. i, { interactive = false })
                            end
                            row[1]:createText(slot .. " " .. slotname)
                            row[2]:setColSpan(4):createText(rec_macroname,      { color = rec_color,        mouseOverText = mouseOverText} )
                            row[7]:setColSpan(4):createText(cur_macroname,      { color = cur_color,        mouseOverText = mouseOverText} )
                                
                        end
    
                    end

                else
                    local row1 = inputtable:addRow("info_" .. entry.type .. "config", { interactive = false })
                    row1[2]:createText(config.nonetext, { color = config.Color.text_inactive } )
                end
            end

            -- thruster section
            -- title
            local row = inputtable:addRow(false, { bgColor = config.Color["row_title_background"] })
            row[1]:setColSpan(11):createText(ReadText(1001, 8001), Helper.headerRowCenteredProperties) -- Thrusters
            row[1].properties.color = config.infoTableRowsColor.subsections
            if #loadout.thruster > 0  then

                for i, gun in ipairs(loadout.thruster) do
                    local row
                    local slot = i -- gun.a_slot.slot or i
                    local slotname = gun.a_slot.name or ""
                    local macro = gun.macro

                    local rec_macroname, rec_color, cur_macro, cur_macroname, cur_color, cur_ammomacro, cur_weaponmode, cur_count, cur_total, mouseOverText = menu.getLiveLoadoutSlotInfo(macro, slotname, slot, false, nil, "thruster", liveloadout)

                    if macro ~= "" then
                        row = inputtable:addRow("info_thrusterconfig" .. i, {  })
                    else
                        row = inputtable:addRow("info_thrusterconfig" .. i, { interactive = false })
                    end
                    row[1]:createText(slot .. " " .. slotname)
                    row[2]:setColSpan(4):createText(rec_macroname,      { color = rec_color,        mouseOverText = mouseOverText} )
                    row[7]:setColSpan(4):createText(cur_macroname,      { color = cur_color,        mouseOverText = mouseOverText} )

                end
            else
                local row1 = inputtable:addRow("info_thrusterconfig", { interactive = false })
                row1[2]:createText(config.nonetext, { color = config.Color.text_inactive } )
            end

            inputtable:addEmptyRow(config.mapRowHeight /2)
        end

        -- DRONES
		local rec_unitstoragetable = record.tCapacity.drones
		local rec_unitcapacity = rec_unitstoragetable.capacity
        local rec_locunitcapacity = tostring(rec_unitcapacity)
        local rec_unitcount = 0
        --live
		local cur_unitstoragetable = C.IsComponentClass(object64, "defensible") and GetUnitStorageData(object64) or { stored = 0, capacity = rec_unitcapacity }
		local cur_unitcapacity = cur_unitstoragetable.capacity
        local cur_locunitcapacity = tostring(cur_unitcapacity)
		local cur_unitcount = tostring(cur_unitstoragetable.stored)
        local cur_locunitcount = tostring(cur_unitcount)
        
        local dronetypes = {
            { id = "orecollector",	name = ReadText(20214, 500),	displayonly = true },
            { id = "gascollector",	name = ReadText(20214, 400),	displayonly = true },
            { id = "defence",		name = ReadText(20214, 300) },
            { id = "transport",		name = ReadText(20214, 900) },
            { id = "build",			name = ReadText(20214, 1000),	skipmode = true },
            { id = "repair",		name = ReadText(20214, 1100),	skipmode = true },
        }
        for _, dronetype in ipairs(dronetypes) do
            for i, unitmacro in ipairs(menu.defaultSettings.droneMacroByType[dronetype.id] or {}) do
                dronetype.categoryname = GetMacroData(unitmacro, "name")
                dronetype.compatible = C.IsUnitMacroCompatible(0, record.macro, unitmacro)
                local amount = loadout.drone[unitmacro] or 0
                dronetype.rec_amount = amount
                if not dronetype.compatible then
                    if not dronetype.macro then
                        dronetype.macro = unitmacro
                    end
                else
                    dronetype.macro = unitmacro
                end
                rec_unitcount = rec_unitcount + amount
            end
        end
        local rec_locunitcount = tostring(rec_unitcount)

        -- title
        local row = inputtable:addRow(false, { bgColor = config.Color["row_title_background"] })
        row[1]:setColSpan(11):createText(ReadText(tPg, 3002), Helper.headerRowCenteredProperties)      -- Drones
        row[1].properties.color = config.infoTableRowsColor.subsections
        if rec_unitcapacity > 0 or cur_unitcapacity > 0 then
			-- title
			local row = inputtable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
			row[1]:setBackgroundColSpan(11)
            row[7]:setColSpan(1):createText(ReadText(tPg, 11230), { halign = "center", color = recordedcolor } )   -- Recorded
			row[8]:setColSpan(4):createText(ReadText(tPg, 11229), { halign = "center", color = activecolor } )   -- Active
            -- capcity
            local row = inputtable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
            row[1]:setBackgroundColSpan(11)
            row[1]:setColSpan(5):createText(ReadText(1001, 8393))              -- Capacity
            row[7]:setColSpan(1):createText(rec_locunitcount .. " / " .. rec_locunitcapacity, { halign = "right"  })
			row[8]:setColSpan(4):createText(cur_unitcount .. " / " .. rec_locunitcapacity, { halign = "right" })

            for i, dronetype in ipairs(dronetypes) do
                if dronetype.compatible then
                    local name = dronetype.name
                    local macro = dronetype.macro
                    local category = dronetype.id
                    local rec_amount = dronetype.rec_amount or 0
                    
                    local cur_amount = 0
                    if object64 ~=0 then
                        cur_amount = C.GetNumStoredUnits(object64, dronetype.id, false)
                    end
                    -- name, amount 
                    local maxselect = rec_amount + (rec_unitcapacity - rec_unitcount)
                    local row = inputtable:addRow( { "drone_config".. i, category, macro, menu.Selected.strComponent }, {  })
                    row[1]:setColSpan(2):createText(" " .. name)
                    row[7]:setColSpan(1):createSliderCell({
                        height = Helper.standardTextHeight,
                        bgColor = (rec_amount > 0) and config.Color["slider_background_transparent"] or config.Color["slider_background_inactive"],
                        valueColor = canupdaterecord and config.Color["slider_value"] or config.Color["slider_value_inactive"],
                        min = 0, 
                        max = rec_unitcapacity,
                        maxSelect = maxselect,
                        start = rec_amount,
                        hideMaxValue = true,
                        suffix = "",
                        readOnly = not canupdaterecord,
                    })
                    row[7].handlers.onSliderCellChanged = function(_, value) menu.noupdate = true; return menu.slidercellSetRecordedAmmoStorage("drone", strComponent, macro, value, category) end
                    row[7].handlers.onSliderCellConfirm = function() return menu.refreshRightFrame() end
                    row[7].handlers.onSliderCellActivated = function() menu.noupdate = true end
                    row[7].handlers.onSliderCellDeactivated = function() menu.noupdate = false end
                    -- live
                    if cur_amount > 0 then
                        row[9]:setColSpan(3):createText(tostring(cur_amount), { halign = "right", color = cur_amount ~= rec_amount and diffcolor or normalcolor })
                    else
                        if rec_amount > 0 then
                            row[9]:setColSpan(3):createText(object64 ~= 0 and "0" or "", { halign = "right" , color = diffcolor })      -- 0
                        end
                    end
                end
            end
        else
            local row1 = inputtable:addRow("info_drone", { interactive = false })
            row1[2]:createText(config.nonetext, { color = config.Color.text_inactive } )
        end

        inputtable:addEmptyRow(config.mapRowHeight /2)

        -- AMMUNITIONS
        -- rec
        local rec_missilecapacity =  tonumber(record.tCapacity.missiles)
        local rec_locmissilecapacity = tostring(rec_missilecapacity )
        local rec_totalnummissiles = 0
        for storagemacro, amount in pairs(loadout.missile) do
            rec_totalnummissiles = rec_totalnummissiles + amount
        end
        local rec_loctotalnummissiles = tostring(rec_totalnummissiles)
        -- live
		local cur_missilecapacity = 0
        cur_missilecapacity = object64 ~= 0 and GetComponentData(object64, "missilecapacity") or rec_missilecapacity
        local cur_locmissilecapacity = tostring(cur_missilecapacity)
		local cur_nummissiletypes = object64 ~= 0 and C.GetNumAllMissiles(object64) or 0
		local cur_missilestoragetable = ffi.new("AmmoData[?]", cur_nummissiletypes)
		cur_nummissiletypes = object64 ~= 0 and C.GetAllMissiles(cur_missilestoragetable, cur_nummissiletypes, object64) or 0
		local cur_totalnummissiles = 0
		for i = 0, cur_nummissiletypes - 1 do
            local macro = ffi.string(cur_missilestoragetable[i].macro)
            local amount = cur_missilestoragetable[i].amount
            for k, v in ipairs(allWaresStorageTable.missile) do
                if v.macro == macro then
                    v.cur_amount = amount
                    break
                end
            end
            cur_totalnummissiles = cur_totalnummissiles + amount
		end
        local cur_loctotalnummissiles = tostring(cur_totalnummissiles)

        -- title
        local row = inputtable:addRow(false, { bgColor = config.Color["row_title_background"] })
        row[1]:setColSpan(11):createText(ReadText(1001, 2800), Helper.headerRowCenteredProperties)      -- Ammunition
        row[1].properties.color = config.infoTableRowsColor.subsections

        if rec_missilecapacity > 0 or cur_missilecapacity > 0 then
			-- title
			local row = inputtable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
			row[1]:setBackgroundColSpan(11)
            row[7]:setColSpan(1):createText(ReadText(tPg, 11230), { halign = "center", color = recordedcolor } )   -- Recorded
			row[8]:setColSpan(4):createText(ReadText(tPg, 11229), { halign = "center", color = activecolor } )   -- Active
            -- capcity
            local row = inputtable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
            row[1]:setBackgroundColSpan(11)
            row[1]:setColSpan(5):createText(ReadText(1001, 8393))                                       -- Capacity
            row[7]:setColSpan(1):createText(rec_loctotalnummissiles .. " / " .. rec_locmissilecapacity, { halign = "right"  })
			row[8]:setColSpan(4):createText(cur_loctotalnummissiles .. " / " .. (object64 ~= 0 and cur_locmissilecapacity or rec_locmissilecapacity), { halign = "right" })

            if menu.chkShowCompatibleMissiles == nil then
                menu.chkShowCompatibleMissiles = true
            end
            local row = inputtable:addRow(true, { } )
            row[6]:createCheckBox(menu.chkShowCompatibleMissiles, { active = canupdaterecord, width = config.mapRowHeight, height = config.mapRowHeight })
            row[6].handlers.onClick = function (_, checked) menu.chkShowCompatibleMissiles = checked; menu.refreshRightFrame(); end
            row[7]:createButton({ active = canupdaterecord, cellBGColor = config.Color.row_background, height = config.mapRowHeight }):setText(ReadText(tPg, 6055), { halign = "center" })  -- Show only compatible ones
            row[7].handlers.onClick = function () menu.chkShowCompatibleMissiles = not menu.chkShowCompatibleMissiles; menu.refreshRightFrame(); end

            for i, v in ipairs(allWaresStorageTable.missile) do
                if v.compatible or (not menu.chkShowCompatibleMissiles) then
                    local name = v.name
                    local macro = v.macro
                    local rec_amount = loadout.missile[macro] or 0
                    local cur_amount = v.cur_amount or 0
                    -- name, amount 
                    local maxselect = rec_amount + (rec_missilecapacity - rec_totalnummissiles)
                    local row = inputtable:addRow( {"missile_config" .. i, macro, menu.Selected.strComponent }, {  })
                    row[1]:setColSpan(2):createText(" " .. name, { color = v.installed and config.Color.text_normal or config.Color.text_inactive })
                    row[7]:setColSpan(1):createSliderCell({
                        height = Helper.standardTextHeight,
                        bgColor = (rec_amount > 0) and config.Color["slider_background_transparent"] or config.Color["slider_background_inactive"],
                        valueColor = canupdaterecord and config.Color["slider_value"] or config.Color["slider_value_inactive"],
                        min = 0, 
                        max = rec_missilecapacity,
                        maxSelect = maxselect,
                        start = rec_amount,
                        hideMaxValue = true,
                        suffix = "",
                        readOnly = not canupdaterecord,
                    })
                    row[7].handlers.onSliderCellChanged = function(_, value) menu.noupdate = true; return menu.slidercellSetRecordedAmmoStorage("missile", strComponent, macro, value, nil) end
                    row[7].handlers.onSliderCellConfirm = function() return menu.refreshRightFrame() end
                    row[7].handlers.onSliderCellActivated = function() menu.noupdate = true end
                    row[7].handlers.onSliderCellDeactivated = function() menu.noupdate = false end
                    -- live
                    if cur_amount > 0 then
                        row[9]:setColSpan(3):createText(tostring(cur_amount), { halign = "right", color = cur_amount ~= rec_amount and diffcolor or normalcolor })
                    else
                        if rec_amount > 0 then
                            row[9]:setColSpan(3):createText(object64 ~= 0 and "0" or "", { halign = "right" , color = diffcolor })      -- 0
                        end
                    end
                end
            end

        else
            local row1 = inputtable:addRow("info_missile", { interactive = false })
            row1[2]:createText(config.nonetext, { color = config.Color.text_inactive } )
        end

        inputtable:addEmptyRow(config.mapRowHeight /2)
    end
    
    -- countermeasures, deployables Bölümü
    if mode == "ship" then
        -- COUNTERMEASURES
        -- rec
        local rec_numcountermeasuretypes = 0
        local rec_totalnumcountermeasures = 0
        local rec_countermeasurescapacity = tonumber(record.tCapacity.countermeasures)
        for storagemacro, amount in pairs(loadout.countermeasure) do
            rec_totalnumcountermeasures = rec_totalnumcountermeasures + amount
        end
        -- live
        local cur_numcountermeasuretypes = object64 ~= 0 and C.GetNumAllCountermeasures(object64) or 0
        local countermeasurestoragetable = ffi.new("AmmoData[?]", cur_numcountermeasuretypes)
		cur_numcountermeasuretypes = object64 ~= 0 and C.GetAllCountermeasures(countermeasurestoragetable, cur_numcountermeasuretypes, object64) or 0
		local cur_totalnumcountermeasures = 0
        local cur_countermeasurescapacity = object64 ~= 0 and GetComponentData(object64, "countermeasurecapacity") or rec_countermeasurescapacity
		for i = 0, cur_numcountermeasuretypes - 1 do
            local macro = ffi.string(countermeasurestoragetable[i].macro)
            local amount = countermeasurestoragetable[i].amount
            for k, v in ipairs(allWaresStorageTable.countermeasure) do
                if v.macro == macro then
                    v.cur_amount = amount
                    break
                end
            end
			cur_totalnumcountermeasures = cur_totalnumcountermeasures + amount
		end
        local rec_logtotalnumcountermeasures = tostring(rec_totalnumcountermeasures)
        local rec_logcountermeasurescapacity = tostring(rec_countermeasurescapacity)
        local cur_logtotalnumcountermeasures = tostring(cur_totalnumcountermeasures)
        local cur_logcountermeasurescapacity = tostring(cur_countermeasurescapacity)
        -- title
        local row = inputtable:addRow(false, { bgColor = config.Color["row_title_background"] })
        row[1]:setColSpan(11):createText(ReadText(20215, 1701), Helper.headerRowCenteredProperties)      -- Countermeasures
        row[1].properties.color = config.infoTableRowsColor.subsections
        if rec_countermeasurescapacity > 0 or cur_countermeasurescapacity > 0 then
			-- title
			local row = inputtable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
			row[1]:setBackgroundColSpan(11)
            row[7]:setColSpan(1):createText(ReadText(tPg, 11230), { halign = "center", color = recordedcolor } )   -- Recorded
			row[8]:setColSpan(4):createText(ReadText(tPg, 11229), { halign = "center", color = activecolor } )   -- Active
            -- capcity
            local row = inputtable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
            row[1]:setBackgroundColSpan(11)
            row[1]:setColSpan(5):createText(ReadText(1001, 8393))                                       -- Capacity
            row[7]:setColSpan(1):createText(rec_logtotalnumcountermeasures .. " / " .. rec_logcountermeasurescapacity, { halign = "right"  })
			row[8]:setColSpan(4):createText(cur_logtotalnumcountermeasures .. " / " .. (object64 ~= 0 and cur_logcountermeasurescapacity or rec_logcountermeasurescapacity), { halign = "right" })

            for i, v in ipairs(allWaresStorageTable.countermeasure) do
                if v.compatible then
                    local name = v.name
                    local macro = v.macro
                    local rec_amount = loadout.countermeasure[macro] or 0
                    local cur_amount = v.cur_amount or 0
                    -- name, amount 
                    local maxselect = math.min(rec_countermeasurescapacity, rec_amount + (rec_countermeasurescapacity - rec_totalnumcountermeasures))
                    local row = inputtable:addRow( { "countermeasure_config".. i, macro, menu.Selected.strComponent }, {  })
                    row[1]:setColSpan(2):createText(" " .. name)
                    row[7]:setColSpan(1):createSliderCell({
                        height = Helper.standardTextHeight,
                        bgColor = (rec_amount > 0) and config.Color["slider_background_transparent"] or config.Color["slider_background_inactive"],
                        valueColor = canupdaterecord and config.Color["slider_value"] or config.Color["slider_value_inactive"],
                        min = 0, 
                        max = rec_countermeasurescapacity,
                        maxSelect = maxselect,
                        start = rec_amount,
                        hideMaxValue = true,
                        suffix = "",
                        readOnly = not canupdaterecord,
                    })
                    row[7].handlers.onSliderCellChanged = function(_, value) menu.noupdate = true; return menu.slidercellSetRecordedAmmoStorage("countermeasure", strComponent, macro, value, nil) end
                    row[7].handlers.onSliderCellConfirm = function() return menu.refreshRightFrame() end
                    row[7].handlers.onSliderCellActivated = function() menu.noupdate = true end
                    row[7].handlers.onSliderCellDeactivated = function() menu.noupdate = false end
                    -- live
                    if cur_amount > 0 then
                        row[9]:setColSpan(3):createText(tostring(cur_amount), { halign = "right", color = cur_amount ~= rec_amount and diffcolor or normalcolor })
                    else
                        if rec_amount > 0 then
                            row[9]:setColSpan(3):createText(object64 ~= 0 and "0" or "", { halign = "right" , color = diffcolor })      -- 0
                        end
                    end
                end
            end
        else
            local row1 = inputtable:addRow("info_countermeasure", { interactive = false })
            row1[2]:createText(config.nonetext, { color = config.Color.text_inactive } )
        end
        
        inputtable:addEmptyRow(config.mapRowHeight /2)

        -- DEPLOYABLES
		local consumables = {
			{ id = "satellite",		type = "civilian",	getnum = C.GetNumAllSatellites,		getdata = C.GetAllSatellites,		callback = C.LaunchSatellite },
			{ id = "navbeacon",		type = "civilian",	getnum = C.GetNumAllNavBeacons,		getdata = C.GetAllNavBeacons,		callback = C.LaunchNavBeacon },
			{ id = "resourceprobe",	type = "civilian",	getnum = C.GetNumAllResourceProbes,	getdata = C.GetAllResourceProbes,	callback = C.LaunchResourceProbe },
			{ id = "lasertower",	type = "military",	getnum = C.GetNumAllLaserTowers,	getdata = C.GetAllLaserTowers,		callback = C.LaunchLaserTower },
			{ id = "mine",			type = "military",	getnum = C.GetNumAllMines,			getdata = C.GetAllMines,			callback = C.LaunchMine },
		}
        
        local rec_totalnumdeployables = 0
        local rec_deployablecapacity = tonumber(record.tCapacity.deployables)
		local cur_totalnumdeployables = 0
        local cur_deployablecapacity = object64 ~= 0 and C.GetDefensibleDeployableCapacity(object64) or rec_deployablecapacity

        for _, consumable in ipairs(consumables) do
            -- rec            
            for i, consumablemacro in ipairs(menu.defaultSettings.deployableMacroByType[consumable.id] or {}) do
                for _, deployable in ipairs(allWaresStorageTable.deployable) do
                    if deployable.macro == consumablemacro then
                        deployable.category = consumable.id
                        deployable.categoryname = GetMacroData(consumablemacro, "name")
                        local amount = loadout.deployable[consumablemacro] or 0
                        deployable.rec_amount = amount
                        rec_totalnumdeployables = rec_totalnumdeployables + amount
                        break
                    end

                end
            end
            --live
			local n = object64 ~= 0 and consumable.getnum(object64) or 0
			local buf = ffi.new("AmmoData[?]", n)
			n = object64 ~= 0 and consumable.getdata(buf, n, object64) or 0
			for i = 0, n - 1 do
                local macro = ffi.string(buf[i].macro)
                local amount = buf[i].amount
                for _, deployable in ipairs(allWaresStorageTable.deployable) do
                    if deployable.macro == macro then
                        deployable.cur_amount = amount
                        cur_totalnumdeployables = cur_totalnumdeployables + amount
                        break
                    end
                end
			end
        end
        local rec_logtotalnumdeployables = tostring(rec_totalnumdeployables)
        local rec_logdeployablecapacity = tostring(rec_deployablecapacity)
        local cur_logtotalnumdeployables = tostring(cur_totalnumdeployables)
        local cur_logdeployablecapacity = tostring(cur_deployablecapacity)

        -- title
        local row = inputtable:addRow(false, { bgColor = config.Color["row_title_background"] })
        row[1]:setColSpan(11):createText(ReadText(1001, 1332), Helper.headerRowCenteredProperties)      -- Deployables
        row[1].properties.color = config.infoTableRowsColor.subsections
        if rec_deployablecapacity > 0 or cur_deployablecapacity > 0 then
			-- title
			local row = inputtable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
			row[1]:setBackgroundColSpan(11)
            row[7]:setColSpan(1):createText(ReadText(tPg, 11230), { halign = "center", color = recordedcolor } )   -- Recorded
			row[8]:setColSpan(4):createText(ReadText(tPg, 11229), { halign = "center", color = activecolor } )   -- Active
            -- capcity
            local row = inputtable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
            row[1]:setBackgroundColSpan(11)
            row[1]:setColSpan(5):createText(ReadText(1001, 8393))                                       -- Capacity
            row[7]:setColSpan(1):createText(rec_logtotalnumdeployables .. " / " .. rec_logdeployablecapacity, { halign = "right"  })
			row[8]:setColSpan(4):createText(cur_logtotalnumdeployables .. " / " .. (object64 ~= 0 and cur_logdeployablecapacity or rec_logdeployablecapacity), { halign = "right" })
            
            for _, consumable in ipairs(consumables) do
                for i, deployable in ipairs(allWaresStorageTable.deployable) do
                    if (consumable.id == deployable.category) and deployable.compatible then
                        local name = deployable.name
                        local macro = deployable.macro
                        local rec_amount = deployable.rec_amount
                        local cur_amount = deployable.cur_amount or 0
                        -- name, amount 
                        local maxselect = rec_amount + (rec_deployablecapacity - rec_totalnumdeployables)
                        row = inputtable:addRow( { "deployable_config".. i, macro, menu.Selected.strComponent }, {  })
                        row[1]:setColSpan(2):createText(" " .. name)
                        row[7]:setColSpan(1):createSliderCell({
                            height = Helper.standardTextHeight,
                            bgColor = (rec_amount > 0) and config.Color["slider_background_transparent"] or config.Color["slider_background_inactive"],
                            valueColor = canupdaterecord and config.Color["slider_value"] or config.Color["slider_value_inactive"],
                            min = 0, 
                            minSelect = 0,
                            max = rec_deployablecapacity,
                            maxSelect = maxselect,
                            start = rec_amount,
                            step = 1,
                            hideMaxValue = true,
                            suffix = "",
                            readOnly = not canupdaterecord,
                        })
                        --row[7].handlers.onSliderCellChanged = function(_, value) menu.noupdate = true; return menu.slidercellSetRecordedAmmoStorage("deployable", strComponent, macro, value, nil) end
                        --row[7].handlers.onSliderCellConfirm = function() return menu.refreshRightFrame() end
                        row[7].handlers.onSliderCellConfirm = function(_, value)
                            menu.slidercellSetRecordedAmmoStorage("deployable", strComponent, macro, value, nil)
                            menu.refreshRightFrame() 
                        end
                        row[7].handlers.onSliderCellActivated = function() menu.noupdate = true end
                        row[7].handlers.onSliderCellDeactivated = function() menu.noupdate = false end
                        -- live
                        if cur_amount > 0 then
                            row[9]:setColSpan(3):createText(tostring(cur_amount), { halign = "right", color = cur_amount ~= rec_amount and diffcolor or normalcolor })
                        else
                            if rec_amount > 0 then
                                row[9]:setColSpan(3):createText(object64 ~= 0 and "0" or "", { halign = "right" , color = diffcolor })      -- 0
                            end
                        end
                    end
                end
                
            end

        else
            local row1 = inputtable:addRow("info_deploy", { interactive = false })
            row1[2]:createText(config.nonetext, { color = config.Color.text_inactive } )
        end

        inputtable:addEmptyRow(config.mapRowHeight /2)
    end

    -- Paint Mod
    if mode == "ship" then
        -- title
        local row = inputtable:addRow(false, { bgColor = config.Color["row_title_background"] })
        row[1]:setColSpan(11):createText(ReadText(1001, 8510), Helper.headerRowCenteredProperties)      -- Paint Modification
        row[1].properties.color = config.infoTableRowsColor.subsections

        local row = inputtable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
        row[1]:setBackgroundColSpan(11)
        row[1]:setColSpan(5):createText(ReadText(tPg, 11230), { halign = "center", color = recordedcolor } )   -- Recorded
        row[7]:setColSpan(5):createText(ReadText(tPg, 11229), { halign = "center", color = activecolor } )   -- Active

        local defaultpaintmod = {
            name = "",
            quality = 1,
        }
        local buf = ffi.new("UIPaintMod")
        if (record.object64 ~= 0) or (record.macro ~= "") then
            if C.GetPlayerPaintThemeMod(record.object64, record.macro, buf) then
                defaultpaintmod.name = ffi.string(buf.Name)
                defaultpaintmod.ware = ffi.string(buf.Ware)
                defaultpaintmod.quality = buf.Quality
                defaultpaintmod.amount = menu.getNumInventoryPaintMod(defaultpaintmod.ware)
            end
        end
        local defaultpaintmodcolor = Helper.modQualities[defaultpaintmod.quality].color
        
        local cur_installed_PaintMod = nil
        local cur_installed_name = ""
        local cur_installed_quality = 1
        local cur_installed_mouseOverText = ""
        local cur_installed_color = Helper.modQualities[1].color
        if record.object64 ~=0 and canupdaterecord then
            local paintmod = ffi.new("UIPaintMod")
            if C.GetInstalledPaintMod(record.object64, paintmod) then
                cur_installed_PaintMod = {}
                cur_installed_PaintMod.name = ffi.string(paintmod.Name)
                cur_installed_PaintMod.ware = ffi.string(paintmod.Ware)
                cur_installed_PaintMod.quality = paintmod.Quality
                cur_installed_PaintMod.amount = menu.getNumInventoryPaintMod(cur_installed_PaintMod.ware) 

                cur_installed_name = ffi.string(paintmod.Name)
                cur_installed_quality = paintmod.Quality
                cur_installed_color = Helper.modQualities[cur_installed_quality].color
                local isPrintDetail = menu.editedSettings.DeepDebug == 100
                cur_installed_mouseOverText = isPrintDetail
                and
                ( cur_installed_PaintMod.amount > 0 and ReadText(tPg,8011) or ReadText(tPg,8012)) ..  
                "\n " .. ReadText(1001,1202) .. " : " .. tostring(cur_installed_PaintMod.amount) ..
                "\n " .. ReadText(1001,4823) .. " : " .. tostring(cur_installed_PaintMod.ware) ..
                "\n " .. ReadText(1001,3231) .. " : " .. (cur_installed_PaintMod.ware == defaultpaintmod.ware and ReadText(1001,2617) or  string.format( "%s%s\027X", Helper.convertColorToText(defaultpaintmodcolor), defaultpaintmod.name)  )
                or
                ""
            end
        end
        
        --[[
            -- 1270         None
            -- 1280         Record
            -- 1300         Installed
            -- 1301         Not Installed
            -- 8020         Record structure is corrupt.
            -- 8021         To fix, wait for the ship to be produced.
            -- 1001,1202    Amount
            -- 1001,3231    Default
            -- 1001,9002    Unknown
            -- 8010         Paint Mod
            -- 8011         The player has it.
            -- 8012         The player doesn't have it.
            -- 8013         Default paintmod will be applied after production.
            -- 11229        Active
            -- 11230        Recorded
        ]]
        -- Rec Default
        local rec_default_iscorrupted = not record.tPaintModWareId.default
        local rec_default_isvalid = not rec_default_iscorrupted and (menu.modwaresByWare[record.tPaintModWareId.default] and true or false) or false
        local rec_default_PaintMod = rec_default_isvalid and menu.modwaresByWare[record.tPaintModWareId.default] or nil
        --
        local rec_default_name = rec_default_iscorrupted and ReadText(tPg,8020) .. " " .. ReadText(tPg,8021) or (rec_default_isvalid and rec_default_PaintMod.name or ReadText(1001,9002) .. " " .. ReadText(tPg, 8010))
        local rec_default_quality = rec_default_iscorrupted and 1 or (rec_default_isvalid and rec_default_PaintMod.quality or 1)
        local rec_default_color = rec_default_iscorrupted and config.Color.text_warning or Helper.modQualities[rec_default_quality].color
        local rec_default_amount = rec_default_isvalid and menu.getNumInventoryPaintMod(rec_default_PaintMod.ware) or 0
        --
        -- Rec Installed
        local rec_installed_iscorrupted = not record.tPaintModWareId.installed
        local rec_installed_isvalid = not rec_installed_iscorrupted and (menu.modwaresByWare[record.tPaintModWareId.installed] and true or false) or false
        local rec_installed_PaintMod = rec_installed_isvalid and menu.modwaresByWare[record.tPaintModWareId.installed] or nil
        --
        local rec_installed_name = rec_installed_iscorrupted and ReadText(tPg,8020) .. " " .. ReadText(tPg,8021) or (rec_installed_isvalid and rec_installed_PaintMod.name or ReadText(1001,9002) .. " " .. ReadText(tPg, 8010))
        local rec_installed_quality = rec_installed_iscorrupted and 1 or (rec_installed_isvalid and rec_installed_PaintMod.quality or 1)
        local rec_installed_color = rec_installed_iscorrupted and config.Color.text_warning or Helper.modQualities[rec_installed_quality].color
        local rec_installed_amount = rec_installed_isvalid and menu.getNumInventoryPaintMod(rec_installed_PaintMod.ware) or 0

        local rec_mouseOverText = function()
            local isDetail = menu.editedSettings.DeepDebug == 100
            local tab0, tab1, tab2  ="\n", "\n  ", "\n    "
            local lheader = ""
            local linstalled = tab0 .. ReadText(tPg,1300)
            local linstalledR, linstalledC = "", ""
            local linstalledRa, linstalledCa = "", ""
            
            local lamount = tab2 .. ReadText(1001,1202) .. " "

            local ldefault = ""
            local ldefaultR, ldefaultC = "", ""
            local ldefaultRa, ldefaultCa = "", ""

            if rec_installed_PaintMod then
                linstalled = ReadText(tPg,1300)
                linstalledR     = tab1 .. ReadText(tPg,11230) .. " " .. string.format( "%s%s\027X", Helper.convertColorToText(rec_installed_color), rec_installed_PaintMod.name)
                linstalledRa    = isDetail and lamount .. tostring(rec_installed_amount) or ""
                if cur_installed_PaintMod then
                    if rec_installed_PaintMod.ware ~= cur_installed_PaintMod.ware then
                        linstalledC     = tab1 .. ReadText(tPg,11229) .. " " .. string.format( "%s%s\027X", Helper.convertColorToText(cur_installed_color), cur_installed_PaintMod.name) 
                        linstalledCa    = isDetail and lamount .. tostring(cur_installed_PaintMod.amount ) or ""
                    end
                end
            else
                -- and ( Record structure is corrupt. To fix, wait for the ship to be produced. ) or ( Unknown Paint Mod )
                lheader = string.format( "%s%s\027X\n", Helper.convertColorToText(config.Color.text_enemy), (rec_installed_iscorrupted and ReadText(tPg,8020) .. " " .. ReadText(tPg,8021) or  ReadText(1001,9002) .. " " .. ReadText(tPg, 8010)) )
                -- Not Installed
                linstalledR     = tab1 .. string.format( "%s%s\027X", Helper.convertColorToText(config.Color.text_warning), ReadText(tPg,1301) )
                -- ( The %s paintmod will be applied after production. )
                linstalledRa    = tab1 .. string.format( ReadText(tPg,8013), rec_default_PaintMod and ReadText(1001,3231) or ReadText(1001,3231) .. " " .. ReadText(tPg,11229) )
            end

            local isPrintDefault = not rec_installed_PaintMod or (menu.editedSettings.DebugChance == 100)
            if rec_default_PaintMod then
                if isPrintDefault then
                    ldefault    = tab1 .. tab0 .. ReadText(1001,3231)
                    ldefaultR   = tab1 .. ReadText(tPg,11230) .. " " .. string.format( "%s%s\027X", Helper.convertColorToText(rec_default_color), rec_default_PaintMod.name)
                    ldefaultRa  = isDetail and lamount .. tostring( rec_default_amount ) or ""
                    if rec_default_PaintMod.ware ~= defaultpaintmod.ware then
                        ldefaultC   = tab1 .. ReadText(tPg,11229) .. " " .. string.format( "%s%s\027X", Helper.convertColorToText(defaultpaintmodcolor), defaultpaintmod.name)
                        ldefaultCa  = isDetail and lamount .. tostring( defaultpaintmod.amount ) or ""
                    end
                end
            else
                -- No Record
                ldefault    = tab1 .. tab0 .. ReadText(1001,3231)
                ldefaultR   = tab1 .. string.format( "%s%s %s\027X", Helper.convertColorToText(config.Color.text_warning), ReadText(1001,2618), ReadText(tPg,1280) )
                ldefaultC   = tab1 .. ReadText(tPg,11229) .. " " .. string.format( "%s%s\027X", Helper.convertColorToText(defaultpaintmodcolor), defaultpaintmod.name) 
                ldefaultCa  = isDetail and lamount .. tostring( defaultpaintmod.amount ) or ""
            end
            
            return lheader .. 
                    linstalled  .. linstalledR  .. linstalledRa .. linstalledC  .. linstalledCa ..
                    ldefault    .. ldefaultR    .. ldefaultRa   .. ldefaultC    .. ldefaultCa
        end

        row = inputtable:addRow("paintmod", {  } )
        if rec_installed_iscorrupted or not rec_installed_isvalid then
            menu.warningShown = getElapsedTime()
            row[1]:setColSpan(5):createText("  " .. rec_installed_name, menu.rowAlertTextProperties )
            row[1].properties.wordwrap = true
            row[1].properties.mouseOverText = rec_mouseOverText
        else
            row[1]:setColSpan(5):createText("  " .. rec_installed_name, { color = rec_installed_color, halign = "left", mouseOverText = rec_mouseOverText })
        end

        if cur_installed_PaintMod and rec_installed_PaintMod and (cur_installed_PaintMod.ware ~= rec_installed_PaintMod.ware) then
            row[7]:setColSpan(5):createText("  " .. cur_installed_name, { color = Helper.modQualities[cur_installed_quality].color, halign = "left", mouseOverText = cur_installed_mouseOverText })
        end

        inputtable:addEmptyRow(config.mapRowHeight /2)
    end
    
    -- subordinates, all loadout list
    if (mode == "ship") or (mode == "station") then

        -- subordinates
        local subordinates = menu.GetSubordinates_From_FleetRecords(strComponent)
        local groups = {}
        local usedassignments = {}
        local subordinategroups = {}
        for _, subordinate in ipairs(subordinates) do
            local subrecord = menu.GetRecordFromMd(subordinate)
            local purpose, shiptype, group = subrecord.purpose, subrecord.type, subrecord.subordinategroupid
            if group and group > 0 then
                if groups[group] then
                    table.insert(groups[group].subordinates, subordinate)
                    if shiptype == "resupplier" then
                        groups[group].numassignableresupplyships = groups[group].numassignableresupplyships + 1
                    end
                    if purpose == "Mine" then       -- MD içindeki kayıt purposenin texti bilgisi , Büyük harfle başlıyor, aslında id bilgisi ise küçük harfle
                        groups[group].numassignableminingships = groups[group].numassignableminingships + 1
                    end
                    if shiptype == "tug" then
                        groups[group].numassignabletugships = groups[group].numassignabletugships + 1
                    end
                else
                    local assignment =  ffi.string(subrecord.assignment)
                    local assignmentname = subrecord.assignment and config.assignments[subrecord.assignment].name or ""
                    usedassignments[assignment] = group
                    groups[group] = { assignment = assignment, assignmentname = assignmentname, subordinates = { subordinate }, numassignableresupplyships = (shiptype == "resupplier") and 1 or 0, numassignableminingships = (purpose == "Mine") and 1 or 0, numassignabletugships = (shiptype == "tug") and 1 or 0 }
                end

            end
        end
        if #subordinates > 0 then
            -- title
            local row = inputtable:addRow(false, { bgColor = config.Color["row_title_background"] })
            row[1]:setColSpan(11):createText(ReadText(tPg, 3003), Helper.headerRowCenteredProperties)   -- Subordinate Groups
            row[1].properties.color = config.infoTableRowsColor.subsections
            local isstation = ( record.class == "station" )
            for i = 1, isstation and 5 or 10 do
                if groups[i] then
                    local row = inputtable:addRow("subordinate_config", {  })
                    row[2]:createText(function () return ReadText(20401, i) .. (groups[i] and " ( " .. #groups[i].subordinates .. " )" or "") end, { color =  nil })
                    row[7]:setColSpan(4):createText(function () return (groups[i] and groups[i].assignmentname or "") end, { color =  nil })
                end
            end

            inputtable:addEmptyRow(config.mapRowHeight /2)
        end

        -- loadout
        if (#loadout.weapon > 0) or (#loadout.turret > 0) or (#loadout.turretgroup > 0) or (#loadout.shield > 0) or (#loadout.shieldgroup > 0) or (#loadout.engine > 0) or (#loadout.thruster > 0) or (#loadout.software > 0) then

            local hasshown = false
            -- title
            local row = inputtable:addRow(false, { bgColor = config.Color["row_title_background"] })
            row[1]:setColSpan(11):createText(ReadText(1001, 9413), Helper.headerRowCenteredProperties) -- Loadout
            row[1].properties.color = config.infoTableRowsColor.subsections
            -- caption
            local row = inputtable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
            row[2]:setColSpan(6):createText(ReadText(1001, 7935), { font = Helper.standardFontBold })                       -- Equipment
            row[8]:setColSpan(4):createText(ReadText(1001, 3603), { font = Helper.standardFontBold, halign = "right" })     -- Total Amount

            inputtable:addEmptyRow(config.mapRowHeight / 2)

            local printedlines = 0
            local macroequipment = {
                { type = "weapon", encyclopedia = "info_weapon" },
                { type = "turret", encyclopedia = "info_weapon" },
                { type = "turretgroup", encyclopedia = "info_weapon" },
                { type = "shield", encyclopedia = "info_equipment" },
                { type = "shieldgroup", encyclopedia = "info_equipment" },
                { type = "engine", encyclopedia = "info_equipment" },
            }
            for _, entry in ipairs(macroequipment) do
                local loadoutentrytype = {}
                loadoutentrytype = loadout[entry.type]
                if entry.type == "engine" then
                    if #loadout[entry.type .. "group"] > 0 then
                        loadoutentrytype = loadout[entry.type .. "group"]
                    end
                end
                if #loadoutentrytype > 0 then
                    if hasshown then
                        if entry.type ~= "shieldgroup" then     -- shieldgroup ise önceki shield bilgilerine bitişik yazsın.
                            inputtable:addEmptyRow(config.mapRowHeight / 2)
                        end
                    end
                    hasshown = true

                    local locmacros = infoCombineLoadoutComponents(loadoutentrytype)
                    for macro, data in pairs(locmacros) do
                        local row = inputtable:addRow({ entry.encyclopedia, macro, menu.Selected.strComponent }, {  })
                        row[2]:setColSpan(6):createText(GetMacroData(macro, "name"))
                        row[8]:setColSpan(4):createText(data.count , { halign = "right" })
                        printedlines = printedlines + 1
                    end

                end
            end

            if #loadout.thruster > 0 then
                if hasshown then
                    inputtable:addEmptyRow(config.mapRowHeight / 2)
                end
                hasshown = true
                -- ships normally only have 1 set of thrusters. in case a ship has more, this will list all of them.
                for i, entry in ipairs(loadout.thruster) do
                    local row = inputtable:addRow({ "info_equipment", entry.macro, menu.Selected.strComponent }, {  })
                    row[2]:setColSpan(10):createText(GetMacroData(entry.macro, "name"))
                    printedlines = printedlines + 1
                end
            end

            if #loadout.software > 0 then
                if hasshown then
                    inputtable:addEmptyRow(config.mapRowHeight / 2)
                end
                hasshown = true
                for i, ware in ipairs(loadout.software) do
                    local row = inputtable:addRow({ "info_software", ware, menu.Selected.strComponent }, {  })
                    row[2]:setColSpan(10):createText(GetWareData(ware, "name"))
                    printedlines = printedlines + 1
                end
            end

            if printedlines == 0 then
                local row = inputtable:addRow("none", { bgColor = config.sColor.transparent, interactive = false })
                row[2]:setColSpan(10):createText( config.nonetext , { color = config.Color.text_inactive } )  -- "-- None --"
            else
                inputtable:addEmptyRow(config.mapRowHeight)
            end
        end
    end
    
	if mode == "none" then
		local row = inputtable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
		row[2]:setColSpan(10):createText(ReadText(1001, 6526))          -- No Information available
        if loadout.needfix then
            -- blinklerin başlayacağı zamanı nil yaparsak kapanır
            menu.warningShown = getElapsedTime()
            local row = inputtable:addRow(nil, {  })
            row[2]:setColSpan(10):createText(ReadText(tPg,8020) .. " " .. ReadText(tPg,8021) , menu.rowAlertTextProperties )    -- Record structure is corrupt. To fix, wait for the ship to be produced.
            row[2].properties.wordwrap = true

        end
	end

end


function menu.getNumInventoryPaintMod(ware)
	local n = C.GetNumInventoryPaintMods()
	local buf = ffi.new("UIPaintMod[?]", n)
	n = C.GetInventoryPaintMods(buf, n);
	for i = 0, n - 1 do
		local entry = {}
		entry.name = ffi.string(buf[i].Name)
		entry.ware = ffi.string(buf[i].Ware)
		entry.quality = buf[i].Quality
		entry.amount = buf[i].Amount
        if ware == entry.ware then
            return entry.amount
        end 
	end
    return 0
end
function menu.isAmmoCompatible(type, ammomacro, shipobject64, shipmacro, upgradeplan)
	if ammomacro ~= "" then
		if type == "missile" then
			for slot, data in pairs(upgradeplan.weapon) do
				if data.macro ~= "" then
					if C.IsAmmoMacroCompatible(data.macro, ammomacro) then
						return true
					end
				end
			end
			for slot, data in pairs(upgradeplan.turret) do
				if data.macro ~= "" then
					if C.IsAmmoMacroCompatible(data.macro, ammomacro) then
						return true
					end
				end
			end
			for slot, groupdata in pairs(upgradeplan.turretgroup) do
				if groupdata.macro ~= "" then
					if C.IsAmmoMacroCompatible(groupdata.macro, ammomacro) then
						return true
					end
				end
			end
		elseif type == "drone" then
			return C.IsUnitMacroCompatible(shipobject64, shipmacro, ammomacro)
		elseif type == "deployable" then
			return C.IsDeployableMacroCompatible(shipobject64, shipmacro, ammomacro)
		elseif type == "countermeasure" then
			if shipmacro ~= "" then
				return (C.GetDefaultCountermeasureStorageCapacity(shipmacro) > 0)
			elseif shipobject64 ~= 0 then
				return (GetComponentData(ConvertStringTo64Bit(tostring(shipobject64)), "countermeasurecapacity") > 0)
			end
		end
	end

	return false
end

-- upgradetype = "missile", "drone", "countermeasure", "deployable"
function menu.slidercellSetRecordedAmmoStorage(upgradetype, strComponent, macro, count, category)
    local fleetID, shipID = menu.Convert_StrComponent_To_ID(strComponent)

    menu.RM_FleetRecords[fleetID][shipID].tShipPlan[upgradetype][macro] = count
    -- SignalObject param1 object, param2 mesaj, param3 value, param4 value
    -- md içindeki cue event.param = param2, event.param2 = param3, event.param3 = param4 olarak okunacak
    -- md lua arasında sadece 3 değişik veri tipi geçerli, 1-sayısal, 2-string, 3-component
    -- göndereceğimiz value component ise ConvertStringToLuaID ile veriyi çevirip gönderelim.
    SignalObject(ConvertStringTo64Bit(tostring(C.GetPlayerID())), "ship_storage_changed", { fleetID = fleetID, shipID = shipID, upgradetype = upgradetype, macro = macro, count = count })

end

-- upgradetype = "missile", "drone", "countermeasure", "deployable"
function menu.SetCurrentToRecordedAmmoStorage(upgradetype, strComponent, macro, count, category)

    menu.slidercellSetRecordedAmmoStorage(upgradetype, strComponent, macro, count, category)
    
    menu.refreshRightFrame()
    menu.noupdate = nil

end


--- func desc
---@param macro any
---@param slotname any              -- using if isGroup = false --
---@param slot any                  -- using if isGroup = false --
---@param isGroup any
---@param group any                 -- using if isGroup = true --
---@param upgradetype any           "engine" "turret" "weapon" "shield" "thruster" "shieldgroup" "turretgroup"
---@param liveloadout any
---@return rec_macroname, rec_color, cur_macro, cur_macroname, cur_color, cur_ammomacro, cur_weaponmode, cur_count, cur_total, mouseOverText
function menu.getLiveLoadoutSlotInfo(macro, slotname, slot, isGroup, group, upgradetype, liveloadout)
    slotname = slotname or ""
    slot = slot or ""
    group = group or ""
    upgradetype = upgradetype or ""
    -- loadout tipi listesi icinde a_slot.name..i eslesmesine uyan girdideki macroyu geri verir.
    local function getMacroInLoadoutType(checkslotnameslot, entrytypeloadouts)
        local macro, ammomacro, weaponmode, count, a_total, grouptype = "", "", "", 0, 0, ""
        for i, val in ipairs(entrytypeloadouts) do
            local slotname = val.a_slot.name or ""
            local slot = slotname ~= "" and i or val.a_slot.slot
            if ( tostring(slotname) .. tostring(slot) ) == checkslotnameslot then
                macro, ammomacro, weaponmode, count, a_total, grouptype = val.macro, val.ammomacro, val.weaponmode, 1, 1, ""
                break
            end
        end
        return macro, ammomacro, weaponmode, count, a_total, grouptype
    end
    
    -- grup loadout tipi listesi icinde group eslesmesine uyan girdideki macroyu geri verir.
    local function getMacroInLoadoutTypeGroups(checkgroup, entrytypeloadouts)
        local macro, ammomacro, weaponmode, count, a_total, grouptype = "", "", "", 0, 0, ""
        for _, val in ipairs(entrytypeloadouts) do
            if val.group == checkgroup then
                macro, ammomacro, weaponmode, count, a_total, grouptype = val.macro, val.ammomacro, val.weaponmode, val.count, val.a_total, val.a_group and val.a_group.grouptype or ""
                break
            end
        end
        return macro, ammomacro, weaponmode, count, a_total, grouptype
    end

    local rec_macroname, rec_color, mouseOverText = config.notinstalledtext, config.Color.text_inactive, ""
    local checkstring = isGroup and tostring(group) or tostring(slotname) .. tostring(slot)

    local cur_macro, cur_ammomacro, cur_weaponmode, cur_count, cur_total, grouptype = "", "", "", 0, 0, ""
    if liveloadout then
        if isGroup then
            cur_macro, cur_ammomacro, cur_weaponmode, cur_count, cur_total, grouptype = getMacroInLoadoutTypeGroups(checkstring, liveloadout[upgradetype])
        else
            cur_macro, cur_ammomacro, cur_weaponmode, cur_count, cur_total, grouptype = getMacroInLoadoutType(checkstring , liveloadout[upgradetype])
        end
    end

    local cur_macroname = cur_macro ~= "" and ffi.string(GetMacroData(cur_macro, "name")) or liveloadout and config.notinstalledtext or ""
    local cur_color = config.sColor.warningorange --or nil
    
    if macro ~= "" then
        rec_macroname = ffi.string(GetMacroData(macro, "name"))
        rec_color = config.Color.text_normal
    end

    if cur_macro == macro then
        cur_macroname = ""
        --cur_color = nil
    else
        -- ReadText(tPg, 11210) "Different Installation"
        -- ReadText(tPg, 11230) "Recorded"
        -- ReadText(tPg, 11229) "Active"
        mouseOverText = liveloadout 
        and 
            Helper.convertColorToText(config.sColor.alertnormal) .. ReadText(tPg, 11210) .. "\n" ..
            Helper.convertColorToText(config.sColor.white) .. " ( " .. tostring(slotname) .. "" .. tostring(slot) ..  (grouptype ~="" and " " .. grouptype or "") .. " " .. upgradetype .. " ) " .. "\n" ..
            Helper.convertColorToText(config.sColor.orange) .. " " .. ReadText(tPg, 11230) .. ReadText(1001, 120) .. "\n" ..
            Helper.convertColorToText(config.sColor.grey) .. rec_macroname .. "\n" .. 
            Helper.convertColorToText(config.sColor.warningorange) .. " " .. ReadText(tPg, 11229) .. ReadText(1001, 120) .. "\n" ..
            Helper.convertColorToText(config.sColor.lightgrey) .. cur_macroname
        or ""
    end    

    return rec_macroname, rec_color, cur_macro, cur_macroname, cur_color, cur_ammomacro, cur_weaponmode, cur_count, cur_total, mouseOverText
end

function menu.createStandingOrdersMenu(frame)
    
    local ftable = frame:addTable(9, { 
        tabOrder = 1,
        x = Helper.borderSize,
        width = frame.properties.width - 2*  Helper.borderSize,
        backgroundID = menu.RightFrameData.table.backgroundID,
        backgroundColor = menu.RightFrameData.table.backgroundColor,
    })

    ftable:setColWidth(1, Helper.standardTextHeight)
    ftable:setColWidth(2, frame.properties.width / 4 - Helper.scaleY(Helper.standardTextHeight) - Helper.borderSize, false)
    ftable:setColWidthPercent(3, 33)
    ftable:setColWidth(5, Helper.standardTextHeight)
    ftable:setColWidth(6, Helper.standardTextHeight)
    ftable:setColWidth(7, Helper.standardTextHeight)
    ftable:setColWidth(8, Helper.standardTextHeight)
    ftable:setColWidth(9, Helper.standardTextHeight)

    -- Kılavuz 
    --local row = ftable:addRow(false, { fixed = true, bgColor = config.sColor.orange } )
    --row[1]:setColSpan(1):createText("", {})

    ftable:setDefaultCellProperties("button", { height = config.mapRowHeight })
    ftable:setDefaultBackgroundColSpan(1, 9)

    local strComponent = menu.Selected.strComponent
    local record = menu.GetRecordFromMd(strComponent)

    --- title ---
    local row = ftable:addRow(false, { fixed = true, bgColor = config.Color["row_title_background"] })
    row[1]:setColSpan(9):createText( ReadText(tPg, 1160), Helper.headerRowCenteredProperties)      -- Record Information
    row[1].properties.color = config.infoTableRowsColor.tittle
    local row = ftable:addRow(false, { fixed = true, bgColor = config.Color["row_title_background"] })
    row[1]:setColSpan(9):createText(ReadText(1001, 8396), Helper.headerRowCenteredProperties)      -- Individual Instructions
    row[1].properties.color = config.infoTableRowsColor.section
    -- object name
    local titlecolor, objectname, objectidcode = menu.holomapcolor.playercolor, "", ""
    local row = ftable:addRow("info_focus", { fixed = true, bgColor = config.Color["row_title_background"] })
	row[9]:createButton({ active = function() return (record.object or record.build) and true or false end, height = Helper.headerRow1Height, width = config.mapRowHeight, cellBGColor = config.Color["row_background"] }):setIcon("menu_center_selection", { width = Helper.standardTextHeight, height = Helper.standardTextHeight, y = (Helper.headerRow1Height - Helper.standardTextHeight) / 2 })
    row[9].handlers.onClick = function () return menu.buttonOnShowMap(record) end 
    if record then
        if record.object64 == C.GetPlayerObjectID() then
            titlecolor = menu.holomapcolor.currentplayershipcolor
        end
        objectname, objectidcode = record.name, record.idcode .. " "
    end
    local strComponentS = string.format("%s%s \027X", Helper.convertColorToText(config.sColor.lightgrey), strComponent) 
    objectname = string.format("%s%s\027X", Helper.convertColorToText(titlecolor), objectname) 
    row[1]:setBackgroundColSpan(7):setColSpan(4):createText(strComponentS .. objectname, Helper.headerRow1Properties)
    row[5]:setColSpan(4):createText(objectidcode, Helper.headerRow1Properties)
    row[5].properties.halign = "right"
    row[5].properties.color = titlecolor

    if record then 
        ---- standing orders (Individual Instructions) ----
        menu.createResponsesForControllable(ftable, strComponent, { height = config.mapRowHeight, fontsize = config.mapFontSize }, "controllableresponses", nil)
    end

	if menu.selectedRows["manager"]["RightFrame"] then
		ftable:setSelectedRow(menu.selectedRows["manager"]["RightFrame"])
		menu.selectedRows["manager"]["RightFrame"] = nil
		if menu.selectedCols["manager"]["RightFrame"] then
			ftable:setSelectedCol(menu.selectedCols["manager"]["RightFrame"])
			menu.selectedCols["manager"]["RightFrame"] = nil
		end
	end
    if menu.topRows["manager"]["RightFrame"] then
        ftable:setTopRow(menu.topRows["manager"]["RightFrame"])
        menu.topRows["manager"]["RightFrame"] = nil
    end

    local table_header = menu.createOrdersMenuHeader(frame)

    ftable.properties.y = table_header.properties.y + table_header:getFullHeight() + 2 * Helper.borderSize

end

function menu.createResponsesForControllable(ftable, controllable, textproperties, mode, yoffset)
	
    -- Editleme kısmı henüz yazılmadı
    local editing = false
    --local RFMKey, ShipKey = menu.Convert_StrComponent_To_ID(controllable)
	local isvalid = editing and menu.isInfoModeValidFor(controllable, "standingorders") or false
    local record = menu.GetRecordFromMd(controllable)
    local class
    if record.class == "station" then
        class = "station"
    else
        class = "ship"
    end

	local faction, primarypurpose = "player", record.purpose

    -- Reaction to Events
	if class == "ship" then
		local row = ftable:addRow(false, { bgColor = config.Color["row_title_background"] })
		row[1]:setColSpan(9):createText(ReadText(1001, 8362), Helper.headerRowCenteredProperties)       -- Reaction to Events
        row[1].properties.color = config.infoTableRowsColor.subsections

		for _, signalentry in ipairs(menu.signals) do
			local signalid = signalentry.id
			
            local hasownresponse = false
            local deffactresponse = ffi.string(C.GetDefaultResponseToSignalForFaction2(signalid, faction, primarypurpose))
            
			local response = deffactresponse
            local ask = false
            
            local entry = menu.get_SignalData("orders_" .. signalentry.id, record.tIndividualInstructions)
            if entry then
                signalid = entry.id
                hasownresponse = (tonumber(entry.hasOwn) == 1)
                response = entry.response
                ask = (tonumber(entry.ask) == 1)
            end

			local deffactresponsename = ""
            local responsename = ""

			local locresponses = {}
			for _, responseentry in ipairs(signalentry.responses) do
				if responseentry.id == deffactresponse then
					deffactresponsename = responseentry.name
				end
				if responseentry.id == response then
					responsename = responseentry.name
				end
			end
			for _, responseentry in ipairs(signalentry.responses) do
				table.insert(locresponses, { id = responseentry.id, text = responseentry.name, text2 = (deffactresponse ~= responseentry.id) and ("[" .. ReadText(1001, 8366) .. ReadText(1001, 120) .. " " .. deffactresponsename .. "]") or "", icon = "", displayremoveoption = false })
			end

			row = ftable:addRow(false, {  })
			row[1]:setColSpan(9):createText(ReadText(1001, 9321) .. " " .. tostring(signalentry.name) .. ReadText(1001, 120), textproperties)	-- 'Default response to' + '..' + ':'

			local rowdata = "orders_" .. tostring(signalid) .. "_global"
			row = ftable:addRow({ rowdata }, {  })
			row[1]:createCheckBox(not hasownresponse, { width = config.mapRowHeight, height = config.mapRowHeight, active = isvalid })
            --row[1].handlers.onClick = function(_, checked) return menu.checkboxOrdersSetOverride(controllable, signalid, mode, checked) end
			row[2]:setColSpan(8):createText(ReadText(1001, 8367), textproperties)       -- Use global setting
            row[2].properties.color = isvalid and config.Color["text_normal"] or config.Color["text_inactive"]

			local rowdata = "orders_" .. tostring(signalid) .. "_response"
			row = ftable:addRow({ rowdata }, {  })
			row[1]:setColSpan(9):createDropDown(locresponses, { height = config.mapRowHeight, startOption = response, active = isvalid and hasownresponse }):setTextProperties({fontsize = config.mapFontSize}):setText2Properties({ fontsize = config.mapFontSize, halign = "right" })
			row[1].handlers.onDropDownConfirmed = function(_, newresponseid) return menu.dropdownOrdersSetResponse(_, newresponseid, controllable, signalid, mode) end
			row[1].handlers.onDropDownActivated = function () menu.noupdate = true end

			local rowdata = "orders_" .. tostring(signalid) .. "_ask"
			row = ftable:addRow({ rowdata }, {  })
			row[1]:createCheckBox(ask, { width = config.mapRowHeight, height = config.mapRowHeight, active = isvalid and hasownresponse })
			--row[1].handlers.onClick = function() return menu.checkboxOrdersSetAsk(controllable, signalid, mode) end
			row[2]:setColSpan(8):createText(ReadText(1001, 9330), textproperties)	                                            -- Notify me if incident occurs
			row[2].properties.color = (editing and hasownresponse) and config.Color["text_normal"] or config.Color["text_inactive"]

			ftable:addEmptyRow()
		end
	end

    -- resupply, blacklists, fight rules
	if class == "ship" or class == "station" then
		-- resupply
		local row = ftable:addRow(false, { bgColor = config.Color["row_title_background"] })
		row[1]:setColSpan(9):createText(class == "ship" and ReadText(1001, 7722) or ReadText(1001, 7724), Helper.headerRowCenteredProperties)      -- Automatic Resupply  ,  Automatic Resupply of Subordinates
        row[1].properties.color = config.infoTableRowsColor.subsections

        local entry = menu.get_SignalData("orders_resupply", record.tIndividualInstructions)
        if entry then
            local hasOwn = (tonumber(entry.hasOwn) == 1)
            local curOption = entry.LoadoutLevel

            local rowdata = "orders_resupply_global"
            local row = ftable:addRow({ rowdata }, {  })
            row[1]:createCheckBox(not hasOwn, { width = config.mapRowHeight, height = config.mapRowHeight, active = isvalid })
            --row[1].handlers.onClick = function(_, checked) return menu.checkboxOrdersSetResupplyOverride(controllable, checked) end
            row[2]:setColSpan(8):createText(menu.getCommander_From_Record(controllable) and ReadText(1001, 7723) or ReadText(1001, 8367), textproperties)    -- Use the commander's setting , Use global setting
            row[2].properties.color = editing and config.Color["text_normal"] or config.Color["text_inactive"]

            local locresponses = {
                { id = 0,   text = ReadText(1001, 7726), icon = "", displayremoveoption = false },
                { id = 0.1, text = ReadText(1001, 7736), icon = "", displayremoveoption = false },
                { id = 0.5, text = ReadText(1001, 7737), icon = "", displayremoveoption = false },
                { id = 1.0, text = ReadText(1001, 7738), icon = "", displayremoveoption = false },
            }
            local row = ftable:addRow("orders_resupply", {})
            row[1]:setColSpan(8):createDropDown(locresponses, { height = Helper.standardTextHeight, startOption = curOption, active = isvalid and hasOwn }):setTextProperties({ fontsize = config.mapFontSize })
            row[1].handlers.onDropDownConfirmed = function (_, id) return menu.dropdownOrdersResupply(controllable, id) end
            row[1].handlers.onDropDownActivated = function () menu.noupdate = true end
            
        end

		ftable:addEmptyRow()

		-- blacklists
		local row = ftable:addRow(false, { bgColor = config.Color["row_title_background"] })
		row[1]:setColSpan(9):createText(class == "ship" and ReadText(1001, 9143) or ReadText(1001, 9178), Helper.headerRowCenteredProperties)   -- Blacklists , Blacklists for Subordinates
        row[1].properties.color = config.infoTableRowsColor.subsections
        
		local blacklists = Helper.getBlackLists()

		local group = ((primarypurpose == "fight") or (primarypurpose == "auxiliary")) and "military" or "civilian"

        local types = {
            { type = "sectortravel",	name = "Sector Travel" },
            { type = "sectoractivity",	name = "Sector Activities" },
            { type = "objectactivity",	name = "Trade Restrictions" },
        }

        for i, type in ipairs(types) do
            local entry = menu.get_SignalData("orders_blacklist_"..type.type, record.tIndividualInstructions)
            local hasownlist = false
            local blacklistid = -1
            if entry then
                hasownlist = (tonumber(entry.hasOwn) == 1)
                if hasownlist then
                    for _, blacklist in ipairs(blacklists) do
                        if blacklist.type == entry.type then
                            if tonumber(blacklist.id) == tonumber(entry.BlacklistID) then
                                blacklistid = entry.BlacklistID
                                break
                            end
                        end
                    end
                end
            end
            row = ftable:addRow(false, {  })
            row[1]:setColSpan(9):createText(type.name .. ReadText(1001, 120), textproperties)      -- ($COLON_TEXT$):

			local rowdata = "orders_blacklist_" .. type.type .. "_global"
			local row = ftable:addRow({ rowdata }, {  })
			row[1]:createCheckBox(not hasownlist, { width = config.mapRowHeight, height = config.mapRowHeight, active = isvalid })
			--row[1].handlers.onClick = function(_, checked) return menu.checkboxOrdersSetBlacklistOverride(controllable, type.type, checked) end
			row[2]:setColSpan(8):createText(menu.getCommander_From_Record(controllable) and ReadText(1001, 7723) or ReadText(1001, 8367), textproperties)    -- Use the commander's setting, Use global setting
            row[2].properties.color = editing and config.Color["text_normal"] or config.Color["text_inactive"]

			local locresponses = {
				{ id = -1, text = ReadText(1001, 7726), icon = "", displayremoveoption = false },       -- Off
			}
			for _, blacklist in ipairs(blacklists) do
				if blacklist.type == type.type then
					table.insert(locresponses, { id = blacklist.id, text = blacklist.name, icon = "", displayremoveoption = false })
				end
			end
			local row = ftable:addRow("orders_resupply", {})
			row[1]:setColSpan(8):createDropDown(locresponses, { height = Helper.standardTextHeight, startOption = (blacklistid ~= 0) and blacklistid or -1, active = isvalid and hasownlist }):setTextProperties({ fontsize = config.mapFontSize })
			row[1].handlers.onDropDownConfirmed = function (_, id) return menu.dropdownOrdersBlacklist(controllable, type.type, id) end
			row[1].handlers.onDropDownActivated = function () menu.noupdate = true end
			--row[9]:createButton({ mouseOverText = ReadText(1026, 8413) }):setIcon("menu_edit")
			--row[9].handlers.onClick = menu.buttonEditBlacklist

			ftable:addEmptyRow()

        end

		-- fight rules
		local row = ftable:addRow(false, { bgColor = config.Color["row_title_background"] })
		row[1]:setColSpan(9):createText(ReadText(1001, 7753), Helper.headerRowCenteredProperties)       -- Fire Authorization Overrides
        row[1].properties.color = config.infoTableRowsColor.subsections

        local fightrules = Helper.getFightRules()

        local entry = menu.get_SignalData("orders_fightrule_attack", record.tIndividualInstructions)
        local hasownrule = false
        local fightruleid = -1
        if entry then
            hasownrule = (tonumber(entry.hasOwn) == 1)
            if hasownrule then
                local found = false
                for _, fightrule in ipairs(fightrules) do
                    if tonumber(fightrule.id) == tonumber(entry.FightRuleID) then
                        fightruleid = entry.FightRuleID
                        break
                    end
                end
            end
        end

        local row = ftable:addRow({ "orders_fightrule_attack_global" }, {  })
        row[1]:createCheckBox(not hasownrule, { width = config.mapRowHeight, height = config.mapRowHeight, active = isvalid })
        --row[1].handlers.onClick = function(_, checked) return menu.checkboxOrdersSetFightRuleOverride(controllable, "attack", checked) end
        row[2]:setColSpan(8):createText(menu.getCommander_From_Record(controllable) and ReadText(1001, 7723) or ReadText(1001, 8367), textproperties)
        row[2].properties.color = editing and config.Color["text_normal"] or config.Color["text_inactive"]

        local locresponses = {
            { id = -1, text = ReadText(1001, 7726), icon = "", displayremoveoption = false },
        }
        for _, fightrule in ipairs(fightrules) do
            table.insert(locresponses, { id = fightrule.id, text = fightrule.name, icon = "", displayremoveoption = false })
        end
        local row = ftable:addRow("orders_resupply", {})
        row[1]:setColSpan(8):createDropDown(locresponses, { height = Helper.standardTextHeight, startOption = (fightruleid ~= 0) and fightruleid or -1, active = isvalid and hasownrule }):setTextProperties({ fontsize = config.mapFontSize })
        row[1].handlers.onDropDownConfirmed = function (_, id) return menu.dropdownOrdersFightRule(controllable, "attack", id) end
        row[1].handlers.onDropDownActivated = function () menu.noupdate = true end
        --row[9]:createButton({ mouseOverText = ReadText(1026, 8414) }):setIcon("menu_edit")
        --row[9].handlers.onClick = menu.buttonEditFightRule

	end

	-- ship trade prices & restrictions
	if class == "ship" then
		ftable:addEmptyRow()

		-- trade loop cargo reservations
		local row = ftable:addRow(false, { bgColor = config.Color["row_title_background"] })
		row[1]:setColSpan(9):createText(ReadText(1001, 11642), Helper.headerRowCenteredProperties)      -- Trade Loop Cargo Reservations
        row[1].properties.color = config.infoTableRowsColor.subsections

        local hasownresponse = false
        local curOption = "off"
        local entry = menu.get_SignalData("orders_cargoreservations", record.tIndividualInstructions)
        if entry then
            hasownresponse = (tonumber(entry.hasOwn) == 1)
            curOption = (tonumber(entry.TradeLoopCargoReservationSetting) == 1) and "on" or "off"
        end

        local row = ftable:addRow({ "orders_cargoreservations_global" }, {  })
		row[1]:createCheckBox(not hasownresponse, { width = config.mapRowHeight, height = config.mapRowHeight, active = isvalid })
		--row[1].handlers.onClick = function(_, checked) return menu.checkboxOrdersSetCargoReservations(controllable, checked) end
		row[2]:setColSpan(8):createText(ReadText(1001, 8367), textproperties)       -- Use global setting
        row[2].properties.color = editing and config.Color["text_normal"] or config.Color["text_inactive"]

		local locresponses = {
			{ id = "off",   text = ReadText(1001, 7726),  icon = "", displayremoveoption = false, mouseovertext = ReadText(1026, 3276) },
			{ id = "on",    text = ReadText(1001, 11643), icon = "", displayremoveoption = false },
		}
		local row = ftable:addRow("orders_cargoreservations", {  })
		row[1]:setColSpan(9):createDropDown(locresponses, { height = Helper.standardTextHeight, startOption = curOption, active = isvalid and hasownresponse }):setTextProperties({ fontsize = config.mapFontSize })
		row[1].handlers.onDropDownConfirmed = function (_, id) return menu.dropdownOrdersCargoReservations(controllable, id) end
		row[1].handlers.onDropDownActivated = function () menu.noupdate = true end


        if tonumber(record.issupplyship) == 1 then
            ftable:addEmptyRow()

            -- preferred build method
			local row = ftable:addRow(false, { bgColor = config.Color["row_title_background"] })
			row[1]:setColSpan(9):createText(ReadText(1001, 11298), Helper.headerRowCenteredProperties)      -- Preferred Build Method
            row[1].properties.color = config.infoTableRowsColor.subsections

			local hasownsetting = false
            local cursetting = ""

            local entry = menu.get_SignalData("info_buildrule", record.tIndividualInstructions)
            if entry then
                hasownsetting = (tonumber(entry.hasOwn) == 1)
                cursetting = entry.BuildMethodID
            end

			local curglobalsetting = ffi.string(C.GetPlayerBuildMethod())
			local foundcursetting = false
			local locresponses = {}
			local n = C.GetNumPlayerBuildMethods()
			if n > 0 then
				local buf = ffi.new("ProductionMethodInfo[?]", n)
				n = C.GetPlayerBuildMethods(buf, n)
				for i = 0, n - 1 do
					local id = ffi.string(buf[i].id)
					if id == curglobalsetting then
						foundcursetting = true
					end
					table.insert(locresponses, { id = id, text = ffi.string(buf[i].name), icon = "", displayremoveoption = false })
				end
			end
			-- if the setting is not in the list, default to default (if the race method is not in the list, there is no ware that has this method and it will always use default)
			if not foundcursetting then
				curglobalsetting = "default"
			end

			local row = ftable:addRow({ "info_buildrule_global" }, {  })
			row[1]:createCheckBox(not hasownsetting, { width = config.mapRowHeight, height = config.mapRowHeight , active = editing })
			--row[1].handlers.onClick = function(_, checked) return menu.checkboxSetBuildRuleOverride(controllable, checked, curglobalsetting) end
			row[2]:setColSpan(8):createText(ReadText(1001, 8367))       -- Use global setting
            row[2].properties.color = editing and config.Color["text_normal"] or config.Color["text_inactive"]

			local row = ftable:addRow("info_buildrule", {  })
			row[1]:setColSpan(8):createDropDown(locresponses, { height = Helper.standardTextHeight, startOption = hasownsetting and cursetting or curglobalsetting, active = isvalid and hasownsetting }):setTextProperties({ fontsize = config.mapFontSize })
			row[1].handlers.onDropDownConfirmed = function (_, id) return menu.dropdownBuildRule(controllable, id) end
			row[1].handlers.onDropDownActivated = function () menu.noupdate = true end

			ftable:addEmptyRow()

            --Resupply Ship Trade Settings
			local row = ftable:addRow(false, { bgColor = config.Color["row_title_background"] })
			row[1]:setColSpan(8):createText(ReadText(1001, 7725), Helper.headerRowCenteredProperties)       -- Resupply Ship Trade Settings
            row[1].properties.color = config.infoTableRowsColor.subsections
            -- trade rules
            local traderules = menu.getTradeRules()
            local hasownlist = false
            local traderuleid = -1
            local entry = menu.get_SignalData("order_wares_current", record.tIndividualInstructions)
            if entry then
                hasownlist = (tonumber(entry.hasOwn) == 1)
                if hasownlist then
                    for _, traderule in ipairs(traderules) do
                        if tonumber(traderule.id) == tonumber(entry.TradeRuleID) then
                            traderuleid = entry.TradeRuleID
                            break
                        end
                    end
                end
            end

			local row = ftable:addRow(nil, {  })
			row[1]:setColSpan(9):createText(ReadText(1001, 11013) .. ReadText(1001, 120), textproperties)       -- Trade Rule:
			-- global
			local row = ftable:addRow("order_wares_global", {  })
			row[1]:setColSpan(8):createText(ReadText(1001, 8367) .. ReadText(1001, 120), textproperties)        -- Use global setting:
            row[1].properties.color = editing and config.Color["text_normal"] or config.Color["text_inactive"]
			row[9]:createCheckBox(not hasownlist, { height = config.mapRowHeight , active = editing })
			--row[8].handlers.onClick = function(_, checked) return menu.checkboxSetTradeRuleOverride(controllable, "trade", checked) end
			-- current
			local row = ftable:addRow("order_wares_current", {  })
			row[1]:setColSpan(8):createDropDown(Helper.traderuleOptions, { height = Helper.standardTextHeight, startOption = (traderuleid ~= 0) and traderuleid or -1, active = isvalid and hasownlist }):setTextProperties({ fontsize = config.mapFontSize })
			row[1].handlers.onDropDownConfirmed = function (_, id) return menu.dropdownTradeRule(controllable, "trade", id, "", true) end
			row[1].handlers.onDropDownActivated = function () menu.noupdate = true end
			--row[9]:createButton({ mouseOverText = ReadText(1026, 8407) }):setIcon("menu_edit")
			--row[9].handlers.onClick = menu.buttonEditTradeRule

			local row = ftable:addRow(false, {})
			row[1]:setColSpan(8):createText("")

            -- Resupply Trade Wares
            local wares = {}
            for _, entry in ipairs(record.tIndividualInstructions) do
                if entry.ware then
                    table.insert(wares, ffi.string(entry.ware))
                end
            end


            for _, ware in ipairs(wares) do
				local name, minprice, maxprice = GetWareData(ware, "name", "minprice", "maxprice")
				local isextended = menu.isOrderExtended(controllable, ware)

				-- ware
				local rowdata = "orders_wares_" .. ware 
				local row = ftable:addRow({ rowdata .. "_header"}, {  })
				row[1]:createButton({  }):setText(isextended and "-" or "+", { halign = "center" })
				row[1].handlers.onClick = function () return menu.buttonExtendOrder(controllable, ware, row.index, 1) end
				row[2]:setColSpan(5):createText(name)

                local entrytraderule = menu.get_SignalData(rowdata, record.tIndividualInstructions)
				if entrytraderule and entrytraderule.TradeRuleID > 0 then
					row[7]:setColSpan(3):createText("\27[lso_error]", { halign = "right", color = config.Color["text_warning"] })
				end
                
                if isextended then
					-- trade rule wares
					local hasownlist = (tonumber(entrytraderule.hasOwn) == 1)
					local traderuleid = entrytraderule.TradeRuleID

					local row = ftable:addRow(nil, {  })
					row[2]:setColSpan(8):createText(ReadText(1001, 11013) .. ReadText(1001, 120), textproperties)       -- Trade Rule:
					-- global
					local row = ftable:addRow(rowdata .. "_tradeglobal", {  })
					row[2]:setColSpan(7):createText(ReadText(1001, 11031) .. ReadText(1001, 120), textproperties)       -- Use ship setting:
                    row[2].properties.color = editing and config.Color["text_normal"] or config.Color["text_inactive"]
					row[9]:createCheckBox(not hasownlist, { height = config.mapRowHeight , active = editing })
					--row[9].handlers.onClick = function(_, checked) return menu.checkboxSetTradeRuleOverride(controllable, "trade", checked, ware) end
					-- current
					local row = ftable:addRow(rowdata .. "_tradecurrent", {  })
					row[2]:setColSpan(7):createDropDown(Helper.traderuleOptions, { startOption = (traderuleid ~= 0) and traderuleid or -1, active = isvalid and hasownlist, height = Helper.standardTextHeight }):setTextProperties({ fontsize = config.mapFontSize })
					row[2].handlers.onDropDownConfirmed = function (_, id) return menu.dropdownTradeRule(controllable, "trade", id, ware, true) end
					row[2].handlers.onDropDownActivated = function () menu.noupdate = true end
					--row[9]:createButton({ mouseOverText = ReadText(1026, 8407) }):setIcon("menu_edit")
					--row[9].handlers.onClick = menu.buttonEditTradeRule

					ftable:addEmptyRow(config.mapRowHeight / 2)

					local currentprice = entrytraderule.currentprice
					local haspriceoverride = (tonumber(entrytraderule.haspriceoverride) == 1)
					-- automatic pricing
					local row = ftable:addRow({ rowdata .. "_autoprice"}, {  })
					row[2]:setColSpan(7):createText(ReadText(1001, 8402) .. ReadText(1001, 120))                    -- Automatic pricing:
                    row[2].properties.color = editing and config.Color["text_normal"] or config.Color["text_inactive"]
					row[9]:createCheckBox(not haspriceoverride, { height = config.mapRowHeight , active = editing })
					--row[9].handlers.onClick = function (_, checked) return menu.checkboxStorageWarePriceOverride(controllable, ware, true, currentprice, checked) end

					local row = ftable:addRow({ rowdata .. "_price"}, {  })
					row[2]:setColSpan(8):createSliderCell({
						height = Helper.standardTextHeight,
						valueColor = editing and haspriceoverride and config.Color["slider_value"] or config.Color["slider_value_inactive"] or config.Color["slider_value_inactive"],
						min = minprice,
						max = maxprice,
						start = currentprice,
						hideMaxValue = true,
						suffix = ReadText(1001, 101),
						readOnly = editing and (not haspriceoverride) or (not editing),
					})
					--row[2].handlers.onSliderCellChanged = function(_, value) return menu.slidercellStorageWarePriceOverride(controllable, ware, true, value) end

                end
            end
        end

	end
end

function menu.createOrderQueue(frame)

    local strComponent = menu.Selected.strComponent
    local fleetID, shipID = menu.Selected.fleetID, menu.Selected.shipID
    local isvalid = menu.isInfoModeValidFor(strComponent, "orderqueue")

    -- Current orders
    if isvalid then

        -- load all current orders
    end

    local numcols = 12
    local ftable = frame:addTable(numcols, { 
        tabOrder = 1,
        x = Helper.borderSize,
        width = frame.properties.width - 2*  Helper.borderSize,
        backgroundID = menu.RightFrameData.table.backgroundID,
        backgroundColor = menu.RightFrameData.table.backgroundColor,
    })
	ftable:setColWidth(1, Helper.standardTextHeight)
	ftable:setColWidth(2, Helper.standardTextHeight)
	ftable:setColWidth(3, 2 * Helper.standardTextHeight)
	ftable:setColWidth(4, frame.properties.width / 3 - 4 * Helper.scaleY(Helper.standardTextHeight) - 3 * Helper.borderSize, false)
	ftable:setColWidth(5, Helper.standardTextHeight)
	ftable:setColWidth(6, Helper.standardTextHeight)
	ftable:setColWidth(7, frame.properties.width / 3 - 2 * Helper.scaleY(Helper.standardTextHeight) - Helper.borderSize, false)
	ftable:setColWidth(9, Helper.standardTextHeight)
	ftable:setColWidth(10, Helper.standardTextHeight)
	ftable:setColWidth(11, Helper.standardTextHeight)
	ftable:setColWidth(12, Helper.standardTextHeight)

        -- Kılavuz 
    --local row = ftable:addRow(false, { fixed = true, bgColor = config.sColor.orange } )
    --row[1]:setColSpan(1):createText("", {})
	ftable:setDefaultCellProperties("button", { height = config.mapRowHeight })
	ftable:setDefaultBackgroundColSpan(1, 10)
	ftable:setDefaultColSpan(5, 3)

    local record = menu.GetRecordFromMd(strComponent)
    menu.Selected.Component = record and record.object64 or 0

    --- title ---
    local row = ftable:addRow(false, { fixed = true, bgColor = config.Color["row_title_background"] })
    row[1]:setColSpan(12):createText( ReadText(tPg, 1160), Helper.headerRowCenteredProperties)      -- Record Information
    row[1].properties.color = config.infoTableRowsColor.tittle
    local row = ftable:addRow(false, { fixed = true, bgColor = config.Color["row_title_background"] })
    row[1]:setColSpan(12):createText(ReadText(1001, 8360), Helper.headerRowCenteredProperties)      -- Behaviour
    row[1].properties.color = config.infoTableRowsColor.section
    -- object name
    local titlecolor, objectname, objectidcode = menu.holomapcolor.playercolor, "", ""
    local row = ftable:addRow("info_focus", { fixed = true, bgColor = config.Color["row_title_background"] })
    if record then
        if record.object64 == C.GetPlayerObjectID() then
            titlecolor = menu.holomapcolor.currentplayershipcolor
        end
        objectname, objectidcode = record.name, record.idcode .. " "
    end
    row[numcols]:createButton({ active = function() return (record.object or record.build) and true or false end, height = Helper.headerRow1Height, width = config.mapRowHeight, cellBGColor = config.Color["row_background"] }):setIcon("menu_center_selection", { width = Helper.standardTextHeight, height = Helper.standardTextHeight, y = (Helper.headerRow1Height - Helper.standardTextHeight) / 2 })
    row[numcols].handlers.onClick = function () return menu.buttonOnShowMap(record) end
    local strComponentS = string.format("%s%s \027X", Helper.convertColorToText(config.sColor.lightgrey), strComponent) 
    objectname = string.format("%s%s\027X", Helper.convertColorToText(titlecolor), objectname) 
    row[1]:setBackgroundColSpan(numcols -1):setColSpan(7):createText(strComponentS .. objectname, Helper.headerRow1Properties)
    row[8]:setColSpan(4):createText(objectidcode, Helper.headerRow1Properties)
    row[8].properties.halign = "right"
    row[8].properties.color = titlecolor


    local maxvisibleheight

    if record then
        -- Order Page
        ---- pilot info ----
        local skillmode 
        local printedtitle = "-"
        if record.class ~= "station" then
            local isbigship = (record.class == "ship_m") or (record.class == "ship_l") or (record.class == "ship_xl")
            printedtitle = isbigship and ReadText(1001, 4848) or ReadText(1001, 4847)	-- Captain, Pilot
        end
        local isfemale = record.tPilot.isfemale and (tonumber(record.tPilot.isfemale) == 1) or false
        --local pilotname = Helper.convertColorToText( (isfemale) and config.sColor.pink or config.sColor.blue) .. ( (record.tPilot.name ~= "") and record.tPilot.name or "-" ) .. "\027X"
        local pilotname = Helper.convertColorToText( isfemale and (not record.destroyed and config.sColor.female1 or  config.sColor.female2) or (not record.destroyed and config.sColor.male1 or config.sColor.male2) ).. ( (record.tPilot.name ~= "") and record.tPilot.name or "-" ) .. "\027X"
        local pilotmacrofaction = Helper.convertColorToText( config.sColor.darkgrey ) .. " ." .. record.tPilot.faction .. "" .. "\027X"
        local adjustedskill = math.floor(record.tPilot.combinedskill * 15 / 100)
        local printedskill = (adjustedskill > 0) and Helper.displaySkill(adjustedskill) or ""
        --- name ---
        local row = ftable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
        row[1]:setColSpan(4):createText(printedtitle .. ReadText(1001, 120))
        row[5]:setColSpan(8):createText(pilotname, { } )
        --row[4]:setColSpan(1):createText(pilotmacrofaction, { halign = "right" } )
        --- skills ---
        local locfontcolor = not record.destroyed and config.Color["text_skills"] or config.Color.text_normal
        --local locfontcolor = record.object and config.Color["text_skills"] or config.Color.text_normal
        local row = ftable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
        row[1]:setColSpan(4):createText(ReadText(1001, 9124) .. ReadText(1001, 120), { mouseOverText = ReadText(1026, 2) })
        row[5]:setColSpan(8):createText(printedskill, { halign = "right", color = locfontcolor, mouseOverText = ReadText(1026, 2) })

        local commander, commandername, commandercolor = nil, "-", config.Color.text_normal
        local crecord, strCommander = nil, "0_0"
        if record.commanderidx > 0 then
            strCommander = menu.Convert_ID_To_StrComponent( fleetID, record.commanderidx)
            crecord =  menu.GetRecordFromMd(strCommander)
            commandername, commandercolor = crecord.name, crecord.color -- menu.holomapcolor.playercolor
            commander = crecord.object64
        end

        --- commander ---
        row = ftable:addRow({ strCommander }, {  })
        row[1]:setColSpan(4):createText(ReadText(1001, 1112) .. ReadText(1001, 120))        -- Commander:
        if commander then
            row[5]:setColSpan(7):createText(commandername, { color = commandercolor })
            row[12]:createButton({ active = function() return (crecord.object or crecord.build) and true or false end } ):setIcon("menu_center_selection", { width = Helper.standardTextHeight, height = Helper.standardTextHeight })
            row[12].handlers.onClick = function () return menu.buttonOnShowMap(crecord) end
        else
            row[5]:setColSpan(8):createText(commandername, { color = commandercolor })
        end

        --- subordinates ---
        local subordinates = menu.GetSubordinates_From_FleetRecords(strComponent, true) -- GetSubordinates(menu.infoSubmenuObject, nil, true)
        local row = ftable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
        row[1]:setColSpan(4):createText(ReadText(1001, 1503) .. ReadText(1001, 120))        -- Subordinates:
        row[5]:setColSpan(8):createText(#subordinates)


		local row = ftable:addRow(false, {  })
		row[1]:setColSpan(numcols):createText(" ")

        local hasloop = false
        if #record.orders > 0 then
            hasloop = tonumber(record.orders[1].isinloop) == 1
        end
		---- actual order queue ----
		--- title ---
		local titlerow = ftable:addRow(false, { bgColor = config.Color["row_title_background"] })
		--titlerow[1]:setColSpan(numcols):createText(ReadText(1001, 3225), Helper.headerRowCenteredProperties)
        titlerow[1]:setColSpan(numcols):createText((hasloop and (utf8.char(8734) .. " ") or "") .. (ReadText(1001, 3225)) .. (hasloop and (" [" .. ReadText(1001, 11270) .. "]") or ""), Helper.headerRowCenteredProperties)        -- Order Queue , (Order )Loop
		titlerow[1].properties.helpOverlayID = "map_orderqueue"
		titlerow[1].properties.helpOverlayText = " "
		titlerow[1].properties.helpOverlayHeight = titlerow:getHeight()
		titlerow[1].properties.helpOverlayHighlightOnly = true
		titlerow[1].properties.helpOverlayScaling = false

		if hasloop then
			local row = ftable:addRow(false, { bgColor = config.Color["row_background_unselectable"] })
			if #record.orders > 0 then
				local nontempcounter = 0
				for _, order in ipairs(record.orders) do
					if not (tonumber(order.istemporary) == 1) then
						nontempcounter = nontempcounter + 1
					end
				end
				row[1]:setColSpan(numcols):createText(string.format(ReadText(1001, 11271), nontempcounter) .. ReadText(1001, 120), { font = Helper.standardFontBold })      -- Repeat the following %s($ORDER_COUNT$) orders: , 
			else
                -- record.orders içine looporder haricindeki orderları dahil etmediğimiz için bu satıra uğramayacaktır
				row[1]:setColSpan(numcols):createText(ReadText(1001, 11272), { font = Helper.standardFontBold })    -- Give your ship an order to set up repeating orders
			end
			titlerow[1].properties.helpOverlayHeight = titlerow[1].properties.helpOverlayHeight + row:getHeight() + Helper.borderSize
		end

		local row = ftable:addEmptyRow(1)
		titlerow[1].properties.helpOverlayHeight = titlerow[1].properties.helpOverlayHeight + row:getHeight() + Helper.borderSize

		if #record.orders > 15 then
			maxvisibleheight = ftable:getFullHeight() + 15 * (Helper.scaleY(config.mapRowHeight) + Helper.borderSize)
		end

        local nontempcounter = 0
        --- orders ---
        --menu.tablePrint(menu.orderdefs, "menu.orderdefs = ", true, true)
        for i, order in ipairs(record.orders) do
            local nextorder = record.orders[i + 1]
			-- orderdef
			local found = false
			for _, orderdef in ipairs(menu.orderdefs) do
				if (orderdef.id == order.id) then
					order.orderdefref = orderdef
					found = true
					break
				end
			end
			if not found then
				break
			end

			-- params
			-- hasrequiredparams
			order.hasrequiredparams = false
			for _, param in ipairs(order.params) do
				if param.type ~= "internal" then
					order.hasrequiredparams = true
					break
				end
			end
            

            local isextended = false -- menu.isOrderExtended(strComponent, i)
            local row = ftable:addRow({ i }, {  })

			-- extend
			row[hasloop and 2 or 1]:createButton({ active = order.hasrequiredparams }):setText(isextended and "-" or "+", { halign = "center" })
			--row[hasloop and 2 or 1].handlers.onClick = function () return menu.buttonExtendOrder(menu.infoSubmenuObject, i, row.index, hasloop and 2 or 1) end

			-- loop counter
			if hasloop then
				if not (tonumber(order.istemporder) == 1) then
					nontempcounter = nontempcounter + 1
					row[3]:createText(nontempcounter, { halign = "right" })
				end
			end

            local colspan = 1
			local name = order.orderdefref.name
			local mouseovertext
            
            row[hasloop and 4 or 2]:setColSpan(colspan):createText(name, { x = hasloop and 0 or nil, mouseOverText = mouseovertext })

        end

		local row = ftable:addRow(false, {  })
		row[1]:setColSpan(numcols):createText(" ")

		---- assignment ----
		if record.commanderidx > 0 and isvalid then
			--- title ---
			local row = ftable:addRow({  strCommander  }, { bgColor = config.Color["row_title_background"] })
			row[1]:setColSpan(numcols - 1):createText(string.format(ReadText(1001, 7803), Helper.convertColorToText(commandercolor) .. commandername), Helper.headerRowCenteredProperties)
            row[numcols]:createButton({ active = function() return (crecord.object or crecord.build) and true or false end, height = Helper.headerRow1Height, width = config.mapRowHeight, cellBGColor = config.Color["row_background"] }):setIcon("menu_center_selection", { width = Helper.standardTextHeight, height = Helper.standardTextHeight, y = (Helper.headerRow1Height - Helper.standardTextHeight) / 2 })
			row[numcols].handlers.onClick = function () return menu.buttonOnShowMap(crecord) end --function () return C.SetFocusMapComponent(menu.holomap, ConvertIDTo64Bit(infoTableData.commander), true) end

            local row = ftable:addRow({ "assignment" }, {  })
            
            row[1]:setColSpan(4):createText(ReadText(1001, 8373) .. ReadText(1001, 120))

			local isstation = crecord.class == "station" -- IsComponentClass(infoTableData.commander, "station")
            local isship = crecord.class ~= "station" -- IsComponentClass(infoTableData.commander, "ship")
			local shiptype = crecord.type --  GetComponentData(infoTableData.commander, "shiptype")
			local currentassignment, primarypurpose, issupissupplyship = record.assignment, record.purpose, record.issupplyship --GetComponentData(menu.infoSubmenuObject, "assignment", "primarypurpose")
			local asssignmentOptions = {}
			-- defence
			table.insert(asssignmentOptions, { id = "defence", text = ReadText(20208, 40301), icon = "", displayremoveoption = false })
			-- supplyfleet
			if isship and (primarypurpose == "auxiliary") and issupissupplyship then
				table.insert(asssignmentOptions, { id = "supplyfleet", text = ReadText(20208, 40701), icon = "", displayremoveoption = false })
			end
			if isstation then
				-- trade
				table.insert(asssignmentOptions, { id = "trade", text = ReadText(20208, 40101), icon = "", displayremoveoption = false, mouseovertext = (primarypurpose == "mine") and (ColorText["text_warning"] .. ReadText(1026, 8608)) or "" })
				if primarypurpose == "mine" then
					-- mining
					table.insert(asssignmentOptions, { id = "mining", text = ReadText(20208, 40201), icon = "", displayremoveoption = false })
				else
					-- trade for build storage
					table.insert(asssignmentOptions, { id = "tradeforbuildstorage", text = ReadText(20208, 40801), icon = "", displayremoveoption = false })
				end
				if primarypurpose == "salvage" then
					table.insert(asssignmentOptions, { id = "salvage", text = ReadText(20208, 41401), icon = "", displayremoveoption = false })
				end
			elseif isship then
				-- position defence
                local strParentCommander = menu.Convert_ID_To_StrComponent(fleetID, crecord.commanderidx)
				local parentcommander =  crecord.commanderidx > 0 -- ConvertIDTo64Bit(GetCommander(infoTableData.commander))
				local subordinates =  menu.GetSubordinates_From_FleetRecords(strParentCommander) -- GetSubordinates(infoTableData.commander)
				local isfleetcommander = (not parentcommander) and (#subordinates > 0)
				if (shiptype == "carrier") and isfleetcommander then
					local hasintersectorgroup = menu.HasSubordinateAssignment(strCommander, "positiondefence") -- C.HasSubordinateAssignment(ConvertIDTo64Bit(infoTableData.commander), "positiondefence")
					table.insert(asssignmentOptions, { id = "positiondefence", text = ReadText(20208, 41501), icon = "", displayremoveoption = false, active = hasintersectorgroup, mouseovertext = hasintersectorgroup and "" or ReadText(1026, 3270) })
				end
				-- attack and intercept
				table.insert(asssignmentOptions, { id = "attack", text = ReadText(20208, 40901), icon = "", displayremoveoption = false })
				table.insert(asssignmentOptions, { id = "interception", text = ReadText(20208, 41001), icon = "", displayremoveoption = false })
				table.insert(asssignmentOptions, { id = "bombardment", text = ReadText(20208, 41601), icon = "", displayremoveoption = false })
				table.insert(asssignmentOptions, { id = "follow", text = ReadText(20208, 41301), icon = "", displayremoveoption = false })
				local active = false
				local mouseovertext = ""
				--local buf = ffi.new("Order")
				--if not C.GetDefaultOrder(buf, ConvertIDTo64Bit(infoTableData.commander)) then
					--active = false
					--mouseovertext = ReadText(1026, 8606)
				--end
				table.insert(asssignmentOptions, { id = "assist", text = ReadText(20208, 41201), icon = "", displayremoveoption = false, active = active, mouseovertext = mouseovertext })
				-- trade
				if shiptype == "resupplier" then
					table.insert(asssignmentOptions, { id = "trade", text = ReadText(20208, 40101), icon = "", displayremoveoption = false })
				end
			end
            row[5]:setColSpan(8):createDropDown(asssignmentOptions, { active = false, height = config.mapRowHeight, startOption = currentassignment }):setTextProperties({ fontsize = config.mapFontSize, halign = "center" })
			--row[5].handlers.onDropDownConfirmed = function(_, newassignment) Helper.dropdownAssignment(_, menu.infoSubmenuObject, nil, nil, newassignment) end
            --row[5].handlers.onDropDownConfirmed = function(_, newassignment) menu.noupdate = false end
			--row[5].handlers.onDropDownActivated = function () menu.noupdate = true end

            --local row = ftable:addRow({ "removeassignment" }, {  })
			--row[1]:setColSpan(numcols):createButton({ active = false }):setText(ReadText(1001, 7810), { halign = "center" })
			--row[1].handlers.onClick = menu.buttonRemoveAssignment

			local row = ftable:addRow(false, {  })
			row[1]:setColSpan(numcols):createText(" ")

        end

        ---- default order ----
		--- title ---
		local titlerow = ftable:addRow(false, { bgColor = config.Color["row_title_background"] })
		titlerow[1]:setColSpan(numcols):createText((hasloop and (utf8.char(8734) .. " ") or "") .. ReadText(1001, 8320), Helper.headerRowCenteredProperties)
		titlerow[1].properties.helpOverlayID = "map_defaultorder"
		titlerow[1].properties.helpOverlayText = " "
		titlerow[1].properties.helpOverlayHeight = titlerow:getHeight()
		titlerow[1].properties.helpOverlayHighlightOnly = true
		titlerow[1].properties.helpOverlayScaling = false

        menu.displayDefaultBehaviour(ftable, titlerow, record, hasloop)

    else
		local row = ftable:addRow(nil, {  })
		row[1]:setColSpan(numcols):createText(ReadText(1001, 11226), { wordwrap = true })       -- There is no behaviour information for this selection.
    end

	if maxvisibleheight then
		ftable.properties.maxVisibleHeight = maxvisibleheight
	end

	if menu.selectedRows["manager"]["RightFrame"] then
		ftable:setSelectedRow(menu.selectedRows["manager"]["RightFrame"])
		menu.selectedRows["manager"]["RightFrame"] = nil
	end
    if menu.topRows["manager"]["RightFrame"] then
        ftable:setTopRow(menu.topRows["manager"]["RightFrame"])
        menu.topRows["manager"]["RightFrame"] = nil
    end

    local table_header = menu.createOrdersMenuHeader(frame)

    ftable.properties.y = table_header.properties.y + table_header:getFullHeight() + 2 * Helper.borderSize

end

function menu.displayDefaultBehaviour(ftable, titlerow, record, hasloop)

    local strComponent = menu.Selected.strComponent
    local fleetID, shipID = menu.Selected.fleetID, menu.Selected.shipID
    local isvalid = menu.isInfoModeValidFor(strComponent, "orderqueue")

	local playeroccupiedship64 = C.GetPlayerOccupiedShipID()
	local isplayeroccupiedship = record.object64 == playeroccupiedship64

	local haspilot = record.tPilot.macro ~= "" --GetComponentData(menu.infoSubmenuObject, "assignedpilot") ~= nil
    local behaviouractive = false
	--behaviouractive = (record.commanderidx <= 0) and isvalid and (not isplayeroccupiedship) and haspilot
    local mouseovertext = ""
    -- 1026, 3226 = You cannot change the default behaviour of the ship you are currently flying.
    -- 1026, 3227 = You cannot change the default behaviour of a ship without a pilot.
	-- local mouseovertext = isplayeroccupiedship and ReadText(1026, 3226) or ((not haspilot) and ReadText(1026, 3227) or "")

	local numcols = 12
    local orderloopskill = C.GetOrderLoopSkillLimit() * 3
	local order = record.defaultorder or {}

	if hasloop then
		-- name
		local row = ftable:addRow({ "default2" }, {  })
        -- 1026, 3269  =  Repeat all orders in the ship's order queue.
        -- 1001, 11267 = Repeat Orders
		row[1]:setColSpan(4):createText(ReadText(1001, 8320) .. ReadText(1001, 120))    -- Default Behaviour:
		row[5]:setColSpan(8):createButton({ active = behaviouractive, mouseOverText = (mouseovertext == "") and ReadText(1026, 3269) or mouseovertext }):setText(ReadText(1001, 11267)):setText2(Helper.displaySkill(orderloopskill), { halign = "right", color = config.Color["text_skills"] })
		--row[5].handlers.onClick = function () return menu.buttonNewOrder(nil, true, instance) end
		titlerow[1].properties.helpOverlayHeight = titlerow[1].properties.helpOverlayHeight + row:getHeight() + Helper.borderSize
	elseif next(order) and order.id then
        
        order.orderdefref = menu.orderdefbyid[order.id]
		-- commander
        local strComponentCommander = menu.Convert_ID_To_StrComponent(fleetID, 1)
        local recCommander
		if record.commanderidx > 0 then
            strComponentCommander = menu.Convert_ID_To_StrComponent(fleetID, record.commanderidx)
            recCommander = menu.GetRecordFromMd(strComponentCommander)
			local row = ftable:addRow(nil, {  })
			row[1]:setColSpan(numcols):createText(ReadText(1001, 11230), { wordwrap = true })       -- The default behaviour of this ship is currently determined by its commander.
			titlerow[1].properties.helpOverlayHeight = titlerow[1].properties.helpOverlayHeight + row:getHeight() + Helper.borderSize
        else
            recCommander = menu.GetRecordFromMd(strComponentCommander)
        end
		-- note
		--local row = ftable:addRow(nil, {  })
		--row[1]:setColSpan(numcols):createText(ReadText(1001, 8363) .. ReadText(1001, 120))  -- If there are no active orders in the queue
		--titlerow[1].properties.helpOverlayHeight = titlerow[1].properties.helpOverlayHeight + row:getHeight() + Helper.borderSize
		-- name
		local row = ftable:addRow({ "default2" }, {  })
		local printedSkillReq = math.floor(order.orderdefref.requiredSkill * 15 / 100)
		row[1]:setColSpan(4):createText(ReadText(1001, 8320) .. ReadText(1001, 120))    -- Default Behaviour:
		row[5]:setColSpan(8):createButton({helpOverlayID = "map_behaviourassignement", helpOverlayText = " ", helpOverlayHighlightOnly = true, active = behaviouractive, mouseOverText = (mouseovertext == "") and order.orderdefref.description or mouseovertext }):setText(order.orderdefref.name):setText2(Helper.displaySkill(printedSkillReq), { halign = "right", color = config.Color["text_skills"] })
		--row[5].handlers.onClick = function () return menu.buttonNewOrder(nil, true, instance) end
		--row[5].properties.uiTriggerID = "DefaultBehaviour"
		titlerow[1].properties.helpOverlayHeight = titlerow[1].properties.helpOverlayHeight + row:getHeight() + Helper.borderSize

        for j, param in ipairs(order.params) do
            
            if (not (param.hasinfinitevalue == 1) ) and ( (not (param.advanced == 1)) ) then
                
                if param.type == "list" then
					local playerreadonly = param.inputparams and tonumber(param.inputparams.playerreadonly)
					local canplayeroverride = (param.inputparams.canplayeroverride == 1) and strComponentCommander
                    
                    if param.value then
                        local overridedata
                        if canplayeroverride then
							overridedata = {}

							local overrideparamname = param.name .. "_override"
							for i, entry in ipairs(order.params) do
								if entry.name == overrideparamname then
									overridedata.paramidx = i
									overridedata.param = entry
									break
								end
							end
							if not overridedata.paramidx then
								DebugError("Missing override order parameter '" .. overrideparamname .."' although canplayeroverride is set.")
								return
							end
                            
							local row = ftable:addRow({ j, "manual" })
                            -- 1026, 3282  : Automatic setting lets the ship's commander decide which wares are traded.
                            -- 1001, 11650 : Automatic
							row[2]:setColSpan(3):createText("  " .. param.text .. ReadText(1001, 120))
							row[5]:setColSpan(1):createCheckBox(#overridedata.param.value == 0, { width = config.mapRowHeight, height = config.mapRowHeight, mouseOverText = ReadText(1026, 3282) })
							--row[5].handlers.onClick = function (_, checked) return menu.checkboxOrderPlayerOverride("default", j, param, overridedata.paramidx, overridedata.param, checked) end
                            row[5].properties.active = false
							row[6]:setColSpan(7):createText(ReadText(1001, 11650), { mouseOverText = ReadText(1026, 3282) })

							ftable:addEmptyRow()

							overridedata.values = {}
							for k, entry in ipairs(overridedata.param.value) do
								overridedata.values[entry] = k
							end

                            --[[
							overridedata.criticalwares = {}
							local commander = infoTableData.commander
							if GetComponentData(menu.infoSubmenuObject, "assignment") == "tradeforbuildstorage" then
								commander = GetComponentData(commander, "buildstorage")
							end
							local commander64 = C.ConvertStringTo64Bit(tostring(commander))
							local n = C.GetNumContainerCriticalWares(commander64)
							if n > 0 then
								local buf = ffi.new("const char*[?]", n)
								n = C.GetContainerCriticalWares(buf, n, commander64)
								for i = 0, n - 1 do
									overridedata.criticalwares[ffi.string(buf[i])] = true
								end
							end
                            ]]
                        end

                        if overridedata and (#overridedata.param.value > 0) and overridedata.param.inputparams.optionsource then
							if overridedata.param.inputparams.optionsource == "commanderwarebasket" then
								if overridedata.param.inputparams.type == "ware" then
									local warebasket = {}
                                    --warebasket = param.value
                                    
									local found = {}
									local commander = recCommander.object64
									if record.assignment == "tradeforbuildstorage" then
										commander = tonumber(commander) ~= 0 and GetComponentData(commander, "buildstorage")
									end
									local allresources, allproducts, rawtradewares = tonumber(commander) ~= 0 and GetComponentData(commander, "allresources", "products", "tradewares")
									for _, ware in ipairs(allresources) do
										if not found[ware] then
											found[ware] = true
											table.insert(warebasket, ware)
										end
									end
									for _, ware in ipairs(allproducts) do
										if not found[ware] then
											found[ware] = true
											table.insert(warebasket, ware)
										end
									end
									for _, ware in ipairs(rawtradewares) do
										if not found[ware] then
											found[ware] = true
											table.insert(warebasket, ware)
										end
									end
                                    
									for i = #warebasket, 1, -1 do
										if GetWareCapacity(overridedata.param.inputparams.cancarry, warebasket[i], true) == 0 then
											table.remove(warebasket, i)
										end
									end
                                    
									table.sort(warebasket, Helper.sortWareName)

									for k, ware in ipairs(warebasket) do
										local param2 = { text = ((k == 1) and (not canplayeroverride)) and param.text or "", value = ware, type = param.inputparams.type, editable = (param.editable == 1), playerreadonly = playerreadonly, canplayeroverride = overridedata }
										menu.displayOrderParam(ftable, "default", order, j, param2, k, hasloop)
									end
								end
							end
                        else
							for k, entry in ipairs(param.value) do
								local param2 = { text = ((k == 1) and (not canplayeroverride)) and param.text or "", value = entry, type = param.inputparams.type, editable = (param.editable == 1), playerreadonly = playerreadonly, canplayeroverride = overridedata }
								menu.displayOrderParam(ftable, "default", order, j, param2, k, hasloop)
							end
                        end
                    end

					if (playerreadonly ~= 1) and (not canplayeroverride) then
						local row = ftable:addRow({ i, j, "new" }, {  })
						--local active = behaviouractive and (((order.state == "setup") and (j <= (order.actualparams + 1))) or ((order.state ~= "setup") and param.editable))
                        local active = false
                        -- 1001, 8378 : Add / Remove Wares
                        -- 1001, 3235 : Add %s($Order_ListParameter_Name$)
						row[2]:setColSpan(numcols - 1):createButton({ active = active }):setText("  " .. string.format((param.inputparams.type == "ware") and ReadText(1001, 8378) or ReadText(1001, 3235), param.text), { halign = "center" })
						--row[2].handlers.onClick = function () return menu.buttonSetOrderParam("default", j, nil, nil) end
						titlerow[1].properties.helpOverlayHeight = titlerow[1].properties.helpOverlayHeight + row:getHeight() + Helper.borderSize
					end

                elseif (param.type ~= "internal") then
                    menu.displayOrderParam(ftable, "default", order, j, param, nil, hasloop)
                end
            end
        end
	else
        -- Corrupt record structure

        -- blinklerin başlayacağı zaman, nil olursa kapanır
        menu.warningShown = getElapsedTime()
        local row = ftable:addRow(false, { fixed = true })
        row[1]:setColSpan(4):createText(ReadText(1001, 8320) .. ReadText(1001, 120) )    -- Default Behaviour:
        row[5]:setColSpan(7):createText(ReadText(tPg,8020) .. " " .. ReadText(tPg,8021) , menu.rowAlertTextProperties )
        row[5].properties.wordwrap = true

        titlerow[1].properties.helpOverlayHeight = titlerow[1].properties.helpOverlayHeight + row:getHeight() + Helper.borderSize
	end

end

function menu.displayOrderParam(ftable, orderidx, order, paramidx, param, listidx, hasloop)
	local value = param.value
	local ismissing = value == nil
	local playeroccupiedship64 = C.GetPlayerOccupiedShipID()
	--local isplayeroccupiedship = menu.infoSubmenuObject == playeroccupiedship64
	local paramactive = true
	if orderidx == "default" then
		paramactive = false -- (menu.infoTableData[instance].commander == nil) and (not isplayeroccupiedship)
	end
	if paramactive and ((param.inputparams and param.inputparams.playerreadonly) or param.playerreadonly) then
		if param.inputparams and param.inputparams.playerreadonly then
			paramactive = (param.inputparams.playerreadonly ~= 1)
		elseif param.playerreadonly then
			paramactive = (param.playerreadonly ~= 1)
		end
	end
    --[[
	if instance == nil then
		print(TraceBack())
	end
	local selectedorder = menu.infoTablePersistentData[instance].selectedorder
    ]]
	local numValues = 0
	if not ismissing then
		if listidx then
			numValues = #order.params[paramidx].value
		end
		value = menu.getParamValue(param.type, value, param.inputparams)
	end

    local specText = ". _ ." -- sadece patlamış gemilerde commander bilgisi için araya gireceğiz
	local paramcolor = config.Color["text_normal"]
	if ismissing then
		paramcolor = config.Color["text_error"]
        -- Özel Ekleme: Gemi yaşamıyorsa kendisini ve commander bilgisini kayıttan alacağız
        local record = menu.GetRecordFromMd(menu.Selected.strComponent)
        local strCommander = menu.Convert_ID_To_StrComponent(menu.Selected.fleetID, record and record.commanderidx or 0)
        local commanderrecord = record and menu.GetRecordFromMd(strCommander)

        if param.type == "object" then
            if param.name == "commander" then   -- AssignCommander
                specText = commanderrecord and commanderrecord.name or specText
                --[[
                param.value = commanderrecord.object
                value = param.value
                value = menu.getParamValue(param.type, value, nil)
                ismissing = false
                paramcolor = config.Color["text_normal"]
                ]]
            elseif param.name == "target" then   -- Escort, SupplyFleet
                specText = commanderrecord and commanderrecord.name or specText
                --[[
                param.value = commanderrecord.object
                value = param.value
                value = menu.getParamValue(param.type, value, nil)
                ismissing = false
                paramcolor = config.Color["text_normal"]
                ]]
            end

        end

	--elseif order.state == "setup" then
	--	paramcolor = config.Color["text_success"]
	end

    --local specText = "<" .. param.name .."> <" .. tostring(param.type) .. "> <" ..(param.inputparams and tostring(param.inputparams.canbecommanderof) or "no inputparams" ) .. "> ".. tostring(ismissing)

	local paramtext = (param.text ~= "") and ("  " .. param.text .. ReadText(1001, 120)) or ""

	if listidx then
		local row = ftable:addRow({ orderidx, paramidx, listidx }, {  })
        --[[
		if selectedorder and (selectedorder[1] == orderidx) and (selectedorder[2] == paramidx) and (selectedorder[3] == listidx) then
			menu.selectedRows["infotable" .. instance] = row.index
			menu.selectedCols["infotable" .. instance] = nil
		end
        ]]
		if param.canplayeroverride then
			local checked = (#param.canplayeroverride.param.value == 0) or (param.canplayeroverride.values[param.value] ~= nil)
			local active = #param.canplayeroverride.param.value > 1
			local mouseovertext = ""

			if #param.canplayeroverride.param.value > 0 then
				if not checked then
					active = true
				elseif not active then
					mouseovertext = ReadText(1026, 3283)
				end
			end

			row[5]:setColSpan(1)
			row[6]:createCheckBox(checked, { active = active, width = config.mapRowHeight, height = config.mapRowHeight, mouseOverText = mouseovertext })
			--row[6].handlers.onClick = function () menu.checkboxOrderPlayerOverrideValue(orderidx, param.canplayeroverride.paramidx, param.canplayeroverride.values[param.value], param.value) end

			local suffix = ""
			local mouseovertext = ""
            --[[
			if param.canplayeroverride.criticalwares[param.value] then
				suffix = " " .. ColorText["text_warning"] .. "\27[menu_ware_critical]"
				mouseovertext = ReadText(1026, 3284)
			end
            ]]
			row[7]:createText(value and (tostring(value) .. suffix) or "", { mouseOverText = mouseovertext })
            row[7]:setColSpan(2)
		else
			row[hasloop and 4 or 2]:setColSpan(hasloop and 1 or 3):createText(paramtext)
			local active = false -- paramactive and (not isplayeroccupiedship) and (((order.state == "setup") and (paramidx <= (order.actualparams + 1))) or ((order.state ~= "setup") and param.editable))
			row[5]:setColSpan(7):createButton({ active = active }):setText(value and tostring(value) or "", { halign = "center", color = paramcolor })
			--row[5].handlers.onClick = function () return menu.buttonSetOrderParam(orderidx, paramidx, listidx, nil, instance) end
			row[12]:createButton({ active = active and ((not order.params[paramidx].required) or (numValues > 1)) }):setText("x", { halign = "center", color = paramcolor })
			--row[12].handlers.onClick = function () return menu.buttonRemoveListParam(orderidx, paramidx, listidx, instance) end
		end
	elseif config.complexOrderParams[param.type] then
        DebugError(" X X X config.complexOrderParams[" .. tostring(param.type) .. "]? " .. tostring(config.complexOrderParams[param.type]) )
        
		local data = config.complexOrderParams[param.type].data(param.value)
		local playerreadonly = param.inputparams and param.inputparams.playerreadonly
		if next(data) then
			for _, subparam in ipairs(config.complexOrderParams[param.type]) do
				if subparam.value(data) then
					local subparam2 = { name = subparam.id, text = subparam.name, value = subparam.value(data), type = subparam.type, editable = param.editable, playerreadonly = playerreadonly }
					menu.displayOrderParam(ftable, orderidx, order, paramidx, subparam2, nil, hasloop)
				end
			end
		end
        
	elseif param.inputparams and (param.type == "number" or param.type == "length" or param.type == "time" or param.type == "money") then
		local defaultmax = 50000
		local minselect = math.max(0, param.inputparams.min or 0)
		local maxselect = math.max(0, param.inputparams.max or defaultmax)
		local curvalue = tonumber(param.value)
		local startvalue = param.inputparams.startvalue
		local step = (param.inputparams.step and (param.inputparams.step >= 1)) and param.inputparams.step or 1
		local usetimeformat = false

		local suffix = ""
		if param.type == "length" then
			if param.inputparams.step >= 1000 then
				suffix = ReadText(1001, 108)
				minselect = math.floor(minselect / 1000)
				maxselect = math.floor(maxselect / 1000)
				curvalue = curvalue and math.floor(curvalue / 1000)
				startvalue = startvalue and math.floor(startvalue / 1000)
				step = math.ceil(step / 1000)
			else
				suffix = ReadText(1001, 107)
			end
		elseif param.type == "time" then
			suffix = ReadText(1001, 103)
			usetimeformat = true
			minselect = math.floor(minselect / 60)
			maxselect = math.floor(maxselect / 60)
			curvalue = curvalue and math.floor(curvalue / 60)
			startvalue = startvalue and math.floor(startvalue / 60)
			step = math.ceil(step / 60)
		elseif param.type == "money" then
			suffix = ReadText(1001, 101)
		end

        local infinitevalue = nil
		local useinfinite = false
		if param.hasinfinitevalue then
			useinfinite = true
			infinitevalue = param.value --param.infinitevalue
		end

        --readOnly = (not paramactive) or isplayeroccupiedship or (((order.state ~= "setup") or (paramidx > (order.actualparams + 1))) and ((order.state == "setup") and (not param.editable))),
		local slidercellProperties = {
			height = config.mapRowHeight,
			bgColor = config.Color["slider_background_transparent"],
			valueColor = paramactive and config.Color["slider_value"] or config.Color["slider_value_inactive"],
			min       = minselect,
			max       = maxselect,
			start     = math.max(minselect, math.min(maxselect, curvalue or startvalue or minselect)),
			step      = step,
			suffix    = suffix,
			exceedMaxValue = false,
			readOnly = true,
			hideMaxValue = param.hasinfinitevalue,
			useInfiniteValue = useinfinite,
			infiniteValue = infinitevalue,
			useTimeFormat = usetimeformat,
		}

		local row = ftable:addRow({ orderidx, paramidx, listidx }, {  })
        --[[
		if selectedorder and (selectedorder[1] == orderidx) and (selectedorder[2] == paramidx) and (selectedorder[3] == listidx) then
			menu.selectedRows["infotable" .. instance] = row.index
			menu.selectedCols["infotable" .. instance] = nil
		end
        ]]
		row[hasloop and 4 or 2]:setColSpan(hasloop and 1 or 3)
		row[hasloop and 4 or 2]:createText(paramtext)
		row[5]:setColSpan(8):createSliderCell(slidercellProperties):setText("", { fontsize = config.mapFontSize, color = paramcolor })
		--row[5].handlers.onSliderCellConfirm = function (_, value) return menu.slidercellSetOrderParam(orderidx, paramidx, listidx, value, instance) end
		--row[5].handlers.onSliderCellActivated = function() menu.noupdate = true end
		--row[5].handlers.onSliderCellDeactivated = function() menu.noupdate = false end
	elseif param.type == "bool" then
		local row = ftable:addRow({ orderidx, paramidx, listidx }, {  })
        --[[
		if selectedorder and (selectedorder[1] == orderidx) and (selectedorder[2] == paramidx) and (selectedorder[3] == listidx) then
			menu.selectedRows["infotable" .. instance] = row.index
			menu.selectedCols["infotable" .. instance] = nil
		end
        ]]
		row[hasloop and 4 or 2]:setColSpan(hasloop and 1 or 3):createText(paramtext)
		local active = false -- paramactive and (not isplayeroccupiedship) and (((order.state == "setup") and (paramidx <= (order.actualparams + 1))) or ((order.state ~= "setup") and param.editable))
		local rawvalue = param.value ~= 0
		if ismissing then
			rawvalue = false
		end
		row[5]:createCheckBox(rawvalue, { active = active, width = config.mapRowHeight })
		--row[5].handlers.onClick = function () return menu.buttonSetOrderParam(orderidx, paramidx, listidx, nil, instance) end
	else
		local row = ftable:addRow({ orderidx, paramidx, listidx }, {  })
        --[[
		if selectedorder and (selectedorder[1] == orderidx) and (selectedorder[2] == paramidx) and (selectedorder[3] == listidx) then
			menu.selectedRows["infotable" .. instance] = row.index
			menu.selectedCols["infotable" .. instance] = nil
		end
        ]]
		row[hasloop and 4 or 2]:setColSpan(hasloop and 1 or 3):createText(paramtext)
		row[5]:setColSpan(8)
        -- 1001, 3102 : Select
        --DebugError(" param.type " .. tostring(param.type) .. " , param.name = " .. tostring(param.name) .. " , value = " .. tostring(value) .. "  , paramidx = " .. tostring(paramidx) .. " , order.actualparams = " .. tostring(order.actualparams))
		local active = false -- paramactive and (not isplayeroccupiedship) and (((order.state == "setup") and (paramidx <= (order.actualparams + 1))) or ((order.state ~= "setup") and param.editable))
        
		local text = value 
            and 
                tostring(value) 
            or 
                (
                active 
                    and 
                        (
                            config.ColorText["text_inactive"] .. ReadText(1001, 3102) .. "..." .. 
                                (
                                (paramidx < (order.actualparams + 1)) 
                                and 
                                    (" (" .. ReadText(1001, 11669) .. ")") 
                                or
                                    ""
                                )
                        ) 
                    or 
                        specText
                )
		local height = math.max(config.mapRowHeight, math.ceil(C.GetTextHeight(text, Helper.standardFont, Helper.standardFontSize, row[5]:getWidth())) + Helper.borderSize)
		row[5]:createButton({ active = active, height = height, helpOverlayID = "orderparam_" .. param.name, helpOverlayText = " ", helpOverlayHighlightOnly = true }):setText(text, { halign = "center", color = paramcolor, y = (height - config.mapRowHeight) / 2 })
		--row[5].handlers.onClick = function () return menu.buttonSetOrderParam(orderidx, paramidx, listidx, nil, instance) end
		row[5].properties.uiTriggerID = "orderparam_" .. param.name
	end
end

function menu.getParamValue(type, value, inputparams)
	local result

	if type == "bool" then
		result = (value ~= 0) and ReadText(1001, 2617) or ReadText(1001, 2618)
	elseif type == "length" then
		if inputparams and inputparams.step and (inputparams.step >= 1000) then
			result = tostring(math.floor(value / 1000)) .. " " .. ReadText(1001, 107)
		else
			result = tostring(value) .. " " .. ReadText(1001, 107)
		end
	elseif type == "time" then
		result = tostring(value) .. " " .. ReadText(1001, 100)
	elseif type == "money" then
		result = ConvertMoneyString(value, false, true, 0, true) .. " " .. ReadText(1001, 101)
	elseif type == "object" then
		if IsComponentClass(value, "space") then
			local name, sector, cluster = GetComponentData(value, "name", "sector", "cluster")
			result = ((cluster ~= "") and (cluster .. " / ") or "") .. ((sector ~= "") and (sector .. " / ") or "") .. name
		else
			result = GetComponentData(value, "name")
		end
	elseif type == "sector" then
		local name, sector, cluster = "", "", ""
		if value then
			name, sector, cluster = GetComponentData(value, "name", "sector", "cluster")
		end
		result = ((cluster ~= "") and (cluster .. " / ") or "") .. ((sector ~= "") and (sector .. " / ") or "") .. name
	elseif type == "ware" then
		result = GetWareData(value, "name")
	elseif type == "macro" then
		result = GetMacroData(value, "name")
	elseif type == "trade_ware" then
		result = (value[1] and ReadText(1001, 2917) or ReadText(1001, 2916)) .. " " .. GetWareData(value[2], "name")
	elseif type == "trade_amount" then
		result = value[1] and (tostring(value[1]) .. " (" .. string.format(ReadText(1001, 3246), tostring(value[2])) .. ")") or ""
	elseif type == "position" then
		local name, sectorid, clusterid = GetComponentData(value[1], "name", "sectorid", "clusterid")
		result = ""
		if clusterid then
			local sectors = GetSectors(clusterid)
			local clustername, systemid = GetComponentData(clusterid, "name", "systemid")
			if (#sectors > 1) or (systemid ~= 0) then
				result = clustername .. "\n"
			end
		end
		result = result .. (sectorid and (GetComponentData(sectorid, "name") .. "\n") or "") .. name
	else
		result = tostring(value)
	end

	return result
end


function menu.dropdownOrdersSetResponse(_, newresponseid, factionorcontrollable, signalid, mode)
    --[[
	if mode ~= "factionresponses" and mode ~= "controllableresponses" then
		DebugError("menu.dropdownOrdersSetResponse called with invalid mode set. only 'factionresponses' and 'controllableresponses' are supported at this time. mode: " .. tostring(mode))
		return
	elseif not factionorcontrollable then
		DebugError("menu.dropdownOrdersSetResponse called with invalid faction or controllable set. factionorcontrollable: " .. tostring(factionorcontrollable))
		return
	elseif not signalid then
		DebugError("menu.dropdownOrdersSetResponse called with invalid signal id set. signalid: " .. tostring(signalid))
		return
	end
    ]]
    --[[
	if newresponseid == "reset" then
		if mode == "controllableresponses" then
			if not C.ResetResponseToSignalForControllable(signalid, factionorcontrollable) then
				DebugError("Failed resetting response to signal " .. tostring(signalid) .. " for controllable " .. ffi.string(C.GetComponentName(factionorcontrollable)) .. " " .. tostring(factionorcontrollable))
			end
		else
			local factionobjects = GetContainedObjectsByOwner(factionorcontrollable)
			for _, object in ipairs(factionobjects) do
				local object64 = ConvertIDTo64Bit(object)
				if C.IsComponentClass(object64, "controllable") then
					if not C.ResetResponseToSignalForControllable(signalid, object64) then
						DebugError("Failed resetting response to signal " .. tostring(signalid) .. " for controllable " .. ffi.string(C.GetComponentName(object64)) .. " " .. tostring(object64))
					end
				end
			end
		end
	else
		local ask
		if mode == "controllableresponses" then
			ask = C.GetAskToSignalForControllable(signalid, factionorcontrollable)
			C.SetDefaultResponseToSignalForControllable(newresponseid, ask, signalid, factionorcontrollable)
		else
			ask = C.GetAskToSignalForFaction(signalid, factionorcontrollable)
			C.SetDefaultResponseToSignalForFaction2(newresponseid, ask, signalid, factionorcontrollable, "")
		end
	end
    ]]
    --DebugError("DROP DROWN CONFIRMED  newresponseid =" .. tostring(newresponseid)  .. "  factionorcontrollable = " .. tostring(factionorcontrollable) ..  "  signalid = " .. tostring(signalid) ..  "  mode = " .. tostring(mode))
	menu.refreshRightFrame()
end
function menu.dropdownOrdersResupply(controllable, id)
    --DebugError("DROP DROWN CONFIRMED   controllable = " .. tostring(controllable) ..  "  id = " .. tostring(id))
	--C.SetDefensibleLoadoutLevel(controllable, tonumber(id))
	menu.refreshRightFrame()
end
function  menu.dropdownOrdersBlacklist(controllable, type, id)
    --DebugError("DROP DROWN CONFIRMED   controllable = " .. tostring(controllable) .. "  type = " .. tostring(type) .. "  id = " .. tostring(id))
	--C.SetControllableBlacklist(controllable, tonumber(id), type, true)
	menu.refreshRightFrame()
end
function  menu.dropdownOrdersFightRule(controllable, type, id)
    --DebugError("DROP DROWN CONFIRMED   controllable = " .. tostring(controllable) .. "  type = " .. tostring(type) .. "  id = " .. tostring(id))
	--C.SetControllableFightRule(controllable, tonumber(id), type, true)
	menu.refreshRightFrame()
end
function menu.dropdownOrdersCargoReservations(ship, id)
    --DebugError("DROP DROWN CONFIRMED   ship = " .. tostring(ship) ..  "  id = " .. tostring(id))
	--C.SetShipTradeLoopCargoReservationOverride(ship, id == "on")
	menu.refreshRightFrame()
end
function  menu.dropdownBuildRule(container, id)
    --DebugError("DROP DROWN CONFIRMED   container = " .. tostring(container) ..  "  id = " .. tostring(id))
	--C.SetContainerBuildMethod(container, id)
    menu.refreshRightFrame()
end
function  menu.dropdownTradeRule(container, type, id, ware, refresh)
    --DebugError("DROP DROWN CONFIRMED   container = " .. tostring(container) .. "  type = " .. tostring(type) .. "  id = " .. tostring(id) .. "  ware = " .. tostring(refresh) .. "  id = " .. tostring(refresh))
    --[[
	if type == "trade" then
		C.SetContainerTradeRule(container, tonumber(id), "buy",  ware or "", true)
		C.SetContainerTradeRule(container, tonumber(id), "sell", ware or "", true)
	else
		C.SetContainerTradeRule(container, tonumber(id), type, ware or "", true)
	end
    ]]
	if refresh then
		menu.refreshRightFrame()
	end
end

function menu.isOrderExtended(controllable, orderidx, default)
	for i, entry in ipairs(menu.extendedorders) do
		if entry.id == controllable then
			return entry.orders[orderidx ]
		end
	end
	if default ~= nil then
		table.insert(menu.extendedorders, { id = controllable, orders = { [orderidx ] = default } })
		return default
	end
	return false
end
function menu.extendOrder(controllable, orderidx)
	local found = false
	for i, entry in ipairs(menu.extendedorders) do
		if entry.id == controllable then
			found = true
			if entry.orders[orderidx ] then
				entry.orders[orderidx ] = nil
			else
				entry.orders[orderidx ] = true
			end
			break
		end
	end
	if not found then
		table.insert(menu.extendedorders, {id = controllable, orders = { [orderidx ] = true } })
	end
end
function menu.buttonExtendOrder(controllable, orderidx, row, col)
	menu.extendOrder(controllable, orderidx)

    --menu.refreshRightFrame(row, col)
    menu.refreshRightFrame()
end



function menu.Get_respondequipmentinfo(ware)
    
    local hasenginewares = false
    local name, transport, macro, tags = GetWareData(ware, "name", "transport", "component", "tags")
    local class = "other"
    local type = "other"
    if transport == "equipment" and macro ~= "" then
        if IsMacroClass(macro, "engine") then
            class = "engine"
            type = "engine"
            if tags["thruster"] then
                type = "thruster"
            end
            hasenginewares = true
        elseif IsMacroClass(macro, "shieldgenerator") then
            class = "shield"
            type = "shield"
        elseif IsMacroClass(macro, "missilelauncher") then
            class = "missilelauncher"
            type = "weapon"
        elseif IsMacroClass(macro, "missileturret") then
            class = "missileturret"
            type = "turret"
        elseif IsMacroClass(macro, "turret") then   -- özellikle önce turret mı diye bakacağız, yoksa turretlar da weapon sınıfıdır.
            class = "turret"
            type = "turret"
        elseif IsMacroClass(macro, "weapon") then
            class = "weapon"
            type = "weapon"
        elseif IsMacroClass(macro, "missile") then
            class = "missile"
            type = "missile"
        elseif IsMacroClass(macro, "countermeasure") then
            class = "countermeasure"
            type = "countermeasure"
        elseif GetMacroData(macro, "isunit") then
            class = "unit"
            type = "drone"
        elseif GetMacroData(macro, "isdeployable") then
            class = "deployable"
            type = "deployable"
        elseif IsMacroClass(macro, "scanner") then
            class = "scanner"
            type = "software"
        end
    elseif transport == "software" then
        class = "software"
        type = "software"
    end

    return {name = name, transport = transport, type = type, macro = macro, class = class , ware = ware, tags = tags}, hasenginewares
end




-- ----------------------------------------------------
-- WIDGETS
-- ----------------------------------------------------

--- func desc
---@param changedPropertyText any   -- property text olarak verilecek
---@param changedValue any          -- verilmezse '' (empty string).  
---@param changedSection any        -- verilmezse '' (empty string).  eg: 'refresh.DebugFiles'
---@param valuetype any             -- verilmezse type(changedValue). compatible : 'component', 'number', 'boolean', 'string'
function menu.Set_Md_Settings(changedPropertyText, changedValue, changedSection, valuetype)
    if changedValue == nil then
        changedValue = ""
    end
    if valuetype == nil then
        valuetype = tostring(type(changedValue))
    end
    if type(valuetype) ~= "string" then
        valuetype = tostring(valuetype)
    end
    if changedSection == nil or (type(changedSection) ~= "string") then
        changedSection = ''
    end
    
    if valuetype == "component" then
        changedValue = ConvertStringToLuaID(tostring(changedValue))
    elseif valuetype == "number" then
        changedValue = tonumber(changedValue)
    elseif valuetype == "boolean" then
        changedValue = changedValue and 1 or 0
    else
        changedValue = tostring(changedValue)
    end
    local controlID = "changed.EditingSettings"
    local screenParam = { menu.editedSettings, changedPropertyText, changedValue, changedSection }
    AddUITriggeredEvent(menu.name, controlID, screenParam)
   
end


--[[
function menu.buttonReEnable()
    local xdebug = debug0 and DebugError("menu.buttonReEnable")
    local rfmKey = menu.Selected.fleetID

    local controlID = "ReEnable"
    local screenParam = {rfmKey}
    AddUITriggeredEvent(menu.name, controlID, screenParam)

    menu.noupdate = true

end
]]

function menu.buttonRemoveRFM()

    local xdebug = debug0 and DebugError("menu.buttonRemoveRFMClone")

    menu.contextData = menu.contextData or {}
    menu.contextData.saveOption = menu.editedSettings.UserQuestions.RemoveRFM

    if menu.editedSettings.UserQuestions.RemoveRFM then
        menu.RemoveRFM()
    else
		menu.contextData = menu.contextData or {}
		menu.contextData.mode = "RemoveRFM"
        menu.displayContextFrame("RemoveRFM", nil, Helper.scaleX(400), (Helper.viewWidth - Helper.scaleX(400)) / 2, Helper.viewHeight / 2)
    end

end

function menu.buttonCP_RemoveRFMConfirm()
    if menu.editedSettings.UserQuestions.RemoveRFM ~= menu.contextData.saveOption then
        menu.editedSettings.UserQuestions.RemoveRFM = menu.contextData.saveOption
        local controlID = "changed.UserQuestions.RemoveRFM"
        local screenParam = { menu.contextData.saveOption }
        AddUITriggeredEvent(menu.name, controlID, screenParam)
    end
    menu.RemoveRFM()
	menu.closeContextMenu()
end

function menu.buttonCP_RemoveRFMCancel()
    menu.contextData.saveOption = menu.editedSettings.UserQuestions.RemoveRFM
	menu.closeContextMenu()
    menu.refreshBottomButtons()
end

function menu.RemoveRFM()

    local fleetID = menu.Selected.fleetID

    menu.tableremoveKey(menu.RM_Fleets, fleetID)
    menu.tableremoveKey(menu.RM_FleetRecords, fleetID)
    menu.tableremoveKey(menu.RM_RebuildCues, fleetID)
    menu.prepareFleetsTable()

    menu.Selected.fleetID = 0
    menu.Selected.shipID = 0
    menu.Selected.selectedGroup = nil
    menu.Selected.strComponent = "0_0"
    menu.refreshMenuFrame(true)

    local controlID = "Disabled"
    local screenParam = { fleetID }
    AddUITriggeredEvent(menu.name, controlID, screenParam)

    PlaySound("rfm_disable")
end

function menu.buttonAutoBuildChanged(autobuildvalue)

    local xdebug = debug0 and DebugError("menu.buttonAutoBuildChanged")

    menu.RM_Fleets[menu.Selected.fleetID].autobuild = autobuildvalue and 0 or 1    -- md datasında true false değerleri 1 0 olarak geliyor
    
    local fleetID = menu.Selected.fleetID
    
    local controlID = "changed.autobuild"
    local screenParam = { fleetID }

    AddUITriggeredEvent(menu.name, controlID, screenParam)
    
	if autobuildvalue then
        PlaySound("toggle_button_on")
	else
        PlaySound("toggle_button_on")
	end

    if menu.propertySorterType == "autobuild" or menu.propertySorterType == "autobuildinverse" then
        menu.forcefocusfleetID = menu.Selected.fleetID
    end
    menu.refreshMenuFrame(true)

end

function menu.buttonOnShowMap(record)
    -- LUA idleri   ID : xxxx
    -- 64 idleri    xxxx
    -- MD ile lua arasındaki alınıp verilen sayısal veriler LUA tipi olmalı 
    local xdebug = debug0 and DebugError("menu.buttonOnShowMap")

    local object, object64, objectLUA
    local name, sectorid, sector, sector64, sectorLUA
    local showzone, focuscomponent
    
    if record then
        if record.object == nil then
            object = record.shipyard.object
        else
            object = record.object
        end
    end
    local object64 = ConvertStringTo64Bit(tostring(object))
    local objectLUA = ConvertStringToLuaID(tostring(object))
    name, sector, sectorid = GetComponentData(object64, "name", "sector", "sectorid")
    sector64 = ConvertIDTo64Bit(sectorid)
    sectorLUA = ConvertStringToLuaID(tostring(sector64))
    
    if IsValidComponent(object) then
        
        Helper.closeMenuAndReturn(menu, nil)

        local controlID = "show_on_map_target"
        local screenParam = objectLUA
        AddUITriggeredEvent(menu.name, controlID, screenParam)

        menu.cleanup()
    else
        PlaySound("ui_notification_pickup_fail")
        menu.refreshMenuFrame()
    end    

end


function menu.buttonCP_RemoveShipConfirm()
    if menu.editedSettings.UserQuestions.RemoveShip ~= menu.contextData.saveOption then
        menu.editedSettings.UserQuestions.RemoveShip = menu.contextData.saveOption
        local controlID = "changed.UserQuestions.RemoveShip"
        local screenParam = {menu.contextData.saveOption}
        AddUITriggeredEvent(menu.name, controlID, screenParam)
    end
    menu.RemoveShip()
end

function menu.buttonCP_RemoveShipCancel()
	menu.contextData.saveOption = menu.editedSettings.UserQuestions.RemoveShip
    menu.closeContextMenu()
    menu.setdefaulttableCenter = true
    menu.refreshCenterFrame()
    --menu.refreshBottomButtons()
end

function menu.buttonRemoveShip(record)

    local xdebug = debug0 and DebugError("menu.buttonRemoveShip")

    menu.contextData = menu.contextData or {}
    menu.contextData.saveOption = menu.editedSettings.UserQuestions.RemoveShip

    if menu.editedSettings.UserQuestions.RemoveShip then
        menu.RemoveShip()
    else
		menu.contextData.mode = "RemoveShip"
        menu.displayContextFrame("RemoveShip", record, Helper.scaleX(400), (Helper.viewWidth - Helper.scaleX(400)) / 2, Helper.viewHeight / 2)
    end
end

function menu.RemoveShip()

    local fleetID = menu.Selected.fleetID
    local shipID = menu.Selected.shipID

    menu.removingship = true

    SignalObject(playerID, "Remove.Ship", {fleetID = fleetID, shipID = shipID } )

	menu.closeContextMenu()
    menu.setdefaulttableCenter = true
    menu.refreshCenterFrame()

end

local function removeship_completed(_, params)
    
    menu.removingship = nil

    local newData = GetNPCBlackboard(playerID, "$removeshipcompleted")

    local fleetID = menu.Selected.fleetID

    local closeRFM = tonumber(newData.closeRFM) == 1
    menu.RM_Fleets[fleetID] = newData.RM_Fleet
    menu.RM_FleetRecords[fleetID] = newData.FleetRecords
    menu.RM_RebuildCues[fleetID] = newData.RebuildCues
    if closeRFM then
        menu.Selected.fleetID = 0
        menu.Selected.shipID = 0
        menu.Selected.selectedGroup = nil
        menu.Selected.strComponent = "0_0"
    else
        menu.forcefocusfleetID = menu.Selected.fleetID
    end
    
    SetNPCBlackboard(playerID, "$removeshipcompleted", nil)

    menu.refreshMenuFrame(true)
end
RegisterEvent("removeship.completed", removeship_completed)



function menu.buttonBuild(record)

    local xdebug = debug0 and DebugError("menu.buttonBuild")
    local strComponent = menu.Selected.strComponent
    local fleetID = menu.Selected.fleetID
    local shipID = menu.Selected.shipID

    local isremoverespondwares = menu.isremoverespondwares or false
    local usestationengines = menu.usestationengines or false
    local yardLua = record.respond.yard
    local yard64 = ConvertStringTo64Bit(tostring(record.respond.yard))
    
    -- specbuilt
    -- isremoverespondwares seçilmemiş ise zaten planda bir değişiklik yapılmadı neden luadan üretelim?
    if #menu.respondwares > 0 and  isremoverespondwares then
        
        --[[
            Task eklediğimizde olan olaylar:
                buildercomponent = 0, queueposition > 0 ve component = 0 değerlerindedir
                1- md içinde anında event_player_build_added tetikleniyor (sadece build ve istasyon bilgileri aktif oluyor)
                2- henüz biz lua içinden çıkamış oluyoruz
                3- luadan çıktıktan sonra
                    a - progress başlamış olabilir queueposition = 0, buildercomponent(processor) > 0 ve component > 0
                        md içindeki olayları geciktireceğiz
                        luadan çıktıktan sonra  
                            * rfm key bilgileri ve taskinfo bilgileri md içine gönderiyoruz
                            * md build_add build_started başladığında bu bilgilerle kıyaslıyarak takibini yapıyoruz
                    b - başlatma takibini burda yapmadığımız için addtask verdiğimiz anda progress false dır ve queueposition > 0 olacaktır
                * - queueposition > 0, buildercomponent(processor) = 0 ve component = 0 (malzeme eksikliği)
                * - queueposition > 0, buildercomponent(processor) = 0 ve component = 0 (tüm processors ler dolu)
        ]]
        local newshipplan = menu.tablecopy(record.tShipPlan)
        local enginelots = menu.getEngineSlotsPossibleWaresFromStation(yard64, record.macro, record.tShipPlan )
        newshipplan = menu.get_Removed_RespondWares_FromShipPlan(record.tShipPlan, menu.respondwares, record.macro, true, usestationengines and enginelots )

        local BuildTaskStack = { 
            fleetID = fleetID,
            shipID = shipID,
            shipyard = record.respond.yard,
            name = record.name,
            macro = record.macro,
            tShipPlan = newshipplan,
            tIndividualInstructions = record.tIndividualInstructions,
            paintmodwareid = record.tPaintModWareId.installed or nil,
            tBulkCrew = record.tBulkCrew,
            isdebug = xdebug
        }
        
        SignalObject(playerID, "RebuildShips.forcestart",  BuildTaskStack  )

    end

    PlaySound("rfm_button_click_1")
    
end

function menu.pull_and_add_build_construct_to_ship(BuildTaskStacks)
    
    local BuildTaskStack = BuildTaskStacks[1]

    local fleetID = tonumber(BuildTaskStack.fleetID)
    local shipID = tonumber(BuildTaskStack.shipID)
    local yard64 = ConvertStringTo64Bit(tostring(BuildTaskStack.shipyard))
    local name = tostring(BuildTaskStack.name)
    local macro = tostring(BuildTaskStack.macro)
    local newshipplan = menu.tablecopy(BuildTaskStack.tShipPlan)
    local tIndividualInstructions = BuildTaskStack.tIndividualInstructions
    local paintmodwareid = BuildTaskStack.paintmodwareid or nil
    local tBulkCrew = BuildTaskStack.tBulkCrew
    local batchprocessing = BuildTaskStack.batchprocessing or false
    local xdebug = (tonumber(BuildTaskStack.isdebug) == 1)

    -- lua açıksa RebuildCue tablosunu güncelleyelim, refresh ekranı için lazım bize
    if menu.isShowingMenu then    
        if BuildTaskStack.RebuildCue then
            if shipID ~= 0 then
                if not menu.RM_RebuildCues then
                    menu.RM_RebuildCues = {}
                end
                if not menu.RM_RebuildCues[fleetID] then
                    menu.RM_RebuildCues[fleetID] = {}
                end
                menu.RM_RebuildCues[fleetID][shipID] = BuildTaskStack.RebuildCue
            end
        end
    end
    
    local strComponent = menu.Convert_ID_To_StrComponent(fleetID, shipID)

    
    if yard64 ~= 0 then

        if menu.paused then
            Unpause(true)
            --menu.paused = nil
        end

        local isplayerowned = GetComponentData(yard64, "isplayerowned")

        local objectprice, objectcrewprice = menu.get_ShipPriceFromStation(yard64, macro, newshipplan, tBulkCrew)
        
        local fixupgradetypes = { 'shield', 'engine', 'thruster', 'weapon', 'turret' }
        for i,upgradetype in ipairs(fixupgradetypes)  do
            local newupgradetable = nil
            local fixit
            for k,v in ipairs(newshipplan[upgradetype])  do
                if not v.noneslot then
                    if tonumber(v.a_slot.slot) ~= k then
                        fixit = true
                        break
                    end
                end
            end
            if fixit then
                for k,v in ipairs(newshipplan[upgradetype])  do
                    if not newupgradetable then
                        newupgradetable = {}
                    end
                    if not v.noneslot then
                        newupgradetable[tonumber(v.a_slot.slot)] = v
                    end
                end
                newshipplan[upgradetype] = newupgradetable
            end
        end


        local haspaid 
        if not isplayerowned then
            -- Peşin ödeyin, inşaat tamamlandığında parayı alın
            if (objectprice + objectcrewprice) > 0 then
                TransferPlayerMoneyTo( 1 * (objectprice + objectcrewprice), yard64)
                haspaid = objectprice + objectcrewprice
            end
        end
    
        local BuildTaskID = 0
        local VerStr = getVersionString()
        if tonumber(VerStr) < 7.50 then
            BuildTaskID = menu.add_build_to_construct_ship7( yard64, macro, newshipplan, tIndividualInstructions, tBulkCrew, name, haspaid, (objectprice + objectcrewprice), nil, nil, paintmodwareid )
            --local x = xdebug and DebugError("    pull_and_add_build_construct_to_ship() DETECTED X4 VERSION UNDER 7.50. RFM_" .. tostring(fleetID) .. "_" .. tostring(shipID) .. " macro = " .. tostring(macro) )
        else
            BuildTaskID = menu.add_build_to_construct_ship75( yard64, macro, newshipplan, tIndividualInstructions, tBulkCrew, name, haspaid, (objectprice + objectcrewprice), nil, nil, paintmodwareid )
            --local x = xdebug and DebugError("    pull_and_add_build_construct_to_ship() DETECTED X4 VERSION 7.50 or above. RFM_" .. tostring(fleetID) .. "_" .. tostring(shipID) .. " macro = " .. tostring(macro) )
        end
        
        if BuildTaskID ~= 0 then
            local buildtaskinfo = C.GetBuildTaskInfo(BuildTaskID)
            local taskid_LUA =  ConvertStringToLuaID(tostring(BuildTaskID))
            local taskid_64 =  ConvertStringTo64Bit(tostring(taskid_LUA))
            local strHex = string.format("0x%x", taskid_64)

            local buildingcontainer64 = ConvertStringTo64Bit(tostring(buildtaskinfo.buildingcontainer))
            local component64 = ConvertStringTo64Bit(tostring(buildtaskinfo.component))
            local buildercomponent64 = ConvertStringTo64Bit(tostring(buildtaskinfo.buildercomponent))

            local time = C.GetCurrentGameTime()

            if buildingcontainer64 ~= 0 then

                table.remove(BuildTaskStacks, 1)
                if #BuildTaskStacks == 0 then
                    SetNPCBlackboard(playerID, "$BuildTaskStacks", nil)
                else
                    SetNPCBlackboard(playerID, "$BuildTaskStacks", BuildTaskStacks)
                end

                local entry = { 
                    fleetID = fleetID, 
                    shipID = shipID, 
                    id = strHex, 
                    buildingcontainer = ConvertStringToLuaID(tostring(buildtaskinfo.buildingcontainer)), 
                    macro = ffi.string(buildtaskinfo.macro), 
                    component = ConvertStringToLuaID(tostring(buildtaskinfo.component)), 
                    buildercomponent = ConvertStringToLuaID(tostring(buildtaskinfo.buildercomponent)), 
                    queueposition = buildtaskinfo.queueposition, 
                    price = tonumber(buildtaskinfo.price), 
                    ismissingresources = buildtaskinfo.ismissingresources, 
                    batchprocessing = batchprocessing,
                    time = time,
                    BuildTaskIDH = strHex,
                    BuildTaskIDL = tonumber(strHex),
                    BuildTaskIDC = ConvertStringToLuaID(tostring(buildtaskinfo.id))
                }
                
                SignalObject(ConvertStringTo64Bit(tostring(C.GetPlayerID())), "rfm_buildtask_added", entry)

                local x = xdebug and DebugError(menu.name .. ".Completed pull_and_add_build_construct_to_ship {" .. tostring(fleetID) .. "}.{" .. tostring(shipID) .. "} macro = " .. tostring(macro) .. " on shipyard '" .. tostring(GetComponentData(yard64, "name")) .. "' , isShowingMenu = " .. tostring(menu.isShowingMenu)  .. "  - - Left #BuildTaskStacks = " .. tostring(#BuildTaskStacks) )
                if menu.isShowingMenu then
                    menu.refreshMenuFrame()
                end 
            else
                DebugError(menu.name .. ".pull_and_add_build_construct_to_ship() buildingcontainer64 is nil @_fikret" )
            end
        else
            DebugError(menu.name ..".pull_and_add_build_construct_to_ship() BuildTaskID is 0 @_fikret" )
        end
    else
        DebugError(menu.name .. ".pull_and_add_build_construct_to_ship() shipyard is null @_fikret" )
    end

    if menu.paused then
        Pause(true)
        menu.paused = nil
    end

    --SetNPCBlackboard(playerID, "$BuildTaskStacks", nil)
    --menu.tablePrint(BuildTaskStacks, " BuildTaskStacks = ", true, true)
end

local function add_build_to_construct_ship_from_MD(_, params)

    local BuildTaskStacks = GetNPCBlackboard(playerID, "$BuildTaskStacks")

    if not BuildTaskStacks then DebugError(menu.name .. ", player.entity.$BuildTaskStacks = nil must be a list @_fikret"); return; end

    if #BuildTaskStacks > 0 then

        menu.paused = nil
        if C.IsGamePaused() then
            menu.paused = true
        end

        menu.pull_and_add_build_construct_to_ship(BuildTaskStacks)

    else
        DebugError(menu.name .. ".add_build_to_construct_ship_from_MD() BuildTaskStacks is EMPTY @_fikret" )
    end

end
RegisterEvent("add_build_to_construct_ship_from_MD", add_build_to_construct_ship_from_MD)


local function rfm_Data_Changed(_, params)
    
    local RFM_DATA_Stacks = GetNPCBlackboard(playerID, "$RFM_DATA_Stacks")
    if not RFM_DATA_Stacks then DebugError(menu.name .. ", player.entity.$RFM_DATA_Stacks = nil must be a list"); return; end
    
    if #RFM_DATA_Stacks > 0 then

        local RFM_DATA_Stack = RFM_DATA_Stacks[1]

        local fleetID = RFM_DATA_Stack.fleetID and tonumber(RFM_DATA_Stack.fleetID) or nil
        local shipID = RFM_DATA_Stack.shipID and tonumber(RFM_DATA_Stack.shipID) or nil
        local Record = RFM_DATA_Stack.Record or nil
        local RebuildCue = RFM_DATA_Stack.RebuildCue or nil
        local RM_Fleet = RFM_DATA_Stack.RM_Fleet or nil
        local description  = tostring(RFM_DATA_Stack.description)

        --menu.tablePrint(RFM_DATA_Stack, "RFM_DATA_Stack = {" .. tostring(fleetID) .. "}.{" .. tostring(shipID) .. "}", false )
        --[[
        <signal_cue_instantly cue="SendLua_DataChanged" param="table[
            $fleetID = $RFMKey,
            $shipID = $ShipKey,
            $Record = Main.$FleetRecords.{$RFMKey}.{$ShipKey},
            $RebuildCue = Main.$RebuildCues.{$RFMKey}.{$ShipKey},
            $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
            $description = 'Build Started'
        ]" chance="player.entity.$Flag_RFM_Menu? * 100"/>
        ]]
        if fleetID then
            if RM_Fleet then
                menu.RM_Fleets[fleetID] = RM_Fleet
            end
            if not menu.RM_FleetRecords[fleetID] then
                menu.RM_FleetRecords[fleetID] = {}
            end
            if not menu.RM_RebuildCues[fleetID] then
                menu.RM_RebuildCues[fleetID] = {}
            end
            if shipID then
                if Record then
                    menu.RM_FleetRecords[fleetID][shipID] = Record
                end
                menu.RM_RebuildCues[fleetID][shipID] = RebuildCue
            else
                if Record then
                    menu.RM_FleetRecords[fleetID] = Record
                end
                if RebuildCue then
                    menu.RM_RebuildCues[fleetID] = RebuildCue
                end
            end

            local x = xdebug and DebugError(menu.name .. ".rfm_Data_Changed.{" .. tostring(fleetID) .. "}" .. (shipID and (".{" .. tostring(shipID) .. "}") or "") .. ".[" .. tostring(description) .. "]" .. (RM_Fleet and ".[RM_Fleet]" or "") .. (Record and ".[Record]" or "") .. (RebuildCue and ".[RebuildCue]" or "") .. " - - Left #RFM_DATA_Stacks = " .. tostring(#RFM_DATA_Stacks - 1) )
            

            menu.refreshMenuFrame(true)
        else
            DebugError(menu.name .. ".rfm_Data_Changed().fleetID is nil. @_Fikret".. " - - Left #RFM_DATA_Stacks = " .. tostring(#RFM_DATA_Stacks - 1) )
        end

        table.remove(RFM_DATA_Stacks, 1)

        if #RFM_DATA_Stacks == 0 then
            SetNPCBlackboard(playerID, "$RFM_DATA_Stacks", nil)
        else
            SetNPCBlackboard(playerID, "$RFM_DATA_Stacks", RFM_DATA_Stacks)
        end

    end

end
RegisterEvent("rfmData.changed", rfm_Data_Changed)


--- build construct, rebuild all ships
---@param forcerebuildtimerstatus any   -- true or false , 'default' false
---@param isAllShips any                -- true or false , 'default' false
function menu.buttonStartRebuildShips(forcerebuildtimerstatus, isAllShips)

    local fleetID = menu.Selected.fleetID
    local shipID = menu.Selected.shipID
    local strComponent = menu.Convert_ID_To_StrComponent(fleetID, shipID)
    
    forcerebuildtimerstatus = forcerebuildtimerstatus or false
    isAllShips = isAllShips or false
    
    local passingcriterias = not isAllShips and {'price'} or nil

    if not isAllShips then
        PlaySound("rfm_button_click_1")
    end
    
    SignalObject(playerID, "RebuildShips.start", {fleetID = fleetID, shipID = shipID, isAllShips = isAllShips, rebuildtimerstatus = forcerebuildtimerstatus, passingcriterias = passingcriterias } )
    
end
--- cancel que construct, cancel rebuiltimer, cancell all rebuildtimers and que constructs
---@param forcerebuildtimerstatus any   -- true or false , 'default' false
---@param isAllShips any                -- true or false , 'default' false
function menu.buttonCancelRebuildShips(forcerebuildtimerstatus, isAllShips)
    
    local fleetID = menu.Selected.fleetID
    local shipID = menu.Selected.shipID
    forcerebuildtimerstatus = forcerebuildtimerstatus or false
    isAllShips = isAllShips or false

    if not isAllShips then
        PlaySound("rfm_button_click_1")
        menu.refreshMenuFrame(true)
    end
    SignalObject(playerID, "RebuildShips.cancel", {fleetID = fleetID, shipID = shipID, isAllShips = isAllShips, rebuildtimerstatus = forcerebuildtimerstatus } )
    
end
--- build construct, build constructs all rebuildtimers OR cancel que construct, cancel rebuiltimer, cancell all rebuildtimers and que constructs
---@param rebuildtimerstatus any    -- 'RebuildTimerStatus Changed' event 1 (on) or 0 (off)
function menu.buttonRebuildTimerStatusChanged(rebuildtimerstatus)

    local fleetID = menu.Selected.fleetID
    local shipID = menu.Selected.shipID
    
    PlaySound("toggle_button_on")
    menu.RM_Fleets[menu.Selected.fleetID].rebuildtimerstatus = rebuildtimerstatus and 1 or 0    -- md datasında true false değerleri 1 0 olarak geliyor

    if menu.propertySorterType == "rebuildtimer" or menu.propertySorterType == "rebuildtimerinverse" then
        menu.forcefocusfleetID = menu.Selected.fleetID
    end
    menu.refreshMenuFrame(true)

    SignalObject(playerID, "rebuildtimerstatus.change", {fleetID = fleetID, rebuildtimerstatus = rebuildtimerstatus } )

end

local function rebuildTimerStatusChange_completed(_, params)
    
    local fleetID = menu.Selected.fleetID
    if tonumber(menu.RM_Fleets[menu.Selected.fleetID].rebuildtimerstatus) == 1 then
        menu.buttonStartRebuildShips(true, true)
    else
        menu.buttonCancelRebuildShips(false, true)
    end

end
RegisterEvent("rebuildtimerstatuschange.completed", rebuildTimerStatusChange_completed)



function menu.buttonRFMClone()
    local xdebug = debug0 and DebugError("menu.buttonRFMClone")
    local rfmKey = menu.Selected.fleetID
    local shipkey = menu.Selected.shipID
    local autobuildafterclone = false
    local isSound = true
    SignalObject(ConvertStringTo64Bit(tostring(C.GetPlayerID())), "RFMClone", { fleetID = menu.Selected.fleetID , shipID = menu.Selected.shipID, autobuildafterclone = autobuildafterclone, isSound = isSound } )
end

local function clone_completed(_, params)
    -- params is fleetID
    if tonumber(params) > 0 then
        menu.Selected.fleetID = params
        menu.Selected.shipID = 1
        menu.Selected.selectedGroup = nil
        menu.Selected.strComponent = menu.Convert_ID_To_StrComponent(menu.Selected.fleetID, menu.Selected.shipID)
        menu.highlightedbordercomponent = menu.Selected.strComponent
        menu.forcefocusfleetID = menu.Selected.fleetID
        menu.noupdate = nil
        menu.changedFleet = true
        --PlaySound("rfm_button_click_1")
        menu.cloned = nil
        menu.refreshMenuFrame(true)
        
        if menu.editedSettings.autobuildafterclone then
            SignalObject(playerID, "RebuildShips.start", {fleetID = menu.Selected.fleetID, isAllShips = true } )
        end
        
    end
end
RegisterEvent("clone.completed", clone_completed)



local function changed_buildstations()
    playerID = playerID or ConvertStringTo64Bit(tostring(C.GetPlayerID()))
    menu.active_stations = GetNPCBlackboard(playerID, "$active_stations")
    menu.blacklist_stations = GetNPCBlackboard(playerID, "$blacklist_stations")
    if menu.WindowFrameMode == "options" then
        menu.refreshCenterFrame()
    end
end
RegisterEvent("buildstations.changed", changed_buildstations)



function menu.buttonRestoreDefault()
    menu.editedSettings = menu.tablecopy(menu.defaultSettings)
    menu.Set_Md_Settings("Restore to Default Settings")
    PlaySound("rfm_button_click_2")
    menu.display()
end

function menu.checkbox_ShowInNotification(_, checked)
	menu.editedSettings.shownotification = checked
    menu.Set_Md_Settings("shownotification", menu.editedSettings.shownotification )
end
function menu.checkbox_showhelp(_, checked)
	menu.editedSettings.showhelp = checked
    menu.Set_Md_Settings("showhelp", menu.editedSettings.showhelp )
end
function menu.checkbox_write_to_logbook(_, checked)
	menu.editedSettings.write_to_logbook = checked
    menu.Set_Md_Settings("write_to_logbook", menu.editedSettings.write_to_logbook )
end

function menu.checkbox_useTagOnName(_, checked)
	menu.editedSettings.useTagOnName = checked
    menu.Set_Md_Settings("useTagOnName" , menu.editedSettings.useTagOnName)

    for _, fleet in pairs( menu.RM_Fleets or {} ) do
        local objectid = fleet.object
        local object64 = ConvertStringTo64Bit( tostring(objectid) )
        if tonumber(fleet.shipid) > 0 and  object64 ~= 0 then
            local objectname = fleet.name
            if checked then
                local CaptionTag = menu.defaultSettings.RMShipCaptionTag
                CaptionTag = CaptionTag:gsub("%$KEY%$" , tostring(fleet.id))
                objectname = objectname .. " " .. Helper.convertColorToText(menu.HexToColor(fleet.alertstatus.color)) .. CaptionTag .. "\027X"
            end
            SetComponentName(objectid, objectname)    
        end
    end

end


function menu.checkbox_UsePlayerYards(_, checked)
	menu.editedSettings.UsePlayerYards = checked
    menu.Set_Md_Settings("UsePlayerYards" , menu.editedSettings.UsePlayerYards)
end
function menu.checkbox_UseNPCYards(_, checked)
	menu.editedSettings.UseNPCYards = checked
    menu.Set_Md_Settings("UseNPCYards", menu.editedSettings.UseNPCYards)
end

function menu.checkbox_blacklist(checked, component64)
    
    if checked then
        table.insert(menu.blacklist_stations, ConvertStringToLuaID(tostring(component64)))
        --menu.tablePrint(menu.blacklist_stations, "ADDED .blacklist_stations = " , true, true)
    else
        for k,v in ipairs(menu.blacklist_stations) do
            if ConvertStringTo64Bit(tostring(v)) == component64 then
                table.remove(menu.blacklist_stations, k)
                --menu.tablePrint(menu.blacklist_stations, "REMOVED .blacklist_stations = " .. tostring(k), true, true)
                break
            end
        end
    end

    AddUITriggeredEvent(menu.name, "changed.blacklist", menu.blacklist_stations)

end

function menu.checkbox_ValidUpdatesPYardsequipments(_, checked)
	menu.editedSettings.ValidUpdates.PYards.equipments = checked
    menu.Set_Md_Settings("ValidUpdates.PYards.equipments", menu.editedSettings.ValidUpdates.PYards.equipments)
end
function menu.checkbox_ValidUpdatesPYardspeoples(_, checked)
	menu.editedSettings.ValidUpdates.PYards.peoples = checked
    menu.Set_Md_Settings("ValidUpdates.PYards.peoples", menu.editedSettings.ValidUpdates.PYards.peoples)
end
function menu.checkbox_ValidUpdatesNYardsequipments(_, checked)
	menu.editedSettings.ValidUpdates.NYards.equipments = checked
    menu.Set_Md_Settings("ValidUpdates.NYards.equipments", menu.editedSettings.ValidUpdates.NYards.equipments)
end
function menu.checkbox_ValidUpdatesNYardspeoples(_, checked)
	menu.editedSettings.ValidUpdates.NYards.peoples = checked
    menu.Set_Md_Settings("ValidUpdates.NYards.peoples", menu.editedSettings.ValidUpdates.NYards.peoples)
end



function menu.slidercell_NextRetryTime(_, value)
	menu.editedSettings.NextRetryTime = value
    menu.Set_Md_Settings("NextRetryTime", value)
end
function menu.checkbox_pilotcloning(_, checked)
	menu.editedSettings.pilotcloning = checked
    menu.Set_Md_Settings("pilotcloning", menu.editedSettings.pilotcloning)
end
function menu.checkbox_personnelcloning(_, checked)
	menu.editedSettings.personnelcloning = checked
    menu.Set_Md_Settings("personnelcloning", menu.editedSettings.personnelcloning)
end
function menu.checkbox_autobuildafterclone(_, checked)
	menu.editedSettings.autobuildafterclone = checked
    menu.Set_Md_Settings("autobuildafterclone", menu.editedSettings.autobuildafterclone)
end

function menu.slidercell_playermoneythreshold(_, value)
	menu.editedSettings.playermoneythreshold = value
    menu.Set_Md_Settings("playermoneythreshold", value)
end
function menu.slidercell_maxallowedpricepership(_, value)
	menu.editedSettings.maxallowedpricepership = value
    menu.Set_Md_Settings("maxallowedpricepership", value)
end


function menu.checkbox_DebugChance(_, checked)
	menu.editedSettings.DebugChance = checked and 100 or 0
    menu.Set_Md_Settings("DebugChance", menu.editedSettings.DebugChance)
end
function menu.checkbox_DeepDebug(_, checked)
	menu.editedSettings.DeepDebug = checked and 100 or 0
    menu.Set_Md_Settings("DeepDebug", menu.editedSettings.DeepDebug)
end
function menu.checkbox_ChangesOnFleetDebug(_, checked)
	menu.editedSettings.ChangesOnFleetDebug = checked and 100 or 0
    menu.Set_Md_Settings("ChangesOnFleetDebug", menu.editedSettings.ChangesOnFleetDebug)
end
function menu.checkbox_FleetLockStatusDebug(_, checked)
	menu.editedSettings.FleetLockStatusDebug = checked and 100 or 0
    menu.Set_Md_Settings("FleetLockStatusDebug", menu.editedSettings.FleetLockStatusDebug)
end

function menu.checkbox_BuildTasksChance(_, checked)
	menu.editedSettings.BuildTasksChance = checked and 100 or 0
    menu.Set_Md_Settings("BuildTasksChance", menu.editedSettings.BuildTasksChance)
end


function menu.checkbox_isDebugFileMode(_, checked)
	menu.editedSettings.isDebugFileMode = checked

    menu.editedSettings.DFD.MainCommands = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.MainCommands or false
    menu.editedSettings.DFD.MainCommandsDeep = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.MainCommandsDeep or false
    menu.editedSettings.DFD.RebuildCues = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.RebuildCues or false
    menu.editedSettings.DFD.Fleets = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.Fleets or false
    menu.editedSettings.DFD.FleetsDeep = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.FleetsDeep or false
    menu.editedSettings.DFD.Records = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.Records or false
    menu.editedSettings.DFD.RecordsDeep = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.RecordsDeep or false
    menu.editedSettings.DFD.tShipPlan = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.tShipPlan or false
    menu.editedSettings.DFD.tShipPlanDeep = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.tShipPlanDeep or false
    menu.editedSettings.DFD.tIndividualInstructions = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.tIndividualInstructions or false
    menu.editedSettings.DFD.tIndividualInstructionsDeep = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.tIndividualInstructionsDeep or false
    menu.editedSettings.DFD.tBulkCrew = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.tBulkCrew or false
    menu.editedSettings.DFD.Command = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.Command or false
    menu.editedSettings.DFD.CommandDeep = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.CommandDeep or false
    menu.editedSettings.DFD.reBuildCue = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.reBuildCue or false
    menu.editedSettings.DFD.reBuildCueDeep = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.reBuildCueDeep or false
    menu.editedSettings.DFD.reBuild = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.reBuild or false
    menu.editedSettings.DFD.reBuildDeep = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.reBuildDeep or false
    menu.editedSettings.DFD.reAssignment = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.reAssignment or false
    menu.editedSettings.DFD.reAssignmentDeep = menu.editedSettings.isDebugFileMode and menu.editedSettings.DFD.reAssignmentDeep or false
    menu.refreshRightFrame()

    menu.Set_Md_Settings("isDebugFileMode", menu.editedSettings.isDebugFileMode)
end
function menu.checkbox_DFD_MainCommands(_, checked)
	menu.editedSettings.DFD.MainCommands = checked
    menu.Set_Md_Settings("DFD.MainCommands", menu.editedSettings.DFD.MainCommands)
end
function menu.checkbox_DFD_MainCommandsDeep(_, checked)
	menu.editedSettings.DFD.MainCommandsDeep = checked
    menu.Set_Md_Settings("DFD.MainCommandsDeep", menu.editedSettings.DFD.MainCommandsDeep)
end
function menu.checkbox_DFD_RebuildCues(_, checked)
	menu.editedSettings.DFD.RebuildCues = checked
    menu.Set_Md_Settings("DFD.RebuildCues", menu.editedSettings.DFD.RebuildCues, "refresh.DebugFiles")
end

function menu.checkbox_DFD_Fleets(_, checked)
	menu.editedSettings.DFD.Fleets = checked
    menu.Set_Md_Settings("DFD.Fleets", menu.editedSettings.DFD.Fleets, "refresh.DebugFiles")
end
function menu.checkbox_DFD_FleetsDeep(_, checked)
	menu.editedSettings.DFD.FleetsDeep = checked
    menu.Set_Md_Settings("DFD.FleetsDeep", menu.editedSettings.DFD.FleetsDeep, "refresh.DebugFiles")
end
function menu.checkbox_DFD_Records(_, checked)
	menu.editedSettings.DFD.Records = checked
    menu.Set_Md_Settings("DFD.Records", menu.editedSettings.DFD.Records, "refresh.DebugFiles")
end
function menu.checkbox_DFD_RecordsDeep(_, checked)
	menu.editedSettings.DFD.RecordsDeep = checked
    menu.Set_Md_Settings("DFD.RecordsDeep", menu.editedSettings.DFD.RecordsDeep, "refresh.DebugFiles")
end
function menu.checkbox_DFD_tShipPlan(_, checked)
	menu.editedSettings.DFD.tShipPlan = checked
    menu.Set_Md_Settings("DFD.tShipPlan", menu.editedSettings.DFD.tShipPlan, "refresh.DebugFiles")
end
function menu.checkbox_DFD_tShipPlanDeep(_, checked)
	menu.editedSettings.DFD.tShipPlanDeep = checked
    menu.Set_Md_Settings("DFD.tShipPlanDeep", menu.editedSettings.DFD.tShipPlanDeep, "refresh.DebugFiles")
end
function menu.checkbox_DFD_tIndividualInstructions(_, checked)
	menu.editedSettings.DFD.tIndividualInstructions = checked
    menu.Set_Md_Settings("DFD.tIndividualInstructions", menu.editedSettings.DFD.tIndividualInstructions, "refresh.DebugFiles")
end
function menu.checkbox_DFD_tIndividualInstructionsDeep(_, checked)
	menu.editedSettings.DFD.tIndividualInstructionsDeep = checked
    menu.Set_Md_Settings("DFD.tIndividualInstructionsDeep", menu.editedSettings.DFD.tIndividualInstructionsDeep, "refresh.DebugFiles")
end
function menu.checkbox_DFD_tBulkCrew(_, checked)
	menu.editedSettings.DFD.tBulkCrew = checked
    menu.Set_Md_Settings("DFD.tBulkCrew", menu.editedSettings.DFD.tBulkCrew, "refresh.DebugFiles")
end
function menu.checkbox_DFD_Command(_, checked)
	menu.editedSettings.DFD.Command = checked
    menu.Set_Md_Settings("DFD.Command", menu.editedSettings.DFD.Command)
end
function menu.checkbox_DFD_CommandDeep(_, checked)
	menu.editedSettings.DFD.CommandDeep = checked
    menu.Set_Md_Settings("DFD.CommandDeep", menu.editedSettings.DFD.CommandDeep)
end
function menu.checkbox_DFD_reBuildCue(_, checked)
	menu.editedSettings.DFD.reBuildCue = checked
    menu.Set_Md_Settings("DFD.reBuildCue", menu.editedSettings.DFD.reBuildCue, "refresh.DebugFiles")
end
function menu.checkbox_DFD_reBuildCueDeep(_, checked)
	menu.editedSettings.DFD.reBuildCueDeep = checked
    menu.Set_Md_Settings("DFD.reBuildCueDeep", menu.editedSettings.DFD.reBuildCueDeep, "refresh.DebugFiles")
end
function menu.checkbox_DFD_reBuild(_, checked)
	menu.editedSettings.DFD.reBuild = checked
    menu.Set_Md_Settings("DFD.reBuild", menu.editedSettings.DFD.reBuild)
end
function menu.checkbox_DFD_reBuildDeep(_, checked)
	menu.editedSettings.DFD.reBuildDeep = checked
    menu.Set_Md_Settings("DFD.reBuildDeep", menu.editedSettings.DFD.reBuildDeep)
end
function menu.checkbox_DFD_reAssignment(_, checked)
	menu.editedSettings.DFD.reAssignment = checked
    menu.Set_Md_Settings("DFD.reAssignment", menu.editedSettings.DFD.reAssignment)
end
function menu.checkbox_DFD_reAssignmentDeep(_, checked)
	menu.editedSettings.DFD.reAssignmentDeep = checked
    menu.Set_Md_Settings("DFD.reAssignmentDeep", menu.editedSettings.DFD.reAssignmentDeep)
end



-- ----------------------------------------------------
-- MENU FUNCTONS
-- ----------------------------------------------------
menu.updateInterval = 0.05

function menu.onUpdate()
    local curtime = getElapsedTime()


    if menu.mainFrame then
        menu.mainFrame:update()
    end

    if menu.LeftFrame then
        menu.LeftFrame:update()
    end
    if menu.CenterFrame then
        menu.CenterFrame:update()
    end
    if menu.RightFrame then
        menu.RightFrame:update()
    end


    local refreshing = false
    --[[
    if ((menu.lastDataCheck + 1) < curtime) and not menu.noupdate then
        local xdebug = debugGetData and DebugError("lastDataCheck = " .. menu.lastDataCheck .. "  curtime=" .. curtime)
        menu.Check_mdData()
    end
    ]]
    if (menu.queueupdate and not menu.noupdate) then
        local xdebug = debug0 and DebugError("REFRESHING   queue update ")
        menu.queueupdate = nil
        menu.refreshMenuFrame()
        return
    end
    
    
    if menu.mdDataChanged and ((not menu.createMenuFrameRunning) and (not menu.createRightFrameRunning)) then
        local xdebug = debug0 and DebugError("REFRESHING   mdDataChanged")
        menu.mdDataChanged = nil
        SetNPCBlackboard(playerID, "$md_RFM_DataChanged", false)
        menu.refreshMenuFrame()
        return
    end

    -- 2 sn de bir refresh gerekli mi, ordericons grubun güncellenmesi için gerekli
    if menu.lastrefresh + 2.0 < curtime then
        refreshing = true
    end
    
    if refreshing and (not menu.noupdate) and (not menu.createMenuFrameRunning) then
        local xdebug = debug0 and DebugError("REFRESHING   lastrefresh 2sec")
		menu.lastrefresh = curtime
		menu.refreshMenuFrame()
	end
    
    if menu.refreshMainFrame then
        if not menu.createMainFrameRunning then
            
            local xdebug = debug0 and DebugError("REFRESHING   refreshMainFrame true" .. "  menu.WindowFrameMode = " .. tostring(menu.WindowFrameMode))
            menu.selectedRows.sideBar = Helper.currentTableRow[menu.sideBarTableID]

            menu.createMainFrame()
            menu.refreshMainFrame = nil
        end
    end

end

function menu.onRowChanged(row, rowdata, uitable, modified, input, source)

    menu.changedFleet = nil
    if source ~= "auto"then
        --DebugError("menu.Selected.fleetID = " .. tostring(menu.Selected.fleetID) .. " , menu.Selected.shipID = " .. tostring(menu.Selected.shipID) .. " , menu.Selected.selectedGroup = " .. tostring(menu.Selected.selectedGroup) )
    end
    
    -- BAKILACAK
    -- dropdrowm açıldıktan sonra seçim yapmadan kapatılrısa kapanma durumunu nasıl anlayacağız
    --menu.noupdate = false

    local xprint = false
    if uitable == menu.TableID.Fleets then
        if menu.Selected.fleetID ~= rowdata then
            if (tonumber(menu.Selected.fleetID) == 0 ) or (source ~= "auto") then
                menu.closeContextMenu()

                local fleetID = rowdata
                local shipID = 1
                menu.Selected.fleetID = fleetID
                menu.Selected.shipID = shipID
                menu.Selected.strComponent = menu.Convert_ID_To_StrComponent(fleetID, shipID)
                menu.highlightedbordercomponent = menu.Selected.strComponent
                menu.Selected.selectedGroup = nil
                menu.highlightedborderstationcategory = nil


                menu.changedFleet = true

                --menu.isremoverespondwares = false
                menu.queueupdate = true
                xprint = true
            end
        end
    end
    if uitable == menu.TableID.Ships then
        
        if (source ~= "auto") then
            menu.changedShipRow = true
            menu.closeContextMenu()
        end

        if type(rowdata) == "table" then
            
            local strComponent = rowdata[2]
            local rfmKey, shipKey = menu.Convert_StrComponent_To_ID(strComponent)
            if (menu.Selected.shipID ~=  shipKey) or (menu.Selected.selectedGroup ~= rowdata[3])  then

                menu.changedShipRow = true

                menu.Selected.fleetID ,menu.Selected.shipID =  rfmKey, shipKey
                menu.Selected.strComponent = strComponent
                menu.highlightedbordercomponent = menu.Selected.strComponent

                menu.Selected.selectedGroup = nil
                menu.highlightedborderstationcategory = nil

                if rowdata[3] then 
                    menu.Selected.selectedGroup = rowdata[3]
                    menu.highlightedborderstationcategory = "subordinates" .. strComponent .. rowdata[3]
                end

                menu.queueupdate = true
            end
            if (source ~= "auto") and strComponent then
                xprint = true
                
            end
        end

    end

    if menu.changedShipRow or menu.changedFleet then
        menu.refreshMainFrame = true
    end

    local textDebug = string.format(
        [[ onRowChanged     <%s>    <component %s>
        TableID
            Fleets          = %s
            FleetsTab       = %s
            Ships           = %s
            Records%s       = %s
            Options.Left    = %s
            Options.Center  = %s
            Options.Stations= %s
            Options.Bottom  = %s
            Options.Right   = %s
            -----------------------
            uitable = %s    modified = %s   input = %s      source = %s
            row = %s        param rowdata = %s
            rowdata: %s
            -----------------------
            menu.
                selectedFleet = %s

                menu.topRows["manager"]["LeftFrame"]      = %s
                menu.selectedRows["manager"]["LeftFrame"] = %s
                menu.topRows["manager"]["CenterFrame"]      = %s
                menu.selectedRows["manager"]["CenterFrame"] = %s
                menu.topRows["manager"]["BottomL"]      = %s
                menu.selectedRows["manager"]["BottomL"] = %s
                menu.selectedCols["manager"]["BottomL"] = %s
                menu.topRows["manager"]["BottomR"]      = %s
                menu.selectedRows["manager"]["BottomR"] = %s
                menu.topRows["manager"]["RightFrame"]      = %s
                menu.selectedRows["manager"]["RightFrame"] = %s

                menu.topRows["options"]["LeftFrame"]      = %s
                menu.selectedRows["options"]["LeftFrame"] = %s
                menu.topRows["options"]["CenterFrame"]      = %s
                menu.selectedRows["options"]["CenterFrame"] = %s
                menu.topRows["options"]["Stations"]      = %s
                menu.selectedRows["options"]["Stations"] = %s
                menu.topRows["options"]["RightFrame"]      = %s
                menu.selectedRows["options"]["RightFrame"] = %s

            -----------------------
            shipsTableData.
                selected        = %s      
                selectedGroup   = %s
                settoprow       = %s
                setselectedrow  = %s
            ]] , 
            menu.WindowFrameMode, menu.Selected.strComponent,
            menu.TableID.Fleets,
            menu.TableID.FleetsTab,
            menu.TableID.Ships,
            menu.RightFrameMode, menu.TableID["Records" .. menu.RightFrameMode],
            menu.TableID.Options.Left,
            menu.TableID.Options.Center,
            menu.TableID.Options.Stations,
            menu.TableID.Options.Bottom,
            menu.TableID.Options.Right,
            uitable, modified, input, source,
            row, rowdata,
            ( type(rowdata) == "table" 
            and 
                "[2]component = " .. tostring(rowdata[2]) .. " , [3]group=" .. tostring(rowdata[3]) .. " , [1]( " .. tostring(rowdata[1]).. " )"
            or 
                "ship = " .. tostring(rowdata) .. "" .. ""
            ),
            menu.Selected.fleetID,
            menu.topRows["manager"]["LeftFrame"],
            menu.selectedRows["manager"]["LeftFrame"],
            menu.topRows["manager"]["CenterFrame"],
            menu.selectedRows["manager"]["CenterFrame"],
            menu.topRows["manager"]["BottomL"],
            menu.selectedRows["manager"]["BottomL"],
            menu.selectedCols["manager"]["BottomL"],
            menu.topRows["manager"]["BottomR"],
            menu.selectedRows["manager"]["BottomR"],
            menu.topRows["manager"]["RightFrame"],
            menu.selectedRows["manager"]["RightFrame"],
            menu.topRows["options"]["LeftFrame"],
            menu.selectedRows["options"]["LeftFrame"],
            menu.topRows["options"]["CenterFrame"],
            menu.selectedRows["options"]["CenterFrame"],
            menu.topRows["options"]["Stations"],
            menu.selectedRows["options"]["Stations"],
            menu.topRows["options"]["RightFrame"],
            menu.selectedRows["options"]["RightFrame"],
            menu.Selected.shipID, 
            menu.Selected.selectedGroup,
            menu.Selected.settoprow,
            menu.Selected.setselectedrow

        )

    local xdebug = debugWProps and xprint and DebugError(textDebug)
    

end

function menu.viewCreated(layer, ...)
    
    local a,b,c,d,e,f,g = ...
    
    local textDebug = string.format(
        [[ viewCreated  <%s Layer> <%s Mode>  RightFrameMode = %s   <component %s>
            1-a = %s
            2-b = %s
            3-c = %s
            4-d = %s
            5-e = %s
            6-f = %s
            7-g = %s
            -----------------------
            menu.shipsTableData.
                    fleetID         = %s
                    shipID          = %s      
                    selectedGroup   = %s
            -----------------------
            ]] , 
            config.layerInfo[layer].text, menu.WindowFrameMode, menu.RightFrameMode, menu.Selected.strComponent,
            a,b,c,d,e,f,g,
            menu.Selected.fleetID, menu.Selected.shipID, menu.Selected.selectedGroup
        )

    local xdebug = debugVCreated and DebugError(textDebug)

    
    if layer == config.mainLayer then
        menu.TableID.SideBar = a
        menu.sideBarTableID = a
        if (menu.WindowFrameMode == "manager") then
            menu.bottomBarTableID = c
        end
        menu.createMainFrameRunning = false
    end
    if layer == config.fleetsLayer then
        if menu.WindowFrameMode == "manager" then
            menu.TableID.FleetsTab = a
            menu.TableID.Fleets = b
            menu.TableID.BottomL = c
        else
            menu.TableID.Options.Left = a
        end
        menu.createLeftFrameRunning = false
    end
    if layer == config.shipsLayer then
        if menu.WindowFrameMode == "manager" then
            menu.TableID.Ships = a
            menu.TableID.BottomR = b
        else
            menu.TableID.Options.Center = a
            menu.TableID.Options.Stations = b
        end
        menu.createCenterFrameRunning = false
    end
    if layer == config.recordsLayer then
        if menu.WindowFrameMode == "manager" then
            -- orderHeaderTable sectionlarda en son çizilen tablodur
            menu.TableID["Records" .. menu.RightFrameMode] = a
            menu.TableID.orderHeaderTable = c or b 
            if menu.RightFrameMode == "objectrespond" and menu.isInfoModeValidFor(menu.Selected.strComponent, "objectrespond") then
                -- Bu Bölümde 4 tablo var 
                -- Top (a), tittle ve gemi adı alanı
                -- Middle(b), construction ya da rebuild durumunu belirten alan
                -- Bottom(c), respond bilgi alanı
                -- orderHeaderTable(d) Tableler var. Middle tabledeki seçili satırı tutacağız sadece. 
                menu.TableID["Records" .. menu.RightFrameMode] = b
                menu.TableID.orderHeaderTable = d
            end
        else
            menu.TableID.Options.Bottom = a
            menu.TableID.Options.Right = b
        end
        menu.createRightFrameRunning = false
    end
    if (not menu.createLeftFrameRunning) and (not menu.createCenterFrameRunning) and (not menu.createRightFrameRunning) then
        menu.createMenuFrameRunning = false    
    end
    
    local textDebug = string.format(
        [[ viewCreated  <%s Layer> <%s>Mode  RightFrameMode = %s   <component %s>
            -----------------------
            menu.shipsTableData.
                    fleetID         = %s
                    shipID          = %s      
                    selectedGroup   = %s
            -----------------------
                menu.topRows["manager"]["LeftFrame"]      = %s
                menu.selectedRows["manager"]["LeftFrame"] = %s

                menu.topRows["manager"]["CenterFrame"]          = %s
                menu.selectedRows["manager"]["CenterFrame"]     = %s

                menu.topRows["manager"]["BottomL"]      = %s
                menu.selectedRows["manager"]["BottomL"] = %s
                menu.selectedCols["manager"]["BottomL"] = %s

                menu.topRows["manager"]["BottomR"]          = %s
                menu.selectedRows["manager"]["BottomR"]     = %s
                menu.selectedCols["manager"]["BottomR"]     = %s

                menu.selectedRows["manager"]["orderHeaderTable"]    = %s
                menu.selectedCols["manager"]["orderHeaderTable"]    = %s

                menu.topRows["manager"]["RightFrame"]               = %s
                menu.selectedRows["manager"]["RightFrame"]          = %s
                menu.selectedCols["manager"]["RightFrame"]          = %s
                -----------------------
                menu.topRows["options"]["LeftFrame"]      = %s
                menu.selectedRows["options"]["LeftFrame"] = %s

                menu.topRows["options"]["CenterFrame"]      = %s
                menu.selectedRows["options"]["CenterFrame"] = %s
                menu.topRows["options"]["Stations"]         = %s
                menu.selectedRows["options"]["Stations"]    = %s

                menu.topRows["options"]["RightFrame"]      = %s
                menu.selectedRows["options"]["RightFrame"] = %s
            ]] , 
            config.layerInfo[layer].text, menu.WindowFrameMode, menu.RightFrameMode, menu.Selected.strComponent,
            menu.Selected.fleetID, menu.Selected.shipID, menu.Selected.selectedGroup,

            menu.topRows["manager"]["LeftFrame"],
            menu.selectedRows["manager"]["LeftFrame"],

            menu.topRows["manager"]["CenterFrame"],
            menu.selectedRows["manager"]["CenterFrame"],

            menu.topRows["manager"]["BottomL"],
            menu.selectedRows["manager"]["BottomL"],
            menu.selectedCols["manager"]["BottomL"],

            menu.topRows["manager"]["BottomR"],
            menu.selectedRows["manager"]["BottomR"],
            menu.selectedCols["manager"]["BottomR"],

            menu.selectedRows["manager"]["orderHeaderTable"],
            menu.selectedCols["manager"]["orderHeaderTable"],

            menu.topRows["manager"]["RightFrame"],
            menu.selectedRows["manager"]["RightFrame"],
            menu.selectedCols["manager"]["RightFrame"],

            menu.topRows["options"]["LeftFrame"],
            menu.selectedRows["options"]["LeftFrame"],
            menu.topRows["options"]["CenterFrame"],
            menu.selectedRows["options"]["CenterFrame"],
            menu.topRows["options"]["Stations"],
            menu.selectedRows["options"]["Stations"],
            menu.topRows["options"]["RightFrame"],
            menu.selectedRows["options"]["RightFrame"]

        )

    local xdebug = debugVCreated and DebugError(textDebug)

end
function menu.onInteractiveElementChanged(tableid)
    
    --DebugError("onInteractiveElementChanged   tableid = " .. tostring(tableid)  )
    local xdebug = debug0 and DebugError("onInteractiveElementChanged  " .. " tableid = " .. tostring(tableid)  )
    
    --menu.noupdate = false
    menu.lastactivetable = tableid
end
function menu.onCloseElement(dueToClose, layer)

    PlaySound("ui_negative_back")
    local xdebug = debug0 and DebugError("menu.onCloseElement " .. tostring(dueToClose) .. " layer " .. tostring(layer) )

    if layer == config.contextLayer then
        menu.closeContextMenu()
    else
        if menu.contextFrame then
            menu.closeContextMenu()
        end
        Helper.closeMenu(menu, dueToClose, layer )
        menu.cleanup()
    end

end

function menu.onButtonUp()
    --DebugError("B U T T O N    U P    menu.lastactivetable .. " .. tostring(menu.lastactivetable) .. "  , menu.noupdate = " .. tostring(menu.noupdate) )
    --menu.noupdate = false
end
function menu.onSelectElement(uitable, modified, row, isdblclick, input)
    --DebugError("onSelectElement    uitable .. " .. tostring(uitable) .. "  , modified = " .. tostring(modified) .. " , row = " .. tostring(row) .. "  , isdblclick = " .. tostring(isdblclick) .. " , row = " .. tostring(input) .. "  , menu.noupdate = " .. tostring(menu.noupdate) )
    --menu.noupdate = false
end
function menu.onColChanged(row, col, uitable)
    --DebugError("onColChanged    uitable .. " .. tostring(uitable) .. "  , row = " .. tostring(row) .. "  , col = " .. tostring(col) .. "  , menu.noupdate = " .. tostring(menu.noupdate)  )
    --menu.noupdate = false
end







-- ----------------------------------------------------
-- SORTERS
-- ----------------------------------------------------

function menu.sortGroupSlotSizeAndSlot(a, b, invert)
	if a.a_group.slotsize == b.a_group.slotsize then
		if invert then
			return a.a_group.slot > b.a_group.slot
		else
			return a.a_group.slot < b.a_group.slot
		end
	end
	if invert then
		return a.a_group.slotsize > b.a_group.slotsize
	else
		return a.a_group.slotsize < b.a_group.slotsize
	end
end

function menu.sortID(a, b, invert)
    if invert then
        return a.id > b.id
    else
        return a.id < b.id
    end
end

function menu.sortNameAndIDCode(a, b, invert)
    local a_name = a.name or "err"
    local b_name = b.name or "err"
    local a_idcode = a.idcode or "err"
    local b_idcode = b.idcode or "err"
    if a_name == b_name then
        --return menu.sortSector_ClassPurposeAndName(a, b)
        return a.name .. a_idcode < b_name .. b_idcode
    end
	if invert then
		return a_name > b_name
	else
		return a_name < b_name 
	end

end

function menu.sortSector_ClassPurposeAndName(a, b, invert)
	local sector_a_name = a.sector or ""
	local sector_b_name = b.sector or ""
	if sector_a_name == sector_b_name then
		return menu.sortShipsByClass_PurposeAndName(a, b)
	else
		if invert then
			return sector_a_name > sector_b_name
		else
			return sector_a_name < sector_b_name
		end
	end
end

function menu.sortCommanderNameAndIDCode(a, b, invert)
	if a.commander.name .. a.commander.idcode == b.commander.name .. b.commander.idcode then
        return menu.sortSector_ClassPurposeAndName(a, b)
	end
	if invert then
		return a.commander.name .. a.commander.idcode > b.commander.name .. b.commander.idcode
	else
		return a.commander.name .. a.commander.idcode < b.commander.name .. b.commander.idcode
	end
end

function menu.sortShipsByClass_PurposeAndName(a, b, invert)
	local aclass = config.classOrder[a.class] or 100
	local bclass = config.classOrder[b.class] or 100
	if aclass == bclass then
		local apurpose = (a.purpose ~= "") and Helper.purposeOrder[a.purpose] or 100
		local bpurpose = (b.purpose ~= "") and Helper.purposeOrder[b.purpose] or 100
		if apurpose == bpurpose then
            if a.name == b.name then
                return a.name .. a.idcode < b.name .. b.idcode
            end
            return a.name < b.name
		end
        return apurpose < bpurpose
    end
    if invert then
        return aclass > bclass
    else
        return aclass < bclass
    end
end
function menu.sortDamagedFleet(a, b, invert)
    local alocked = tostring(a.isLockedFleet)
    local blocked = tostring(b.isLockedFleet)

	if alocked == blocked then
        if a.alertstatus.level == b.alertstatus.level then
            return menu.sortShipsByClass_PurposeAndName(a, b, false) --(a, b, invert)    
        end
        if invert then
            return a.alertstatus.level > b.alertstatus.level
        else
            return a.alertstatus.level < b.alertstatus.level
        end
	end
	if invert then
		return alocked < blocked
	else
		return alocked > blocked
	end
end
function menu.sortAutobuild(a, b, invert)
	if tostring(a.autobuild) == tostring(b.autobuild) then
        return menu.sortShipsByClass_PurposeAndName(a, b) --(a, b, invert)
	end
	if invert then
		return tostring(a.autobuild) > tostring(b.autobuild)
	else
		return tostring(a.autobuild) < tostring(b.autobuild)
	end
end
function menu.sortRebuildTimer(a, b, invert)
	if tostring(a.rebuildtimerstatus) == tostring(b.rebuildtimerstatus) then
        return menu.sortShipsByClass_PurposeAndName(a, b) --(a, b, invert)
	end
	if invert then
		return tostring(a.rebuildtimerstatus) > tostring(b.rebuildtimerstatus)
	else
		return tostring(a.rebuildtimerstatus) < tostring(b.rebuildtimerstatus)
	end
end

function menu.buttonPropertySorter(sorttype)
	if menu.propertySorterType == sorttype then
		menu.propertySorterType = sorttype .. "inverse"
	else
		menu.propertySorterType = sorttype
	end
    menu.forcefocusfleetID = menu.Selected.fleetID
	menu.refreshMenuFrame()
end

-- Default (sorttype == "name")
-- example : table.sort( table, menu.componentSorter("nameinverse") )
-- sorttype : name, nameinverse, id, idinverse, class, classinverse, sector, sectorinverse, promotedname, promotednameinverse, commandername, commandernameinverse
function menu.componentSorter(sorttype)
	local sorter = menu.sortNameAndIDCode
	if sorttype == "nameinverse" then
		sorter = function (a, b) return menu.sortNameAndIDCode(a, b, true) end
    elseif sorttype == "id" then
		sorter = menu.sortID
	elseif sorttype == "idinverse" then
		sorter = function (a, b) return menu.sortID(a, b, true) end
	elseif sorttype == "class" then
		sorter = menu.sortShipsByClass_PurposeAndName
	elseif sorttype == "classinverse" then
		sorter = function (a, b) return menu.sortShipsByClass_PurposeAndName(a, b, true) end
    elseif sorttype == "sector" then
		sorter = menu.sortSector_ClassPurposeAndName
	elseif sorttype == "sectorinverse" then
		sorter = function (a, b) return menu.sortSector_ClassPurposeAndName(a, b, true) end
    elseif sorttype == "commandername" then
		sorter = menu.sortCommanderNameAndIDCode
	elseif sorttype == "commandernameinverse" then
		sorter = function (a, b) return menu.sortCommanderNameAndIDCode(a, b, true) end
    elseif sorttype == "locked" then
		sorter = menu.sortDamagedFleet
	elseif sorttype == "lockedinverse" then
		sorter = function (a, b) return menu.sortDamagedFleet(a, b, true) end
    elseif sorttype == "autobuild" then
		sorter = menu.sortAutobuild
	elseif sorttype == "autobuildinverse" then
		sorter = function (a, b) return menu.sortAutobuild(a, b, true) end
    elseif sorttype == "rebuildtimer" then
		sorter = menu.sortRebuildTimer
	elseif sorttype == "rebuildtimerinverse" then
		sorter = function (a, b) return menu.sortRebuildTimer(a, b, true) end
    end
	return sorter
end

--- listedeki ShipKey verilerini sorte'a gore dizer ve listeyi geri verir
--- 
---@param list table            {'FID_CID3', 'FID_CID1', ... } 
---@param sorter string         componentSorter(sorter)
---@return table                {'FID_CID1', 'FID_CID3', ... }
function menu.sortKeysListWithFleetRecords(list, sorter)
	local sortedComponents = {}
	for _, entry in ipairs(list) do
        --local strId, fleetname = menu.Convert_ID_To_StrComponent(RFMKey, key)
        local fleetID, shipID = menu.Convert_StrComponent_To_ID(entry)
        local strId, fleetname = menu.Convert_ID_To_StrComponent(fleetID, shipID)
        local record =  menu.GetRecordFromMd(entry)
        -- componentSorter içindeki karşılaştırma verileri için propertyler ekliyoruz
        
		table.insert(sortedComponents, { id = strId, shipid = record.id, object = record.object, name = record.name, fleetname = fleetname, idcode = record.idcode, class = record.class, purpose = record.purpose, sector = record.sector })
	end
	table.sort(sortedComponents, menu.componentSorter(sorter))
    
    local returnvalue = {}
    for _, entry in ipairs(sortedComponents) do
        table.insert(returnvalue, entry.id)
    end
	
    return returnvalue
end

-- 
--- Verilen RFMKey ve ShipKey bilgisini "_" kullanarak birlestirir.
--- return  StrComponent = 'FID_SID',    fleetname = 'FID_'
---@param RFMKey number
---@param ShipKey number
---@return string           'FID_SID'
---@return string           'FID_'
function menu.Convert_ID_To_StrComponent(RFMKey, ShipKey)
    RFMKey = type(RFMKey) == "number" and RFMKey or 0
    ShipKey = type(ShipKey) == "number" and ShipKey or 0
    local fleetname = (tonumber(RFMKey) < 10 and "0" or "") .. tostring(tonumber(RFMKey)) .. "_"
    local id = fleetname .. (tonumber(ShipKey) < 10 and "0" or "") .. tostring(tonumber(ShipKey))
    return id, fleetname
end

-- 
--- "RFMKey_ShipKey" yapisindaki texti "_" ile parcalar ve her 2 parcayi "number" olarak geri verir
--- return RFMKey, ShipKey
---@param strComponent string   'FID_SID'
---@return number, number
function menu.Convert_StrComponent_To_ID(strComponent)
    local sep = "_"
    local FleetID, ShipID = 0, 0
    if strComponent then
        FleetID, ShipID = string.match(strComponent, "(.+)" .. sep .. "(.+)")
    end
    return tonumber(FleetID), tonumber(ShipID)
end


-- ----------------------------------------------------
-- USER FUNCS
-- ----------------------------------------------------

--- 'menu.blacklist_stations' icinde verilen 'object64' objeyi arar
---@param object64 any
---return true or false
function menu.checkInBlacklist(object64)
    for _,bs in ipairs(menu.blacklist_stations) do
        local bs64 = ConvertStringTo64Bit(tostring(bs))
        if object64 == bs64 then
            return true
        end
    end
    return false
end

--- menu.Fleets tablosundan RFMKey == fleet.id 
---@param RFMKey any
---@return table|nil
-- return (fleet entry) or nil
function menu.GetFleet(RFMKey)
    for _, fleet in ipairs( menu.Fleets ) do
        if tonumber(fleet.id) == tonumber(RFMKey) then
            return menu.tablecopy(fleet)
        end
    end
    return nil
end



--- not shipsTableData.selectedGroup  and  shipsTableData.selected == shipKey
---@param shipKey any
---@return any|nil
-- return shipKey or nil
function menu.isSelectedShipLine(shipKey)
    --DebugError("shipKey = " .. tostring(shipKey) .. " , menu.Selected.shipID = " .. tostring(menu.Selected.shipID) .. " , menu.Selected.selectedGroup = " .. tostring(menu.Selected.selectedGroup))
    if tonumber(menu.Selected.shipID) == tonumber(shipKey) and not menu.Selected.selectedGroup then
        return shipKey
    end
    return nil
end

--- RM_RebuildCues[RFMKey][sKey] elementini verir
---@param RFMKey any
---@param sKey any
---@return table|nil
-- yoksa nil
function menu.GetReBuildCue(RFMKey, sKey)
    if menu.RM_RebuildCues[RFMKey] then
        if menu.RM_RebuildCues[RFMKey][sKey] then
            return menu.RM_RebuildCues[RFMKey][sKey]
        end
    end
    return nil
end

--- RM_FleetRecords[RFMKey]  tablosundan .commanderidx == ShipKey olanlarin yani ShipKey ait main subordinatelerin ID listesini strComponent turunde geri verir.
--- allsubs parametresi ture verilirse tum alt subordinateleri verir
---@param strComponent string   'FID_SID'
---@param allsubs any           nil or false for Main Subordinates
---@return table
-- varsa { FID_SID_1, FID_SID_2, .. FID_SID_n }
-- yoksa {}
function menu.GetSubordinates_From_FleetRecords(strComponent, allsubs)
    
    local fleetID, shipID = menu.Convert_StrComponent_To_ID(strComponent)
    
    local subordinates = {}
    for _, record in pairs(menu.RM_FleetRecords[fleetID] or {} ) do
        if record.commanderidx == shipID then
            local strCommander = menu.Convert_ID_To_StrComponent(fleetID, record.id)
            table.insert(subordinates, strCommander)
            if allsubs then
                local subs = menu.GetSubordinates_From_FleetRecords(strCommander, true)
                for _, sub in ipairs(subs) do
                    table.insert(subordinates, sub)
                end
            end
        end
    end
    return subordinates
end

--- menu.Records icinden strComponent ShipKey'ine ait commanderidx'ini strComponent olarak geri verir.
---  bulamazsa false
---@param strComponent string   'FID_SID'
---@return string|nil           'FID_CID' or nil
function menu.getCommander_From_Record(strComponent)
    local fleetID, shipID = menu.Convert_StrComponent_To_ID(strComponent)
    local record = menu.GetRecordFromMd(strComponent)
    if record and record.commanderidx > 0 then 
        return menu.Convert_ID_To_StrComponent( fleetID, record.commanderidx)
    else
        return nil
    end
end

--- menu.Records icinden ShipKey e ait toplevel commandera kadar butun commanderlerin strComponent turunde listesini verir. 
---  bulamazsa { bos liste }
---@param strComponent string   'FID_SID'
---@return table                {'FID_CID1', 'FID_CID2', ... } or { }
function menu.getAllCommanders_From_Record(strComponent)
    local fleetID, shipID = menu.Convert_StrComponent_To_ID(strComponent)
    local commanderlist = {}
    local strCommander = strComponent
    while true do
        strCommander = menu.getCommander_From_Record(strCommander)
        if strCommander then
            table.insert(commanderlist, strCommander)
        else
            break
        end
    end
    return commanderlist
end

---@param strComponent string   'FID_SID'
---@param assignment string
---@return boolean
function menu.HasSubordinateAssignment(strComponent, assignment)
    
    local result = false

    local subs = menu.GetSubordinates_From_FleetRecords(strComponent)
    for _, sub in ipairs(subs) do
        local recsub = menu.GetRecordFromMd(sub) 
        if recsub.assignment == assignment then
            result = true
            break
        end
    end
    return result
end

-- result nil or table
function menu.GetMacroCategory(macro, categorylist)

    for _, v in ipairs(categorylist) do
        if v.macro == macro then
            return v
        end
    end
    return nil

end



function menu.isObjectValid(object)
	if not C.IsComponentClass(object, "ship") and not (C.IsRealComponentClass(object, "station") and (not C.IsComponentWrecked(object))) and not GetComponentData(object, "isdeployable") and not C.IsComponentClass(object, "lockbox") then
		return false
	elseif C.IsComponentClass(object, "controllable") and C.IsUnit(object) then
		return false
	elseif (not C.IsObjectKnown(object)) or (not GetComponentData(ConvertStringTo64Bit(tostring(object)), "isradarvisible")) then
		return false
	end
	return true
end

function menu.GetConstructionFromShipyardBuilds(shipyard64, build64)
    
    shipyard64 = ConvertStringTo64Bit(tostring(shipyard64))
    build64 = ConvertStringTo64Bit(tostring(build64))

    local result = {}

    -- builds in progress
    local n = C.GetNumBuildTasks(shipyard64, 0, true, false)
    local buf = ffi.new("BuildTaskInfo[?]", n)
    n = C.GetBuildTasks(buf, n, shipyard64, 0, true, false)
    for i = 0, n - 1 do
        local factionid = ffi.string(buf[i].factionid)
        local bufid64 = ConvertStringTo64Bit(tostring(buf[i].id))
        if factionid == "player" then   -- Sadece player olanları al
            if IsSameComponent(build64, bufid64) then
                result = { id = buf[i].id, buildingcontainer = buf[i].buildingcontainer, component = buf[i].component, macro = ffi.string(buf[i].macro), factionid = ffi.string(buf[i].factionid), buildercomponent = buf[i].buildercomponent, price = buf[i].price, ismissingresources = buf[i].ismissingresources, queueposition = buf[i].queueposition, inprogress = true }
                return result
            end
        end
    end

    -- other builds
    local n = C.GetNumBuildTasks(shipyard64, 0, false, false)
    local buf = ffi.new("BuildTaskInfo[?]", n)
    n = C.GetBuildTasks(buf, n, shipyard64, 0, false, false)
    for i = 0, n - 1 do
        local component = buf[i].component
        local macro = ffi.string(buf[i].macro)
        local factionid = ffi.string(buf[i].factionid)
        local bufid64 = ConvertStringTo64Bit(tostring(buf[i].id))
        if factionid == "player" then   -- sadece player olanları al
            if (component == 0) and (macro ~= "") then
                if IsSameComponent(build64, bufid64) then
                    result = { id = buf[i].id, buildingcontainer = buf[i].buildingcontainer, component = component, macro = macro, factionid = ffi.string(buf[i].factionid), buildercomponent = buf[i].buildercomponent, price = buf[i].price, ismissingresources = buf[i].ismissingresources, queueposition = buf[i].queueposition, inprogress = false, amount = 1, ids = { buf[i].id } }
                    return result
                end
            else
                if IsSameComponent(build64, bufid64) then
                    result = { id = buf[i].id, buildingcontainer = buf[i].buildingcontainer, component = buf[i].component, macro = ffi.string(buf[i].macro), factionid = ffi.string(buf[i].factionid), buildercomponent = buf[i].buildercomponent, price = buf[i].price, ismissingresources = buf[i].ismissingresources, queueposition = buf[i].queueposition, inprogress = false }
                    return result
                end
            end
        end
    end
    
    return result
end

function menu.GetShipyardConstructions(shipyard)

    local id = shipyard
    local convertedID = ConvertStringToLuaID(tostring(id))
    
    local shipyardname = GetComponentData(id, "name")
    DebugError(string.format("id = %s , convertedID = %s , name = %s", id, convertedID, shipyardname) )
    
    local constructions = {}
    local constructionshipsbymacro = {}
    -- builds in progress
    local n = C.GetNumBuildTasks(id, 0, true, false)
    local buf = ffi.new("BuildTaskInfo[?]", n)
    n = C.GetBuildTasks(buf, n, id, 0, true, false)
    for i = 0, n - 1 do
        local factionid = ffi.string(buf[i].factionid)
        if factionid == "player" then   -- Sadece player olanları al
            table.insert(constructions, { id = buf[i].id, buildingcontainer = buf[i].buildingcontainer, component = buf[i].component, macro = ffi.string(buf[i].macro), factionid = ffi.string(buf[i].factionid), buildercomponent = buf[i].buildercomponent, price = buf[i].price, ismissingresources = buf[i].ismissingresources, queueposition = buf[i].queueposition, inprogress = true })
            local strDebug = string.format(
                [[
                Builds In Progress (%s)
                id    : %s
                buildingcontainer : %s
                component : %s
                macro     : %s 
                factionid : %s 
                buildercomponent : %s
                price : %s
                ismissingresources : %s
                queueposition : %s
                inprogress : %s 
                ]]
                ,
                i+1,
                constructions[i+1].id,
                constructions[i+1].buildingcontainer,
                constructions[i+1].component,
                constructions[i+1].macro,
                constructions[i+1].factionid,
                constructions[i+1].buildercomponent,
                constructions[i+1].price,
                constructions[i+1].ismissingresources,
                constructions[i+1].queueposition,
                constructions[i+1].inprogress
                )
            DebugError(strDebug)
        end
    end
    if #constructions > 0 then
        table.insert(constructions, { empty = true })
    end
    -- other builds
    local n = C.GetNumBuildTasks(id, 0, false, false)
    local buf = ffi.new("BuildTaskInfo[?]", n)
    n = C.GetBuildTasks(buf, n, id, 0, false, false)
    for i = 0, n - 1 do
        local component = buf[i].component
        local macro = ffi.string(buf[i].macro)
        local factionid = ffi.string(buf[i].factionid)
        if factionid == "player" then   -- sadece player olanları al
            if (component == 0) and (macro ~= "") then
                if constructionshipsbymacro[macro] then
                    constructions[constructionshipsbymacro[macro]].amount = constructions[constructionshipsbymacro[macro]].amount + 1
                    table.insert(constructions[constructionshipsbymacro[macro]].ids, buf[i].id)

                    local strDebug = string.format(
                        [[
                        Builds In Tasks 1 (%s)  macro daha önce eklenmiş, sadece amount artacak ve ids lere eklenecek
                        id    : %s
                        buildingcontainer : %s
                        component : %s
                        macro     : %s 
                        factionid : %s 
                        buildercomponent : %s
                        price : %s
                        ismissingresources : %s
                        queueposition : %s
                        inprogress : %s 
                        amount : %s
                        ids count : %s
                        ]]
                        ,
                        i+1,
                        constructions[i+1].id,
                        constructions[i+1].buildingcontainer,
                        constructions[i+1].component,
                        constructions[i+1].macro,
                        constructions[i+1].factionid,
                        constructions[i+1].buildercomponent,
                        constructions[i+1].price,
                        constructions[i+1].ismissingresources,
                        constructions[i+1].queueposition,
                        constructions[i+1].inprogress,
                        constructions[i+1].amount,
                        #constructions[i+1].ids
                        )
                    DebugError(strDebug)

                else
                    table.insert(constructions, { id = buf[i].id, buildingcontainer = buf[i].buildingcontainer, component = component, macro = macro, factionid = ffi.string(buf[i].factionid), buildercomponent = buf[i].buildercomponent, price = buf[i].price, ismissingresources = buf[i].ismissingresources, queueposition = buf[i].queueposition, inprogress = false, amount = 1, ids = { buf[i].id } })
                    constructionshipsbymacro[macro] = #constructions

                    local strDebug = string.format(
                        [[
                        Builds In Tasks 2 (%s)  macro yok, amount 1 ve ids lere ekle
                        id    : %s
                        buildingcontainer : %s
                        component : %s
                        macro     : %s 
                        factionid : %s 
                        buildercomponent : %s
                        price : %s
                        ismissingresources : %s
                        queueposition : %s
                        inprogress : %s 
                        amount : %s
                        ids count : %s
                        ]]
                        ,
                        i+1,
                        constructions[i+1].id,
                        constructions[i+1].buildingcontainer,
                        constructions[i+1].component,
                        constructions[i+1].macro,
                        constructions[i+1].factionid,
                        constructions[i+1].buildercomponent,
                        constructions[i+1].price,
                        constructions[i+1].ismissingresources,
                        constructions[i+1].queueposition,
                        constructions[i+1].inprogress,
                        constructions[i+1].amount,
                        #constructions[i+1].ids
                        )
                    DebugError(strDebug)
        
                end
            else
                table.insert(constructions, { id = buf[i].id, buildingcontainer = buf[i].buildingcontainer, component = buf[i].component, macro = ffi.string(buf[i].macro), factionid = ffi.string(buf[i].factionid), buildercomponent = buf[i].buildercomponent, price = buf[i].price, ismissingresources = buf[i].ismissingresources, queueposition = buf[i].queueposition, inprogress = false })

                local strDebug = string.format(
                    [[
                    Builds In Tasks3 (%s)  Component oluşmuş
                    id    : %s
                    buildingcontainer : %s
                    component : %s
                    macro     : %s 
                    factionid : %s 
                    buildercomponent : %s
                    price : %s
                    ismissingresources : %s
                    queueposition : %s
                    inprogress : %s  ]]
                    ,
                    i+1,
                    constructions[i+1].id,
                    constructions[i+1].buildingcontainer,
                    constructions[i+1].component,
                    constructions[i+1].macro,
                    constructions[i+1].factionid,
                    constructions[i+1].buildercomponent,
                    constructions[i+1].price,
                    constructions[i+1].ismissingresources,
                    constructions[i+1].queueposition,
                    constructions[i+1].inprogress
                    )
                DebugError(strDebug)
        
            end
        end
    end



    return constructions

end

function menu.getBuildProgress(stationLuaID, name, componentLuaID)
	local buildprogress = 100
	if IsComponentConstruction(ConvertStringTo64Bit(tostring(componentLuaID))) then
		buildprogress = math.floor(C.GetCurrentBuildProgress(ConvertIDTo64Bit(stationLuaID)))
	elseif componentLuaID == 0 then
		buildprogress = "-"
	end

	if buildprogress == 100 then
		return name
	else
		return name .. " (" .. buildprogress .. " %)"
	end
end

function menu.getBuildTime(buildingprocessor, componentLuaID, ismissingresources)
	if IsComponentConstruction(ConvertStringTo64Bit(tostring(componentLuaID))) then
		return (ismissingresources and "\27Y\27[warning] " or "") .. ConvertTimeString(C.GetBuildProcessorEstimatedTimeLeft(buildingprocessor), "%h:%M:%S")
	else
		return ""
	end
end

function menu.getShipBuildProgress(shipLuaID)
	local buildprogress = 100
	if IsComponentConstruction(ConvertStringTo64Bit(tostring(shipLuaID))) then
		--buildprogress = math.floor(C.GetCurrentBuildProgress(shipLuaID))
        buildprogress = string.format("%.1f", C.GetCurrentBuildProgress(shipLuaID))
	elseif shipLuaID == 0 then
		buildprogress = "-"
	end

	if buildprogress == 100 then
		return ""
	else
		return buildprogress .. " %"
	end
end

function menu.getShipIconWidth(font, fontsize)
	local numbertext = "99"
	local minWidthPercent = 0.015

    local font = font and font or Helper.standardFont
    local fontsize = fontsize and fontsize or Helper.standardFontSize

	local textheight = math.ceil(C.GetTextHeight(numbertext, font, Helper.scaleFont(font, fontsize), Helper.viewWidth))
	local textwidth = math.ceil(C.GetTextWidth(numbertext, font, Helper.scaleFont(font, fontsize)))

	return math.max(minWidthPercent * menu.LeftFrameData.width  , math.max(textheight, textwidth))
    --return math.max(textheight, textwidth)
end


function menu.GetMouseOverTextFromOrderIcons(currentordericon, currentordername, currentorderdescription, currentordermouseovertext, targetname, behaviouricon, behaviourname, behaviourdescription, isdocked )
    local mouseovertext = ""
    -- skip adding when behaviouricon was ignored (case: behaviour == HoldPosition AND order ~= null)
    if behaviouricon ~= "" and behaviourname and behaviourname ~= "" then
        if mouseovertext ~= "" then
            mouseovertext = mouseovertext .. "\n"
        end
        mouseovertext = mouseovertext .. behaviourname
    end
    -- skip adding when behaviouricon was ignored (case: behaviour == HoldPosition AND order ~= null)
    if behaviouricon ~= "" and behaviourdescription and behaviourdescription ~= "" then
        if mouseovertext ~= "" then
            mouseovertext = mouseovertext .. "\n"
        end
        mouseovertext = mouseovertext .. Helper.indentText(behaviourdescription, "  ", GetCurrentMouseOverWidth(), GetCurrentMouseOverFont()) 
    end
    if currentordername ~= "" then
        if mouseovertext ~= "" then
            mouseovertext = mouseovertext .. "\n"
        end
        mouseovertext = mouseovertext .. currentordername .. (currentordermouseovertext and ("\n\27R" .. currentordermouseovertext .. "\27X") or "")
    end
    if currentorderdescription and currentorderdescription ~= "" then
        if mouseovertext ~= "" then
            mouseovertext = mouseovertext .. "\n"
        end
        mouseovertext = mouseovertext .. Helper.indentText(currentorderdescription, "  ", GetCurrentMouseOverWidth(), GetCurrentMouseOverFont()) 
    end
    if targetname and tostring(targetname) ~= "" then
        if mouseovertext ~= "" then
            mouseovertext = mouseovertext .. "\n"
        end
        mouseovertext = mouseovertext .. Helper.indentText(targetname, "  ", GetCurrentMouseOverWidth(), GetCurrentMouseOverFont()) 
    end
    if isdocked then
        if mouseovertext ~= "" then
            mouseovertext = mouseovertext .. "\n"
        end
        mouseovertext = mouseovertext .. ReadText(1001, 3249)
    end
   
    return mouseovertext
end
function menu.noneOverrideOrderIcon(currentordericon, behaviouricon, isdocked, sectorid, usesectorcolor)
    
    local secondtext2 = ""
    if (currentordericon ~= "") or isdocked then
        secondtext2 = (currentordericon ~= "") and currentordericon or ""
        if isdocked then
            secondtext2 = secondtext2 .. " \27[order_dockat]"
        end
        if behaviouricon ~= "" then
            secondtext2 = Helper.convertColorToText(config.sColor.blue) .. behaviouricon .. "\27X" .. secondtext2
        end
    end

    local locationtext, sectorcolor = "", config.sColor.white
    if sectorid then
        locationtext = GetComponentData(sectorid, "name")
        sectorcolor = usesectorcolor and GetFactionData(GetComponentData(sectorid, "owner"), "color") or sectorcolor
    end

    return secondtext2 .. "\n" .. Helper.convertColorToText(sectorcolor) .. locationtext
end
function menu.overrideOrderIcon(normalcolor, usetext, icon,  prefix, postfix)
	-- number between 0 and 1, duration 1s
	local x = getElapsedTime() % 1

	normalcolor = normalcolor or config.Color.icon_normal
	local overridecolor = config.Color.order_override
	local color = {
		r = (1 - x) * overridecolor.r + x * normalcolor.r,
		g = (1 - x) * overridecolor.g + x * normalcolor.g,
		b = (1 - x) * overridecolor.b + x * normalcolor.b,
		a = (1 - x) * overridecolor.a + x * normalcolor.a,
	}
	if usetext then
		local colortext = Helper.convertColorToText(color) .. "\27[" .. icon .. "]\27X"
		return (prefix and prefix or "") .. colortext .. (postfix and postfix or "")
	else
		return color
	end
end
function menu.getOrderInfo(ship64, gettargetname)
	local isplayerowned, assignment, assignedpilot = GetComponentData(ship64, "isplayerowned", "assignment", "assignedpilot")
	if not isplayerowned then
		return "", "", nil, "", false, nil, "", "", ""
	end

	local waiticon = ""
	local orderdefinition = ffi.new("OrderDefinition")
	if C.GetOrderDefinition(orderdefinition, "Wait") then
		waiticon = ffi.string(orderdefinition.icon)
	end

	local orders, defaultorder = {}, {}
	local n = C.GetNumOrders(ship64)
	local buf = ffi.new("Order2[?]", n)
	n = C.GetOrders2(buf, n, ship64)
	for i = 0, n - 1 do
		local order = {}
		order.state = ffi.string(buf[i].state)
		order.statename = ffi.string(buf[i].statename)
		order.orderdef = ffi.string(buf[i].orderdef)
		order.actualparams = tonumber(buf[i].actualparams)
		order.enabled = buf[i].enabled
		order.isinfinite = buf[i].isinfinite
		order.issyncpointreached = buf[i].issyncpointreached
		order.istemporder = buf[i].istemporder
		order.isoverride = buf[i].isoverride

		local orderdefinition = ffi.new("OrderDefinition")
		if order.orderdef ~= nil and C.GetOrderDefinition(orderdefinition, order.orderdef) then
			order.orderdef = {}
			order.orderdef.id = ffi.string(orderdefinition.id)
			order.orderdef.icon = ffi.string(orderdefinition.icon)
			order.orderdef.name = ffi.string(orderdefinition.name)
			order.orderdef.description = ffi.string(orderdefinition.description)
		else
			order.orderdef = { id = "", icon = "", name = "", description = "" }
		end

		table.insert(orders, order)
	end

	local hasrealorders = false
	for _, order in ipairs(orders) do
		if order.enabled and (not order.istemporder) then
			hasrealorders = true
			break
		end
	end
	
	local buf = ffi.new("Order")
	if C.GetDefaultOrder(buf, ship64) then
		defaultorder.state = ffi.string(buf.state)
		defaultorder.statename = ffi.string(buf.statename)
		defaultorder.orderdef = ffi.string(buf.orderdef)
		defaultorder.actualparams = tonumber(buf.actualparams)
		defaultorder.enabled = buf.enabled
		defaultorder.issyncpointreached = buf.issyncpointreached
		defaultorder.istemporder = buf.istemporder

		local orderdefinition = ffi.new("OrderDefinition")
		if defaultorder.orderdef ~= nil and C.GetOrderDefinition(orderdefinition, defaultorder.orderdef) then
			defaultorder.orderdef = {}
			defaultorder.orderdef.id = ffi.string(orderdefinition.id)
			defaultorder.orderdef.icon = ffi.string(orderdefinition.icon)
			defaultorder.orderdef.name = ffi.string(orderdefinition.name)
			defaultorder.orderdef.description = ffi.string(orderdefinition.description)
		else
			defaultorder.orderdef = { id = "", icon = "", name = "", description = "" }
		end
	end

	local icon, name, description, color, isoverride, mouseovertext, targetname, behaviouricon, behaviourname, behaviourdescription = "", "", "", nil, false, nil, "", "", "", ""
	if #orders > 0 then
		-- there is an order
		local curindex = tonumber(C.GetOrderQueueCurrentIdx(ship64))
		local order = orders[curindex]
		name = order.orderdef.name
		description = order.orderdef.description
		icon = order.orderdef.icon
		isoverride = order.isoverride
		-- change icon to wait if the order is in the wait part
		if (order.orderdef.id == "MoveWait") or (order.orderdef.id == "MoveToObject") or (order.orderdef.id == "DockAndWait") then
			if order.issyncpointreached then
				icon = waiticon
			end
		end
		-- if all orders are temp they were spawned by a defaultorder
		if not hasrealorders then
			color = config.Color.order_temp
		end
		if gettargetname then
			local targets = {}
			Helper.ffiVLA(targets, "UniverseID", C.GetNumOrderLocationData, C.GetOrderLocationData, ship64, curindex, false)
			if #targets == 1 then
				local target = targets[1]
				targetname = ffi.string(C.GetComponentName(target))
				if C.IsComponentClass(target, "ship") then
					targetname = targetname .. " (" .. ffi.string(C.GetObjectIDCode(target)) .. ")"
				end
			elseif #targets > 0 then
				targetname = ReadText(1001, 3424)
			end
		end
		-- if there are normal orders also return information about the default order
		if next(defaultorder) then
			-- there is a defaultorder
			behaviourname = defaultorder.orderdef.name
			behaviourdescription = defaultorder.orderdef.description
			behaviouricon = defaultorder.orderdef.icon
			if (defaultorder.orderdef.id == "Wait") then
				-- do not show Wait default order
				behaviouricon = ""
			elseif (defaultorder.orderdef.id == "MoveWait") or (defaultorder.orderdef.id == "MoveToObject") or (defaultorder.orderdef.id == "DockAndWait") then
				if defaultorder.issyncpointreached then
					-- do not show these default orders if they reached the wait part
					behaviouricon = ""
				end
			end
		end
	elseif next(defaultorder) then
		-- there is a defaultorder
		name = defaultorder.orderdef.name
		description = defaultorder.orderdef.description
		icon = defaultorder.orderdef.icon
		-- change icon to wait if the order is in the wait part
		if (defaultorder.orderdef.id == "MoveWait") or (defaultorder.orderdef.id == "MoveToObject") or (defaultorder.orderdef.id == "DockAndWait") then
			if defaultorder.issyncpointreached then
				icon = waiticon
			end
		end
		color = config.sColor.blue
		if gettargetname then
			local targets = {}
			Helper.ffiVLA(targets, "UniverseID", C.GetNumOrderLocationData, C.GetOrderLocationData, ship64, 0, true)
			if #targets == 1 then
				local target = targets[1]
				targetname = ffi.string(C.GetComponentName(target))
				if C.IsComponentClass(target, "ship") then
					targetname = targetname .. " (" .. ffi.string(C.GetObjectIDCode(target)) .. ")"
				end
			elseif #targets > 0 then
				targetname = ReadText(1001, 3424)
			end
		end
	end

	if assignedpilot and (assignment == "assist") then
		-- if the ship is trying to mimic, but failed, mark the icon red
		local aicommandactionraw = GetComponentData(assignedpilot, "aicommandactionraw")
		if aicommandactionraw == "orderfailed" then
			color = config.Color.text_failure
			mouseovertext = ReadText(1026, 3268)
		end
	elseif C.HasControllableAnyOrderFailures(ship64) then
		-- if the ship had any order failure, mark the icon orange
		color = config.Color.text_warning
	end

	local texticon = ""
	if icon ~= "" then
		texticon = (color and Helper.convertColorToText(color) or "") .. "\27[" .. icon .. "]\27X"
	end
	local behaviourtexticon = ""
	if behaviouricon ~= "" then 
		behaviourtexticon = Helper.convertColorToText(config.Color.order_temp) .. "\27[" .. behaviouricon .. "]\27X"
	end
	return texticon, icon, color, name, description, isoverride, mouseovertext, targetname, behaviourtexticon, behaviouricon, behaviourname, behaviourdescription
end
function menu.HexToColor(hex, setAlpha)
    local hexRGB = string.gsub(hex, "#","")

    local color = {r = 0, g = 0, b = 0, a = 0}
    local strA, strR, strG, strB = hexRGB:sub(1,2), hexRGB:sub(3,4), hexRGB:sub(5,6), hexRGB:sub(7,8)
    local iAlpha = tonumber( "0x" .. strA ) - 155
    color.a = setAlpha and setAlpha or (iAlpha < 0 and 0 or iAlpha)
    color.r = tonumber( "0x" .. strR )
    color.g = tonumber( "0x" .. strG )
    color.b = tonumber( "0x" .. strB )
    -- DebugError ( "hexRGB = " .. hexRGB )
    -- DebugError ( "strA=\"" .. strA .. "\" strR=\"" .. strR .. "\" strG=\"" .. strG .. "\" strB=" .. strB )
    -- DebugError (" r=" .. color.r .. " g=" .. color.g .. " b=" .. color.b .. " a=" .. color.a )

    return color
end
function menu.getContainerNameAndColors(containerid, iteration, coloricon, colortext, showScanLevel)
	local convertedContainer = ConvertIDTo64Bit(containerid)
	local isplayer, revealpercent, name, faction, icon, ismissiontarget, isonlineobject, isenemy, ishostile = GetComponentData(containerid, "isplayerowned", "revealpercent", "name", "owner", "icon", "ismissiontarget", "isonlineobject", "isenemy", "ishostile")
	local unlocked = IsInfoUnlockedForPlayer(containerid, "name")

	local name = Helper.unlockInfo(unlocked, name .. " (" .. ffi.string(C.GetObjectIDCode(convertedContainer)) .. ")") .. (((not showScanLevel) or isplayer) and "" or " (" .. revealpercent .. " %)")

	if IsComponentClass(containerid, "ship") or IsComponentClass(containerid, "station") then
		local iconid = icon
		if iconid and iconid ~= "" then
            name = string.format("%s\027[%s]%s %s", coloricon, iconid, Helper.convertColorToText(colortext), name)
		end
	end
	local mouseover = "" --name
	for i = 1, iteration do
		name = "    " .. name
	end

	return name, mouseover
end
function menu.getPassedTime(time)
    if not time then 
        local xdebug = debug1 and DebugError(menu.name .. ".getPassedTime(): time parameter is nill. Returning empty result")
        return "" 
    end
	local passedtime = C.GetCurrentGameTime() - time
	if passedtime < 0 then
		local xdebug = debug1 and DebugError(menu.name .. ".getPassedTime(): given time is in the future. Returning empty result")
		return ""
	end

	local timeformat = ReadText(tPg, 7000)  -- "%dd %Hh %Mm ago"
	if passedtime < 3600 then
		timeformat = ReadText(tPg, 7001)    -- "%mm %Ss ago"
	elseif passedtime < 3600 * 24 then
		timeformat = ReadText(tPg, 7002)    -- "%hh %Mm ago"
	end

	return ConvertTimeString(passedtime, timeformat)
end
function menu.getRemainingTime(time)
	local RemainingTime = time - C.GetCurrentGameTime()
	if RemainingTime < 0 then
		local xdebug = debug1 and DebugError(menu.name .. ".getRemainingTime(): given time is in the future. Returning empty result")
		return ""
	end

	local timeformat = ReadText(tPg, 7005)  -- "%dd %Hh %Mm %Ss"
	if RemainingTime < 3600 then
		timeformat = ReadText(tPg, 7006)    -- "%mm %Ss"
	elseif RemainingTime < 3600 * 24 then
		timeformat = ReadText(tPg, 7007)    -- "%hh %Mm %Ss"
	end

	return ConvertTimeString(RemainingTime, timeformat)
end
function menu.warningColor(normalcolor)
	local color = normalcolor

	local curtime = getElapsedTime()
	if menu.warningShown and (curtime < menu.warningShown + 2) then
        menu.warningShown = curtime
		-- number between 0 and 1, duration 1s
		local x = curtime % 1

		normalcolor = normalcolor or config.Color["text_warning"]
		local overridecolor = config.Color["text_normal"]
		color = {
			r = (1 - x) * overridecolor.r + x * normalcolor.r,
			g = (1 - x) * overridecolor.g + x * normalcolor.g,
			b = (1 - x) * overridecolor.b + x * normalcolor.b,
			a = (1 - x) * overridecolor.a + x * normalcolor.a,
		}
	end
	return color
end
function menu.strip_color(text)
    text = text or ""
    --local name = text
    --local tagS = "\027"
    --local tagE = "\027X"
    --local SStart, SEnd = utf8.find(name, tagS)
    --DebugError( tostring(tagS) .. "  SStart = " .. tostring(SStart) .. " SEnd = " .. tostring(SEnd) )
    -- 'ABC .nnnnnnnn RFM_1_ .X'  nokta renk taqı ise, ilk tagdan itibaren önceki boşluğuda alırsak
    --if utf8.find(name, tagS) then
        --name = utf8.sub(name, 1, (i -2))
    --end
    --DebugError("name = '" .. tostring(name) .. "'")

    --local EStart, EEnd = utf8.find(name, tagE)
    --DebugError( tostring(tagE) .. "  EStart = " .. tostring(EStart) .. " EEnd = " .. tostring(EEnd) )
    --if utf8.find(name, tagE) then
        --name = utf8.sub(name, 1, -3)
    --end
    --local colorText = utf8.sub(name, (SStart - 1), EEnd)
    --DebugError(" colorText = '" .. tostring(colorText) .. "'")
    --name = utf8.gsub(name, colorText:gsub("\\", "\\"), "")
    --name = utf8.gsub(name, colorText, "")
    --name = string.gsub(name, "\027#%w%w%w%w%w%w%w%w#", "")
    --name = name:sub(0, SStart) .. name:sub(EEnd, name:len())
    --name = name:gsub("\027.*\027X", "")
    --DebugError(" export name = '" .. tostring(menu.strip_color(text)) .. "'")
    
    return text:gsub("%s?\027.*\027X", "")
end




-- ----------------------------------------------------
-- add_build_to_construct_ship FUNCTIONS
-- ----------------------------------------------------



--- 'yard64' istasyonuna ait 'macro'ya uygun SADECE ENGINE ve THRUSTER slotlarina ait possible macrolarini geri verir
---@param yard64 any        -- macroya uyumlu engine ve thruster macrolari alinacak istasyon
---@param macro any         -- engine ve thruster slotlari bulunacak obje macrosu
---@param tShipPlan any     -- tShipPlan verilmis ise geri donen slotlara currentmacro propertisi ekler
function menu.getEngineSlotsPossibleWaresFromStation(yard64, macro, tShipPlan )
    local upgradewares = {}

    local n = 0
    local buf
    -- uint32_t GetNumAvailableEquipment(UniverseID containerid, const char* classid);
    n = C.GetNumAvailableEquipment(yard64, "engine")
    buf = ffi.new("EquipmentWareInfo[?]", n)
    -- uint32_t GetAvailableEquipment(EquipmentWareInfo* result, uint32_t resultlen, UniverseID containerid, const char* classid);
    n = C.GetAvailableEquipment(buf, n, yard64, "engine")

    if n > 0 then
        for i = 0, n - 1 do
            local type = ffi.string(buf[i].type)
            local entry = {}
            entry.ware = ffi.string(buf[i].ware)
            entry.macro = ffi.string(buf[i].macro)
            
            if type == "software" then
                entry.name = GetWareData(entry.ware, "name")
            else
                entry.name = GetMacroData(entry.macro, "name")
            end
            if (type == "lasertower") or (type == "satellite") or (type == "mine") or (type == "navbeacon") or (type == "resourceprobe") then
                type = "deployable"
            end
            if type == "" then
                --DebugError(string.format("Could not find upgrade type for the equipment ware: '%s'. Check the ware tags. [Florian]", entry.ware))
            else
                if upgradewares[type] then
                    table.insert(upgradewares[type], entry)
                else
                    upgradewares[type] = { entry }
                end
            end
        end
    end
    
    --menu.tablePrint(upgradewares, " upgradewares = ", true, true)

    -- const char* GetSlotSize(UniverseID defensibleid, UniverseID moduleid, const char* macroname, bool ismodule, const char* upgradetypename, size_t slot);
    -- size_t GetNumUpgradeSlots(UniverseID destructibleid, const char* macroname, const char* upgradetypename);
    -- size_t GetNumVirtualUpgradeSlots(UniverseID objectid, const char* macroname, const char* upgradetypename);
    -- bool IsUpgradeMacroCompatible(UniverseID objectid, UniverseID moduleid, const char* macroname, bool ismodule, const char* upgradetypename, size_t slot, const char* upgrademacroname);
    -- bool IsVirtualUpgradeMacroCompatible(UniverseID defensibleid, const char* macroname, const char* upgradetypename, size_t slot, const char* upgrademacroname);

    local object = 0
    local slots = {}
    
    local type = "engine"
    slots[type] = {}
    for slotno = 1, tonumber(C.GetNumUpgradeSlots(object, macro, type)) do
        -- convert index from lua to C-style
        local slotsize = ffi.string(C.GetSlotSize(object, 0, macro, false, type, slotno))
        local currentmacro = tShipPlan[type][slotno].macro or ""
        local possiblemacros = {}
        for _, entry in ipairs(upgradewares[type] or {} ) do     -- or {} kullanmak gerekiyor, istasyon economic bir factiona ait olmayabilir
            if C.IsUpgradeMacroCompatible(object, 0, macro, false, type, slotno, entry.macro) then
                table.insert(possiblemacros, entry.macro)
            end
        end
        slots[type][slotno] = { currentmacro = currentmacro, possiblemacros = possiblemacros , slotsize = slotsize }
    end

    local type = "thruster"
    slots[type] = {}
    for slotno = 1, tonumber(C.GetNumVirtualUpgradeSlots(object, macro, type)) do
        -- convert index from lua to C-style
        --const char* GetMacroClass(const char* macroname);
        local class = ffi.string(C.GetMacroClass(macro))
        local slotsize = "" 
        if class == "ship_s" then
            slotsize = "small"
        elseif menu.class == "ship_m" then
            class = "medium"
        elseif menu.class == "ship_l" then
            class = "large"
        elseif menu.class == "ship_xl" then
            class = "extralarge"
        end
        local currentmacro = tShipPlan[type][slotno].macro or ""
        local possiblemacros = {}
        for _, entry in ipairs(upgradewares[type] or {} ) do     -- or {} kullanmak gerekiyor, istasyon economic bir factiona ait olmayabilir
            if C.IsVirtualUpgradeMacroCompatible(object, macro, type, slotno, entry.macro) then
                table.insert(possiblemacros, entry.macro)
            end
        end
        slots[type][slotno] = { currentmacro = currentmacro, possiblemacros = possiblemacros , slotsize = slotsize }
    end

    return slots
end

--- verilen 'tShipPlan' icinde 'lRespondWares' listesinde verilen wareleri bulur ve ilgili slotlarin cikarildigi yeni bir shipplan geri verir
---  * gemiye ait kritik softwareler kaldirilmaz
---  * lRespondWares verilmis ise listedeki ware macrolari ile uyusan tShipPlanı macrolari bosaltilir , verilmemis ise geri donus degeri tShipPlan olur.
---  * lRespondWares verilmis ise icindeki 'engine' ve 'thruster' lar icin 2 secenek mevcut, 
---         1- useenginelots tablosu verilmis   ise 'engine' ve 'thruster' burdaki veriler ile degistirilir.
---         2- useenginelots tablosu verilmemis ise removeengines = true ise kaldirilir, 
---@param tShipPlan any         -- tShipPlan tablosu
---@param lRespondWares any     -- cikarilmak icin dikkate alinacak ware listesi. verilmez ise tShipPlani geri verir
---@param macro any             -- tShipPlan sahibi obje macrosu, ('software' listesinde cikarilmamasi gerekenleri tespit icin kullanilacak )
---@param removeengines any     -- default false, 'engine' ve 'thrusterlar' cikarilacak mi?
---@param useenginelots any     -- default false , 'boolean' ya da 'table' alabilir. Belirtilmez ise 'boolean false' dikkate alinir. lRespondWares icindeki engineleri useenginelotsdakilerle degistirir.
function menu.get_Removed_RespondWares_FromShipPlan(tShipPlan, lRespondWares, macro, removeengines, useenginelots )
    
    local shipplan = menu.tablecopy(tShipPlan)
    local respondwares = menu.tablecopy(lRespondWares or {})
    removeengines = removeengines or false
    if useenginelots then
        if type(useenginelots) ~= "table" then
            useenginelots = tonumber(useenginelots) == 1
        end
    else
        useenginelots = false
    end

    for j, respondware in ipairs(respondwares) do
        for _, upgradetype in ipairs(Helper.upgradetypes) do
            local shipplanentry = shipplan[upgradetype.type]
            local numberentry = menu.GetTableLng(shipplanentry)
            if numberentry > 0 then
                if upgradetype.supertype == "macro" or upgradetype.supertype == "virtualmacro" or upgradetype.supertype == "group" then
                    for i = numberentry, 1, -1 do
                        if shipplanentry[i].macro == respondware.macro then
                            local remove = false
                            if (respondware.type =="engine" or respondware.type =="thruster" ) then
                                if useenginelots then
                                    local mkF = GetMacroData(shipplanentry[i].macro, "mk")
                                    local found = false
                                    for _,macro in ipairs(useenginelots[respondware.type][i].possiblemacros) do
                                        local mkT = GetMacroData(macro, "mk")
                                        if tonumber(mkF) == tonumber(mkT) then
                                            shipplanentry[i].macro = macro
                                            found = true
                                            break
                                        end 
                                    end
                                    if not found then   -- aynı tip bulamaz ise referanslardan birinciyi al
                                        shipplanentry[i].macro = useenginelots[respondware.type][i].possiblemacros[1]
                                    end
                                else
                                    if removeengines then
                                        remove = true
                                    end
                                end
                            else
                                remove = true
                            end
                            if remove then
                                shipplanentry[i].macro = ""
                                shipplanentry[i].weaponmode = ""
                                shipplanentry[i].ammomacro = ""
                                if upgradetype.supertype == "group" then
                                    shipplanentry[i].count = 0
                                end
                            end
                        end
                    end
                elseif upgradetype.supertype == "ammo" then
                    if shipplanentry[respondware.macro] then
                        menu.tableremoveKey(shipplanentry,respondware.macro)
                    end
                elseif (upgradetype.supertype == "software") and (respondware.type == "software") then
                    
                    for i = numberentry, 1, -1 do
                        -- upgradetype.supertype == "macro" olanlar için C.IsSlotMandatory sorgulatılabilir
                        -- normalde softwareler respond listesine düşmemesi gerekiyor, 
                        -- ama kontrol amaçlı gemi türüne göre install edilmesi gereken softwareleri çıkarmayacağız
                        -- 1 [Docking Software Mk..]
                        -- 2 [Flight Assist Software]
                        -- 3 [Long Range Scanner Software Mk..]
                        -- 4 [Object Scanner Software]
                        -- 5 [Targeting Computer Extension Mk..]
                        -- 6 [Trading Computer Extension Mk..]
                        if shipplanentry[i] == respondware.ware then
                            local isdefault = false
                            local ware = shipplanentry[i]
                            if ware ~= "" then
                                isdefault = C.IsSoftwareDefault(0, macro, ware )
                            end
                            if not isdefault then
                                shipplanentry[i] = ""
                            end
                        end
                    end
                end
            end
        end
    end
    
    --menu.tablePrint(shipplan, " shipplan = ")
    return shipplan
end


function menu.get_ShipPriceFromStation(container64, objetmacro, tShipPlan, tBulkCrew)
    
    local crew = { ware = "crew" }
    
    local prices = {}   -- kontrol etmek için eklendi
    local objectprice = 0
    local objectcrewprice = 0
    local isplayerowned = GetComponentData(container64, "isplayerowned")

    -- Object Price
    if not isplayerowned then
        local wareprice 
        -- chassis tutarı
        wareprice = tonumber(C.GetBuildWarePrice(container64, GetMacroData(objetmacro, "ware") or ""))
        objectprice = objectprice + wareprice
        -- equipmentların hepsini tarayacağız
        for i, upgradetype in ipairs(Helper.upgradetypes) do
            local upgradeplanslots = tShipPlan[upgradetype.type]
            if upgradetype.supertype == "macro" or upgradetype.supertype == "virtualmacro" then
                prices[upgradetype.type] = {}
                for j,entry in ipairs(upgradeplanslots) do
                    local macro = entry.macro
                    if macro ~= "" then
                        local count = 1
                        wareprice = tonumber(C.GetBuildWarePrice(container64, GetMacroData(macro, "ware") or ""))
                        objectprice = objectprice + wareprice
                        if not prices[upgradetype.type][macro] then
                            prices[upgradetype.type][macro] = { price = wareprice, count = count , total = count * wareprice}
                        else
                            prices[upgradetype.type][macro].count = prices[upgradetype.type][macro].count + count
                            prices[upgradetype.type][macro].total = prices[upgradetype.type][macro].total + count * wareprice
                        end
                    end
                end
            elseif upgradetype.supertype == "group" then
                prices[upgradetype.type] = {}
                for j,entry in ipairs(upgradeplanslots) do
                    local macro = entry.macro
                    local count = entry.count
                    if macro ~= "" then
                        wareprice = tonumber(C.GetBuildWarePrice(container64, GetMacroData(macro, "ware") or ""))
                        objectprice = objectprice + count * wareprice
                        if not prices[upgradetype.type][macro] then
                            prices[upgradetype.type][macro] = { price = wareprice, count = count , total = count * wareprice}
                        else
                            prices[upgradetype.type][macro].count = prices[upgradetype.type][macro].count + count
                            prices[upgradetype.type][macro].total = prices[upgradetype.type][macro].total + count * wareprice
                        end
                    end
                end
            elseif upgradetype.supertype == "software" then
                for j = 1, #upgradeplanslots do
                    local ware = upgradeplanslots[j]
                    if ware ~= "" then
                        wareprice = C.GetContainerBuildPriceFactor(container64) * GetContainerWarePrice(ConvertStringToLuaID(tostring(container64)), ware, false)
                        objectprice = objectprice + wareprice
                        if not prices[upgradetype.type] then
                            prices[upgradetype.type] = {}
                        end
                        prices[upgradetype.type][ware] = wareprice
                    end
                end
            elseif upgradetype.supertype == "ammo" then
                prices[upgradetype.type] = {}
                for macro, count in pairs(upgradeplanslots) do
                    wareprice = tonumber(C.GetBuildWarePrice(container64, GetMacroData(macro, "ware") or ""))
                    objectprice = objectprice + count * wareprice
                    if not prices[upgradetype.type][macro] then
                        prices[upgradetype.type][macro] = { price = wareprice, count = count , total = count * wareprice}
                    else
                        prices[upgradetype.type][macro].count = prices[upgradetype.type][macro].count + count
                        prices[upgradetype.type][macro].total = prices[upgradetype.type][macro].total + count * wareprice
                    end
                end
            end

        end

        -- Crews Price
        --  Üretilen gemiye personel atama işini md içinde üretilince yapacağız, boş personel ile üretim istiyoruz
        local hiringdiscounts = GetComponentData(container64, "hiringdiscounts")
        hiringdiscounts.totalfactor = 1
        for _, entry in ipairs(hiringdiscounts) do
            hiringdiscounts.totalfactor = hiringdiscounts.totalfactor - entry.amount / 100
        end
        
        local workforceinfo = C.GetWorkForceInfo(container64, "")
        crew.availableworkforce = workforceinfo.available
        crew.maxavailableworkforce = workforceinfo.maxavailable
        
        local minprice, maxprice = GetWareData(crew.ware, "minprice", "maxprice")
        crew.price = Helper.round(
            hiringdiscounts.totalfactor * C.GetContainerBuildPriceFactor(container64) * 
            (maxprice - 
                (crew.availableworkforce ) / 
                (crew.maxavailableworkforce ) * (maxprice - minprice)
            )
        )


        crew.service = (next(tBulkCrew.service)) and #tBulkCrew.service or 0
        crew.marine = (next(tBulkCrew.marine)) and #tBulkCrew.marine or 0
        crew.totalprice = (crew.service + crew.marine) * crew.price
        objectcrewprice = crew.totalprice

        --menu.tablePrint(crew, "crew = " , true, true)

        prices[crew.ware] = {}
        prices[crew.ware].service = crew.service
        prices[crew.ware].marine = crew.marine
        prices[crew.ware].totalprice = crew.totalprice
        
    end

    prices.objectprice = objectprice
    prices.objectcrewprice = objectcrewprice

    prices.RoundTotal_objectprice = RoundTotalTradePrice(objectprice)
    prices.RoundTotal_objectcrewprice = RoundTotalTradePrice(objectcrewprice)

    --menu.tablePrint(prices, objetmacro .. " için Hesaplanan prices = " , true, true)

    return RoundTotalTradePrice(objectprice), RoundTotalTradePrice(objectcrewprice)
end

--- belirlenen stationa verilen macro, tShipPlan ve tIndividualInstructions kullanilarak stationa build task olusturur
---@param container64 any
---@param macro any
---@param tShipPlan table
---@param tIndividualInstructions table
---@param tBulkkCrew table
---@param customshipname any
---@param haspaid any                       -- pesin ödenen tutar
---@param totalprice any                    -- toplam task maliyeti
---@param objectprice any                   -- haspaid varsa taska aktarilacak tutar yoksa haspaid
---@param objectcrewprice any               -- haspaid varsa taska aktarilacak tutar yoksa haspaid
---@param paintmodwareid string | nil       -- wareid or nil
---@return BuildTaskID uint64_t             -- uretilen BuildTaskID, taskinfosu ile detaylara ulasilabilir
function menu.add_build_to_construct_ship7(container64, macro, tShipPlan, tIndividualInstructions, tBulkkCrew, customshipname, haspaid, totalprice, objectprice, objectcrewprice, paintmodwareid)
    
    -- hemen üretim istenecek
    local immediate = true
    -- crewplan oluşturmak istersek , crewplan tablosu Helper.callLoadoutFunction içinde aşağıdaki gibi okunacak
    --[[
	typedef struct {
		const char* newroleid;
		NPCSeed seed;
		uint32_t amount;
		int64_t price;
	} CrewTransferContainer2;
    ]]
    -- crewplan.hireddetails = {}
    -- crewplan.fired = {}
    -- crewplan.transferdetails = {  { newrole = newroleid'service' , npc = seed , price = 0  } , { newrole = 'marine', npc = , price =  }, { newrole = , npc = , price =  }  }
    -- 
    local crewplan = nil
    -- var olan üzerinde çalışmayacağız, bu yüzden object = istasyon olacak
    local object = 0 -- task için mevcut objemiz yok, macro devreye girecek
    local isplayerowned = GetComponentData(container64, "isplayerowned")

    local numblacklisttypes = 0
    for _,bltype in ipairs(config.blacklisttypes) do
        for _,entry in ipairs(tIndividualInstructions) do
            if entry.a_rowdata == ("orders_blacklist_" .. bltype.type) then
                numblacklisttypes = numblacklisttypes + 1
            end
        end
    end
    local blacklists = ffi.new("BlacklistTypeID[?]", numblacklisttypes)
    local i = 0
    for _,blacklisttype in ipairs(config.blacklisttypes) do
        for _,entry in ipairs(tIndividualInstructions) do
            if entry.a_rowdata == ("orders_blacklist_" .. blacklisttype.type) then
                blacklists[i].type = blacklisttype.type
                blacklists[i].id = entry.BlacklistID
                i = i + 1
            end
        end
    end

    local numfightruletypes = 1
    local fightrules = ffi.new("FightRuleTypeID[?]", numfightruletypes)
    for _,entry in ipairs(tIndividualInstructions) do
        if entry.a_rowdata == ("orders_fightrule_" .. "attack") then
            fightrules[0].type = "attack"
            fightrules[0].id = entry.FightRuleID
            break
        end
    end

    --[[
	typedef struct {
		BlacklistTypeID* blacklists;
		uint32_t numblacklists;
		FightRuleTypeID* fightrules;
		uint32_t numfightrules;
		const char* paintmodwareid;
	} AddBuildTask5Container;
    ]]
    local additionalinfo = ffi.new("AddBuildTask5Container", {
        blacklists = blacklists,
        numblacklists = numblacklisttypes,
        fightrules = fightrules,
        numfightrules = numfightruletypes,
        paintmodwareid = paintmodwareid
    })

	--BuildTaskID AddBuildTask4(UniverseID containerid, UniverseID defensibleid, const char* macroname, UILoadout2 uiloadout, int64_t price, CrewTransferInfo2 crewtransfer, bool immediate, const char* customname);
	--BuildTaskID AddBuildTask5(UniverseID containerid, UniverseID defensibleid, const char* macroname, UILoadout2 uiloadout, int64_t price, CrewTransferInfo2 crewtransfer, bool immediate, const char* customname, AddBuildTask5Container* additionalinfo);
    local buildtaskid = Helper.callLoadoutFunction(
            tShipPlan, 
            crewplan, 
            function (loadout, crewtransfer) return 
                C.AddBuildTask5(container64, object, macro, loadout, isplayerowned and 0 or (objectprice or totalprice) , crewtransfer, immediate, customshipname, additionalinfo) 
            end, 
            nil, 
            "UILoadout2"
    )

    if (buildtaskid ~= 0) and haspaid then
        -- oluşturulan taska .transferedamount tutarını verelim, (parasını peşin verdiğimizi bildiriyoruz)
        C.SetBuildTaskTransferredMoney(buildtaskid, objectprice and (objectprice + objectcrewprice) or haspaid)
    end
    if buildtaskid ~= 0 then
        return buildtaskid
    end

    DebugError("! ! ! returning buildtaskid = " .. tostring(buildtaskid) .. " @_fikret" .. " macro = " .. tostring(macro))
    return 0
    
end

--- belirlenen stationa verilen macro, tShipPlan ve tIndividualInstructions kullanilarak stationa build task olusturur
---@param container64 any
---@param macro any
---@param tShipPlan table
---@param tIndividualInstructions table
---@param tBulkkCrew table
---@param customshipname any
---@param haspaid any                       -- pesin ödenen tutar
---@param totalprice any                    -- toplam task maliyeti
---@param objectprice any                   -- haspaid varsa taska aktarilacak tutar yoksa haspaid
---@param objectcrewprice any               -- haspaid varsa taska aktarilacak tutar yoksa haspaid
---@param paintmodwareid string | nil       -- wareid or nil
---@return BuildTaskID uint64_t             -- uretilen BuildTaskID, taskinfosu ile detaylara ulasilabilir
function menu.add_build_to_construct_ship75(container64, macro, tShipPlan, tIndividualInstructions, tBulkkCrew, customshipname, haspaid, totalprice, objectprice, objectcrewprice, paintmodwareid)
    
    -- hemen üretim istenecek
    local immediate = true
    -- crewplan oluşturmak istersek , crewplan tablosu Helper.callLoadoutFunction içinde aşağıdaki gibi okunacak
    --[[
	typedef struct {
		const char* newroleid;
		NPCSeed seed;
		uint32_t amount;
		int64_t price;
	} CrewTransferContainer2;
    ]]
    -- crewplan.hireddetails = {}
    -- crewplan.fired = {}
    -- crewplan.transferdetails = {  { newrole = newroleid'service' , npc = seed , price = 0  } , { newrole = 'marine', npc = , price =  }, { newrole = , npc = , price =  }  }
    -- 
    local crewplan = nil
    -- var olan üzerinde çalışmayacağız, bu yüzden object = istasyon olacak
    local object = 0 -- task için mevcut objemiz yok, macro devreye girecek
    local isplayerowned = GetComponentData(container64, "isplayerowned")

    local numblacklisttypes = 0
    for _,bltype in ipairs(config.blacklisttypes) do
        for _,entry in ipairs(tIndividualInstructions) do
            if entry.a_rowdata == ("orders_blacklist_" .. bltype.type) then
                numblacklisttypes = numblacklisttypes + 1
            end
        end
    end
    local blacklists = ffi.new("BlacklistTypeID[?]", numblacklisttypes)
    local i = 0
    for _,blacklisttype in ipairs(config.blacklisttypes) do
        for _,entry in ipairs(tIndividualInstructions) do
            if entry.a_rowdata == ("orders_blacklist_" .. blacklisttype.type) then
                blacklists[i].type = blacklisttype.type
                blacklists[i].id = entry.BlacklistID
                i = i + 1
            end
        end
    end

    local numfightruletypes = 1
    local fightrules = ffi.new("FightRuleTypeID[?]", numfightruletypes)
    for _,entry in ipairs(tIndividualInstructions) do
        if entry.a_rowdata == ("orders_fightrule_" .. "attack") then
            fightrules[0].type = "attack"
            fightrules[0].id = entry.FightRuleID
            break
        end
    end

    --[[
	typedef struct {
		BlacklistTypeID* blacklists;
		uint32_t numblacklists;
		FightRuleTypeID* fightrules;
		uint32_t numfightrules;
		const char* paintmodwareid;
	} AddBuildTask6Container;
    ]]
    --DebugError("paintmodwareid = " .. tostring(paintmodwareid) .. " objectprice = " .. type(objectprice) .. " " .. tostring(objectprice) .. " totalprice = " .. tostring(totalprice))
    if type(paintmodwareid) ~= "string" then
        paintmodwareid = nil
    end
    local additionalinfo = ffi.new("AddBuildTask6Container", {
        blacklists = blacklists,
        numblacklists = numblacklisttypes,
        fightrules = fightrules,
        numfightrules = numfightruletypes,
        paintmodwareid = paintmodwareid
    })

	--BuildTaskID AddBuildTask4(UniverseID containerid, UniverseID defensibleid, const char* macroname, UILoadout2 uiloadout, int64_t price, CrewTransferInfo2 crewtransfer, bool immediate, const char* customname);
	--BuildTaskID AddBuildTask5(UniverseID containerid, UniverseID defensibleid, const char* macroname, UILoadout2 uiloadout, int64_t price, CrewTransferInfo2 crewtransfer, bool immediate, const char* customname, AddBuildTask5Container* additionalinfo);
    --BuildTaskID AddBuildTask6(UniverseID containerid, UniverseID defensibleid, const char* macroname, UILoadout2 uiloadout, int64_t price, CrewTransferInfo2 crewtransfer, bool immediate, const char* customname, AddBuildTask6Container* additionalinfo);
    local buildtaskid = Helper.callLoadoutFunction(
            tShipPlan, 
            crewplan, 
            function (loadout, crewtransfer) return 
                C.AddBuildTask6(container64, object, macro, loadout, isplayerowned and 0 or (objectprice or totalprice) , crewtransfer, immediate, customshipname, additionalinfo) 
            end, 
            nil, 
            "UILoadout2"
    )

    if (buildtaskid ~= 0) and haspaid then
        -- oluşturulan taska .transferedamount tutarını verelim, (parasını peşin verdiğimizi bildiriyoruz)
        C.SetBuildTaskTransferredMoney(buildtaskid, objectprice and (objectprice + objectcrewprice) or haspaid)
    end

    if (buildtaskid ~= 0) then
        return buildtaskid
    end

    DebugError("!!! returning buildtaskid = " .. tostring(buildtaskid) .. " @_fikret" .. " macro = " .. tostring(macro))
    return 0
    
end

-- ----------------------------------------------------
-- Individual Instructions FUNCTIONS
-- ----------------------------------------------------

function menu.getTradeRules()
	local traderules = {}
	Helper.ffiVLA(traderules, "TradeRuleID", C.GetNumAllTradeRules, C.GetAllTradeRules)
	for i = #traderules, 1, -1 do
		local id = traderules[i]

		local counts = C.GetTradeRuleInfoCounts(id)
		local buf = ffi.new("TradeRuleInfo")
		buf.numfactions = counts.numfactions
		buf.factions = Helper.ffiNewHelper("const char*[?]", counts.numfactions)
		if C.GetTradeRuleInfo(buf, id) then
			local factions = {}
			local hasplayer = false
			for j = 0, buf.numfactions - 1 do
				local faction = ffi.string(buf.factions[j])
				if faction == "player" then
					hasplayer = true
				else
					table.insert(factions, faction)
				end
			end
			table.sort(factions, Helper.sortFactionName)
			if hasplayer then
				table.insert(factions, 1, "player")
			end

			traderules[i] = { id = id, name = ffi.string(buf.name), factions = factions, iswhitelist = buf.iswhitelist }
		else
			table.remove(traderules, i)
		end
	end
	table.sort(traderules, Helper.sortID)

    return traderules
end

--- Record_tIndividualInstructions parametresi verilmezse
---     cagri oncesinde menu.tIndividualInstructions = record.tIndividualInstructions yapilmali
--- rowdata bilgisini Record_tIndividualInstructions listedeki kayitlar icinde bulursa entry kaydini geri verir değilse nil
---@param rowdata string
---@param Record_tIndividualInstructions table
---@return table | nil
function menu.get_SignalData(rowdata, Record_tIndividualInstructions)
    Record_tIndividualInstructions = Record_tIndividualInstructions or menu.tIndividualInstructions
    for _, entry in ipairs(Record_tIndividualInstructions) do
        if tostring(entry.a_rowdata) == tostring(rowdata) then
            return entry
        end
    end
    return nil
end

local function Set_IndividualInstructions(_, params)

    playerID = playerID or ConvertStringTo64Bit(tostring(C.GetPlayerID()))

    local IIStack = GetNPCBlackboard(playerID, "$IIStack")

    if not IIStack then DebugError(menu.name .. ", player.entity.$IIStack = nil must be a list"); return; end

    if #IIStack > 0 then
        local IndividualInstructions = IIStack[1]
        --menu.tablePrint(IndividualInstructions, " IIStack[" .. "1/" .. tostring(#IIStack) .. "] = " , false, true, 2)
        table.remove(IIStack, 1)
        SetNPCBlackboard(playerID, "$IIStack", IIStack)

        local controllable = ConvertStringTo64Bit(tostring(IndividualInstructions.controllable))
        local RFMKey = tonumber(IndividualInstructions.RFMKey)
        local ShipKey = tonumber(IndividualInstructions.ShipKey)
        local itself = (tonumber(IndividualInstructions.isdebug) == 1)
        local towho = itself and "Itself" or "RMCommander"
        local readKey = IndividualInstructions.readKey or ShipKey
        readKey = tonumber(readKey)
        local xdebug = (tonumber(IndividualInstructions.isdebug) == 1)
        menu.tIndividualInstructions = IndividualInstructions.tIndividualInstructions
        
        if IsValidComponent(controllable) then 

            local isShip, isStation = C.IsComponentClass(controllable, "ship"), C.IsComponentClass(controllable, "station")
            local faction, primarypurpose, issupplyship = GetComponentData(controllable, "owner", "primarypurpose", "issupplyship")

            local blacklists = Helper.getBlackLists()
            local fightrules = Helper.getFightRules()
            local traderules = menu.getTradeRules()

            -- Reaction to Events
            if isShip then
                if #menu.signals == 0 then local x = xdebug and DebugError("menu.Set_IndividualInstructions()  menu.signals boş") end
                for _, signalentry in ipairs(menu.signals) do
                    local entry = menu.get_SignalData("orders_" .. signalentry.id)
                    if entry then
                        local signalid = entry.id
                        local hasownresponse = (tonumber(entry.hasOwn) == 1)
                        local ask = (tonumber(entry.ask) == 1)
                        local response = entry.response
                        if not hasownresponse then
                            if not C.ResetResponseToSignalForControllable(signalid, controllable) then
                                local x = xdebug and DebugError("menu.".. menu.name .. ":Set_IndividualInstructions() Failed resetting response to signal " .. tostring(signalid) .. " for controllable " .. ffi.string(C.GetComponentName(controllable)) .. " " .. tostring(controllable))
                            end
                        else
                            C.SetDefaultResponseToSignalForControllable(response, ask, signalid, controllable)
                        end
                    end
                end
            end

            -- resupply, blacklists, fight rules
            if isShip or isStation then
                -- Automatic resupply
                local entry = menu.get_SignalData("orders_resupply")
                if entry then
                    local hasOwn = (tonumber(entry.hasOwn) == 1)
                    if hasOwn then
                        C.SetDefensibleLoadoutLevel(controllable, tonumber(entry.LoadoutLevel))
                    else
                        C.SetDefensibleLoadoutLevel(controllable, -1)
                    end
                end

                -- blacklists
                local types = {
                    { type = "sectortravel",	name = "Sector Travel" },
                    { type = "sectoractivity",	name = "Sector Activities" },
                    { type = "objectactivity",	name = "Trade Restrictions" },
                }
                for i, type in ipairs(types) do
                    local entry = menu.get_SignalData("orders_blacklist_"..type.type)
                    if entry then
                        local hasOwn = (tonumber(entry.hasOwn) == 1)
                        if hasOwn then
                            local found = false
                            for _, blacklist in ipairs(blacklists) do
                                if blacklist.type == entry.type then
                                    if tonumber(blacklist.id) == tonumber(entry.BlacklistID) then
                                        found = true
                                        break
                                    end
                                end
                            end
                            if found then
                                C.SetControllableBlacklist(controllable, tonumber(entry.BlacklistID), entry.type, true)
                            else
                                C.SetControllableBlacklist(controllable, -1, entry.type, true)
                            end
                        else
                            C.SetControllableBlacklist(controllable, -1, entry.type, false)
                        end
                    end
                end

                --menu.tablePrint(fightrules, " fightrules = ")

                -- fight rules
                local entry = menu.get_SignalData("orders_fightrule_attack")
                if entry then
                    local hasOwn = (tonumber(entry.hasOwn) == 1)
                    if hasOwn then
                        local found = false
                        for _, fightrule in ipairs(fightrules) do
                            if tonumber(fightrule.id) == tonumber(entry.FightRuleID) then
                                found = true
                                break
                            end
                        end
                        if found then
                            C.SetControllableFightRule(controllable, tonumber(entry.FightRuleID), entry.type, true)
                        else
                            C.SetControllableFightRule(controllable, -1, entry.type, true)
                        end
                    else
                        C.SetControllableFightRule(controllable, -1, entry.type, false)
                    end
                end
            end

            -- ship trade prices & restrictions
            if isShip then
                -- trade loop cargo reservations
                local entry = menu.get_SignalData("orders_cargoreservations")
                if entry then
                    local hasOwn = (tonumber(entry.hasOwn) == 1)
                    if not hasOwn then
                        C.RemoveShipTradeLoopCargoReservationOverride(controllable)
                    else
                        C.SetShipTradeLoopCargoReservationOverride(controllable, (tonumber(entry.TradeLoopCargoReservationSetting) == 1))
                    end
                end

                -- preferred build method, trade rule
                if issupplyship then
                    -- preferred build method
                    local entry = menu.get_SignalData("info_buildrule")
                    if entry then
                        local hasOwn = (tonumber(entry.hasOwn) == 1)
                        if not hasOwn then
                            C.SetContainerBuildMethod(controllable, "")
                        else
                            C.SetContainerBuildMethod(controllable, entry.BuildMethodID)
                        end
                    end

                    -- trade rule
                    local entry = menu.get_SignalData("order_wares_current")
                    if entry then
                        local hasOwn = (tonumber(entry.hasOwn) == 1)
                        if hasOwn then
                            local found = false
                            for _, traderule in ipairs(traderules) do
                                if tonumber(traderule.id) == tonumber(entry.TradeRuleID) then
                                    found = true
                                    break
                                end
                            end
                            if found then
                                C.SetContainerTradeRule(controllable, tonumber(entry.TradeRuleID), "buy", "", true)
                                C.SetContainerTradeRule(controllable, tonumber(entry.TradeRuleID), "sell", "", true)
                            else
                                C.SetContainerTradeRule(controllable, -1, "buy", "", true)
                                C.SetContainerTradeRule(controllable, -1, "sell", "", true)
                            end
                        else
                            C.SetContainerTradeRule(controllable, -1, "buy", "", false)
                            C.SetContainerTradeRule(controllable, -1, "sell", "", false)
                        end
                    end

                    -- resupply trade wares
                    local wares = {}
                    local n = C.GetNumMaxProductionStorage(controllable)
                    local buf = ffi.new("UIWareAmount[?]", n)
                    n = C.GetMaxProductionStorage(buf, n, controllable)
                    for i = 0, n - 1 do
                        table.insert(wares, ffi.string(buf[i].wareid))
                    end
                    for _, ware in ipairs(wares) do
                        local entry = menu.get_SignalData("order_wares_"..ware)
                        if entry then
                            -- trade rule
                            local hasownlist = (tonumber(entry.hasOwn) == 1)
                            local traderuleid = tonumber(entry.TradeRuleID)
                            local currentprice = entry.currentprice
                            local haspriceoverride = (tonumber(entry.haspriceoverride) == 1)

                            if hasownlist then
                                local found = false
                                for _, traderule in ipairs(traderules) do
                                    if tonumber(traderule.id) == tonumber(entry.TradeRuleID) then
                                        found = true
                                        break
                                    end
                                end
                                if found then
                                    C.SetContainerTradeRule(controllable, tonumber(entry.TradeRuleID), "buy", ware, true)
                                    C.SetContainerTradeRule(controllable, tonumber(entry.TradeRuleID), "sell", ware, true)
                                else
                                    C.SetContainerTradeRule(controllable, -1, "buy", ware, true)
                                    C.SetContainerTradeRule(controllable, -1, "sell", ware, true)
                                end
                            else
                                C.SetContainerTradeRule(controllable, -1, "buy", ware, false)
                                C.SetContainerTradeRule(controllable, -1, "sell", ware, false)
                            end
            
                            if not haspriceoverride then
                                ClearContainerWarePriceOverride(controllable, ware, true)
                            else
                                SetContainerWarePriceOverride(controllable, ware, true, currentprice)
                            end
                        end
                    end
                end
            end

            local x = xdebug and DebugError("Completed Set_IndividualInstructions {" .. tostring(RFMKey) .. "}.{" .. tostring(readKey) .. "} to {" .. tostring(ShipKey) .. "} for controllable " .. ffi.string(C.GetComponentName(controllable)) .. " to who? = " .. tostring(towho)  .. " Left #IIStack = " .. tostring(#IIStack) )
        end

        if #IIStack == 0 then
            SetNPCBlackboard(playerID, "$IIStack", nil)
        end
    else
        DebugError("IIStack is EMPTY" )
    end

end
RegisterEvent("Set_IndividualInstructions", Set_IndividualInstructions)

--- 'controllable' icin IndividualInstructions tablosu geri verir
---@param controllable any      -- object yoksa (0) ise foknsiyon default degerleri geri verecek
---@param isShip any
---@param isStation any
---@param faction any
---@param primarypurpose any
---@param issupplyship any
function menu.Get_IndividualInstructions(controllable, isShip, isStation, faction, primarypurpose, issupplyship)
    
    local IndividualInstructions = {}

    -- Reaction to Events
    if isShip then
        for _, signalentry in ipairs(menu.signals) do
			local signalid = signalentry.id
            local ask = false
            local deffactresponse = ffi.string(C.GetDefaultResponseToSignalForFaction2(signalid, faction, primarypurpose))
            local response = deffactresponse
            local hasownresponse = false
            if controllable ~= 0 then
                ask = C.GetAskToSignalForControllable(signalid, controllable)
                response = ffi.string(C.GetDefaultResponseToSignalForControllable(signalid, controllable))
                hasownresponse = C.HasControllableOwnResponse(controllable, signalid)
            end
            local entry = { 
                a_rowdata = "orders_" .. tostring(signalid), 
                a_rowgroup = "Reaction to Events", 
                name = signalentry.name, 
                id = signalid, 
                response = response, 
                deffactresponse = deffactresponse,
                ask = ask, 
                hasOwn = hasownresponse 
            }
            table.insert(IndividualInstructions, entry)
        end
    end

    -- resupply, blacklists, fight rules
    if isShip or isStation then
        -- Automatic resupply
        -- not hasOwn and id = -1
        -- hasOwn and id = [ 0 = Off or globals( 0.1 = Low, 0.5 = Medium, 1 = High ) ]
        local curOption = Helper.round(C.GetPlayerGlobalLoadoutLevel(), 1)
        local hasownresponse = false
        if controllable ~= 0 then
            curOption = Helper.round(C.GetDefensibleLoadoutLevel(controllable), 1)
            hasownresponse = (curOption ~= -1)
            -- recordda fleetcommanderin bu değerini rfm oluşturulurken saklamak lazım
            -- kendisi üretimde ise default değeri alsın
            if C.IsComponentOperational( controllable ) then    
                local componentlua = ConvertStringToLuaID(tostring(controllable)) 
                -- commander üretimde değilse yukarı doğru commanderları (fleet commandra kadar) tarama yapacak
                while curOption == -1 do
                    local component64 = ConvertIDTo64Bit( componentlua )
                    local isOperational = C.IsComponentOperational( component64 )
                    componentlua = ConvertStringToLuaID(tostring(component64))
                    -- üretimde olana denk gelirse okuyamayacağımız için default değeri alsın
                    if not isOperational then   
                        curOption = Helper.round(C.GetPlayerGlobalLoadoutLevel(), 1)
                        break
                    else
                        componentlua = GetCommander(component64)
                        if componentlua then
                            curOption = Helper.round(C.GetDefensibleLoadoutLevel(ConvertIDTo64Bit(componentlua)), 1)
                        else
                            curOption = Helper.round(C.GetPlayerGlobalLoadoutLevel(), 1)
                            break
                        end
                    end
                end
            else
                curOption = Helper.round(C.GetPlayerGlobalLoadoutLevel(), 1)
            end
        end
        table.insert(IndividualInstructions, { a_rowdata = "orders_resupply", a_rowgroup = isShip and "Automatic Resupply" or "Automatic Resupply of Subordinates", LoadoutLevel = curOption, hasOwn = hasownresponse } )

        -- blacklists
		local group = ((primarypurpose == "fight") or (primarypurpose == "auxiliary")) and "military" or "civilian"
		local types = {
			{ type = "sectortravel",	name = "Sector Travel" },
			{ type = "sectoractivity",	name = "Sector Activities" },
			{ type = "objectactivity",	name = "Trade Restrictions" },
		}
        for i, entry in ipairs(types) do
            local hasownlist = false
            local blacklistid = -1
            if controllable ~= 0 then
                hasownlist = C.HasControllableOwnBlacklist(controllable, entry.type)
                blacklistid = hasownlist and C.GetControllableBlacklistID(controllable, entry.type, group) or 0
            end
            table.insert(IndividualInstructions, { a_rowdata = "orders_blacklist_" .. entry.type, a_rowgroup = isShip and "Blacklists" or "Blacklists for Subordinates", type = entry.type, BlacklistID = (blacklistid ~= 0) and blacklistid or -1, hasOwn = hasownlist } )
        end

        -- fight rules
		
		local hasownrule = false
		local fightruleid = -1
        if controllable ~= 0 then
		    hasownrule = C.HasControllableOwnFightRule(controllable, "attack")
		    fightruleid = hasownrule and C.GetControllableFightRuleID(controllable, "attack") or 0
        end
        table.insert(IndividualInstructions, { a_rowdata = "orders_fightrule_attack", a_rowgroup = "Fire Authorisation Overrides", type = "attack", FightRuleID = (fightruleid ~= 0) and fightruleid or -1, hasOwn = hasownrule } )

    end
    
    -- ship trade prices & restrictions, preferred build method, trade rule
    if isShip then
        -- trade loop cargo reservations
		local hasownresponse = false
		local curOption = false
        if controllable ~= 0 then
            hasownresponse = C.HasShipTradeLoopCargoReservationOverride(controllable)
            curOption = C.GetShipTradeLoopCargoReservationSetting(controllable) 
        end
        table.insert(IndividualInstructions, { a_rowdata = "orders_cargoreservations", a_rowgroup = "Trade Loop Cargo Reservations" , TradeLoopCargoReservationSetting = curOption, hasOwn = hasownresponse } )

        -- preferred build method, trade rule
        if issupplyship then
            -- preferred build method
            local cursetting = ""
            if controllable ~= 0 then
                cursetting = ffi.string(C.GetContainerBuildMethod(controllable))
            end
            local hasownsetting = cursetting ~= ""

			local curglobalsetting = ffi.string(C.GetPlayerBuildMethod())
			local foundcursetting = false
			local n = C.GetNumPlayerBuildMethods()
			if n > 0 then
				local buf = ffi.new("ProductionMethodInfo[?]", n)
				n = C.GetPlayerBuildMethods(buf, n)
				for i = 0, n - 1 do
					local id = ffi.string(buf[i].id)
					-- check if the curglobalsetting (which can be the method of the player's race) is in the list of options
					if id == curglobalsetting then
						foundcursetting = true
					end
				end
			end
			-- if the setting is not in the list, default to default (if the race method is not in the list, there is no ware that has this method and it will always use default)
			if not foundcursetting then
				curglobalsetting = "default"
			end
            table.insert(IndividualInstructions , { a_rowdata = "info_buildrule", a_rowgroup = "Preferred Build Method", BuildMethodID = hasownsetting and cursetting or curglobalsetting, hasOwn = hasownsetting } )

            -- trade rule
			local hasownlist = false
			local traderuleid = -1
            if controllable ~= 0 then
                hasownlist = C.HasContainerOwnTradeRule(controllable, "buy", "") or C.HasContainerOwnTradeRule(controllable, "sell", "")
                traderuleid = C.GetContainerTradeRuleID(controllable, "buy", "")
                if traderuleid ~= C.GetContainerTradeRuleID(controllable, "sell", "") then
                    DebugError("menu.Get_IndividualInstructions(): Mismatch between buy and sell trade rule on supply ship: " .. tostring(traderuleid) .. " vs " .. tostring(C.GetContainerTradeRuleID(controllable, "sell", "")))
                end
            end
            table.insert(IndividualInstructions , { a_rowdata = "order_wares_current", a_rowgroup = "Resupply Ship Trade Settings", TradeRuleID = (traderuleid ~= 0) and traderuleid or -1, hasOwn = hasownlist } )

            -- resupply trade wares
            if controllable ~= 0 then
                local wares = {}
                local n = C.GetNumMaxProductionStorage(controllable)
                local buf = ffi.new("UIWareAmount[?]", n)
                n = C.GetMaxProductionStorage(buf, n, controllable)
                for i = 0, n - 1 do
                    table.insert(wares, ffi.string(buf[i].wareid))
                end
                for _, ware in ipairs(wares) do
                    local name, minprice, maxprice = GetWareData(ware, "name", "minprice", "maxprice")
                    -- trade rule
                    local hasownlist = C.HasContainerOwnTradeRule(controllable, "buy", ware) or C.HasContainerOwnTradeRule(controllable, "sell", ware)
                    local traderuleid = C.GetContainerTradeRuleID(controllable, "buy", ware)
                    if traderuleid ~= C.GetContainerTradeRuleID(controllable, "sell", ware) then
                        DebugError("menu.Get_IndividualInstructions(): Mismatch between buy and sell trade rule on supply ship: " .. tostring(traderuleid) .. " vs " .. tostring(C.GetContainerTradeRuleID(controllable, "sell", ware)))
                    end
                    local currentprice = math.max(minprice, math.min(maxprice, RoundTotalTradePrice(GetContainerWarePrice(controllable, ware, true))))
                    local haspriceoverride = HasContainerWarePriceOverride(controllable, ware, true)
                    local entry = { a_rowdata = "orders_wares_" .. ware, a_rowgroup = "Resupply Ship Wares", ware = ware, TradeRuleID = (traderuleid ~= 0) and traderuleid or -1, hasOwn = hasownlist, currentprice = currentprice, haspriceoverride = haspriceoverride }
                    table.insert(IndividualInstructions , entry )
                end
            end
        end
    end

    return IndividualInstructions
end


-- ----------------------------------------------------
-- LOADOUT FUNCTIONS
-- ----------------------------------------------------

--- It extracts the loadout plan structure of the ship sent from the MD and reports it to the MD with a trigger.
local function Get_ShipPlan2(_, params)

    playerID = playerID or ConvertStringTo64Bit(tostring(C.GetPlayerID()))
    local SPD_Stacks = GetNPCBlackboard(playerID , "$SPD_Stacks")

    if not SPD_Stacks then DebugError(menu.name .. ", player.entity.$SPD_Stacks = nil must be a list"); return; end

    if #SPD_Stacks > 0 then
        local stack = SPD_Stacks[1]
        table.remove(SPD_Stacks, 1)
        SetNPCBlackboard(playerID, "$SPD_Stacks", SPD_Stacks)

        local RFMKey = tonumber(stack.RFMKey)
        local ShipKey = tonumber(stack.ShipKey)
        local objectLUA = stack.object
        local object64 = ConvertStringTo64Bit(tostring(objectLUA))
        local macro = tostring(stack.macro)
        local getShipPlan = ( tonumber(stack.isGetShipPlan) == 1 )
        local getIndividualInstructions = ( tonumber(stack.isGetIndividualInstructions) == 1 )
        local getCapacity = ( tonumber(stack.isGetCapacity) == 1 )
        local getPaintMod = ( tonumber(stack.isGetPaintMod) == 1 )

        local isShip = (tonumber(stack.isShip) == 1)
        local faction = tostring(stack.faction)
        local primarypurpose = stack.primarypurpose
        local issupplyship
        if object64 ~= 0 then
            issupplyship = GetComponentData(object64, "issupplyship")
        else
            issupplyship = (tonumber(stack.issupplyship) == 1)
        end

        local isChangeCrewAmounts = (tonumber(stack.isChangeCrewAmounts) == 1)
        local isdebug = (tonumber(stack.isdebug) == 1)
        

        local shipEntry = { 
            RFMKey              = RFMKey,
            ShipKey             = ShipKey,
            object              = objectLUA,
            macro               = macro,
            isChangeCrewAmounts = isChangeCrewAmounts,
            isGetShipPlan                   = getShipPlan,
            isGetIndividualInstructions     = getIndividualInstructions,
            isGetCapacity                   = getCapacity,
            isGetPaintMod                   = getPaintMod,
            isShip          = isShip,
            faction         = faction,
            primarypurpose  = primarypurpose,
            issupplyship    = issupplyship,
            isdebug     = isdebug
        }

        local isvalid = IsValidComponent(object64)



            menu.shipplan = {}
            if getShipPlan then
                if object64 ~= 0 then
                    menu.createShipPlan(object64, macro)
                else
                    -- YAPILACAK : macroya göre (patlamış gemiler için)
                    -- obje macrosuna ait slot datasını çıkarırız , ama slotlara hangi macroları atayacağız?
                    -- tWare tablosuna göre rastgele ilgili typelara rastgele slotlara mı koyabiliriz?
                end
            end
            shipEntry.ShipPlanTable = menu.shipplan

            shipEntry.IndividualInstructions = {}
            if getIndividualInstructions and isvalid then
                local isShip = shipEntry.isShip
                local isStation = not isShip
                local faction = shipEntry.faction
                local primarypurpose = shipEntry.primarypurpose
                local issupplyship = shipEntry.issupplyship
                shipEntry.IndividualInstructions = menu.Get_IndividualInstructions(object64, isShip, isStation, faction, primarypurpose, issupplyship )
            end
        
            shipEntry.capacity = {}
            if getCapacity then
                shipEntry.capacity = menu.GetCapacityTableFrom(object64)
            end
            
            local defaultpaintmod = menu.GetDefaultPaintMod(object64, macro)
            shipEntry.paintmodwareid = { default = defaultpaintmod.ware, installed = nil }
            if getPaintMod and isvalid then
                local installedpaintmod = menu.GetInstalledPaintMod(object64)
                shipEntry.paintmodwareid.installed = installedpaintmod and installedpaintmod.ware or nil
            end
        
        local name      = object64~=0 and  ffi.string(C.GetComponentName(object64)) or GetMacroData(macro, "name")
        local idcode    = object64~=0 and  ffi.string(C.GetObjectIDCode(object64))  or "---"
        local line1 = string.format("Completed Get_ShipPlan2 {%s}.{%s} for controllable %s %s", RFMKey, ShipKey, name, idcode )
        local line2 = string.format("[ isvalid=%s, SP=%s, II=%s, Cap=%s, PM=%s ]", isvalid, getShipPlan, getIndividualInstructions, getCapacity, getPaintMod )
        local line3 = string.format("[ Left #SPD_Stacks = %s ]", #SPD_Stacks )
        local x = isdebug and DebugError( line1 .. " " .. line2 .. " " .. line3 )

        SignalObject(playerID, "ShipPlan.ready", shipEntry)

        if #SPD_Stacks == 0 then
            SetNPCBlackboard(playerID, "$SPD_Stacks", nil)
        end

    else
        DebugError("SPD_Stacks is EMPTY ( @_Fikret)" )
    end

end
RegisterEvent("ShipPlan.get", Get_ShipPlan2)


function menu.GetDefaultPaintMod(object64, macro)
    local defaultpaintmod = {
        name = "",
        quality = 1,
    }
    local buf = ffi.new("UIPaintMod")
    if (object64 ~= 0) or (macro ~= "") then
        if C.GetPlayerPaintThemeMod(object64, macro, buf) then
            defaultpaintmod.name = ffi.string(buf.Name)
            defaultpaintmod.ware = ffi.string(buf.Ware)
            defaultpaintmod.quality = buf.Quality
            defaultpaintmod.isdefault = true
        end
    end
    return defaultpaintmod
end

function menu.GetInstalledPaintMod(object64)
    local installedPaintMod = nil
    if object64 ~=0 then
        local paintmod = ffi.new("UIPaintMod")
        if C.GetInstalledPaintMod(object64, paintmod) then
            installedPaintMod = {}
            installedPaintMod.name = ffi.string(paintmod.Name)
            installedPaintMod.ware = ffi.string(paintmod.Ware)
            installedPaintMod.quality = paintmod.Quality
            installedPaintMod.amount = paintmod.Amount
        end
    end
    return installedPaintMod
end

function menu.GetCapacityTableFrom(object64)
    object64 = tonumber(object64)
    local unitstoragetable    = object64 ~= 0 and (C.IsComponentClass(object64, "defensible") and GetUnitStorageData(object64) or { stored = 0, capacity = 0 } ) or { stored = -1, capacity = -1 }

    local capacity = {
        countermeasures     = object64 ~= 0 and GetComponentData(object64, "countermeasurecapacity") or -1,
        deployables         = object64 ~= 0 and C.GetDefensibleDeployableCapacity(object64) or -1,
        drones              = { stored = unitstoragetable.stored, capacity = unitstoragetable.capacity },
        missiles            = object64 ~= 0 and GetComponentData(object64, "missilecapacity") or -1,
    }
    return capacity
end
-- creating menu.shipplan
function menu.createShipPlan(object64, macro)
    
    --[[
    local name =  ffi.string(C.GetComponentName(object64))
    local idcode = ffi.string(C.GetObjectIDCode(object64))
    local class = ffi.string(C.GetComponentClass(object64))
    local primarypurpose, icon, hasanymod = GetComponentData(ConvertStringTo64Bit(tostring(object64)), "primarypurpose", "icon", "hasanymod")
    local objectID = ConvertStringToLuaID(tostring(object64))
    ]]
    menu.planDATA.object = object64
    menu.planDATA.macro = macro

	-- assemble available slots/ammo/software
    menu.planDATA.missingUpgrades = {}
	menu.planDATA.groups = {}
	menu.planDATA.slots = {}
	menu.planDATA.ammo = { missile = {}, drone = {}, deployable = {}, countermeasure = {}, }
	menu.planDATA.software = {}
	menu.planDATA.crew = {
        wanted = 0,
		total = 0,
		capacity = 0,
		roles = {},
		ware = "crew",
	}

    menu.shipplan = {}
    for _, upgradetype in ipairs(Helper.upgradetypes) do
        menu.shipplan[upgradetype.type] = {}
    end

    -- menu.groups güncelle ve menu.shipplan ve menu.planDATA.upgradewares.amount bilgisini güncelle
    menu.setupGroupData(menu.planDATA.object, menu.planDATA.macro, menu.planDATA.groups)
    -- menu.slots, menu.ammo ve menu.software güncelle ve menu.planDATA.upgradewares.amount bilgisini güncelle
    menu.prepareComponentUpgradeSlots(menu.planDATA.object, menu.planDATA.macro, menu.planDATA.slots, menu.planDATA.ammo, menu.planDATA.software)
    -- menu.crew güncelle
    menu.prepareComponentCrewInfo(menu.planDATA.object)
    --menu.shipplan.hascrewexperience = true     -- nerden öğrenebiliriz?
end

function menu.setupGroupData(object, macro, groups)
    -- shieldgroup, enginegrup ve turretgrupların toplamını içerecek
    local isstation = C.IsRealComponentClass(object, "station")
    
    if isstation then
        local turretsizecounts = { turret = {} }
        local n = C.GetNumUpgradeGroups(object, "")
        local buf = ffi.new("UpgradeGroup2[?]", n)
        n = C.GetUpgradeGroups2(buf, n, object, "")

        for i = 0, n - 1 do
            if (ffi.string(buf[i].path) ~= "..") or (ffi.string(buf[i].group) ~= "") then
                local contextString = tostring(buf[i].contextid)
                local context64 = ConvertStringTo64Bit(contextString)
                local contextname = GetComponentData(context64, "name")
                
                table.insert(groups, { contextString = contextString, contextname = contextname, contextid = buf[i].contextid, path = ffi.string(buf[i].path), group = ffi.string(buf[i].group) })
            end
        end
        for i, group in ipairs(groups) do
            for j, upgradetype in ipairs(menu.upgradetypes) do
                
                if upgradetype.supertype == "group" then

                    if not menu.shipplan[upgradetype.type] then
                        menu.shipplan[upgradetype.type] = {}
                    end

                    if not turretsizecounts.turret[group.contextString] then
                        turretsizecounts.turret[group.contextString] = {}
                    end
    
                    local groupinfo = C.GetUpgradeGroupInfo2(object, "", group.contextid, group.path, group.group, upgradetype.grouptype)
                    local currentmacro = ffi.string(groupinfo.currentmacro)
                    local slotsize = ffi.string(groupinfo.slotsize)
                    
                    groups[i][upgradetype.grouptype] = { count = groupinfo.count, operational = groupinfo.operational, total = groupinfo.total, slotsize = slotsize, currentcomponent = (groupinfo.currentcomponent ~= 0) and groupinfo.currentcomponent or nil, currentmacro = currentmacro }

                    if upgradetype.grouptype ~= "shield" then
                        if (groups[i][upgradetype.grouptype].total > 0) then
                            groups[i].groupname = i

                            groups[i].slotsize = ffi.string(groupinfo.slotsize)

                            if slotsize ~= "" then
                                if turretsizecounts[upgradetype.grouptype][group.contextString][slotsize] then
                                    turretsizecounts[upgradetype.grouptype][group.contextString][slotsize] = turretsizecounts[upgradetype.grouptype][group.contextString][slotsize] + 1
                                else
                                    turretsizecounts[upgradetype.grouptype][group.contextString][slotsize] = 1
                                end
                                groups[i].sizecount = turretsizecounts[upgradetype.grouptype][group.contextString][slotsize]

                                groups[i].groupname = upgradetype.shorttext[slotsize] .. " " .. turretsizecounts[upgradetype.grouptype][group.contextString][slotsize]

                                groups[i]["connect"] = {
                                    name 			= groups[i].groupname,
                                    groupslot 		= i,
                                    slot 			= groups[i].sizecount,
                                    shortslotsize 	= upgradetype.shorttext[slotsize],
                                    slottsize 		= slotsize,
                                    grouptype		= upgradetype.grouptype,
                                }

                            end
    
                        end
                    end
                    
                    if slotsize ~= "" then
                        table.insert(menu.shipplan[upgradetype.type], 
                        {
                            a_group = group["connect"] and group["connect"] or { },
                                name = group.groupname,
                                slot = group.gslot, 
                                shortslotsize = group.gshortslotsize, 
                                slotsize = group.gslottsize, 
                                grouptype = group.gtype,
                            a_contextid = tostring(group.contextid),
                            a_contextname = group.contextname,
                            a_slotsize = slotsize, 
                            a_total = groupinfo.total, 
                            macro = currentmacro, 
                            count = groupinfo.count, 
                            path = group.path, 
                            group = group.group, 
                            ammomacro = "", 
                            weaponmode = ""
                        }
                        )
                    end



                end
            end
        end
    else
        local sizecounts = { engine = {}, turret = {} }
        local n = C.GetNumUpgradeGroups(object, macro)
        local buf = ffi.new("UpgradeGroup[?]", n)
        n = C.GetUpgradeGroups(buf, n, object, macro)

        for i = 0, n - 1 do
            if (ffi.string(buf[i].path) ~= "..") or (ffi.string(buf[i].group) ~= "") then
                table.insert(groups, { path = ffi.string(buf[i].path), group = ffi.string(buf[i].group) })
            end
        end
        table.sort(groups, function (a, b) return a.group < b.group end)
    
        for i, group in ipairs(groups) do
            for j, upgradetype in ipairs(menu.upgradetypes) do
                if upgradetype.supertype == "group" then
                    local groupinfo = C.GetUpgradeGroupInfo(object, macro, group.path, group.group, upgradetype.grouptype)
                    local currentmacro = ffi.string(groupinfo.currentmacro)
                    local slotsize = ffi.string(groupinfo.slotsize)
                    
                    local compatibilities
                    local n_comp = C.GetNumUpgradeGroupCompatibilities(object, macro, 0, group.path, group.group, upgradetype.grouptype)
                    if n_comp > 0 then
                        compatibilities = {}
                        local buf_comp = ffi.new("EquipmentCompatibilityInfo[?]", n)
                        n_comp = C.GetUpgradeGroupCompatibilities(buf_comp, n_comp, object, macro, 0, group.path, group.group, upgradetype.grouptype)
                        for k = 0, n_comp - 1 do
                            compatibilities[ffi.string(buf_comp[k].tag)] = ffi.string(buf_comp[k].name)
                        end
                    end
    
                    groups[i][upgradetype.grouptype] = { count = groupinfo.count, operational = groupinfo.operational, total = groupinfo.total, slotsize = slotsize, compatibilities = compatibilities, currentcomponent = (groupinfo.currentcomponent ~= 0) and groupinfo.currentcomponent or nil, currentmacro = currentmacro, possiblemacros = {} }
    
                    if upgradetype.grouptype ~= "shield" then
                        groups[i].slotsize = slotsize
                        groups[i].compatibilities = compatibilities
    
                        if groups[i][upgradetype.grouptype].total > 0 then
                            groups[i].groupname = i
                            if slotsize ~= "" then
                                if sizecounts[upgradetype.grouptype][slotsize] then
                                    sizecounts[upgradetype.grouptype][slotsize] = sizecounts[upgradetype.grouptype][slotsize] + 1
                                else
                                    sizecounts[upgradetype.grouptype][slotsize] = 1
                                end
                                groups[i].groupname = upgradetype.shorttext[slotsize] .. " " .. sizecounts[upgradetype.grouptype][slotsize]

                                groups[i]["connect"] = {
                                    name 			= groups[i].groupname,
                                    groupslot 		= i,
                                    slot 			= sizecounts[upgradetype.grouptype][slotsize],
                                    shortslotsize 	= upgradetype.shorttext[slotsize],
                                    slottsize 		= slotsize,
                                    grouptype		= upgradetype.grouptype,
                                }
                            end
                        end
                    end
    
                    local weaponmode = ""
                    if object ~= 0 then
                        weaponmode = ffi.string(C.GetTurretGroupMode2(object, 0, group.path, group.group))
                    end
                    
                    if slotsize ~= "" then
                        table.insert(menu.shipplan[upgradetype.type], { 
                            a_group = group["connect"] and group["connect"] or { },
                            a_slotsize = slotsize, 
                            a_total = groupinfo.total, 
                            macro = currentmacro, 
                            count = groupinfo.count, 
                            path = group.path, 
                            group = group.group, 
                            ammomacro = "", 
                            weaponmode = weaponmode 
                        } )
                    end
    
                end
            end
        end
    end
end
function menu.findUpgradeMacro(loctype, macro)
	if type(menu.planDATA.upgradewares[loctype]) == "table" then
		for i, upgradeware in ipairs(menu.planDATA.upgradewares[loctype]) do
			if upgradeware.macro == macro then
				return i
			end
		end
	end
end
function menu.setMissingUpgrade(ware, amount, allownewentry)
	for j, entry in ipairs(menu.planDATA.missingUpgrades) do
		if entry.ware == ware then
			menu.planDATA.missingUpgrades[j].amount = menu.planDATA.missingUpgrades[j].amount + amount
			return
		end
	end
	if allownewentry then
		table.insert(menu.planDATA.missingUpgrades, { ware = ware, name = GetWareData(ware, "name"), amount = amount })
	end
end
function menu.prepareComponentCrewInfo(object)
	local n = C.GetNumAllRoles()
	local buf = ffi.new("PeopleInfo[?]", n)
	n = C.GetPeople2(buf, n, object, true)
	local numhireable = 0
	for i = 0, n - 1 do
		if buf[i].canhire then
			numhireable = numhireable + 1
			menu.planDATA.crew.roles[numhireable] = { id = ffi.string(buf[i].id), name = ffi.string(buf[i].name), desc = ffi.string(buf[i].desc), total = buf[i].amount, wanted = buf[i].amount, tiers = {}, canhire = buf[i].canhire }
			menu.planDATA.crew.total = menu.planDATA.crew.total + buf[i].amount
            menu.shipplan.crew[ffi.string(buf[i].id)] = buf[i].amount
            --[[
			local numtiers = buf[i].numtiers
			local buf2 = ffi.new("RoleTierData[?]", numtiers)
			numtiers = C.GetRoleTiers(buf2, numtiers, object, menu.planDATA.crew.roles[numhireable].id)
			for j = 0, numtiers - 1 do
				menu.planDATA.crew.roles[numhireable].tiers[j + 1] = { skilllevel = buf2[j].skilllevel, name = ffi.string(buf2[j].name), total = buf2[j].amount, wanted = buf2[j].amount, npcs = {}, currentnpcs = {} }

				local numnpcs = buf2[j].amount
				local buf3 = ffi.new("NPCSeed[?]", numnpcs)
				numnpcs = C.GetRoleTierNPCs(buf3, numnpcs, object, menu.planDATA.crew.roles[numhireable].id, menu.planDATA.crew.roles[numhireable].tiers[j + 1].skilllevel)
				for k = 0, numnpcs - 1 do
					table.insert(menu.planDATA.crew.roles[numhireable].tiers[j + 1].npcs, buf3[k])
					table.insert(menu.planDATA.crew.roles[numhireable].tiers[j + 1].currentnpcs, buf3[k])
				end
			end
			if numtiers == 0 then
				menu.planDATA.crew.roles[numhireable].tiers[1] = { skilllevel = 0, hidden = true, total = buf[i].amount, wanted = buf[i].amount, npcs = {}, currentnpcs = {} }
				local numnpcs = buf[i].amount
				local buf3 = ffi.new("NPCSeed[?]", numnpcs)
				numnpcs = C.GetRoleTierNPCs(buf3, numnpcs, object, menu.planDATA.crew.roles[numhireable].id, 0)
				for k = 0, numnpcs - 1 do
					table.insert(menu.planDATA.crew.roles[numhireable].tiers[1].npcs, buf3[k])
					table.insert(menu.planDATA.crew.roles[numhireable].tiers[1].currentnpcs, buf3[k])
				end
			end
            ]]                        
		end
	end

	menu.planDATA.crew.capacity = C.GetPeopleCapacity(menu.planDATA.object, menu.planDATA.macro, false)
end
function menu.prepareComponentUpgradeSlots(object, macro, slots, ammo, software)
	
	-- for all members of set upgradetypes,
	for i, upgradetype in ipairs(Helper.upgradetypes) do
		-- with supertype "macro" (there should be 4)
        -- engine , shield, weapon, turret
		if upgradetype.supertype == "macro" then
			-- initialize an entry in table slots with key upgradetype.type
			slots[upgradetype.type] = {}
			-- and for all slots in the object,
            -- engine , shield, weapon, turret
            menu.shipplan[upgradetype.type] = {}
			for j = 1, tonumber(C.GetNumUpgradeSlots(object, "", upgradetype.type)) do
				local groupinfo = C.GetUpgradeSlotGroup(object, "", upgradetype.type, j)
                -- engine or others shield, weapon, turret
				if upgradetype.pseudogroup or ((ffi.string(groupinfo.path) == "..") and (ffi.string(groupinfo.group) == "")) then
                    local currentmacro = ffi.string(C.GetUpgradeSlotCurrentMacro(object, 0, upgradetype.type, j))
					-- slots[upgradetype.type][j] = { currentmacro = ffi.string(C.GetUpgradeSlotCurrentMacro(object, 0, upgradetype.type, j)), possiblemacros = {}, component = nil }

                    local slotsize = ffi.string(C.GetSlotSize(object, 0, macro, false, upgradetype.type, j ) )
                    local slotname = upgradetype.shorttext[slotsize]


                    local entry = { a_slot = { slot = j, name = slotname, size = slotsize }, macro = currentmacro, ammomacro = "", weaponmode = "" }

                    local currentcomponent = C.GetUpgradeSlotCurrentComponent(object, upgradetype.type, j)
                    if currentcomponent ~= 0 then
                        -- slots[upgradetype.type][j].component = currentcomponent
                        if C.IsComponentClass(currentcomponent, "weapon") then
                            --menu.shipplan[upgradetype.type][j].weaponmode = ffi.string(C.GetWeaponMode(currentcomponent))
                            entry.weaponmode = ffi.string(C.GetWeaponMode(currentcomponent))
                            if C.IsComponentClass(currentcomponent, "missilelauncher") then
                                --menu.shipplan[upgradetype.type][j].ammomacro = ffi.string(C.GetCurrentAmmoOfWeapon(currentcomponent))
                                entry.ammomacro = ffi.string(C.GetCurrentAmmoOfWeapon(currentcomponent))
                            end
                        end
                    end

                    --[[
					menu.shipplan[upgradetype.type][j] = { 
						a_slot = { slot = j, name = slotname, size = slotsize }, 
						macro = currentmacro, 
						ammomacro = "", 
						weaponmode = "" 
					}
                    ]]
                    
                    table.insert(menu.shipplan[upgradetype.type], entry)

                else
					-- slots[upgradetype.type][j] = { currentmacro = "", possiblemacros = {}, component = nil }
                    --[[
					if upgradetype.type == "shield" then
						menu.shipplan[upgradetype.type][j] = { noneslot = "", macro = "" }
					end
                    ]]
				end

			end
		elseif upgradetype.supertype == "ammo" then
			ammo[upgradetype.type] = {}

			local ammoentry = {}
			if upgradetype.type == "missile" then
				local n = C.GetNumAllMissiles(object)
				local buf = ffi.new("AmmoData[?]", n)
				n = C.GetAllMissiles(buf, n, object)
				for j = 0, n - 1 do
					local entry = {}
					entry.macro = ffi.string(buf[j].macro)
					entry.amount = buf[j].amount
					table.insert(ammoentry, entry)
				end
			elseif upgradetype.type == "drone" then
				local n = C.GetNumAllUnits(object, false)
				local buf = ffi.new("UnitData[?]", n)
				n = C.GetAllUnits(buf, n, object, false)
				for j = 0, n - 1 do
					local entry = {}
					entry.macro = ffi.string(buf[j].macro)
					entry.category = ffi.string(buf[j].category)
					entry.amount = buf[j].amount
					table.insert(ammoentry, entry)
				end
			elseif upgradetype.type == "deployable" then
				local numlasertowers = C.GetNumAllLaserTowers(object)
				local lasertowers = ffi.new("AmmoData[?]", numlasertowers)
				numlasertowers = C.GetAllLaserTowers(lasertowers, numlasertowers, object)
				for j = 0, numlasertowers - 1 do
					local entry = {}
					entry.macro = ffi.string(lasertowers[j].macro)
					entry.amount = lasertowers[j].amount
					table.insert(ammoentry, entry)
				end

				local numsatellites = C.GetNumAllSatellites(object)
				local satellites = ffi.new("AmmoData[?]", numsatellites)
				numsatellites = C.GetAllSatellites(satellites, numsatellites, object)
				for j = 0, numsatellites - 1 do
					local entry = {}
					entry.macro = ffi.string(satellites[j].macro)
					entry.amount = satellites[j].amount
					table.insert(ammoentry, entry)
				end

				local nummines = C.GetNumAllMines(object)
				local mines = ffi.new("AmmoData[?]", nummines)
				nummines = C.GetAllMines(mines, nummines, object)
				for j = 0, nummines - 1 do
					local entry = {}
					entry.macro = ffi.string(mines[j].macro)
					entry.amount = mines[j].amount
					table.insert(ammoentry, entry)
				end

				local numnavbeacons = C.GetNumAllNavBeacons(object)
				local navbeacons = ffi.new("AmmoData[?]", numnavbeacons)
				numnavbeacons = C.GetAllNavBeacons(navbeacons, numnavbeacons, object)
				for j = 0, numnavbeacons - 1 do
					local entry = {}
					entry.macro = ffi.string(navbeacons[j].macro)
					entry.amount = navbeacons[j].amount
					table.insert(ammoentry, entry)
				end

				local numresourceprobes = C.GetNumAllResourceProbes(object)
				local resourceprobes = ffi.new("AmmoData[?]", numresourceprobes)
				numresourceprobes = C.GetAllResourceProbes(resourceprobes, numresourceprobes, object)
				for j = 0, numresourceprobes - 1 do
					local entry = {}
					entry.macro = ffi.string(resourceprobes[j].macro)
					entry.amount = resourceprobes[j].amount
					table.insert(ammoentry, entry)
				end
			elseif upgradetype.type == "countermeasure" then
				local n = C.GetNumAllCountermeasures(object)
				local buf = ffi.new("AmmoData[?]", n)
				n = C.GetAllCountermeasures(buf, n, object)
				local totalnumcountermeasures = 0
				for j = 0, n - 1 do
					local entry = {}
					entry.macro = ffi.string(buf[j].macro)
					entry.amount = buf[j].amount
					table.insert(ammoentry, entry)
				end
			end

			for _, item in ipairs(ammoentry) do
				menu.shipplan[upgradetype.type][item.macro] = item.amount
				
			end
		elseif upgradetype.supertype == "software" then
			software[upgradetype.type] = {}
			local n = C.GetNumSoftwareSlots(object, "")
			local buf = ffi.new("SoftwareSlot[?]", n)
			n = C.GetSoftwareSlots(buf, n, object, "")
			for j = 0, n - 1 do
				local entry = {}
				entry.maxsoftware = ffi.string(buf[j].max)
				entry.currentsoftware = ffi.string(buf[j].current)
				
				table.insert(menu.shipplan[upgradetype.type], entry.currentsoftware)
				
				--table.insert(software[upgradetype.type], entry)
			end
		elseif upgradetype.supertype == "virtualmacro" then
			slots[upgradetype.type] = {}
			for j = 1, tonumber(C.GetNumVirtualUpgradeSlots(object, "", upgradetype.type)) do
				-- convert index from lua to C-style

                local class = ffi.string(C.GetMacroClass(macro))
                local slotsize = config.ClassSlotsize[class]
                local slotname = upgradetype.shorttext[slotsize]

                local currentmacro = ffi.string(C.GetVirtualUpgradeSlotCurrentMacro(object, upgradetype.type, j))
				--slots[upgradetype.type][j] = { currentmacro = ffi.string(C.GetVirtualUpgradeSlotCurrentMacro(object, upgradetype.type, j)), possiblemacros = {} }
				
				menu.shipplan[upgradetype.type][j] = { 
                    a_slot = { slot = j, name = slotname, size = slotsize }, 
                    macro = currentmacro, 
                    ammomacro = "", weaponmode = "" 
                }
				
			end
		end
	end

end

--- plan table to loadout data
---@param shipplan table
---@return userdata     -- 'UILoadout2'
function menu.convertPlanToLoadout(shipplan)
    -- shipplan yapısını loadout a çevirecek
    local loadout = Helper.callLoadoutFunction(shipplan, nil, function (loadout, _) return loadout end, true, "UILoadout2")
    return loadout
end

--- loadout data to plan table
---@param object any        -- object64 
---@param macro string
---@param loadout userdata  -- 'UILoadout2'
---@param softwaredata table
---@return table shipplan table
function menu.convertLoadoutToPlan(object, macro, loadout, softwaredata)
    -- loadout cdata yapısında (bufferlı) olduğundan normal table gibi okuyamayız. shipplan a çevirecek
    local shipplan = Helper.convertLoadout(object, macro, loadout, softwaredata, "UILoadout2")
    return shipplan
end

function menu.Split_ParamToPacket(inputstr, sep)
    sep=sep or '%s'
    local t = {}
    for field,s in string.gmatch(inputstr, "([^"..sep.."]*)("..sep.."?)") do
      table.insert(t,field)
      if s == "" then return t end
    end
end



-- ----------------------------------------------------
-- TABLE FUNCTIONS
-- ----------------------------------------------------

--- func desc
---@param params any    -- key ve value ';' ile ayrilmali.
function menu.convertparamstotable(params)

    local tPackets = menu.Split_ParamToPacket(params, ";")
    local packets = {}
    local key = ""
    for k,v in ipairs(tPackets)  do
        if (math.fmod(k,2) == 0) then    -- value
            packets[key] = v
        else
            key = v
        end
    end

    return packets
end

function menu.decimalToHex(num)
    if num == 0 then
        return '0'
    end
    local neg = false
    if num < 0 then
        neg = true
        num = num * -1
    end
    local hexstr = "0123456789ABCDEF"
    local result = ""
    while num > 0 do
        local n, x = math.modf(num, 16)
        result = string.sub(hexstr, n + 1, n + 1) .. result
        num = math.floor(num / 16)
    end
    if neg then
        result = '-' .. result
    end
    return result
end

-- tabledeki veri sayisi (__pairs method)
function menu.GetTableLng(tbl)
    local getN = 0
    for n in pairs(tbl or {} ) do 
      getN = getN + 1 
    end
    return getN
end

-- Kopyalanacak table en sona kadar parcalanarak alinir. (__pairs method)
-- new_table = tablecopy(data)  
-- copys the table "data" or "{ empty }"
function menu.tablecopy(t)
    local t2 = {};
    for k,v in pairs(t or {}) do
        if type(v) == "table" then
            t2[k] = menu.tablecopy(v);
        else
            t2[k] = v;
        end
    end
    return t2;
end

--- Removes (and returns) a table element by its key, moving down other elements to close space and decrementing the size of the array
---@param table table
---@param key any
function menu.tableremoveKey(table, key)
    local element = table[key]
    table[key] = nil
    return element
end

--- Splits the table into rows using the __pairs method and combines each row into the list.
---@param node table
---@param nodename string 
---@param tree any                  -- ( nil = newline and no indentation) or (true = newline and indentation) or (false = no newline and no indentation)
---@param IsShowNumberKeys any      -- ( is show { [1] = xxxx, [2] = yyy } else { xxx, yyy } )
---@param indentation number        -- default 1 (number of space characters betwen by tag)
---@param lineIndentString string   -- default empty (head string of line)
---@param font string               -- default Helper.standardFont
---@param fontsize number           -- default Helper.standardFontSize
---@param width number              -- default 450
---@param useConcatResult any       -- ( nil == will use SplittedLines )
function menu.tableGetTextLines(node, nodename, tree, IsShowNumberKeys, indentation, lineIndentString, font, fontsize, width, useConcatResult)
    -- lua textTable = GetTextLines(text, font, fontsize, width) fonksiyonu en fazla 100 satıra bölebiliyor.
    -- aldığımız bilgiyi satırlara ayırıp kendi listemizi oluşturacağız
    local TextLines = {}
    local indentstring = lineIndentString or ""

    local font = font or Helper.standardFont
    local fontsize = fontsize or Helper.standardFontSize
    local width = width or 450
    local concatResult, SplittedLines = menu.getstring_TableStructure(node, nodename, tree, IsShowNumberKeys, indentation)
    if not useConcatResult then
        for k, v in ipairs(SplittedLines) do
            local textTable = GetTextLines(v, font, fontsize, width)
            for i, line in ipairs(textTable) do
                table.insert(TextLines, indentstring .. line)
            end
        end
    else
        TextLines = GetTextLines(concatResult, font, fontsize, width)
    end
    return TextLines
end

--- print table with __pairs method to DebugError 
---@param node table
---@param nodename any 
---@param tree any                  -- ( nil = newline and no indentation) or (true = newline and indentation) or (false = no newline and no indentation)
---@param IsShowNumberKeys any      -- ( is show { [1] = xxxx, [2] = yyy } else { xxx, yyy } )
---@param indentation any        -- default 1 (number of space characters betwen by tag)
---@param useConcatResult any       -- ( nil == will use SplittedLines )
function menu.tablePrint(node, nodename, tree, IsShowNumberKeys, indentation, useConcatResult)
    -- concat edilmiş string bilgisi DebugError için fazla gelebiliyor. Bu yüzden concat edilmeden önceki array lı çıktı lazım bize
    -- !!! debugerror için 238 satırda bir resetliyeceğiz, daha fazla beklersek eksik bilgi basıyor
    local concatResult, SplittedLines = menu.getstring_TableStructure(node, nodename, tree, IsShowNumberKeys, indentation)
    if not useConcatResult then
        
        local maxrowvisible = 230

        local NEW_LINE = "\n"
        local TAB_CHAR = "  "
    
        if nil == tree then
            NEW_LINE = "\n"
        elseif not tree then
            NEW_LINE = ""
            TAB_CHAR = ""
        end
    
        local row = 0
        local totalrow = 0
        local str = ""
        for i, v in ipairs(SplittedLines) do
            row = row + 1
            str = str .. TAB_CHAR .. tostring(v) .. ( (row < maxrowvisible)  and NEW_LINE or "")
            if row >= maxrowvisible then
                DebugError("linesgroup #" .. tostring(totalrow + 1) .. "-" ..  tostring(i) .. NEW_LINE .. str )
                totalrow = totalrow + row
                row = 0
                str = ""
            end
        end
        DebugError("linesgroup #" .. tostring(totalrow + 1) .. "-" .. tostring(totalrow + row) .. NEW_LINE .. str )
    else
        DebugError(concatResult)  
    end
    return concatResult
end

--- string olarak table yapsini geri verir
---@param node table
---@param nodename string 
---@param tree any                  -- ( nil = newline and no indentation) or (true = newline and indentation) or (false = no newline and no indentation)
---@param IsShowNumberKeys any      -- ( is show { [1] = xxxx, [2] = yyy } else { xxx, yyy } )
---@param indentation number        -- default 1 (number of space characters betwen by tag)
function menu.getstring_TableStructure(node, nodename, tree, IsShowNumberKeys, indentation)
    local cache, stack, output = {},{},{}
    local depth = 1

    if type(node) ~= "table" then
        return "only table type is supported, got " .. type(node)
    end

    if nil == indentation then indentation = 1 end
    
    if nil == IsShowNumberKeys then
         IsShowNumberKeys = nil
    elseif not IsShowNumberKeys then
        IsShowNumberKeys = nil
    end

    local NEW_LINE = "\n"
    local TAB_CHAR = "  "

    if nil == tree then
        NEW_LINE = "\n"
    elseif not tree then
        NEW_LINE = ""
        TAB_CHAR = ""
    end

    local output_str = ( (nodename and nodename ~= "") and tostring(nodename) .. NEW_LINE or "" )  .. "{"     
    

    while true do
        local size = 0
        for k,v in pairs(node) do
            size = size + 1
        end

        local cur_index = 1
        for k,v in pairs(node) do
            if (cache[node] == nil) or (cur_index >= cache[node]) then

                if (string.find( output_str, "}", output_str:len() )) then
                    output_str = output_str .. "," .. NEW_LINE
                elseif not (string.find( output_str, NEW_LINE, output_str:len() )) then
                    output_str = output_str .. NEW_LINE
                end

                -- This is necessary for working with HUGE tables otherwise we run out of memory using concat on huge strings
                table.insert(output,output_str)
                output_str = ""

                local key
                if (type(k) == "number") then
                    key = (IsShowNumberKeys) and "[" .. tostring(k) .. "]" or ""
                elseif (type(k) == "boolean") then
                    key = "[" .. tostring(k) .. "]"
                else
                    -- key = "['"..tostring(k).."']"
                    key = "" .. tostring(k) .. ""
                end

                if (type(v) == "number" or type(v) == "boolean") then
                    output_str = output_str .. string.rep(TAB_CHAR,depth*indentation) .. key .. ((key ~= "") and " = " or "") .. tostring(v)
                elseif (type(v) == "table") then
                    output_str = output_str .. string.rep(TAB_CHAR,depth*indentation) .. key .. ((key ~= "") and " = " or "") .. "{"  
                    table.insert(stack,node)
                    table.insert(stack,v)
                    cache[node] = cur_index+1
                    break
                else
                    output_str = output_str .. string.rep(TAB_CHAR,depth*indentation) .. key .. " = '"..tostring(v).."'"
                end

                if (cur_index == size) then
                    output_str = output_str .. NEW_LINE .. string.rep(TAB_CHAR,(depth-1)*indentation) .. "}"
                else
                    output_str = output_str .. ","
                end
            else
                -- close the table
                if (cur_index == size) then
                    output_str = output_str .. NEW_LINE .. string.rep(TAB_CHAR,(depth-1)*indentation) .. "}"
                end
            end

            cur_index = cur_index + 1
        end

        if (size == 0) then
            --output_str = output_str .. NEW_LINE .. string.rep(TAB_CHAR,(depth-1)*indentation) .. "}"
            --output_str = output_str .. string.rep(TAB_CHAR,(depth-1)*indentation) .. "}"
            output_str = output_str ..  "}"
        end

        if (#stack > 0) then
            node = stack[#stack]
            stack[#stack] = nil
            depth = cache[node] == nil and depth + 1 or depth - 1
        else
            break
        end
    end

    -- This is necessary for working with HUGE tables otherwise we run out of memory using concat on huge strings
    table.insert(output,output_str)

    local SplittedLines = {}
    for k, v in ipairs(output) do
        --DebugError("k = " .. tostring(k) .. "/" .. tostring(#output) .. " ,v = _" .. v .. "_ ,#v = " .. tostring(#v) )
        local startindex = 1
        local foundIndex = string.find( v, "\n", startindex )
        local sub = string.sub( v, startindex, foundIndex and foundIndex -1 or string.len(v) )
        --DebugError("startindex = " .. tostring(startindex) .. " ,foundIndex = " ..  tostring(foundIndex) .. " ,sub =_" .. tostring(sub) .. "_")
        if sub ~= "" then
            table.insert(SplittedLines, sub)
        end
        while foundIndex do
            startindex = foundIndex + 1 
            foundIndex = string.find( v, "\n", startindex )
            sub = string.sub( v, startindex, foundIndex and foundIndex -1 or string.len(v) )
            if sub ~= "" then
                table.insert(SplittedLines, sub)
            end
            --DebugError("startindex = " .. tostring(startindex) .. " ,foundIndex = " ..  tostring(foundIndex) .. " ,sub =_" .. tostring(sub) .. "_" )
        end
        
    end

    output_str = table.concat(output)
    return output_str, SplittedLines
end


init()

