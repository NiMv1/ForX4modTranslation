<?xml version="1.0" encoding="utf-8"?>
<mdscript name="Upb_Restock_Fleet" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
<!-- Yapılanlar ve düzeltilenler :
        * 
        

    -->
    <!-- Düşünceler listesi
        
        * rfm içinde işlem bekleyen gemi olanların adına yanıp sönen ikaz ya da kırmızı ünlem eklenebilir mi (olursa bu durumla ilgili detaylı mouseover da eklenebilir)
            lua menu.map içine yazmak gerekiyor, bunun için de harici bir mod (kurtee) kullanmak gerekecektir.
            
        * istasyon seçimlerinde 
            her sektör uzaklığa +10 puan eklemesi ve
            malzemesi yeterli olana best +100 puan eklemesi düşüncesi
        
        * nextretrytime değerinin anlık değiştirilebilmesi için cueler içine aktarılması

        * İstasyon destroy edildiğinde 1.yönteme göre subları toplayacağız

        * RFM den RFM ye bağlama fonksiyonu yazılacak
        * RFM İstasyonlar için İstasyon inşa özelliği eklenecek
        * * * en son iş (subordinate add, remove, destroy, promoted, fonksiyonlarını delay olmadan tekrar yazılacak.)
    -->
        
    <cues>
		<cue name="OnLuaLoaderReady" instantiate="true">
            <conditions>
                <event_ui_triggered screen="'Upb_Lua_Loader'" control="'Ready'" />
            </conditions>
            <actions>
                <debug_text text="' Running code[raise_lua_event] name:[Upb_Lua_Loader.Load] param:[extensions.upb_lsr_fleet_management.lua_lsr_fleet_manager_menu]  event.name = %s'.[event.name]" />
                <raise_lua_event name="'Upb_Lua_Loader.Load'" param="'extensions.upb_lsr_fleet_management.lua_lsr_fleet_manager_menu'"/>
            </actions>
        </cue>
	    <cue name="OnLuaLoaderReadyCompleted" instantiate="true">
            <conditions>
                <event_ui_triggered screen="'Upb_Lua_Loader'" 
                    control="'Loaded extensions.upb_lsr_fleet_management.lua_lsr_fleet_manager_menu'" />
            </conditions>
            <actions>
                <debug_text text="'lua_lsr_fleet_manager_menu.lua yüklemesi TAMAMLANDI...'" chance="100"/>
                
                <set_value name="player.entity.$SPD_Stacks" exact="[]"/>
                <remove_value name="player.entity.$RFM_DATA_Stacks" />

                <signal_cue_instantly cue="CheckAndFix_tShipPlans_AllRFM" />
                
                <!-- event_load olayında koyamadık, çünkü new game zamanı load olayından sonra yeni istasyonlar ekleniyor
                    load sonrasından dahageç bir vakitde istasyonları güncelliyoruz
                 -->
                <run_actions ref="Update_BlacklistStations" >
                    <param name="debugchance" value="0" />
                </run_actions>

            </actions>
        </cue>

        <!-- Bu modun kendisini upb_MODs Ana Menü girdisine ekle -->
		<cue name="SectionHandler_OtherUpbMods" instantiate="true" comment="NPC pilotların dialog menusunden bu ve diğer upb modlarına da ulaşılabilmesi için ortak alan">
			<conditions>
				<check_any>
					<event_conversation_next_section sectionprefix="upb_" />
					<event_conversation_returned_to_section sectionprefix="upb_" />
				</check_any>
			</conditions>
			<actions>
                <!-- Main.$tPage -->
				<do_if value="event.param == 'upb_MODs'" comment="Diğer modlarla aynı olacak 'upb_MODs'. her mod un pozisyonu farklı">
                    <add_player_choice_sub text="readtext.{Main.$tPage}.{1500}" section="upb_RFM_Mainmenu" position="top_left" comment="upb Restock Fleet" />
					<add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
				</do_if>

				<do_elseif value="event.param == 'upb_RFM_Mainmenu'">
                    
                    <run_actions ref="Get_RFM_Ship_Keys_From_Entity" result="$keys">
                        <param name="entity" value="event.object" />
                    </run_actions>
                    <set_value name="$RFMKey" exact="$keys.{1}" />
                    <set_value name="$ShipKey" exact="$keys.{2}" />

                    <debug_text text="'isShip = %s, isStation = %s, commander = %s, $RFMKey = %s, $ShipKey = %s'.[@event.object.assignedcontrolled.isclass.ship, @event.object.assignedcontrolled.isclass.station, event.object.assignedcontrolled.commander, $RFMKey, $ShipKey]" />

                    <do_if value="$RFMKey gt 0">
                        <set_value name="$CS" exact="'\33' + (if Main.$RebuildCues.{$RFMKey}.keys.count gt 0 then Main.$alertColor else Main.$normalColor)" />
                        <set_value name="$CE" exact="'\33X'" />
                        <add_player_choice text="'[ # ' + $CS + Main.$RebuildCues.{$RFMKey}.keys.count + $CE + ' ]' + ' - ' + readtext.{Main.$tPage}.{1021} + ' ' + readtext.{Main.$tPage}.{500} + '_' + $RFMKey "  position="bottom_left" section="cSO_RFM_Disable"/>
                        <remove_value name="$CS" />
                        <remove_value name="$CE" />
                    </do_if>
                    <do_else>
                        <do_if value="event.object.isplayerowned">
                            <add_player_choice_sub text="'\33' + Main.$normalColor + readtext.{Main.$tPage}.{1510} + '\33X'" section="csRFM_Enable" position="bottom_left" chance="(not event.object.assignedcontrolled.commander) * 100"/>
                        </do_if>
                        <do_else>
                            <add_player_choice_sub text="'\33' + Main.$normalColor + readtext.{Main.$tPage}.{1521} + '\33X'" section="csRFM_Enable" position="bottom_left" />
                        </do_else>
                    </do_else>
                    <remove_value name="$RFMKey" />
                    <remove_value name="$ShipKey" />

                    <add_player_choice_sub text="readtext.{Main.$tPage}.{1050}"    section="csRFM_OpenLua" position="top_left" choiceparam="'manager'" comment="Manager"/>
                    <add_player_choice_sub text="readtext.{Main.$tPage}.{1060}"    section="csRFM_OpenLua" position="top_right" choiceparam="'options'" comment="Options"/>
                    <!-- 
                    <add_player_choice_sub text="'Test'"    section="upb_RFM_test" position="right"/>
                     -->
                     <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                </do_elseif>

                <do_elseif value="event.param == 'upb_RFM_test'">
            
                    <add_player_choice_return position="bottom_right" text="'Back'"/>

                </do_elseif>

			</actions>

		</cue>

        <!-- data change notification for open lua
            $Flag_RFM_Menu varsa data aktarımı gerçekleşecek
            $isSendToLua verilmişse değerine göre veya verilmemişse  
                datachanged bildirimi yapılacak
         -->
        <library name="Set_MDDataChanged">
            <actions>
                <!--sadece lua açıksa değişkenleri güncelleyeceğiz
                -->
                <include_actions ref="Set_MDData" />
                
                <do_if value="player.entity.$Flag_RFM_Menu?">
                    <do_if value="$isSendToLua?">
                        <set_value name="player.entity.$md_RFM_DataChanged" exact="$isSendToLua" />
                    </do_if>
                    <do_else>
                        <set_value name="player.entity.$md_RFM_DataChanged" exact="true" />
                    </do_else>
                </do_if>

                <debug_text text="' Set_MDDataChanged '.[]" chance="@player.entity.$md_RFM_DataChanged * Main.$DebugChance"/>

            </actions>
        </library>
        <library name="Set_MDData">
            <actions>
                <!--sadece lua açıksa değişkenleri güncelleyeceğiz
                -->
                <do_if value="player.entity.$Flag_RFM_Menu?">
                    
                    <set_value name="player.entity.$RFMDATA" exact="table[ 
                        $RM_Fleets          = Main.$RM_Fleets,
                        $FleetRecords       = Main.$FleetRecords,
                        $RebuildCues        = Main.$RebuildCues
                        ]" />

                    <debug_text text="' Set_MDData '.[]" chance="Main.$DebugChance"/>
                </do_if>
                
            </actions>
        </library>
        
        <!-- 
            gemiye ait data değişikliğinin luaya iletilmesi
            Örnek: param = "table[ 
                $fleetID = $RFMKey, 
                $shipID = $ShipKey,
                $Record = Main.$FleetRecords.{$RFMKey}.{$ShipKey},
                $RebuildCue = Main.$RebuildCues.{$RFMKey}.{$ShipKey},
                $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                $description = 'Build Task Added'
            ]"
        -->
        <cue name="SendLua_DataChanged" instantiate="true">
            <conditions>
                <event_cue_signalled />
            </conditions>
            <actions>
                
                <set_value name="$stack"  exact="event.param"/>

                <do_if value="not player.entity.$RFM_DATA_Stacks?">
                    <set_value name="player.entity.$RFM_DATA_Stacks" exact="[]"/>
                </do_if>

                <debug_text text="'(Sending Data to Lua) RFM_%s_%s (%s)'.[@$stack.$fleetID, @$stack.$shipID, @$stack.$description]" chance="Main.$DeepDebug"/>

                <append_to_list name="player.entity.$RFM_DATA_Stacks" exact="$stack" />
                <raise_lua_event name="'rfmData.changed'" />

            </actions>
        </cue>

        <library name="SetInformationsToPlayer" purpose="run_actions">
            <params>
                <param name="OpenLuaMenu" default="true"/>
                <param name="entity" default="null" />
                <param name="TableMode" default="'manager'" />
            </params>
            <actions>

                <do_if value="Main.$RM_Fleets?">
                    <do_if value="$OpenLuaMenu">
                        
                        <run_actions ref="Get_RFM_Ship_Keys_From_Entity" result="$keys">
                            <param name="entity" value="$entity" />
                        </run_actions>
                        <set_value name="$RFMKey" exact="$keys.{1}" />
                        <set_value name="$ShipKey" exact="$keys.{2}" />

                        <!-- lua penceresi açılma bayrağı etkin-->
                        <set_value name="player.entity.$Flag_RFM_Menu"/>
                        <!-- data change notification for open lua -->
                        <include_actions ref="Set_MDData" />

                        <!-- bayrak açıkken güncelleme sonrası entity üzerine bilgileri yazacak, şu an sendit = false. çünkü birazdan luayı açacağız -->
                        <run_actions ref="Update_BlacklistStations" >
                            <param name="debugchance" value="0" />
                        </run_actions>

                        
                        <open_conversation_menu menu="RFM_Menu" param="[0, 0, [$RFMKey, $ShipKey], $TableMode, global.$upbRF_DATA ]" param2="null"/>
                        <!-- 
                        <open_menu menu="RFM_Menu" param="[0, 0, $RFMKey, $TableMode, global.$upbRF_DATA ]" param2="null" />
                        -->
                    </do_if>
                    
                </do_if>

            </actions>
        </library>
        
        <cue name="Received_from_LUA" instantiate="true" namespace="this">
            <conditions>
                <event_ui_triggered screen="'RFM_Menu'" />
            </conditions>
            <actions>
                <!--YAPILACAK :
                    menu.editedSettings.NextRetryTime ayarının değişme durumunu özel yakalamak için 
                    1- lua içinde ayrı bir trigger oluşturacağız
                    2- md içinde bu triggere özel cue yazacağız
                    3- değişen değeri aldıktan sonra beklemede olan tüm AddConstructonShipForFleet_ (rebuildship) cuelerin içindeki 
                        $NextRetryTime değişkeninin değerini değiştireceğiz ve luaya md_data_changed ile bildireceğiz
                -->
                <do_if value="event.param2 == 'Disabled'">
                    <!-- param $RFMKey Or list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false) ] -->
                    <signal_cue_instantly cue="Disable__RFM" param="[event.param3.{1}, 'RFM Manager Screen' ]" />
                </do_if>
                
                <do_elseif value="event.param2 == 'rfm_CommanderNameChanged'">
                    <set_value name="$fleetID" exact="event.param3.{1}" />
                    <set_value name="$name" exact="event.param3.{2}" />
                    <set_value name="Main.$RM_Fleets.{$fleetID}.$commander.$name" exact="$name" />
                    <do_if value="Main.$RM_Fleets.{$fleetID}.$shipid == 1">
                        <set_value name="Main.$RM_Fleets.{$fleetID}.$name" exact="$name" />
                    </do_if>
                    <set_value name="Main.$FleetRecords.{$fleetID}.{1}.$name" exact="$name" />
                    <run_actions ref="Update_RFMCaption">
                        <param name="RFMKey" value="$fleetID" />
                    </run_actions>
                    <!-- Debug-->
                    <run_actions ref="Debug_RM_Fleets"/>
                    <run_actions ref="Debug_FleetRecord_NoOthers">
                        <param name="RFMKey" value="$fleetID" />
                    </run_actions>

                    <remove_value name="$fleetID" />
                    <remove_value name="$name" />
                </do_elseif>

                <do_elseif value="event.param2 == 'show_on_map_target'">
                    <open_menu menu="MapMenu" param="[0,0,true,event.param3]" />
                </do_elseif>

                <do_elseif value="event.param2 == 'changed.EditingSettings'">

                    <set_value name="global.$upbRF_DATA.$Editing" exact="event.param3.{1}" />

                    <set_value name="$changedPropertyText" exact="event.param3.{2}" />
                    <set_value name="$changedValue" exact="event.param3.{3}" />
                    <set_value name="$changedSection" exact="@event.param3.{4}" />

                    <include_actions ref="TakeMainConstans" />

                    <do_if value="$changedPropertyText == 'isDebugFileMode'">
                        <run_actions ref="DebugFilesReset" chance="global.$upbRF_DATA.$Editing.$isDebugFileMode * 100"/>
                    </do_if>
                    <do_else>
                        <do_if value="$changedPropertyText == 'BuildTasksChance'">
                            <include_actions ref="PrintBuildTaskIDs" chance="global.$upbRF_DATA.$Editing.$BuildTasksChance"/>
                        </do_if>

                        <do_if value="$changedSection == 'refresh.DebugFiles'">

                            <do_if value="$changedPropertyText == 'DFD.Fleets' or $changedPropertyText == 'DFD.FleetsDeep'">
                                <run_actions ref="Debug_RM_Fleets" />
                            </do_if>
                            

                            <do_if value="$changedPropertyText == 'DFD.RebuildCues'">
                                <run_actions ref="Debug_AllRebuildCues" />
                            </do_if>
                            
                            <do_if value="$changedPropertyText == 'DFD.Records' or $changedPropertyText == 'DFD.RecordsDeep'">
                                <do_for_each name="$RFMKey" in="Main.$RM_Fleets" chance="global.$upbRF_DATA.$Editing.$isDebugFileMode * 100">
                                    <run_actions ref="Debug_FleetRecord_NoOthers">
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>
                                </do_for_each>
                            </do_if>
                        
                            <do_if value="$changedPropertyText == 'DFD.tShipPlan' or $changedPropertyText == 'DFD.tShipPlanDeep'">
                                <do_for_each name="$RFMKey" in="Main.$RM_Fleets" chance="global.$upbRF_DATA.$Editing.$isDebugFileMode * 100">
                                    <run_actions ref="Debug_FleetRecord_tShipPlan" >
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>
                                </do_for_each>
                            </do_if>

                            <do_if value="$changedPropertyText == 'DFD.tIndividualInstructions' or $changedPropertyText == 'DFD.tIndividualInstructionsDeep'">
                                <do_for_each name="$RFMKey" in="Main.$RM_Fleets" chance="global.$upbRF_DATA.$Editing.$isDebugFileMode * 100">
                                    <run_actions ref="Debug_FleetRecord_tIndividualInstructions" >
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>
                                </do_for_each>
                            </do_if>

                            <do_if value="$changedPropertyText == 'DFD.tBulkCrew'">
                                <do_for_each name="$RFMKey" in="Main.$RM_Fleets" chance="global.$upbRF_DATA.$Editing.$isDebugFileMode * 100">
                                    <run_actions ref="Debug_FleetRecord_tBulkCrew" >
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>
                                </do_for_each>
                            </do_if>

                            <do_if value="$changedPropertyText == 'DFD.reBuildCue' or $changedPropertyText == 'DFD.reBuildCueDeep'">
                                <do_for_each name="$RFMKey" in="Main.$RM_Fleets" chance="global.$upbRF_DATA.$Editing.$isDebugFileMode * 100">
                                    <run_actions ref="Debug_RebuildCue">
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>
                                </do_for_each>
                            </do_if>
                        
                        </do_if>

                    </do_else>

                    <debug_text text="'lua_restock_fleet_manager_menu changed settings.property.[%s] to %s %s'.[$changedPropertyText, $changedValue, (if $changedSection != '' then ', Section: %s'.[$changedSection] else '')]" chance="100"/> 

                </do_elseif>

                <do_elseif value="event.param2 == 'changed.blacklist'">

                    <clear_group group="Main.$blacklist_stations" />
                    <do_for_each name="$object" in="event.param3">
                        <add_to_group groupname="Main.$blacklist_stations" object="$object" />
                    </do_for_each>

                    <debug_text text="'Main.changed.blacklist .. %s %s'.[Main.$blacklist_stations.count, Main.$blacklist_stations.list]" chance="Main.$DeepDebug"/>

                </do_elseif>
                
                <do_elseif value="event.param2 == 'changed.autobuild'">
                    <set_value name="$RFMKey" exact="event.param3.{1}" />
                    
                    <set_value name="Main.$RM_Fleets.{$RFMKey}.$autobuild" exact="not Main.$RM_Fleets.{$RFMKey}.$autobuild" />
                    <debug_text text="'RFM_%s.autobuild changed to %s'.[$RFMKey, Main.$RM_Fleets.{$RFMKey}.$autobuild]" chance="Main.$DeepDebug"/>
                    
                </do_elseif>

                <do_elseif value="event.param2 == 'changed.UserQuestions.RemoveRFM'">
                    <set_value name="global.$upbRF_DATA.$Editing.$UserQuestions.$RemoveRFM" exact="event.param3.{1}" />
                    <debug_text text="'UserQuestions.RemoveRFM changed to %s'.[global.$upbRF_DATA.$Editing.$UserQuestions.$RemoveRFM]" chance="Main.$DeepDebug"/>
                </do_elseif>
                <do_elseif value="event.param2 == 'changed.UserQuestions.RemoveShip'">
                    <!-- Main.$DeepDebug  <include_actions ref="GlobalConstants" />-->
                    <!-- 
                    <debug_text text="'BEFORE E = %s , D = %s'.[global.$upbRF_DATA.$Editing.$UserQuestions.$RemoveShip, global.$upbRF_DATA.$Default.$UserQuestions.$RemoveShip]" />
                    -->
                    <set_value name="global.$upbRF_DATA.$Editing.$UserQuestions.$RemoveShip" exact="event.param3.{1}" />
                    <!-- 
                    <debug_text text="'AFTER  E = %s , D = %s'.[global.$upbRF_DATA.$Editing.$UserQuestions.$RemoveShip, global.$upbRF_DATA.$Default.$UserQuestions.$RemoveShip]" />
                    -->
                    <debug_text text="'UserQuestions.RemoveShip changed to %s'.[global.$upbRF_DATA.$Editing.$UserQuestions.$RemoveShip]" chance="Main.$DeepDebug"/>
                </do_elseif>

                <do_elseif value="event.param2 == ''">
                    <!-- Opened menu-->
                </do_elseif>

                <do_elseif value="event.param2 == 'menu_close'">
                    <!-- Closed menu-->
                    <!-- player entity üzerinden açtığımız değişkenleri temizliyoruz -->

                    <!-- 
                    <remove_value name="player.entity.$build_stations" />
                    -->
                    <remove_value name="player.entity.$active_stations" />
                    <remove_value name="player.entity.$blacklist_stations" />

                    <remove_value name="player.entity.$Flag_RFM_Menu" />

                    <remove_value name="player.entity.$RFMDATA" />
                    
                    <remove_value name="player.entity.$md_RFM_DataChanged" />
                    
                </do_elseif>

                <do_else>
                    <debug_text text="'Unknown ControlID &lt;%s&gt;'.[event.param2]" />
                </do_else>
                
            </actions>
        </cue>



        
        <!-- object_signalled from LUA -->
        <!-- rebuildtimerstatus değişimi ile birlikte hem rebuild cancel hem de rebuild start build işlemlerini gerçekleştireceğiz.
             - rebuildtimerstatus change event
            1- CancelRebuildTimers
            2- CancelConstructions
            her iki iş için de tek gemi ya da tüm rfm gemileri için işlem yapacak
            params {fleetID = fleetID[, shipID = 1][, isAllShips = false][, rebuildtimerstatus = -1][, isDisable = false ]}
        -->
        <cue name="CancelRebuildShips" instantiate="true" namespace="this">
            <conditions>
                <check_any>
                    <check_all>
                        <event_object_signalled object="player.entity"/>
                        <check_value value="event.param == 'RebuildShips.cancel'" />
                    </check_all>
                    <event_cue_signalled />
                </check_any>
            </conditions>
            <actions>
                <do_if value="event.name == 'event_cue_signalled'">
                    <set_value name="$paramtable" exact="event.param"/>
                </do_if>
                <do_else>
                    <set_value name="$paramtable" exact="event.param2"/>
                </do_else>
                <set_value name="$RFMKey"               exact="$paramtable.$fleetID"/>
                <set_value name="$shipID"              exact="@$paramtable.$shipID"/>
                <set_value name="$isAllShips"           exact="@$paramtable.$isAllShips"/>
                <set_value name="$rebuildtimerstatus"   exact="@$paramtable.$rebuildtimerstatus"/>
                <set_value name="$isDisable"            exact="@$paramtable.$isDisable"/>

                <do_if value="typeof $isAllShips == datatype.null">
                    <set_value name="$isAllShips" exact="false" />
                </do_if>
                <do_if value="typeof $shipID == datatype.null">
                    <set_value name="$isAllShips" exact="true" />
                </do_if>
                <do_if value="typeof $rebuildtimerstatus == datatype.null">
                    <set_value name="$rebuildtimerstatus" exact="Main.$RM_Fleets.{$RFMKey}.$rebuildtimerstatus" />
                </do_if>
                <do_if value="typeof $isDisable == datatype.null">
                    <set_value name="$isDisable" exact="false" />
                </do_if>

                <set_value name="$debugchance" exact="Main.$DebugChance"/>
                <set_value name="$deepdebug"   exact="Main.$DeepDebug"/>

                <debug_text text="'RFM_%s   [ START ] Cancel Rebuild Ships. Ship%s = [%s] %s %s'.[
                    $RFMKey, 
                    (if $isAllShips then 's' else ''), 
                    (if $isAllShips then 'all' else $shipID), 
                    'rebuild timer status %s'.[if $rebuildtimerstatus then 'ON' else 'OFF'],
                    if $isDisable then '(Running for DISABLE RFM)' else ''
                ]" chance="$debugchance"/>


                <do_if value="Main.$RebuildCues.{$RFMKey}?">
                    <set_value name="$shadow" exact="table[]" />
                    <do_if value="$isAllShips">
                        <set_value name="$shadow" exact="Main.$RebuildCues.{$RFMKey}.clone"/>
                    </do_if>
                    <do_else>
                        <do_if value="Main.$RebuildCues.{$RFMKey}.{$shipID}?">
                            <set_value name="$shadow.{$shipID}" exact="Main.$RebuildCues.{$RFMKey}.{$shipID}.clone"/>
                        </do_if>
                        <do_else>
                            <debug_text text="' Main.$RebuildCues.{%s}.{%s} NO Table. (@_Fikret)'.[$RFMKey, $shipID]" />
                        </do_else>
                    </do_else>

                    <do_for_each name="$ShipKey" in="$shadow">
                        <do_if value="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$build?">

                            <include_actions ref="CancelRebuildShips_Core" />

                            <do_if value="$buildaborted?">
                                <set_value name="$processed" />
                            </do_if>
                            <remove_value name="$buildaborted" />
                            <remove_value name="$buildpassed" />
                        </do_if>
                    </do_for_each>
                </do_if>
                <do_else>
                    <debug_text text="' Main.$RebuildCues.{%s} NO Table. (@_Fikret)'.[$RFMKey]" />
                </do_else>
                
                <do_if value="not $processed? or not $isDisable">

                    <run_actions ref="Check_FleetLockStatus">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="batchprocessing" value="$isAllShips" />
                    </run_actions>

                    <run_actions ref="Debug_AllRebuildCues"/>
                    <run_actions ref="Debug_RebuildCue">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>
                    <include_actions ref="PrintBuildTaskIDs" />
                </do_if>

                <do_if value="@$BuildAbortPassedShips.{$RFMKey}.keys.count gt 0 and not Main.$FleetRecords.{$RFMKey}?" >
                    <include_actions ref="Log_ClosedRFMConstructs" />
                </do_if>

                <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                    $fleetID = $RFMKey,
                    $shipID = null,
                    $Record = Main.$FleetRecords.{$RFMKey},
                    $RebuildCue = Main.$RebuildCues.{$RFMKey},
                    $description = 'Cancell Rebuild Ships RFM_%s'.[$RFMKey]
                ]" chance="player.entity.$Flag_RFM_Menu? * 100 * (not $isDisable)"/>

                <debug_text text="'RFM_%s   [  END  ] Cancel Rebuild %s'.[$RFMKey, (if $isAllShips then 'All Ships' else 'Ship[%s]'.[$shipID])]" chance="$debugchance"/>
            </actions>
        </cue>
        <library name="CancelRebuildShips_Core" purpose="include_actions">
            <actions>

                <set_value name="$cue"                  exact="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue" />
                <set_value name="$build"                exact="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$build" />
                <set_value name="$buildingcontainer"    exact="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$shipyard.$object" />
                <set_value name="$Ship_Name"    exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$name"/>
                <do_if value="not $isDisable?">
                    <set_value name="$isDisable" exact="false" />
                </do_if>
                <debug_text text="' Checking for Cancel [%s_%s]build.&lt;%s&gt; on Shipyard = %s %s (cue = %s)'.[$RFMKey, $ShipKey, $build, @$buildingcontainer.knownname, @$buildingcontainer.idcode, $cue]"  chance="$deepdebug"/>

                <do_if value="not $BuildAbortPassedShips?">
                    <set_value name="$BuildAbortPassedShips" exact="table[]" />
                </do_if>
                <do_if value="not $BuildAbortPassedShips.{$RFMKey}?">
                    <set_value name="$BuildAbortPassedShips.{$RFMKey}" exact="table[]" />
                </do_if>

                <do_for_each name="$task" in="Main.$BuildTaskIDs" reverse="true" counter="$i" comment="oyun pause esnasında build oluşmamış add task alan emirleri yine pause esnasında silebilmek için:">
                    <do_if value="($task.$RFMKey == $RFMKey and $task.$ShipKey == $ShipKey)">
                        <set_value name="$taskindex" exact="$i" />
                        <set_value name="$removetaskindex" exact="$taskindex" />
                        <set_value name="$shipyard" exact="$task.$buildingcontainer" />
                        <do_if value="$task.$build.exists">
                            <do_for_each name="$quedbuild" in="$shipyard.builds.queued" counter="$k" >
                                <do_if value="$quedbuild == $task.$build">
                                    <do_if value="$quedbuild.object.canabortbuild.{$quedbuild}">
                                        <debug_text text="'        Task Aborting queued_table[%s] [%s_%s].build &lt;%s&gt; on Shipyard (%s %s)'.[$removetaskindex, $RFMKey, $ShipKey, $quedbuild, @$quedbuild.object.idcode, @$quedbuild.object.knownname, @$quedbuild.macro]"  chance="$deepdebug"/>
                                        <abort_build container="$shipyard" build="$quedbuild"/>
                                        <set_value name="$buildaborted" />
                                        <remove_value name="$removetaskindex" />
                                        <break />
                                    </do_if>
                                    <do_else>
                                        <debug_text text="'         Task Passing queued_table[%s] [%s_%s].build.&lt;%s&gt; %s %s on Shipyard (%s %s)'.[$removetaskindex, $RFMKey, $ShipKey, $quedbuild, $quedbuild.buildobject.knownname, $quedbuild.buildobject.idcode, $shipyard.knownname, $shipyard.idcode]"  chance="$deepdebug"/>
                                        <do_if value="not $BuildAbortPassedShips.{$RFMKey}.{$shipyard}?">
                                            <set_value name="$BuildAbortPassedShips.{$RFMKey}.{$shipyard}" exact="[]" />
                                        </do_if>
                                        <append_to_list name="$BuildAbortPassedShips.{$RFMKey}.{$shipyard}" exact="table[
                                            $shipID     = $ShipKey,
                                            $buildobject    = $quedbuild.buildobject
                                        ]" />
                                        <remove_value name="$buildaborted" />
                                        <set_value name="$buildpassed" />
                                        <remove_value name="$removetaskindex" />
                                    </do_else>
                                </do_if>
                            </do_for_each>
                            <do_for_each name="$inprogressbuild" in="$shipyard.builds.inprogress" counter="$k" >
                                <do_if value="$inprogressbuild == $task.$build">
                                    <do_if value="$shipyard.canabortbuild.{$inprogressbuild}">
                                        <debug_text text="'        Task Aborting inprogress_table[%s] [%s_%s]build.&lt;%s&gt; %s on Shipyard (%s %s)'.[$removetaskindex, $RFMKey, $ShipKey, $inprogressbuild, $inprogressbuild.macro.name, $shipyard.knownname, $shipyard.idcode]"  chance="$deepdebug"/>
                                        <abort_build container="$shipyard" build="$inprogressbuild"/>
                                        <set_value name="$buildaborted" />
                                        <remove_value name="$removetaskindex" />
                                    </do_if>
                                    <do_else>
                                        <debug_text text="'         Task Passing inprogress table[%s] [%s_%s].build.&lt;%s&gt; %s %s on Shipyard (%s %s)'.[$removetaskindex, $RFMKey, $ShipKey, $inprogressbuild, $inprogressbuild.buildobject.knownname, $inprogressbuild.buildobject.idcode, $shipyard.knownname, $shipyard.idcode]"  chance="$deepdebug"/>
                                        <do_if value="not $BuildAbortPassedShips.{$RFMKey}.{$shipyard}?">
                                            <set_value name="$BuildAbortPassedShips.{$RFMKey}.{$shipyard}" exact="[]" />
                                        </do_if>
                                        <append_to_list name="$BuildAbortPassedShips.{$RFMKey}.{$shipyard}" exact="table[
                                            $shipID     = $ShipKey,
                                            $buildobject    = $inprogressbuild.buildobject
                                        ]" />
                                        <remove_value name="$buildaborted" />
                                        <set_value name="$buildpassed" />
                                        <remove_value name="$removetaskindex" />
                                    </do_else>
                                    <break />
                                </do_if>
                            </do_for_each>
                        </do_if>
                        <do_else>
                            <debug_text text="'        Invalid Task[%s] [%s_%s].build &lt;%s&gt;'.[$removetaskindex, $RFMKey, $ShipKey, $task.$build]"  chance="$deepdebug"/>
                        </do_else>
                        <break />
                    </do_if>
                </do_for_each>

                <do_if value="not $build.exists">
                    <set_value name="$build" exact="null" />
                </do_if>

                <do_if value="$build != null and (not $buildpassed? and not $buildaborted?)">
                    <do_if value="@$build.object.builds.queued.indexof.{$build} and $build.object.canabortbuild.{$build}">
                        <debug_text text="'         Aborting [%s_%s]build.&lt;%s&gt; %s on Shipyard = %s %s &lt;%s&gt;'.[$RFMKey, $ShipKey, $build, $build.macro.name, $build.object.knownname, $build.object.idcode, $build.object]"  chance="$deepdebug"/>
                        <abort_build container="$build.object" build="$build"/>
                        <set_value name="$buildaborted" />
                    </do_if>
                    <do_else>
                        <debug_text text="'         Passing Abort [%s_%s]build.&lt;%s&gt; on Shipyard = %s %s &lt;%s&gt;'.[$RFMKey, $ShipKey, $build, $build.object.knownname, $build.object.idcode, $build.object]"  chance="$deepdebug"/>
                        <do_if value="not $BuildAbortPassedShips.{$RFMKey}.{$build.object}?">
                            <set_value name="$BuildAbortPassedShips.{$RFMKey}.{$build.object}" exact="[]" />
                        </do_if>
                        <append_to_list name="$BuildAbortPassedShips.{$RFMKey}.{$build.object}" exact="table[
                            $shipID     = $ShipKey,
                            $buildobject    = $build.buildobject
                        ]" />
                        <remove_value name="$buildaborted" />
                        <set_value name="$buildpassed" />
                    </do_else>
                </do_if>

                <do_if value="($removetaskindex? or $isDisable)">
                    <do_if value="$removetaskindex?">
                        <debug_text text="'        Task_Removing [%s] .. table Main.$BuildTaskIDs {%s} {%s}  task.build = %s'.[$removetaskindex, $RFMKey, $ShipKey, Main.$BuildTaskIDs.{$removetaskindex}.$build]" chance="$deepdebug * Main.$BuildTaskIDs.{$removetaskindex}?"/>
                        <remove_value name="Main.$BuildTaskIDs.{$removetaskindex}" chance="Main.$BuildTaskIDs.{$removetaskindex}? * 100" />
                        <remove_value name="$removetaskindex" chance="$removetaskindex? * 100"/>
                        <signal_cue_instantly cue="ClearBuildTaskStacks" param="table[$fleetID = $RFMKey, $shipID = $ShipKey]"/>
                    </do_if>
                </do_if>

                <do_if value="(not $buildpassed? or $isDisable) and $cue.exists">
                    <debug_text text="'       Cancelling [%s_%s]cue&lt;%s&gt; for destroyed ship.'.[$RFMKey, $ShipKey, $cue]" chance="$deepdebug"/>
                    <cancel_cue cue="$cue" />
                </do_if>

                <do_if value="(not $buildpassed? or $isDisable)">
                    <do_if value="Main.$RebuildCues.{$RFMKey}.{$ShipKey}? and $buildaborted?">
                        <remove_value name="$buildaborted" comment="pause zamanında, build ve peşinden abort verilmiş ise build.add cancell üzerinden tablo silinememiş olur..
                                                                    (cue başında 1ms bekleme var) lua için değişkeni siliyoruz."/>
                        <do_if value="$taskindex?">
                            <do_if value="Main.$BuildTaskIDs.{$taskindex}.$RFMKey == $RFMKey and Main.$BuildTaskIDs.{$taskindex}.$ShipKey == $ShipKey" chance="Main.$BuildTaskIDs.{$taskindex}? * 100">
                                <debug_text text="'        W8 Task_Removing [%s] .. table Main.$BuildTaskIDs {%s} {%s}  task.build = %s'.[$taskindex, $RFMKey, $ShipKey, Main.$BuildTaskIDs.{$taskindex}.$build]" chance="$deepdebug * Main.$BuildTaskIDs.{$taskindex}?"/>
                                <remove_value name="Main.$BuildTaskIDs.{$taskindex}" />
                                <remove_value name="$taskindex" />
                                <signal_cue_instantly cue="ClearBuildTaskStacks" param="table[$fleetID = $RFMKey, $shipID = $ShipKey]"/>
                            </do_if>
                        </do_if>
                    </do_if>
                    <debug_text text="'      Removing.. table $RebuildCues.{%s}.{%s}'.[$RFMKey, $ShipKey]" chance="$deepdebug * Main.$RebuildCues.{$RFMKey}.{$ShipKey}?"/>
                    <remove_value name="Main.$RebuildCues.{$RFMKey}.{$ShipKey}" chance="Main.$RebuildCues.{$RFMKey}.{$ShipKey}? * 100"/>
                </do_if>

                <do_if value="(not $buildpassed? and not $buildaborted?)">

                    <do_if value="not $rebuildtimerstatus">
                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$reBuildTryNum" exact="0" />
                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$reBuildStartTime" exact="null" />
                    </do_if>
                    <!-- 
                    <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                            $fleetID = $RFMKey,
                            $shipID = $ShipKey,
                            $Record = if not $rebuildtimerstatus then Main.$FleetRecords.{$RFMKey}.{$ShipKey} else null,
                            $RebuildCue = null,
                            $description = 'Rebuild Ship Check Closed %s_%s'.[$RFMKey, $ShipKey]
                        ]" chance="player.entity.$Flag_RFM_Menu? * 100 * (not $isDisable)"/>
                    -->
                    <debug_text text="'RebuildShipCheck Closed %s_%s'.[$RFMKey, $ShipKey]" chance="$deepdebug * player.entity.$Flag_RFM_Menu?"/>
                </do_if>

            </actions>
        </library>

        <!-- clear from player.entity.$BuildTaskStacks 
            params {fleetID = fleetID, shipID = shipID } -->
        <cue name="ClearBuildTaskStacks" instantiate="true">
            <conditions>
                <event_cue_signalled />
            </conditions>
            <actions>
                <set_value name="$fleetID" exact="event.param.$fleetID" />
                <set_value name="$shipID" exact="event.param.$shipID"/>
                <do_if value="player.entity.$BuildTaskStacks? and player.entity.$BuildTaskStacks.count ">
                    <do_for_each name="$stack" in="player.entity.$BuildTaskStacks" reverse="true" counter="$i">
                        <do_if value="$stack.$fleetID == $fleetID and $stack.$shipID == $shipID">   
                            <remove_value name="player.entity.$BuildTaskStacks.{$i}" />
                            <debug_text text="'Removed BuildTaskStacks[%s] for [%s][%s] - - Left #BuildTaskStacks = %s'.[$i, $fleetID, $shipID, player.entity.$BuildTaskStacks.count]" chance="Main.$DeepDebug"/>
                        </do_if>
                    </do_for_each>
                    <do_if value="player.entity.$BuildTaskStacks.count == 0">
                        <remove_value name="player.entity.$BuildTaskStacks" />
                    </do_if>
                </do_if>
            </actions>
        </cue>

        <!-- object_signalled from LUA -->
        <!-- rebuildtimerstatus değişimi ile birlikte rebuild construct işlemlerini gerçekleştireceğiz.
             - rebuildtimerstatus change event ( ! değişim olayı yoksa -1, varsa true ya da false )
            1- BuildConstructions
            params {fleetID = fleetID[, shipID = 1][, isAllShips = false][, rebuildtimerstatus = -1][, passingcriterias = [] ]}
        -->
        <cue name="StartRebuildShips" instantiate="true" namespace="this">
            <conditions>
                <check_any>
                    <check_all>
                        <event_object_signalled object="player.entity"/>
                        <check_value value="event.param == 'RebuildShips.start'" />
                    </check_all>
                    <event_cue_signalled />
                </check_any>
            </conditions>
            <actions>

                <do_if value="event.name == 'event_cue_signalled'">
                    <set_value name="$paramtable" exact="event.param"/>
                </do_if>
                <do_else>
                    <set_value name="$paramtable" exact="event.param2"/>
                </do_else>
                <set_value name="$RFMKey"               exact="$paramtable.$fleetID"/>
                <set_value name="$ShipKey"              exact="@$paramtable.$shipID"/>
                <set_value name="$isAllShips"           exact="@$paramtable.$isAllShips"/>
                <set_value name="$rebuildtimerstatus"   exact="@$paramtable.$rebuildtimerstatus"/>
                <set_value name="$passingcriterias"     exact="@$paramtable.$passingcriterias"/>
                
                <do_if value="typeof $isAllShips == datatype.null">
                    <set_value name="$isAllShips" exact="false" />
                </do_if>
                <do_if value="typeof $ShipKey == datatype.null">
                    <do_if value="not $isAllShips">
                        <set_value name="$ShipKey" exact="1" />
                    </do_if>
                </do_if>
                <do_if value="typeof $rebuildtimerstatus == datatype.null">
                    <set_value name="$rebuildtimerstatus" exact="null" />
                </do_if>
                <do_if value="typeof $passingcriterias == datatype.table or typeof $passingcriterias == datatype.null">
                    <set_value name="$passingcriterias" exact="[]" />
                </do_if>
                
                <set_value name="$debugchance" exact="Main.$DebugChance"/>
                <set_value name="$deepdebug"    exact="Main.$DeepDebug"/>

                <debug_text text="'RFM_%s   [ START ] Start Rebuild Ships. Ship%s = [%s] %s , passingcriterias = %s'.[
                    $RFMKey, 
                    (if $isAllShips then 's' else ''), 
                    (if $isAllShips then 'all' else $ShipKey), 
                    (if $rebuildtimerstatus != null and $rebuildtimerstatus ge 0 then 
                        'force rebuild timer status to %s'.[if $rebuildtimerstatus then 'ON' else 'OFF']
                    else 
                        'rebuild timer status default'
                    ),
                    $passingcriterias
                ]" chance="$debugchance"/>

                <do_if value="$isAllShips">
                    <set_value name="$destroyedshipcount" exact="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.count" />
                    <set_value name="$opcount" exact="0"/>
                    <do_for_each name="$entryKey" valuename="$entry" in="Main.$FleetRecords.{$RFMKey}" >
                        <do_if value="$entry.$object == null or $entry.$destroyed ">
                            
                            <set_value name="$opcount" operation="add" />

                            <set_value name="$entry.$reBuildStartTime" exact="player.age"/>
                            <set_value name="$entry.$reBuildTryNum" exact="0"/>

                            <set_value name="$ShipKey"  exact="$entry.$id" />
                            <set_value name="$Ship_Name"    exact="$entry.$name"/>

                            <do_if value="Main.$RebuildCues.{$RFMKey}.{$ShipKey}?">
                                <include_actions ref="CancelRebuildShips_Core" />
                            </do_if>

                            <do_if value="not $buildpassed?">
                                <!-- PARAM table[ $RFMKey = RFMKey, $ShipKey [, $passingcriterias = [] ] [, $rebuildtimerstatus = Main.$RM_Fleets.{$RFMKey}.$rebuildtimerstatus] [, $destroyedobject = null] ]  -->
                                <signal_cue_instantly cue="Check_Add_ConstructionShip_ForFleet" 
                                    param="table[
                                        $RFMKey = $RFMKey, 
                                        $ShipKey = $ShipKey,
                                        $batchprocessing = true,
                                        $lastbatchprocessing = if $destroyedshipcount == $opcount then true else false,
                                        $rebuildtimerstatus = $rebuildtimerstatus,
                                        $passingcriterias = $passingcriterias 
                                    ]" />
                            </do_if>

                            <do_if value="$buildaborted?">
                                <set_value name="$processed" />
                            </do_if>

                            <remove_value name="$buildaborted" />
                            <remove_value name="$buildpassed" />

                        </do_if>
                    </do_for_each>
                </do_if>
                <do_else>
                    
                    <do_if value="Main.$RebuildCues.{$RFMKey}.{$ShipKey}?">
                        <include_actions ref="CancelRebuildShips_Core" />
                    </do_if>

                    <do_if value="not $buildpassed?">
                        <!-- PARAM table[ $RFMKey = RFMKey, $ShipKey [, $passingcriterias = [] ] [, $rebuildtimerstatus = Main.$RM_Fleets.{$RFMKey}.$rebuildtimerstatus] [, $destroyedobject = null] ]  -->
                        <signal_cue_instantly cue="Check_Add_ConstructionShip_ForFleet" 
                            param="table[
                                $RFMKey = $RFMKey,
                                $ShipKey = $ShipKey,
                                $batchprocessing = false,
                                $rebuildtimerstatus = $rebuildtimerstatus,
                                $passingcriterias = $passingcriterias 
                            ]" /> 
                    </do_if>

                    <do_if value="$buildaborted?">
                        <set_value name="$processed" />
                    </do_if>

                    <remove_value name="$buildaborted" />
                    <remove_value name="$buildpassed" />

                </do_else>
                
                <do_if value="$processed?">
                    <run_actions ref="Check_FleetLockStatus">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="batchprocessing" value="$isAllShips" />
                    </run_actions>
                    <run_actions ref="Debug_FleetRecord_NoOthers">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>
                    
                    <run_actions ref="Debug_AllRebuildCues"/>
                    <run_actions ref="Debug_RebuildCue">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>
                    <include_actions ref="PrintBuildTaskIDs" />
                </do_if>

                <debug_text text="'RFM_%s   [  END  ] Start Rebuild Ships'.[$RFMKey]" chance="Main.$DebugChance"/>

            </actions>
        </cue>


        <cue name="RebuildTimerStatusChange" instantiate="true" namespace="this">
            <conditions>
                <check_any>
                    <check_all>
                        <event_object_signalled object="player.entity"/>
                        <check_value value="event.param == 'rebuildtimerstatus.change'" />
                    </check_all>
                    <event_cue_signalled />
                </check_any>
            </conditions>
            <actions>
                <do_if value="event.name == 'event_cue_signalled'">
                    <set_value name="$paramtable" exact="event.param"/>
                </do_if>
                <do_else>
                    <set_value name="$paramtable" exact="event.param2"/>
                </do_else>

                <set_value name="$RFMKey"               exact="$paramtable.$fleetID" />
                <set_value name="$rebuildtimerstatus"   exact="@$paramtable.$rebuildtimerstatus"/>

                <do_if value="typeof $rebuildtimerstatus == datatype.null">
                    <set_value name="$rebuildtimerstatus" exact="not Main.$RM_Fleets.{$RFMKey}.$rebuildtimerstatus" />
                </do_if>

                <set_value name="$debugchance" exact="Main.$DebugChance"/>
                <set_value name="$deepdebug"    exact="Main.$DeepDebug"/>

                <debug_text text="'RFM_%s  rebuild timer status changed to %s'.[
                    $RFMKey, 
                    if $rebuildtimerstatus then 'ON' else 'OFF'
                ]" chance="$debugchance"/>

                <set_value name="Main.$RM_Fleets.{$RFMKey}.$rebuildtimerstatus" exact="$rebuildtimerstatus"/>
                
                <raise_lua_event name="'rebuildtimerstatuschange.completed'" chance="player.entity.$Flag_RFM_Menu? * 100"/>

                <debug_text text="' RFM_%s Rebuild Timer Status %s'.[$RFMKey, (if $rebuildtimerstatus then 'ON' else 'OFF')]" chance="$deepdebug"/>
                
            </actions>
        </cue>

        <!-- REMOVE RFM_SHIP 
            params {fleetID = fleetID, shipID = shipID }
        -->
        <cue name="RequestedRemoveShip" instantiate="true" namespace="this">
            <conditions>
                <check_any>
                    <check_all>
                        <event_object_signalled object="player.entity"/>
                        <check_value value="event.param == 'Remove.Ship'" />
                    </check_all>
                    <event_cue_signalled />
                </check_any>
            </conditions>
            <actions>
                <do_if value="event.name == 'event_cue_signalled'">
                    <set_value name="$paramtable" exact="event.param"/>
                </do_if>
                <do_else>
                    <set_value name="$paramtable" exact="event.param2"/>
                </do_else>

                <set_value name="$RFMKey" exact="$paramtable.$fleetID" />
                <set_value name="$ShipKey" exact="$paramtable.$shipID" />

                <set_value name="$debugchance" exact="Main.$DebugChance"/>
                <set_value name="$deepdebug"    exact="Main.$DeepDebug"/>

                <!-- record kaydında işlem yapılacak gemi türü
                    1- destroyed olacak
                    2- çalışan build verisi olmayacak
                    <set_value name="$debugchance" exact="100" />
                -->

                <do_if value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$destroyed">
                    <do_if value="@Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$build == null">
                        <set_value name="$delete" />
                    </do_if>
                </do_if>
                <do_if value="$delete?">
                    <!-- Çıkarılacak geminin mainSublarını buluyoruz -->
                    <run_actions ref="Get_SubKeys_From_FleetRecord" result="$mainsubskeys">
                        <param name="FleetRecord" value="Main.$FleetRecords.{$RFMKey}" />
                        <param name="CommanderKey" value="$ShipKey" />
                    </run_actions>
                    <!-- 
                        $ShipKey == 1 ise
                            Seçilen Yeni RMCommanderKey record, rebuild ve loadout tablolarını ShipKey [1] e taşı, 
                                key değiştiği için varsa rebuildcue içindeki ShipIDX değerini commanderkey olan 1 vereceğiz
                            Seçilen Yeni RMCommanderKey ye ait eski record, rebuild ve loadout tablolarını sil
                            Yeni Record 1 kaydı üzerindeki commander bilgileri düzenlemesini yap
                            Seçilen Yeni RMCommanderKey e bağlı mainSubların Record.commanderidxlerini 1 yap
                        $ShipKey != 1 ise
                            Silinecek geminin mainSublarının commanderidx değerelerine, sileceğimiz geminin kendi commanderidx değerini vereceğiz
                    -->     
                    <do_if value="$ShipKey == 1">
                        <debug_text text="'RFM_%s için Silme İşlemi Başladı. RMCommander Silinecek.'.[$RFMKey, $mainsubskeys]" chance="$debugchance"/>
                        <set_value name="$oldCommanderRecord" exact="Main.$FleetRecords.{$RFMKey}.{1}" />
                        <debug_text text="'    mainsubskeys = %s '.[$mainsubskeys]" chance="$deepdebug"/>
                        <do_if value="$mainsubskeys.count gt 0">
                            <!-- Fleet Commander silineceği için main sublardan en iyi olanı yeni fleet commander oalrak belirleyeceğiz-->
                            <run_actions ref="GetBestCommander" result="$newRMCommanderKey">
                                <param name="RFMKey" value="$RFMKey" />
                                <param name="isInMainSubs" value="true" />
                                <param name="isIncludeExploded" value="true" />
                            </run_actions>

                            <!-- Seçilen yeni commanderin mainSublarını bulalım-->
                            <run_actions ref="Get_SubKeys_From_FleetRecord" result="$mainsubskeys">
                                <param name="FleetRecord" value="Main.$FleetRecords.{$RFMKey}" />
                                <param name="CommanderKey" value="$newRMCommanderKey" />
                            </run_actions>
                            <debug_text text="'    Yeni Commander mainsubskeys = %s'.[$mainsubskeys]" chance="$deepdebug"/>

                            <!-- Seçilen yeni comamnder tablolarını tablo.[1] lere Taşıyacağız-->
                            <!-- RebuildCues Taşı-->
                            <!-- Taşınmadan önce Eski 1'in çalışan rebuild cuesi varsa silelim-->
                            <do_if value="Main.$RebuildCues.{$RFMKey}.{1}?">
                                <do_if value="Main.$RebuildCues.{$RFMKey}.{1}.$cue.exists">
                                    <debug_text text="'   Eski RMCommander RebuildCues.[%s].[1].cue &lt;%s&gt; sonlandırıldı..'.[$RFMKey, Main.$RebuildCues.{$RFMKey}.{1}.$cue]" chance="$deepdebug"/>
                                    <cancel_cue cue="Main.$RebuildCues.{$RFMKey}.{1}.$cue" />
                                </do_if>
                            </do_if>
                            <!-- RebuildCue Tablosunu 1'e taşıyalım ve cue içindeki ShipIdx = 1 yapalım -->
                            <do_if value="Main.$RebuildCues.{$RFMKey}.{$newRMCommanderKey}?">
                                <set_value name="Main.$RebuildCues.{$RFMKey}.{1}" exact="Main.$RebuildCues.{$RFMKey}.{$newRMCommanderKey}" />
                                <set_value name="Main.$RebuildCues.{$RFMKey}.{1}.$cue.$ShipIDX" exact="1" />
                                <debug_text text="'  RebuildCues.[%s] -&gt; RebuildCues.[1] e taşındı..'.[$newRMCommanderKey]" chance="$deepdebug"/>
                                <!-- Taşınan Eski RebuildCue tablosunu silelim, tablo 1'e taşındığı için cuesini sonlandırmıyoruz -->
                                <remove_value name="Main.$RebuildCues.{$RFMKey}.{$newRMCommanderKey}" />
                                <debug_text text="'    Taşınan Eski RebuildCues.[%s] tablosu silindi..'.[$newRMCommanderKey]" chance="$deepdebug"/>
                            </do_if>

                            <!-- Records Taşı-->
                            <!-- Record Tablosunu 1e taşıyıp rmcommander için hazırlayalım -->
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{1}" exact="Main.$FleetRecords.{$RFMKey}.{$newRMCommanderKey}" />
                            <debug_text text="'  FleetRecords.[%s] -&gt; FleetRecords.[1] e taşındı..'.[$newRMCommanderKey]" chance="$deepdebug"/>
                            <!-- Eski commanderin DefaultOrder ve orders listelerini yeni commandere devredelim -->
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{1}.$defaultorder" exact="$oldCommanderRecord.$defaultorder" />
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{1}.$orders" exact="$oldCommanderRecord.$orders" />
                            <debug_text text="'  Silinen Commanderin order bilgileri yeni commandere aktarıldı..'.[]" chance="$deepdebug"/>
                            <!-- Eski commanderin sector bilgilerini yeni commandere devredelim -->
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{1}.$sector" exact="$oldCommanderRecord.$sector" />
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{1}.$sectorid" exact="$oldCommanderRecord.$sectorid" />
                            <debug_text text="'  Silinen Commanderin Sector bilgileri yeni commandere aktarıldı..'.[]" chance="$deepdebug"/>
                            <!-- Yeni Commander için eski kaydından kalan düzeltilmesi gereken değerleri düzeltelim-->
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{1}.$assignment" exact="null" />
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{1}.$commanderidx" exact="-1" />
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{1}.$subordinategroupid" exact="-1" />
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{1}.$subordinategrouptext" exact="''" />
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{1}.$id" exact="1" />
                            <debug_text text="'    FleetRecords.[1] güncellendi... [name = %s &lt;%s&gt; id = %s]'.[Main.$FleetRecords.{$RFMKey}.{1}.$name, Main.$FleetRecords.{$RFMKey}.{1}.$object, Main.$FleetRecords.{$RFMKey}.{1}.$id ]" chance="$deepdebug"/>
                            <!-- Taşınan Eski Record tablosunu siliyoruz-->
                            <remove_value name="Main.$FleetRecords.{$RFMKey}.{$newRMCommanderKey}" />
                            <debug_text text="'    Taşınan Eski FleetRecords.[%s] tablosu silindi..'.[$newRMCommanderKey]" chance="$deepdebug"/>
                            
                            <!-- Loadouts Taşı-->
                            <!-- Loadouts tablosunu 1e taşıyalım-->
                            <set_value name="Main.$Loadouts.{$RFMKey}.{1}" exact="Main.$Loadouts.{$RFMKey}.{$newRMCommanderKey}" />
                            <debug_text text="'  Loadouts.[%s] -&gt; Loadouts.[1] e taşındı..'.[$newRMCommanderKey]" chance="$deepdebug"/>
                            <!-- Taşınan Eski Loadout kaydını silelim -->
                            <remove_value name="Main.$Loadouts.{$RFMKey}.{$newRMCommanderKey}" />
                            <debug_text text="'    Taşınan Eski Loadouts.[%s] tablosu silindi..'.[$newRMCommanderKey]" chance="$deepdebug"/>

                            <!-- Seçilen RMCommanderın mainSublarını kendisine bağlayalım-->
                            <do_for_each name="$skey" in="$mainsubskeys">
                                <set_value name="Main.$FleetRecords.{$RFMKey}.{$skey}.$commanderidx" exact="1" />
                                <debug_text text="'    (Sub %s) yeni commander.idx bağlandı -&gt; ( 1-%s )'.[$skey, Main.$FleetRecords.{$RFMKey}.{1}.$name]" chance="$deepdebug"/>
                            </do_for_each>

                            <!-- RMFleets Düzenle-->
                            <!-- Yeni RMCommanderın eski keyini Fleet destroyedShipKeys listesinden çıkaralım -->
                            <do_if value="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.indexof.{$newRMCommanderKey}">
                                <remove_from_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$newRMCommanderKey" />
                                <debug_text text="'  [%s] - RM_Fleets.[%s].destroyedShipKeys listesinden silindi..'.[$newRMCommanderKey, $RFMKey]" chance="$deepdebug"/>
                            </do_if>
                            <!-- commander.name,  commander.object bilgilerini yeni commandera göre düzenle -->
                            <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$object" exact="Main.$FleetRecords.{$RFMKey}.{1}.$object" />
                            <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$name" exact="Main.$FleetRecords.{$RFMKey}.{1}.$name" />
                            <do_if value="Main.$FleetRecords.{$RFMKey}.{1}.$object != null">
                                <set_value name="Main.$RM_Fleets.{$RFMKey}.$isStation" exact="Main.$FleetRecords.{$RFMKey}.{1}.$object.realclass == class.station" />
                            </do_if>
                            <do_else>
                                <set_value name="Main.$RM_Fleets.{$RFMKey}.$isStation" exact="Main.$FleetRecords.{$RFMKey}.{1}.$class == class.station" />
                            </do_else>
                            <!-- Yeni Commander halihazırdaki promoted ise shipid bilgisini de güncelle-->
                            <do_if value="Main.$RM_Fleets.{$RFMKey}.$shipid == $newRMCommanderKey">
                                <set_value name="Main.$RM_Fleets.{$RFMKey}.$shipid" exact="1" />
                            </do_if>
                            <debug_text text="'  RM_Fleets.[%s].commander bilgisi güncellendi.. [name = %s &lt;%s&gt; shipid = %s]'.[$RFMKey, Main.$RM_Fleets.{$RFMKey}.$commander.$name, Main.$RM_Fleets.{$RFMKey}.$commander.$object, Main.$RM_Fleets.{$RFMKey}.$shipid]" chance="$deepdebug"/>
                        </do_if>
                        <!-- Sadece kendisi varsa RFM kapatılacak-->
                        <do_else>
                            <set_value name="$closeRFM" />
                        </do_else>
                    </do_if>
                    <do_else>
                        <debug_text text="'RFM_%s için Silme İşlemi Başladı. Sub.[%s] Silinecek...'.[$RFMKey, $ShipKey]" chance="$debugchance"/>
                        <!-- Çıkarılan geminin commander indexi -->
                        <set_value name="$newcommanderidx" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$commanderidx" />
                        <do_for_each name="$skey" in="$mainsubskeys">
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$skey}.$commanderidx" exact="$newcommanderidx" />
                            <debug_text text="'  RFM_%s (Sub %s) yeni commandera ( %s-%s ) bağlandı..'.[$RFMKey, $skey, $newcommanderidx, Main.$FleetRecords.{$RFMKey}.{$newcommanderidx}.$name]" chance="$deepdebug"/>
                        </do_for_each>

                        <!-- RMFleets destroyed lsitesinden çıkarıyoruz -->
                        <do_if value="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.indexof.{$ShipKey}">
                            <remove_from_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$ShipKey" />
                            <debug_text text="'  RFM_%s_%s RM_Fleets destroyedShipKeys listesinden silindi..'.[$RFMKey, $ShipKey]" chance="$deepdebug"/>
                        </do_if>

                        <!-- RebuildCue'sini ve tablosunu siliyoruz-->
                        <do_if value="Main.$RebuildCues.{$RFMKey}.{$ShipKey}?">
                            <debug_text text="'   RFM_%s_%s cue.%s sonlandırılıp RebuildCues kaydı silindi..'.[$RFMKey, $ShipKey, Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue]" chance="$deepdebug"/>
                            <cancel_cue cue="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue" />
                            <remove_value name="Main.$RebuildCues.{$RFMKey}.{$ShipKey}" />
                        </do_if>

                        <!-- Loadout Tablosunu siliyoruz kaydından çıkarıyoruz-->
                        <remove_value name="Main.$Loadouts.{$RFMKey}.{$ShipKey}" />
                        <debug_text text="'  RFM_%s_%s Loadouts kaydı silindi..'.[$RFMKey, $ShipKey]" chance="$deepdebug"/>

                        <!-- Record Tablosunu siliyoruz -->
                        <remove_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}" />
                        <debug_text text="'  RFM_%s_%s Record kaydı silindi..'.[$RFMKey, $ShipKey]" chance="$deepdebug"/>
                    </do_else>

                    <!-- Filoda kayıt kaldı mı?-->
                    <debug_text text="'    FleetRecords.{%s}.count = %s , $closeRFM? %s'.[$RFMKey, Main.$FleetRecords.{$RFMKey}.keys.count, $closeRFM?]" chance="$deepdebug"/>
                    <do_if value="Main.$FleetRecords.{$RFMKey}.keys.count == 0 or $closeRFM?">
                        <debug_text text="'    Filoda gemi kalmadı. Manager kapatılıyor'.[]" chance="$debugchance"/>
                        <!-- param $RFMKey Or list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false) ] -->
                        <signal_cue_instantly cue="Disable__RFM" param="[ $RFMKey, 'Request Remove Ship', null, true ]" />
                    </do_if>
                    <do_else>
                        <run_actions ref="Check_FleetLockStatus">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>

                        <!-- DEBUG : RM_FLEETS File-->
                        <run_actions ref="Debug_RM_Fleets"/>
                        <!-- ALL REBUILD CUES -->
                        <run_actions ref="Debug_AllRebuildCues"/>
                        <!-- REBUILD CUES -->
                        <run_actions ref="Debug_RebuildCue">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                        <!-- DEBUG : Fleet Record File -->
                        <run_actions ref="Debug_FleetRecord">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                        <include_actions ref="PrintBuildTaskIDs" />
                    </do_else>

                    <debug_text text="'Silme işlemi tamamlandı... RFM_%s_%s'.[$RFMKey, $ShipKey]" chance="$debugchance"/>
                </do_if>
                <do_else>
                    <debug_text text="'Silme işlemi atlanacak.. RebuildCues tablosunda build gözüküyor. RFM_%s_%s , recordcounts = %s  (@_Fikret)'.[$RFMKey, $ShipKey, Main.$FleetRecords.{$RFMKey}.keys.count]" />
                </do_else>

                <set_value name="player.entity.$removeshipcompleted" exact="table[
                    $closeRFM = $closeRFM?,
                    $RM_Fleet = if $closeRFM? then null else Main.$RM_Fleets.{$RFMKey},
                    $FleetRecords = if $closeRFM? then null else Main.$FleetRecords.{$RFMKey},
                    $RebuildCues = if $closeRFM? then null else Main.$RebuildCues.{$RFMKey}
                ]" chance="player.entity.$Flag_RFM_Menu? * 100"/>
                <raise_lua_event name="'removeship.completed'" chance="player.entity.$Flag_RFM_Menu? * 100"/>


            </actions>
        </cue>

        <!-- object_signalled from lua -->
        <!-- 
            { fleetID = fleetID [, shipID = 1][, entity = nil][, isSound = true][, autobuild = global.$upbRF_DATA.$Editing.$autobuildafterclone] }
            autobuild verilmez ise ayarlardaki dikkate alınacak.
        -->
        <cue name="RequestedRFMClone" instantiate="true" namespace="this">
            <conditions>
                <check_any>
                    <check_all>
                        <event_object_signalled object="player.entity"/>
                        <check_value value="event.param == 'RFMClone'" />
                    </check_all>
                    <event_cue_signalled />
                </check_any>
            </conditions>
            <actions>
                <do_if value="event.name == 'event_cue_signalled'">
                    <set_value name="$paramtable" exact="event.param"/>
                </do_if>
                <do_else>
                    <set_value name="$paramtable" exact="event.param2"/>
                </do_else>

                <set_value name="$CloneRFMKey" exact="$paramtable.$fleetID" />
                <set_value name="$CloneShipKey" exact="@$paramtable.$shipID" />
                <set_value name="$autobuildafterclone" exact="@$paramtable.$autobuildafterclone" />
                <set_value name="$entity" exact="@$paramtable.$entity" />
                <set_value name="$IsSound" exact="@$paramtable.$isSound" />

                <do_if value="typeof $CloneShipKey == datatype.null">
                    <set_value name="$CloneShipKey" exact="1" />
                </do_if>
                <do_if value="typeof $autobuildafterclone == datatype.null">
                    <set_value name="$autobuildafterclone" exact="global.$upbRF_DATA.$Editing.$autobuildafterclone" />
                </do_if>
                <do_if value="typeof $IsSound == datatype.null">
                    <set_value name="$IsSound" exact="true" />
                </do_if>

                <set_value name="$debugchance" exact="Main.$DebugChance" />
                <set_value name="$deepdebug" exact="Main.$DeepDebug" />


                <set_value name="$CloneRFMKey" exact="($CloneRFMKey)i"/>
                <set_value name="$CloneShipKey" exact="($CloneShipKey)i"/>
                <set_value name="$tStr" exact="'  '" />
                
                <do_if value="Main.$RM_Fleets.{$CloneRFMKey}? and Main.$FleetRecords.{$CloneRFMKey}? and Main.$FleetRecords.{$CloneRFMKey}.{$CloneShipKey}?">
                
                    <run_actions ref="TableCopy" result="$Fleet">
                        <param name="t" value="Main.$RM_Fleets.{$CloneRFMKey}" />
                    </run_actions>
                    <run_actions ref="Get_New_RFMKey" result="$RFMKey"/>
                    <include_actions ref="Let_RFM_LogFileNames" />

                    <debug_text text="$tStr + '========= CLONNING from RFM_%s_%s ========= to New RFM_%s ========= [ START ] ========='.[$CloneRFMKey, $CloneShipKey, $RFMKey]" chance="$debugchance"/>

                    <debug_text text="$tStr + '  Entity &lt;%s&gt;%s , Entity.RFM FLAG %s'.[if $entity != null then $entity else 'YOK', if $entity != null then $entity.name else '', if $entity.$RFM? then 'AKTİF' else 'YOK' ]" chance="$deepdebug"/>

                    <debug_text text="$tStr + '  Yeni Manager Başlatılıyor...'.[]" chance="$deepdebug" />
                    <!-- $entity 
                        yoksa, 
                            record.1, klon kaydından alınacak , 
                        varsa; 
                            manager, entity e ait gemiyi record.1 olarak oluşturacaktır,
                            bu yüzden clone record.1 kaydını atlayacağız, geri kalan kayıtları güncelleyeceğiz.
                    -->
                    <!-- param [ entity, singlestartup (default true),  refFleetTable (default null) ] -->
                    <signal_cue_instantly cue="RF_Manager" param="[$entity, if $entity == null then false else true, if $entity == null then $Fleet else null]"  />

                    <run_actions ref="Get_AllSubKeys_From_FleetRecord" result="$allsubKeys">
                        <param name="FleetRecord" value="Main.$FleetRecords.{$CloneRFMKey}" />
                        <param name="CommanderKey" value="$CloneShipKey" />
                    </run_actions>
                    <!-- $CloneShipKey listenin başında olmalı, 1. kayıt olarak belirlemek için-->
                    <debug_text text="$tStr + '   CLONE RFMKey = %s, ShipKey = %s,  $allsubKeys = %s'.[$CloneRFMKey, $CloneShipKey, $allsubKeys]" chance="$deepdebug"/>
                
                    <set_value name="$SubShipKeys" exact="[$CloneShipKey]" />
                    <do_for_each name="$key" in="$allsubKeys">
                        <append_to_list name="$SubShipKeys" exact="$key"  />
                    </do_for_each>
                    <debug_text text="$tStr + '   APPENDED $SubShipKeys = %s'.[$SubShipKeys]" chance="$deepdebug"/>

                    <run_actions ref="TableCopy" result="$oldRecords">
                        <param name="t" value="Main.$FleetRecords.{$CloneRFMKey}" />
                    </run_actions>
                    
                    <!-- istenmeyen record kayıtlarını temizliyoruz -->
                    <set_value name="$oldcommanderRecord" exact="$oldRecords.{1}"/>
                    <do_for_each name="$i" valuename="$entry" in="$oldRecords" reverse="true" >
                        <do_if value="$SubShipKeys.indexof.{$entry.$id} == 0">
                            <remove_value name="$oldRecords.{$entry.$id}" />
                            <debug_text text="$tStr + '    Removed Record.$id = %s'.[$entry.$id]" chance="$deepdebug"/>
                        </do_if>
                    </do_for_each>

                    <set_value name="Main.$RM_Fleets.{$RFMKey}.$rebuildtimerstatus" exact="$autobuildafterclone" />

                    <set_value name="$newRecords" exact="table[]" />
                    <set_value name="$oldsubs" exact="table[]" />
                    <do_for_each name="$oldShipKey" in="$SubShipKeys" counter="$newShipKey">
                        
                        <do_if value="($newShipKey gt 1) or ($entity == null)">
                            <!-- 1- eski kaydı yeni kayda koy, 2- yeni kayıt üstünde güncelleme yap-->
                            <!-- -->
                            <run_actions ref="TableCopy" result="$newRecords.{$newShipKey}">
                                <param name="t" value="$oldRecords.{$oldShipKey}" />
                            </run_actions>
                            <set_value name="$record" exact="$newRecords.{$newShipKey}" />
                            <debug_text text="$tStr + '    Transfered Record %s to new %s'.[$oldShipKey, $newShipKey]" chance="$deepdebug"/>

                            <!-- Güncelleme, sadece eski kayıt üstündeki bilgilerde yenilenmesi gereken veriler için güncellenecek -->
                            <set_value name="$record.$id" exact="$newShipKey" />
                            
                            <!-- Tüm clone gemiler, Destroy edilmiş gibi oluşturulacak -->
                            <run_actions ref="SetRecord_DestroyedObject">
                                <param name="record" value="$record" />
                            </run_actions>
                            
                            <do_if value="$newShipKey == 1">
                                <set_value name="$record.$commanderidx" exact="-1" />
                                <set_value name="$record.$assignment" exact="null" />
                                <set_value name="$record.$subordinategroupid" exact="-1" />
                                <set_value name="$record.$subordinategrouptext" exact="''" />

                                <set_value name="$sectorid" exact="if @$oldcommanderRecord.$sectorid != null then $oldcommanderRecord.$sectorid else $oldcommanderRecord.$object.sector" />
                                <set_value name="$sectorid" exact="if $sectorid != null then $sectorid else player.zone.sector" />
                                <set_value name="$record.$sectorid" exact="$sectorid" />
                                <set_value name="$record.$sector" exact="if $sectorid != null then $sectorid.knownname else ''" />
                                <!-- oreder bilgilerini güncelleyelim-->
                                <do_if value="$oldcommanderRecord.$class != class.station">
                                    <do_if value="$CloneShipKey == 1">
                                        <set_value name="$record.$defaultorder" exact="$oldcommanderRecord.$defaultorder" />
                                        <set_value name="$record.$orders" exact="$oldcommanderRecord.$orders" />
                                    </do_if>
                                    <do_else>
                                        <!-- Aradan bir gemi klonlanmışsa yeni order sektör içinde Move Wait olacak-->
                                        <set_value name="$record.$orders" exact="[]" />
                                        <run_actions ref="md.Upb_Library_Orders.Create_Order_MoveWait_Table" result="$record.$defaultorder">
                                            <param name="sector" value="$record.$sectorid" />
                                        </run_actions>
                                    </do_else>
                                </do_if>
                                <do_else>
                                    <!-- Eski clone commander İstasyon olduğundan gemiye sektör içine move wait vereceğiz -->
                                    <set_value name="$record.$orders" exact="[]" />
                                    <run_actions ref="md.Upb_Library_Orders.Create_Order_MoveWait_Table" result="$record.$defaultorder">
                                        <param name="sector" value="$record.$sectorid" />
                                    </run_actions>
                                </do_else>
                            </do_if>
                            <do_else>
                                <remove_value name="$record.$sectorid" />
                                <remove_value name="$record.$sector" />
                            </do_else>

                            <!-- Bu kaydın eski main sublarına ait commanderidx lerine bu kaydın keyi atanacak -->
                            <run_actions ref="Get_SubKeys_From_FleetRecord" result="$resultKeys">
                                <param name="FleetRecord" value="$oldRecords" />
                                <param name="CommanderKey" value="$oldShipKey"/>
                            </run_actions>
                            <do_for_each name="$key" in="$resultKeys" >
                                <set_value name="$oldsubs.{$key}" exact="table[ $commanderidx = $newShipKey ]" />
                            </do_for_each>
                            <do_if value="$oldsubs.{$oldShipKey}?">
                                <set_value name="$record.$commanderidx" exact="$oldsubs.{$oldShipKey}.$commanderidx" />
                                <debug_text text="$tStr + '    Changed new Record.{%s}.commanderidx to new %s'.[$newShipKey, $record.$commanderidx]" chance="$deepdebug"/>
                            </do_if>

                            <!-- sub gemilerin order kayıtları içindeki commander ve ship nesnelerini boşaltalım, üretildiğinde dolduracağız tekrar -->
                            <do_if value="$record.$defaultorder? and $record.$defaultorder.$params?">
                                <run_actions ref="md.Upb_Library_Orders.Restore_Param_CommanderValue">
                                    <param name="ship" value="null" />
                                    <param name="uiparams" value="$record.$defaultorder.$params" />
                                    <param name="commander" value="null" />
                                </run_actions>
                            </do_if>

                            <!-- Güncel record kaydını rfm sistemine aktar-->
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$record.$id}" exact="$record" />
                            <!-- Loadout kaydını aktar -->
                            <set_value name="Main.$Loadouts.{$RFMKey}.{$newShipKey}" exact="Main.$Loadouts.{$CloneRFMKey}.{$oldShipKey}" />
                            <!-- Fleet. güncelle-->
                            <do_if value="$newShipKey == 1">
                                <set_value name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys"  exact="[]"/>
                                <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$object"  exact="null"/>
                                <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$name"  exact="$record.$name"/>
                                <set_value name="Main.$RM_Fleets.{$RFMKey}.$object" exact="null"/>
                                <set_value name="Main.$RM_Fleets.{$RFMKey}.$name"   exact="''"/>
                                <set_value name="Main.$RM_Fleets.{$RFMKey}.$isStation"   exact="if $record.$class == class.station then true else false"/>
                            </do_if>

                            <!-- Fleet. RFM destroyed keys listesini güncelle-->
                            <append_to_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="($newShipKey)i"/>

                        </do_if>
                    </do_for_each>

                    <do_if value="$autobuildafterclone and not player.entity.$Flag_RFM_Menu?">
                        <debug_text text="$tStr + '  Clone_%s Restarting RebuildShips...'.[$RFMKey]" chance="$debugchance" />

                        <signal_cue_instantly cue="StartRebuildShips" param="table[
                            $fleetID = $RFMKey, 
                            $isAllShips = true
                        ]" />
                    </do_if>
                    <do_else>
                        <run_actions ref="Check_FleetLockStatus">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="batchprocessing" value="true" />
                        </run_actions>
                        <!-- Debug -->
                        <set_value name="$pText" exact="'  ENABLED new RFM_%s with CLONE method, Age: %s, %s'.[$RFMKey, player.age, player.systemtime.{'%F-%X'}]"/>
                        <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                            <!-- DEBUG : RM_FLEETS File-->
                        <run_actions ref="Debug_RM_Fleets"/>
                        <!-- DEBUG : Fleet Record File -->
                        <run_actions ref="Debug_FleetRecord">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                        <!-- DEBUG : ALL REBUILD CUES -->
                        <run_actions ref="Debug_AllRebuildCues"/>
                        <!-- DEBUG : REBUILD CUES -->
                        <run_actions ref="Debug_RebuildCue">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                    </do_else>

                    <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                        $fleetID = $RFMKey,
                        $shipID = null,
                        $Record = Main.$FleetRecords.{$RFMKey},
                        $RebuildCue = null,
                        $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                        $description = 'Clone new RFM_%s'.[$RFMKey]
                    ]" chance="player.entity.$Flag_RFM_Menu? * 100"/>

                    <raise_lua_event name="'clone.completed'" param="$RFMKey" chance="player.entity.$Flag_RFM_Menu? * 100"/>

                    <debug_text text="$tStr + '========= New RFM_%s CLONE COMPLETED =================== [  END  ] ========='.[$RFMKey]" chance="$debugchance"/>
                </do_if>
                <do_else>
                    <cancel_cue cue="this" />
                    <debug_text text="$tStr + '========= ERROR none RFM_%s_%s CLONE COMPLETED. @_Fikret'.[$CloneRFMKey, $CloneShipKey]" chance="$debugchance"/>
                </do_else>
            </actions>
            <delay exact="(player.entity.$Flag_RFM_Menu? * (if $IsSound then 400 else 0) )ms" comment="$EnableSoundId dosyası 800 ms sürüyor"/>
            <actions>

                <play_sound object="player.entity" sound="Main.$EnableSoundId" chance="$IsSound * 100"/>

            </actions>
        </cue>
        <!-- object_signalled from lua -->
        <cue name="StorageChanged" instantiate="true">
            <conditions>
                <event_object_signalled object="player.entity"/>
                <check_value value="event.param == 'ship_storage_changed'" />
            </conditions>
            <actions>
                <!-- <debug_text text="'event.param %s , event.param2 = %s , event.param3 = %s '.[event.param, event.param2, event.param3]" />-->
                <set_value name="$table" exact="event.param2" />

                <set_value name="$RFMKey" exact="$table.$fleetID" />
                <set_value name="$ShipKey" exact="$table.$shipID" />
                <set_value name="$upgradetype" exact="$table.$upgradetype" />
                <set_value name="$upgradetypekey" exact="'$' + $upgradetype" />
                <set_value name="$macroid" exact="$table.$macro" />
                <set_value name="$macro" exact="macro.{$macroid}" />
                <set_value name="$macrokey" exact="'$' + $macro" />
                <set_value name="$count" exact="$table.$count" />

                <set_value name="$rEntry" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}" />
                
                <do_if value="$count == 0">
                    <remove_value name="$rEntry.$tShipPlan.{$upgradetypekey}.{$macrokey}" />
                    <remove_value name="$rEntry.$tWare.{$macro.ware}" />
                </do_if>
                <do_else>
                    <set_value name="$rEntry.$tShipPlan.{$upgradetypekey}.{$macrokey}" exact="$count" />
                    <set_value name="$rEntry.$tWare.{$macro.ware}" exact="$count" />
                </do_else>

                

                <!-- DEBUG : Fleet Record File -->
                <run_actions ref="Debug_FleetRecord_NoOthers">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>
                <run_actions ref="Debug_FleetRecord_tShipPlan">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>

            </actions>
        </cue>
        <!-- object_signalled from lua 
            <signal_objects 
                object="player.entity" 
                param="'rfm_buildtask_added'" 
                param2="{ fleetID = fleetID , shipID = shipID, id = strHex or build, buildingcontainer = shipyard, macro = macro.id, $batchprocessing = false }" 
            />
        -->
        <cue name="Add_IN_BuildTaskIDs" instantiate="true">
            <conditions>
                <event_object_signalled object="player.entity"/>
                <check_value value="event.param == 'rfm_buildtask_added'" />
            </conditions>
            <actions>
                <!-- <debug_text text="'event.param %s , event.param2 = %s , event.param3 = %s '.[event.param, event.param2, event.param3]" />-->
                <set_value name="$tasktable" exact="event.param2" />
                <!-- $tasktable.$id üzerinden buildtaskın hex değeri string olarak gelecek -->

                <!-- id bilgisi component. veri tipi olarak geliyor. build veri tipine dönüştüremedim.
                    ayrıca bu component save load sonrası 0x0 a dönüşecek bu yüzden çözüm olarak ;
                    istasyon buildtaskları içinde hex bilgisini build stringi ile karşılaştırıp build verisine ulaşacağım.
                    playerbuildadd içinde bu id ye karşılık gelen build<> üzerinden takibi yapacağız.
                    ! ! ! ayrıca pause esnasında build iptal edilirse istasyon içindeki bekleme listesindeki add olan taskları kaldıracağız.
                        Bu yüzden playerbuildadd cuesinin girişine 1ms bekleme koyduk ki bu cue ondan önce devreye girsin.
                -->
                <do_if value="not Main.$BuildTaskIDs?">
                    <set_value name="Main.$BuildTaskIDs" exact="[]" />
                </do_if>
                <do_for_each name="$entry" in="Main.$BuildTaskIDs" reverse="true">
                    <do_if value="$entry.$RFMKey == $tasktable.$fleetID and $entry.$ShipKey == $tasktable.$shipID">
                        <remove_value name="$entry" />
                    </do_if>
                </do_for_each>
                <run_actions ref="GetBuild_FromContainer" result="$result">
                    <param name="buildingcontainer" value="$tasktable.$buildingcontainer" />
                    <param name="buildHexID" value="$tasktable.$id" />
                </run_actions>
                <set_value name="$build"        exact="$result.{1}"/>
                <set_value name="$buildstatus"  exact="$result.{2}"/>
                <append_to_list name="Main.$BuildTaskIDs" exact="table[ 
                    $RFMKey             = $tasktable.$fleetID, 
                    $ShipKey            = $tasktable.$shipID, 
                    $build              = $build,
                    $buildingcontainer  = $tasktable.$buildingcontainer,
                    $buildstatus        = $buildstatus,
                    $id                 = $tasktable.$id,
                    $macro              = macro.{$tasktable.$macro}
                    ]" />

                    <!-- 
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildTryNum" exact="0" />
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildStartTime" exact="null" />

                    $Record = Main.$FleetRecords.{$RFMKey}.{$ShipIDX},
                    -->
                    <run_actions ref="Set_RebuildCueTable">
                        <param name="RFMKey"                value="$tasktable.$fleetID" />
                        <param name="ShipKey"               value="$tasktable.$shipID" />
                        <param name="cue"                   value="null" />
                        <param name="shipyard"              value="$tasktable.$buildingcontainer" />
                        <param name="build"                 value="$build" />
                        <param name="isWaitingForRebuild"   value="false" />
                        <param name="respondMsg"            value="readtext.{Main.$tPage}.{9057}" />
                        <param name="respond"               value="table[]" />
                    </run_actions>

                    <run_actions ref="Check_FleetLockStatus">
                        <param name="RFMKey" value="$tasktable.$fleetID" />
                        <param name="batchprocessing" value="$tasktable.$batchprocessing" />
                        <param name="isdebug" value="false" />
                    </run_actions>
        
                    <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                            $fleetID    = $tasktable.$fleetID,
                            $shipID     = $tasktable.$shipID,
                            $RebuildCue = Main.$RebuildCues.{$tasktable.$fleetID}.{$tasktable.$shipID},
                            $RM_Fleet   = Main.$RM_Fleets.{$tasktable.$fleetID},
                            $description = readtext.{Main.$tPage}.{9057}
                        ]" chance="player.entity.$Flag_RFM_Menu? * 100 * (not $tasktable.$batchprocessing)"/>

                    <debug_text text="'Added in BuildTaskIDs [%s_%s] build.&lt;%s&gt; , buildingcontainer = %s %s &lt;%s&gt; , macro = %s, $tasktable.$batchprocessing = %s'.[$tasktable.$fleetID, $tasktable.$shipID, $build, @$build.object.knownname, @$build.object.idcode, @$build.object, @$build.macro, $tasktable.$batchprocessing]" chance="Main.$DeepDebug"/>

                    <do_if value="not $tasktable.$batchprocessing">
                        <!-- DEBUG -->
                        <include_actions ref="PrintBuildTaskIDs" />
                        <!-- FLEET RECORD TABLE -->
                        <run_actions ref="Debug_FleetRecord_NoOthers">
                            <param name="RFMKey" value="$tasktable.$fleetID" />
                        </run_actions>
                        <!-- ALL REBUILD CUES -->
                        <run_actions ref="Debug_AllRebuildCues"/>
                        <!-- REBUILD CUES -->
                        <run_actions ref="Debug_RebuildCue">
                            <param name="RFMKey" value="$tasktable.$fleetID" />
                        </run_actions>
                    </do_if>

            </actions>
        </cue>

        <!-- object_signalled from  MD OR LUA
            param = table[ $fleetID  , $shipID , $shipyard, $name, $macro, $tShipPlan, $tIndividualInstructions, $tBulkCrew, $isdebug ]
            ]
        -->
        <cue name="Request_Buildtask_From_Lua" instantiate="true">
            <conditions>
                <check_any>
                    <check_all>
                        <event_object_signalled object="player.entity"/>
                        <check_value value="event.param == 'RebuildShips.forcestart'" />
                    </check_all>
                    <event_cue_signalled />
                </check_any>
            </conditions>
            <actions>

                <do_if value="event.name == 'event_cue_signalled'">
                    <set_value name="$paramtable" exact="event.param"/>
                </do_if>
                <do_else>
                    <set_value name="$paramtable" exact="event.param2"/>
                </do_else>

                <set_value name="$fleetID"                  exact="$paramtable.$fleetID" />
                <set_value name="$shipID"                   exact="$paramtable.$shipID" />
                <set_value name="$shipyard"                 exact="$paramtable.$shipyard" />
                <set_value name="$name"                     exact="$paramtable.$name" />
                <set_value name="$macro"                    exact="$paramtable.$macro" />
                <set_value name="$tShipPlan"                exact="$paramtable.$tShipPlan" />
                <set_value name="$tIndividualInstructions"  exact="$paramtable.$tIndividualInstructions" />
                <set_value name="$paintmodwareid"           exact="$paramtable.$paintmodwareid" />
                <set_value name="$tBulkCrew"                exact="$paramtable.$tBulkCrew" />
                <set_value name="$respondMsg"               exact="@$paramtable.$respondMsg" />
                <set_value name="$respond"                  exact="@$paramtable.$respond" />
                <set_value name="$batchprocessing"          exact="@$paramtable.$batchprocessing" />
                <set_value name="$isdebug"                  exact="$paramtable.$isdebug" />

                <do_if value="$respondMsg == null">
                    <set_value name="$respondMsg" exact="''" />
                </do_if>
                <do_if value="$respond == null">
                    <set_value name="$respond" exact="table[]" />
                </do_if>
                <do_if value="$batchprocessing == null">
                    <set_value name="$batchprocessing" exact="false" />
                </do_if>
                
                <set_value name="$debugchance" exact="Main.$DebugChance"/>
                <set_value name="$deepdebug"    exact="Main.$DeepDebug"/>

                <set_value name="Main.$FleetRecords.{$fleetID}.{$shipID}.$reBuildTryNum" exact="0" />
                <set_value name="Main.$FleetRecords.{$fleetID}.{$shipID}.$reBuildStartTime" exact="null" />

                <run_actions ref="Set_RebuildCueTable">
                    <param name="RFMKey"                value="$fleetID" />
                    <param name="ShipKey"               value="$shipID" />
                    <param name="cue"                   value="null" />
                    <param name="shipyard"              value="$shipyard" />
                    <param name="build"                 value="null" />
                    <param name="isWaitingForRebuild"   value="false" />
                    <param name="respondMsg"            value="$respondMsg" />
                    <param name="respond"               value="$respond" />
                </run_actions>

                <do_if value="not player.entity.$BuildTaskStacks?">
                    <set_value name="player.entity.$BuildTaskStacks" exact="[]"/>
                </do_if>
                <do_if value="typeof player.entity.$BuildTaskStacks == datatype.table">
                    <set_value name="player.entity.$BuildTaskStacks" exact="[]"/>
                </do_if>

                <signal_cue_instantly cue="ClearBuildTaskStacks" param="table[$fleetID = $fleetID, $shipID = $shipID]"/>

                <set_value name="$BuildTask" exact="table[
                    $fleetID = $fleetID,
                    $shipID = $shipID,
                    $shipyard = $shipyard,
                    $name = $name,
                    $macro = $macro,
                    $tShipPlan = $tShipPlan,
                    $tIndividualInstructions = $tIndividualInstructions,
                    $paintmodwareid = $paintmodwareid,
                    $tBulkCrew = $tBulkCrew,
                    $RebuildCue = Main.$RebuildCues.{$fleetID}.{$shipID},
                    $batchprocessing = $batchprocessing,
                    $isdebug = (if $deepdebug == 100 then true else false)
                ]" />
                
                <append_to_list name="player.entity.$BuildTaskStacks" exact="$BuildTask" />

                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$fleetID" />
                    <param name="batchprocessing" value="$batchprocessing" />
                    <param name="isdebug" value="false" />
                </run_actions>

                <raise_lua_event name="'add_build_to_construct_ship_from_MD'" />

                <debug_text text="'Calling add_build_to_construct_ship_from_MD() for %s_%s on shipyard = %s %s'.[$fleetID, $shipID, $shipyard.knownname, $shipyard.idcode]" chance="$debugchance"/>

                <do_if value="not $batchprocessing">
                    <!-- DEBUG -->
                    <!-- FLEET RECORD TABLE -->
                    <run_actions ref="Debug_FleetRecord_NoOthers">
                        <param name="RFMKey" value="$fleetID" />
                    </run_actions>
                    <!-- ALL REBUILD CUES -->
                    <run_actions ref="Debug_AllRebuildCues"/>
                    <!-- REBUILD CUES -->
                    <run_actions ref="Debug_RebuildCue">
                        <param name="RFMKey" value="$fleetID" />
                    </run_actions>
                </do_if>

            </actions>
        </cue>




        <cue name="EnableCloneFromNPC" instantiate="true">
            <conditions>
                <event_cue_signalled />
            </conditions>
            <actions>

                <set_value name="$entity" exact="event.param" />
                <set_value name="$debugchance" exact="Main.$DebugChance" />
                <set_value name="$deepdebug" exact="Main.$DeepDebug" />
                <set_value name="$tStr" exact="' '" />

                <run_actions ref="Get_New_RFMKey" result="$RFMKey"/>

                <debug_text text="$tStr + '========= CLONNING from NPC to New RFM_%s ========= [ START ] ========='.[$RFMKey]" chance="$debugchance"/>
                <debug_text text="$tStr + '  Entity &lt;%s&gt;%s , Entity.RFM FLAG %s'.[if $entity != null then $entity else 'YOK', if $entity != null then $entity.name else '', if $entity.$RFM? then 'AKTİF' else 'YOK' ]" chance="$deepdebug"/>
                <debug_text text="$tStr + '  Yeni Manager Başlatılıyor...'.[]" chance="$deepdebug" />

                <!-- param [ entity, singlestartup (default true),  refFleetTable (default null) ] -->
                <signal_cue_instantly cue="RF_Manager" param="[$entity, true]"  />

                <set_value name="$fleet"    exact="Main.$RM_Fleets.{$RFMKey}" />
                <set_value name="$records"  exact="Main.$FleetRecords.{$RFMKey}" />

                <set_value name="$fleet.$entity"  exact="null"/>

                <set_value name="$fleet.$commander.$object"  exact="null"/>
                <set_value name="$fleet.$commander.$name"  exact="$records.{1}.$name"/>
                <set_value name="$fleet.$object" exact="null"/>
                <set_value name="$fleet.$name"   exact="''"/>
                <set_value name="$fleet.$shipid"    exact="0"/>
                <set_value name="$fleet.$autobuild" exact="global.$upbRF_DATA.$Editing.$autobuildafterclone"/>

                <set_value name="$isStation" exact="$fleet.$isStation" />

                <set_value name="$fleet.$destroyedShipKeys"  exact="[]"/>
                
                <do_for_each name="$iShipKey" valuename="$record" in="$records" >
                    
                    <set_value name="$record.$name" exact="$record.$macro.name" />

                    <do_if value="$record.$id == 1">
                        <set_value name="$record.$commanderidx" exact="-1" />
                        <set_value name="$record.$assignment" exact="null" />
                        <set_value name="$record.$subordinategroupid" exact="-1" />
                        <set_value name="$record.$subordinategrouptext" exact="''" />

                        <!-- Aradan bir gemi klonlanmışsa yeni order sektör içinde Move Wait olacak-->
                        <set_value name="$record.$orders" exact="[]" />
                        <do_if value="$isStation">
                            <set_value name="$record.$defaultorder"  exact="table[]"/>
                        </do_if>
                        <do_else>
                            <do_if value="$entity.assignedcontrolled.commander">
                                <run_actions ref="md.Upb_Library_Orders.Create_Order_MoveWait_Table" result="$record.$defaultorder">
                                    <param name="sector" value="$record.$sectorid" />
                                </run_actions>
                            </do_if>
                        </do_else>

                    </do_if>
                    <do_else>
                        <!-- sub gemilerin order kayıtları içindeki commander ve ship nesnelerini boşaltalım, üretildiğinde dolduracağız tekrar -->
                        <do_if value="$record.$defaultorder? and $record.$defaultorder.$params?">
                            <run_actions ref="md.Upb_Library_Orders.Restore_Param_CommanderValue">
                                <param name="ship" value="null" />
                                <param name="uiparams" value="$record.$defaultorder.$params" />
                                <param name="commander" value="null" />
                            </run_actions>
                        </do_if>
                    
                    </do_else>
                    
                    <!-- Tüm clone gemiler, Destroy edilmiş gibi oluşturulacak -->
                    <run_actions ref="SetRecord_DestroyedObject">
                        <param name="record" value="$record" />
                    </run_actions>

                    <!-- Fleet. RFM destroyed keys listesini güncelle-->
                    <append_to_list name="$fleet.$destroyedShipKeys" exact="($record.$id)i"/>


                    <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                        $fleetID    = $RFMKey,
                        $shipID     = $record.$id,
                        $Record     = $records.{$record.$id},
                        $RebuildCue = null,
                        $RM_Fleet   = $fleet,
                        $description = 'Clone RFM From NPC'
                    ]" chance="player.entity.$Flag_RFM_Menu? * 100"/>

                </do_for_each>


                <set_value name="$RFMCue" exact="$fleet.$cue" />
                <create_group groupname="$RFMCue.$Promoted" />
                <set_value name="$RFMCue.$fleetshipsByComp" exact="table[]" />
                <set_value name="$RFMCue.$fleetshipsByIdx" exact="table[]" />
                <create_group groupname="$RFMCue.$Subordinates" />
                
                <set_value name="$RFMCue.$PromotedCommander" exact="null" />
                <set_value name="$RFMCue.$RMCommander" exact="null" />
                <set_value name="$RFMCue.$RMCommanderIdCode" exact="''" />

                <set_value name="$RFMCue.$Entity" exact="null" />
                <remove_value name="$entity.$RFM" />


                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>

                <debug_text text="$tStr + '========= New RFM_%s CLONE COMPLETED =================== [  END  ] ========='.[$RFMKey]" chance="$debugchance"/>

                <play_sound object="player.entity" sound="Main.$EnableSoundId" />

                <!-- Debug -->
                <set_value name="$pText" exact="'  ENABLED new RFM_%s with CLONE NPC method, Age: %s, %s'.[$RFMKey, player.age, player.systemtime.{'%F-%X'}]"/>
                <!-- DEBUG : RM_FLEETS File-->
                <run_actions ref="Debug_RM_Fleets"/>
                <!-- DEBUG : Fleet Record File -->
                <run_actions ref="Debug_FleetRecord">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>
                <!-- DEBUG : ALL REBUILD CUES -->
                <run_actions ref="Debug_AllRebuildCues"/>
                <!-- DEBUG : REBUILD CUES -->
                <run_actions ref="Debug_RebuildCue">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>

            </actions>
        </cue>







        <!-- DISABLE
                $RFMKey,            (İlgili RFM nin keyi)
                $endBy,             (olayı başlatan açıklama)
                $IsSpeak,           (entity konuşacak mı)
                $IsSound ,          (sesli uyarı olacak mı)
                $cancelcue          ( * Çalışan Rebuild Cue lerini iptal edecek mi)
                $removetable        ( * RebuildCue tablosundaki verileri silecek mi)
        -->
        <library name="Disable_All_RFM" purpose="run_actions">
            <actions>
                <debug_text text="'ALL RM FLEETS STOPPING'" chance="Main.$DebugChance"/>
                <do_for_each name="$dRFMKey" in="Main.$RM_Fleets.keys.list" reverse="true">
                    <!-- list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false) ] -->
                    <signal_cue_instantly cue="Disable__RFM" param="[$dRFMKey, 'Extension Disable', false, (Main.$RM_Fleets.keys.list.count == 1) ]" />

                </do_for_each>
                <remove_value name="$dRFMKey" />
                
                <debug_text text="'ALL RM FLEETS STOPPED'" chance="Main.$DebugChance"/>
                
                <!-- DEBUG : RM_FLEETS File-->
                <run_actions ref="Debug_RM_Fleets"/>
                <!-- ALL REBUILD CUES File-->
                <run_actions ref="Debug_AllRebuildCues"/>

            </actions>
        </library>

        <!-- param : $RFMKey Or a list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false)]--> 
        <cue name="Disable__RFM" instantiate="true">
            <conditions>
                <event_cue_signalled />
            </conditions>
            <actions>
                <!-- param : $RFMKey Or a list [ $RFMKey, $endBy, $IsSpeak, $IsSound, $cancelcue, $removetable ]-->
                <set_value name="$RFMKey" exact="if event.param.{1}? then event.param.{1} else event.param" />
                <set_value name="$endBy" exact="if event.param.{2}? or @event.param.{2} != null then event.param.{2} else 'player' " />
                <set_value name="$IsSpeak" exact="if event.param.{3}? or @event.param.{3} != null then event.param.{3} else false" />
                <set_value name="$IsSound" exact="if event.param.{4}? or @event.param.{4} != null then event.param.{4} else false" />
                <do_if value="$RFMKey == null">
                    <debug_text text="'$RFMKey is NULL. canceling..'.[]" />
                    <cancel_cue cue="Disable__RFM" />
                </do_if>
                <do_else>
                    <include_actions ref="DisableRFM_Core" />
                </do_else>
            </actions>
        </cue>
        <!--for SpecOfficer 
            param : $RFMKey Or a list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false)-->
        <library name="Disable_RFM" purpose="run_actions" comment="Calling from Spec Officer Nurcan">
            <params>
                <param name="RFMKey"/>
                <param name="cancelcue" default="true" />
                <param name="removetable" default="true" />
                <param name="removemaintable" default="true" />
                <param name="endBy" default="'player'"/>
                <param name="IsSpeak" default="false"/>
                <param name="IsSound" default="false"/>
            </params>
            <actions>
                <include_actions ref="DisableRFM_Core" />
            </actions>
        </library>

        <!-- INPUT : $RFMKey, $endBy, $IsSpeak, $IsSound        -->        
        <library name="DisableRFM_Core" purpose="include_actions">
            <actions>
                <debug_text text="'   RFM_%s is Disabling.. %s'.[$RFMKey, $endBy]" chance="Main.$DeepDebug"/>

                <include_actions ref="Let_RFM_LogFileNames" />

                <!--  Cancell all active RebuildShipCues and Tables for RFM-->
                <signal_cue_instantly cue="CancelRebuildShips" param="table[
                    $fleetID = $RFMKey, 
                    $isAllShips = true,
                    $isDisable = true
                ]"/>
                <set_value name="$RFM_Cue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />
                <set_value name="$pFComp" exact="$RFM_Cue.$fleetshipsByComp.clone"/>
                <set_value name="$pFIndx" exact="$RFM_Cue.$fleetshipsByIdx.clone"/>
                <set_value name="$RFM_Cue.$Cancelling" />

                <set_value name="$Commander" exact="$RFM_Cue.$PromotedCommander" />
                <set_value name="$Entity" exact="$RFM_Cue.$Entity" />
                <do_if value="$Commander != null">
                    <debug_text text="'     RFM_%s Ship Caption Clearing.. %s'.[$RFMKey, $RFM_Cue]" chance="Main.$DeepDebug"/>
                    <run_actions ref="Clear_ShipCaption">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="ship" value="$Commander" />
                        <param name="ShipKey" value="$pFComp.{$Commander}" />
                    </run_actions>
                </do_if>
                <debug_text text="'     RFM_%s Entity Clearing.. %s'.[$RFMKey, $RFM_Cue]" chance="Main.$DeepDebug"/>                
                <do_if value="@$Entity != null">
                    <do_if value="$Entity.$RFM?">
                        <debug_text text="'     Removed.. Entity flag &lt;%s&gt; %s'.[$Entity, $Entity.name]" chance="Main.$DeepDebug"/>
                        <remove_value name="$Entity.$RFM" />
                    </do_if>
                    <do_if value="$IsSpeak">
                        <speak actor="$Entity" line="2103"/>
                    </do_if>
                </do_if>

                <debug_text text="'     RFM_%s Header Data Values Clearing..'.[$RFMKey]" chance="Main.$DeepDebug"/>                
                <set_value name="$RFM_Cue.$fleetshipsByComp" exact="table[]" />
                <set_value name="$RFM_Cue.$fleetshipsByIdx" exact="table[]" />
                <clear_group group="$RFM_Cue.$Subordinates" />
                <clear_group group="$RFM_Cue.$Promoted" />
                <debug_text text="'     RFM_%s Cue Cancelling.. %s'.[$RFMKey, $RFM_Cue]" chance="Main.$DeepDebug"/>
                <cancel_cue cue="$RFM_Cue"/>

                <debug_text text="'     RFM_%s Removing FleetRecords Table.. [keys# = %s]'.[$RFMKey, Main.$FleetRecords.{$RFMKey}.keys.list.count]" chance="Main.$DeepDebug"/>
                <remove_value name="Main.$FleetRecords.{$RFMKey}" />
                <debug_text text="'     RFM_%s Removing Loadouts Table..'.[$RFMKey]" chance="Main.$DeepDebug"/>
                <remove_value name="Main.$Loadouts.{$RFMKey}" />
                <debug_text text="'     RFM_%s Removing RebuildCues Table.. [keys# = %s]'.[$RFMKey, Main.$RebuildCues.{$RFMKey}.keys.list.count]" chance="Main.$DeepDebug"/>
                <remove_value name="Main.$RebuildCues.{$RFMKey}" />
                <debug_text text="'     RFM_%s Removing Fleet Table..'.[$RFMKey, $RFM_Cue]" chance="Main.$DeepDebug"/>
                <remove_value name="Main.$RM_Fleets.{$RFMKey}" />


                <do_if value="$IsSound">
                    <play_sound object="player.entity" sound="Main.$DisableSoundId" />
                </do_if>

                <!-- DEBUG : MAIN PROGRAM LOG FILES -->
                <include_actions ref="PrintBuildTaskIDs" />
                <!-- DEBUG : MAIN LOG File -->
                <debug_text text="'   RFM_%s DISABLED'.[$RFMKey]" chance="Main.$DebugChance"/>

                <debug_to_file text="' DISABLED, RFM_%s_Commander &lt;%s&gt; %s %s (%s), Entity %s&lt;%s&gt;, Ended By %s, Canceling %s,  Age: %s, %s'.[$RFMKey, @$Commander, @$Commander.name, @$Commander.idcode, @$Commander.sector.knownname, @$Entity.knownname, @$Entity, $endBy, $RFM_Cue, player.age, player.systemtime.{'%F-%X'}]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                <!-- DEBUG : RM_FLEETS File-->
                <debug_to_file text="' DISABLED, RFM_%s_Commander &lt;%s&gt; %s %s (%s), Entity %s&lt;%s&gt;, Ended By %s, Canceling %s,  Age: %s, %s'.[$RFMKey, @$Commander, @$Commander.name, @$Commander.idcode, @$Commander.sector.knownname, @$Entity.knownname, @$Entity, $endBy, $RFM_Cue, player.age, player.systemtime.{'%F-%X'}]" name="Main.$logTAG_RFMleets" directory="Main.$logDIR" chance="Main.$DFD.$Fleets" append="false"/>
                <do_if value="$endBy != 'Extension Disable'">
                    <!-- DEBUG : RM_FLEETS File-->
                    <run_actions ref="Debug_RM_Fleets"/>
                    <!-- ALL REBUILD CUES File-->
                    <run_actions ref="Debug_AllRebuildCues"/>
                </do_if>  

                <!-- DEBUG : RFM SUB LOG FILES -->
                <set_value name="$pText" exact="' DISABLED, Ended by %s, Canceling %s,  Age: %s, %s'.[$endBy, $RFM_Cue, player.age, player.systemtime.{'%F-%X'}]"/>
                <!-- DEBUG : Command File -->
                <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command" append="false"/>
                <!-- DEBUG : Fleet Record File -->
                <debug_to_file text="$pText" name="$FleetRecord_logF" directory="Main.$logDIR" chance="Main.$DFD.$Records" append="false"/>
                <!-- DEBUG : reBuild File  -->
                <debug_to_file text="$pText" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuild" append="false"/>
                <!-- DEBUG : ReBuildCues File -->
                <debug_to_file text="$pText" name="$reBuildCues_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildCue" append="false"/>
                <!-- reAssign Log FILE -->
                <debug_to_file text="$pText" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignment" append="false"/>
                <!-- ship Files-->
                <!-- 
                <do_for_each name="$ShipIdx" in="$pFRec.keys.list">
                    <set_value name="$ship_logF" exact="'RFM_' + $RFMKey + '_SHP_' + $ShipIdx " />
                    <debug_to_file text="$pText" name="$ship_logF" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
                </do_for_each>
                -->
                <remove_value name="$Command_logF" />
                <remove_value name="$FleetRecord_logF" />
                <remove_value name="$reBuildCues_logF" />
                <remove_value name="$reBuild_logF" />
                <remove_value name="$reAssign_logF" />

                <remove_value name="$pText" />
                <remove_value name="$Commander" />
                <remove_value name="$Entity" />
                <remove_value name="$RFM_Cue" />

                <remove_value name="$pFComp" />
                <remove_value name="$pFIndx" />

                <remove_value name="$ShipIdx" />
                <remove_value name="$ship_logF" />

            </actions>
        </library>






        <!-- RE ENABLE 
        -->
        <!-- for SpecOfficer  -->
        <!-- param : $RFMKey, $IsSound (default false) , $singlestartup (default true ), $updateloadouts (default false ), $isChangeCrewAmounts (default false) -->
        <library name="ReEnable_RFM" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="singlestartup" default="true" />
                <param name="IsSound" default="false" />
                <param name="isSendToLua" default="true" />
                <param name="updateloadouts" default="false" />
                <param name="isChangeCrewAmounts" default="false"/>
            </params>
            <actions>
                <include_actions ref="Re_Enable_RFM_Core" />
            </actions>
        </library>
        <!-- param : $RFMKey Or a list [ $RFMKey, $IsSound (default false) , $singlestartup (default true ), $updateloadouts (default false ), $isChangeCrewAmounts (default false), $isSendToLua (default true) ]-->
        <cue name="Re_Enable_RFM" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled />
            </conditions>
            <actions>
                <set_value name="$RFMKey" exact="if event.param.{1}? then event.param.{1} else event.param" />
                <do_if value="$RFMKey == null">
                    <debug_text text="' ! ! ! $RFMKey is NULL ! ! !. canceling..'.[]" />
                    <set_value name="$RFMKey" exact="0" />
                    <cancel_cue cue="Re_Enable_RFM" />
                </do_if>
                <set_value name="$IsSound" exact="if event.param.{2}? or @event.param.{2} != null then event.param.{2} else false" />
                <set_value name="$singlestartup" exact="if event.param.{3}? or @event.param.{3} != null then event.param.{3} else true" />
                <set_value name="$updateloadouts" exact="if event.param.{4}? or @event.param.{4} != null then event.param.{4} else false" />
                <set_value name="$isChangeCrewAmounts" exact="if event.param.{5}? or @event.param.{5} != null then event.param.{5} else false" />
                <set_value name="$isSendToLua" exact="if event.param.{6}? or @event.param.{6} != null then event.param.{6} else true" />
                
                <include_actions ref="Re_Enable_RFM_Core" chance="if ($RFMKey gt 0) then 100 else 0"/>
                
                <set_value name="$delay" exact="(if (player.entity.$Flag_RFM_Menu? and $isSendToLua) then 1 else 0) * ($IsSound * 80)ms" />
                <debug_text text="'%s Delay for Sound = %s , $RFMKey = %s , $IsSound = %s , $isSendToLua = %s'.[$endBy, $delay, $RFMKey, $IsSound, $isSendToLua]" chance="Main.$DebugChance"/>

                <raise_lua_event name="'restart.completed'" param="$RFMKey" chance="($RFMKey gt 0) * player.entity.$Flag_RFM_Menu? * $isSendToLua * 100"/>

            </actions>
            <delay exact="$delay"/>
            <actions>
                <play_sound object="player.entity" sound="Main.$EnableSoundId" chance="$IsSound * 100"/>
            </actions>
        </cue>
        <!--IN : $RFMKey, $IsSound (default false) , $singlestartup (default true ), $updateloadouts (default false ), $isChangeCrewAmounts (default false), $isSendToLua (default true)  -->
        <library name="Re_Enable_RFM_Core" >
            <actions>

                <set_value name="$endBy" exact="'RESTART for Player ...'" />

                <debug_text text="'=== RFM_%s ========= %s ========= [ START ] ==='.[$RFMKey, $endBy]" chance="Main.$DebugChance"/>

                <include_actions ref="Let_RFM_LogFileNames" />

                <!-- Manageri açtığımızda bu veri tabloları silinecek. yedekliyoruz -->
                <set_value name="$oldfleet" exact="Main.$RM_Fleets.{$RFMKey}.clone"/>
                <set_value name="$oldFleetRec" exact="Main.$FleetRecords.{$RFMKey}.clone"/>
                <set_value name="$oldLoadouts" exact="Main.$Loadouts.{$RFMKey}.clone"/>
                <set_value name="$oldRebuildCues" exact="Main.$RebuildCues.{$RFMKey}.clone"/>

                <set_value name="$entity" exact="Main.$RM_Fleets.{$RFMKey}.$entity" />
                <debug_text text="'RFMKey_%s , Entity &lt;%s&gt;%s , RFM Poperty %s'.[$RFMKey, $entity, @$entity.name, if $entity.$RFM? then 'AKTİF' else 'YOK' ]" chance="Main.$DeepDebug"/>
                <!-- param : $RFMKey Or a list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false) ]
                    Yeni manager açıldığında Main.$RebuildCues.{$RFMKey} tabloları otomatik temizlenecektir.
                    Disableden sonra manager başlatacağımız için disableyi tablo ve culer silinecek şekilde çağırıyoruz.
                    (henüz özel bir şekilde disable çağırabilmek için (yani cueleri temizlemeden disable yapmak) bir kod yazmadık )
                -->
                <set_value name="$cancelcue" exact="true"/>
                <set_value name="$removetable" exact="true"/>
                <signal_cue_instantly cue="Disable__RFM" param="[ $RFMKey, $endBy, false, false ]" />
                
                <!-- Manager Açılıyor
                    1-yani managerın rebuildcueleri boş ayrıca eskisinden farklı headerdata bilgisi ve record yapısı olacaktır
                    2-Eski headerdata ve record yapısını yerine koyacağız
                    3-loadout yapısını değiştirmek istiyorsak record yapısında değişiklik yapacağız
                -->
                <!-- param [ entity, singlestartup, $oldfleet default null ]  -->
                <!-- burdaki singlestartup ne olursa olsun manager parametresi singlestartup false olacak şekilde başlatılacak. yazdırma ve lua haberleşmesini istemiyoruz.
                        singlestartup true ile çalışıyorsa planı ve yazdırma işini burda en son yapacağız
                        burdaki singlestartup false ile çalışıyorsa debug yazdırma ve shipplan çıkarmaları tek seferde allreenable içinde yazacağız -->
                <set_value name="$oldRFMKey" exact="$RFMKey" />
                <!-- Manager ilk boştaki key i bularak RFMKey oluşturuyor. Daha önce kapatılarak arada oluşan boş key olabilir.
                    Bu yüzden manager in oluşturacağı yeni keyi öğreniyoruz
                -->
                <set_value name="$testdebugchance" exact="0"/>

                <run_actions ref="Get_New_RFMKey" result="$RFMKey"/>
                <set_value name="$entity" exact="null" />
                <set_value name="$rmcommander" exact="$oldfleet.$commander.$object" />
                <debug_text text="'  $rmcommander = %s , isShip = %s'.[$rmcommander, $rmcommander.isrealclass.ship]" chance="$testdebugchance"/>
                <do_if value="$rmcommander.isrealclass.station">
                    <do_if value="$rmcommander.tradenpc.exists">
                        <set_value name="$entity" exact="$rmcommander.tradenpc"/>
                    </do_if>
                </do_if>
                <do_else>
                    <do_if value="@$rmcommander.pilot == player.entity">
                        <set_value name="$entity" exact="$rmcommander.assignedcontrolentity.{controlpost.aipilot}"/>
                        <debug_text text="'  pilot is player, Entity = %s %s , player.entity = %s'.[$entity, @$entity.knownname, player.entity]" chance="$testdebugchance"/>
                    </do_if>
                    <do_else>
                        <set_value name="$entity" exact="@$rmcommander.assignedpilot"/>
                        <debug_text text="'  pilot is assignedpilot, Entity = %s %s'.[$entity, @$entity.knownname]" chance="$testdebugchance"/>
                    </do_else>
                </do_else>
                
                
                <debug_text text="'  @$entity.isclass.entity = %s  %s ,  $entity.$RFM? = %s ,  $rmcommander.isrealclass.ship = %s  '.[@$entity.isclass.entity, @$entity.name, $entity.$RFM?, @$rmcommander.isrealclass.ship]" chance="$testdebugchance"/>

                <do_if value="$entity.$RFM?">
                    <debug_text text="'  &lt;%s&gt; %s RFM Flagı siliniyor...'.[$entity, $entity.knownname]" chance="Main.$DeepDebug" />
                    <remove_value name="$entity.$RFM" />
                </do_if>
                
                <debug_text text="'  @$entity.isclass.entity = %s  %s ,  $entity.$RFM? = %s ,  $rmcommander.isrealclass.station = %s '.[@$entity.isclass.entity, @$entity.name, $entity.$RFM?, $rmcommander.isrealclass.station]" chance="$testdebugchance"/>
                <debug_text text="'  @$entity.isplayerowned = %s , @$entity.assignedcontrolled.isplayerowned %s'.[@$entity.isplayerowned , @$entity.assignedcontrolled.isplayerowned]" chance="$testdebugchance"/>
                <debug_text text="'  @$entity.assignedcontrolled.isclass.ship = %s , $entity.assignedcontrolled.pilot %s  ==  %s'.[@$entity.assignedcontrolled.isclass.ship , @$entity.assignedcontrolled.pilot , $entity]" chance="$testdebugchance"/>
                <debug_text text="'  @$entity.assignedcontrolled.isclass.station = %s , @$entity.assignedcontrolled.tradenpc %s == %s'.[@$entity.assignedcontrolled.isclass.station , @$entity.assignedcontrolled.tradenpc , $entity]" chance="$testdebugchance"/>

                <debug_text text="'  Yeni Manager Başlatılıyor...'.[]" chance="Main.$DeepDebug" />
                <signal_cue_instantly cue="md.Upb_Restock_Fleet.RF_Manager" param="[$entity, false, $oldfleet]"  />

                <do_if value="$oldRFMKey != $RFMKey">
                    <debug_text text="'  RFM_%s Key Changed to new RFM_%s Key...'.[$oldRFMKey, $RFMKey]" chance="Main.$DeepDebug" />
                </do_if>
                <!-- -->

                <debug_text text="'  Yeni Header Data Oluşturuluyor...'.[]" chance="Main.$DeepDebug" />
                <!-- Eski Header Data yerine konuyor -->
                <run_actions ref="Set_ToRFM_HeaderValues_From_FleetRec">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="FleetRec" value="$oldFleetRec" />
                </run_actions>
                
                <!-- Eski record ve loadout yerine konuyor -->
                <debug_text text="'  Eski Record Yerine Konuyor...'.[]" chance="Main.$DeepDebug" />
                <set_value name="Main.$FleetRecords.{$RFMKey}" exact="$oldFleetRec"/>

                <debug_text text="'  Record Main Property ve Orders Kontrol Ediliyor...'.[]" chance="Main.$DeepDebug" />
                <set_value name="$debugchance" exact="Main.$DeepDebug"/>
                <include_actions ref="CrossExamine_NameIdcodeAndOrders" />

                <debug_text text="'  Eski Loadout Yerine Konuyor...'.[]" chance="Main.$DeepDebug" />
                <set_value name="Main.$Loadouts.{$RFMKey}" exact="$oldLoadouts"/>

                <!-- reenable zamanı loadout yapısı güncellenecek mi-->
                <do_if value="$singlestartup">
                    <!-- toplu çağırma yoksa ve yeni loadout istenmemiş ise debug dosyalarını ve record tabloyu güncelleyeceğiz -->
                    <do_if value="$updateloadouts">
                        <debug_text text="'  Updating loadouts.. RFMKey = %s'.[$RFMKey, $newRFMKey]" chance="Main.$DeepDebug" />
                        <do_for_each name="$ShipKey" in="Main.$FleetRecords.{$RFMKey}.keys.list"  >
                            <set_value name="$Ship" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$object "/>
                            <run_actions ref="Create_Loadout_AndSetTo" result="Main.$Loadouts.{$RFMKey}.{$ShipKey}">
                                <param name="ship"          value="$Ship"/>
                                <param name="macro"         value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$macro" />
                                <param name="oldLoadout"    value="Main.$Loadouts.{$RFMKey}.{$ShipKey}" />
                                <param name="wares"         value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$tWare" />
                                <param name="FleetRec"      value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}"/>
                            </run_actions>

                            <set_value name="$stack" exact = "table[ 
                                    $RFMKey     = $RFMKey, 
                                    $ShipKey    = $ShipKey, 
                                    $object     = $Ship,
                                    $macro          = Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$macro,
                                    $issupplyship   = Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$issupplyship,
                                    $isGetShipPlan                = true, 
                                    $isGetIndividualInstructions  = true,
                                    $isGetCapacity  = true,
                                    $isGetPaintMod  = true,
                                    $isChangeCrewAmounts    = $isChangeCrewAmounts,
                                    $isdebug                = true
                            ]"/>
                            <signal_cue_instantly cue="Get_PlanData_FromLua2" param="$stack" />

                        </do_for_each>
                    </do_if>
                    <do_else>
                        <!-- DEBUG : RFM SUB LOG FILES -->
                        <include_actions ref="Let_RFM_LogFileNames" />
                        <!-- DEBUG : Fleet Record File -->
                        <run_actions ref="Debug_FleetRecord">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                        <set_value name="$pText" exact="' REENABLED RFM_%s , Age: %s, %s'.[$RFMKey, player.age, player.systemtime.{'%F-%X'}]"/>
                        <!-- DEBUG : Command File -->
                        <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command" />
                        <!-- DEBUG : reBuild File  -->
                        <debug_to_file text="$pText" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuild" />
                        <!-- DEBUG : ReBuildCues File -->
                        <debug_to_file text="$pText" name="$reBuildCues_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildCue" />
                        <!-- reAssign Log FILE -->
                        <debug_to_file text="$pText" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignment" />
                    </do_else>
                </do_if>
                
                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="forceCaptionUpdate" value="true" />
                </run_actions>

                <signal_cue_instantly cue="StartRebuildShips" param="table[
                    $fleetID = $RFMKey, 
                    $isAllShips = true
                ]" />

                <!-- Debug -->
                <do_if value="$singlestartup">
                    <set_value name="$pText" exact="'  REENABLED RFM_%s, Age: %s, %s'.[$RFMKey, player.age, player.systemtime.{'%F-%X'}]"/>
                    <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                    <!-- DEBUG : RM_FLEETS File-->
                    <run_actions ref="Debug_RM_Fleets"/>
                    <!-- ALL REBUILD CUES -->
                    <run_actions ref="Debug_AllRebuildCues"/>
                    <!-- REBUILD CUES -->
                    <run_actions ref="Debug_RebuildCue">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>
                </do_if>

                <debug_text text="'=== RFM_%s ========= %s ========= [  END  ] ==='.[$RFMKey, $endBy]" chance="Main.$DebugChance"/>

            </actions>
        </library>
        <!-- param  updateloadouts (default false) isChangeCrewAmounts (default false)        -->
        <library name="ReEnable_All_RFM" purpose="run_actions">
            <params>
                <param name="updateloadouts" default="false"/>
                <param name="isChangeCrewAmounts" default="false"/>
                <param name="printMessage" default="''" />
            </params>
            <actions>
                <set_value name="$old_RM_Fleets" exact="Main.$RM_Fleets" />
                <set_value name="$icount" exact="0" />
                <set_value name="$printMessage" exact="if $printMessage != '' then '[' + $printMessage + ']'"/>
                
                <set_value name="$pText" exact="' REENABLE ALL RFM [ STARTED ]  %s, Age: %s, %s'.[player.age, $printMessage, player.systemtime.{'%F-%X'}]"/>
                <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                <debug_text text="'%s'.[$pText]" chance="($pText != '') * 100"/>
                

                <do_for_each name="$i" valuename="$entry" in="$old_RM_Fleets" >
                    <set_value name="$RFMKey" exact="$entry.$id" />
                    
                    <set_value name="$icount" operation="add" />
                    <run_actions ref="Get_New_RFMKey" result="$newRFMKey"/>
                    <!-- param : $RFMKey Or a list [ $RFMKey, $IsSound (default false) , $singlestartup (default true ), $updateloadouts (default false ), $isChangeCrewAmounts (default false), $isSendToLua (default true) ]-->
                    <signal_cue_instantly cue="Re_Enable_RFM" param="[ $RFMKey, (if $icount == $old_RM_Fleets.keys.list.count then true else false), false, $updateloadouts, $isChangeCrewAmounts, false ]" />

                    <do_if value="$RFMKey gt $newRFMKey">
                        <debug_text text="'RFMKey = %s , new RFMKey = %s'.[$RFMKey, $newRFMKey]" chance="Main.$DeepDebug" />
                        <set_value name="$RFMKey" exact="$newRFMKey" />
                    </do_if>

                    <!-- loadouts yapısı güncellenecek mi-->
                    <do_if value="$updateloadouts">
                        <debug_text text="'  Updating loadouts.. RFMKey = %s'.[$RFMKey, $newRFMKey]" chance="Main.$DeepDebug" />
                        <do_for_each name="$ShipKey" in="Main.$FleetRecords.{$RFMKey}.keys.list" counter="$index" >
                            <set_value name="$Ship" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$object "/>
                                <run_actions ref="Create_Loadout_AndSetTo" result="Main.$Loadouts.{$RFMKey}.{$ShipKey}">
                                    <param name="ship"          value="$Ship"/>
                                    <param name="macro"         value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$macro" />
                                    <param name="oldLoadout"    value="Main.$Loadouts.{$RFMKey}.{$ShipKey}" />
                                    <param name="wares"         value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$tWare" />
                                    <param name="FleetRec"      value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}"/>
                                </run_actions>

                                <set_value name="$stack" exact = "table[ 
                                        $RFMKey     = $RFMKey, 
                                        $ShipKey    = $ShipKey, 
                                        $object     = $Ship,
                                        $macro          = Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$macro,
                                        $issupplyship   = Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$issupplyship,
                                        $isGetShipPlan                = true, 
                                        $isGetIndividualInstructions  = true,
                                        $isChangeCrewAmounts    = $isChangeCrewAmounts,
                                        $isdebug                = if $index == Main.$FleetRecords.{$RFMKey}.keys.list.count then true else false
                                ]"/>
                                <signal_cue_instantly cue="Get_PlanData_FromLua2" param="$stack" />

                        </do_for_each>
                    </do_if>
                    <do_else>
                        
                        <set_value name="$pText" exact="'  REENABLED RFM_%s, Age: %s, %s'.[$RFMKey, player.age, player.systemtime.{'%F-%X'}]"/>
                        <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                        <!-- DEBUG : RFM SUB LOG FILES -->
                        <include_actions ref="Let_RFM_LogFileNames" />
                        <!-- DEBUG : Fleet Record File -->
                        <run_actions ref="Debug_FleetRecord">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                        <!-- DEBUG : Command File -->
                        <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command" />
                        <!-- DEBUG : reBuild File  -->
                        <debug_to_file text="$pText" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuild" />
                        <!-- DEBUG : ReBuildCues File -->
                        <debug_to_file text="$pText" name="$reBuildCues_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildCue" />
                        <!-- reAssign Log FILE -->
                        <debug_to_file text="$pText" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignment" />
                    </do_else>

                    <run_actions ref="Check_FleetLockStatus">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="forceCaptionUpdate" value="true" />
                    </run_actions>

                </do_for_each>

                <set_value name="$pText" exact="' REENABLE ALL RFM [   END   ], Age: %s, %s'.[player.age, player.systemtime.{'%F-%X'}]"/>
                <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                <debug_text text="'%s'.[$pText]" chance="($pText != '') * 100"/>
                <!-- DEBUG : RM_FLEETS File-->
                <run_actions ref="Debug_RM_Fleets"/>
                <!-- ALL REBUILD CUES -->
                <run_actions ref="Debug_AllRebuildCues"/>

            </actions>
        </library>
        <!-- param  updateloadouts (default false) isChangeCrewAmounts (default false)        -->
        <library name="ReEnable_All_RFM_ForPatch" purpose="run_actions">
            <params>
                <param name="updateloadouts" default="false"/>
                <param name="isChangeCrewAmounts" default="false"/>
                <param name="isSaveOrderData" default="false" />
                <param name="printMessage" default="''" />
            </params>
            <actions>
                <set_value name="$old_RM_Fleets" exact="Main.$RM_Fleets" />
                <set_value name="$icount" exact="0" />
                <set_value name="$printMessage" exact="if $printMessage != '' then '[' + $printMessage + ']'"/>
                
                <set_value name="Main.$DebugChance" exact="100"/>
                <set_value name="Main.$DeepDebug" exact="100"/>
                <set_value name="Main.$ChangesOnFleetDebug" exact="100"/>

                <set_value name="$pText" exact="' REENABLE ALL RFM For PATCH [ STARTED ]  %s, Age: %s, %s'.[player.age, $printMessage, player.systemtime.{'%F-%X'}]"/>
                <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                <debug_text text="'%s'.[$pText]" chance="($pText != '') * 100"/>
                

                <do_for_each name="$i" valuename="$entry" in="$old_RM_Fleets" >
                    <set_value name="$RFMKey" exact="$entry.$id" />
                    
                    <!-- Added For old Patch Order Data 
                        versiyon 15 de rfm.order datayı record.{1} e taşıdık. 
                        ayrıca v.15de diğer fleet gemilerin record.defaultorder yapıları record.order olarak değiştirildi.
                        bu yüzden v.15den eski versiyonlardan gelerek bu kod çalıştırılıyorsa (yani hala record.defaultorder datası varsa veriyi koruyalım.
                        v.15 de patch düzeltmesinde defaultorder silinecek.
                    -->
                    <!-- Patch Data Start -->
                    <!-- <do_if value="$isSaveOrderData">-->
                        <do_if value="$entry.$order? or $entry.$sectorid?">
                            <set_value name="$oldpatchdata" exact="table[ $order = $entry.$order, $sector = $entry.$sector, $sectorid = $entry.$sectorid ]"/>
                            <do_for_each name="$k" valuename="$record" in="Main.$FleetRecords.{$entry.$id}">
                                <do_if value="$record.$defaultorder?">
                                    <do_if value="$savedorderrecord?">
                                        <set_value name="$savedorderrecord.{$record.$id}" exact="$record.$defaultorder" />
                                    </do_if>
                                    <do_else>
                                        <set_value name="$savedorderrecord" exact="table[ {$record.$id} = $record.$defaultorder ]" />
                                    </do_else>
                                </do_if>
                            </do_for_each>
                        </do_if>
                    <!-- </do_if>-->
                    <!-- Patch Data End -->

                    <set_value name="$icount" operation="add" />
                    <run_actions ref="Get_New_RFMKey" result="$newRFMKey"/>
                    <!-- param : $RFMKey Or a list [ $RFMKey, $IsSound (default false) , $singlestartup (default true ), $updateloadouts (default false ), $isChangeCrewAmounts (default false), $isSendToLua (default true) ]-->
                    <signal_cue_instantly cue="Re_Enable_RFM" param="[ $RFMKey, if $icount == $old_RM_Fleets.keys.list.count then true else false, false, $updateloadouts, $isChangeCrewAmounts, false ]" />

                    <!-- Added For old Patch Order Data -->
                    <!-- <do_if value="$isSaveOrderData">-->
                        <do_if value="$oldpatchdata?">
                            <set_value name="Main.$RM_Fleets.{$RFMKey}.$sector" exact="$oldpatchdata.$sector"/>
                            <set_value name="Main.$RM_Fleets.{$RFMKey}.$sectorid" exact="$oldpatchdata.$sectorid"/>
                            <set_value name="Main.$RM_Fleets.{$RFMKey}.$order" exact="$oldpatchdata.$order"/>
                            <remove_value name="$oldpatchdata" />
                        </do_if>
                        <do_if value="$savedorderrecord?">
                            <do_for_each name="$k" valuename="$record" in="Main.$FleetRecords.{$entry.$id}">
                                <do_if value="$savedorderrecord.{$record.$id}?">
                                    <set_value name="$record.$defaultorder" exact="$savedorderrecord.{$record.$id}"/>
                                </do_if>
                            </do_for_each>
                            <remove_value name="$savedorderrecord" />
                        </do_if>
                    <!-- </do_if>-->
                    <!-- Patch Data End -->

                    <do_if value="$RFMKey gt $newRFMKey">
                        <debug_text text="'RFMKey = %s , new RFMKey = %s'.[$RFMKey, $newRFMKey]" chance="Main.$DeepDebug" />
                        <set_value name="$RFMKey" exact="$newRFMKey" />
                    </do_if>

                    <!-- loadouts yapısı güncellenecek mi-->
                    <do_if value="$updateloadouts">
                        <debug_text text="'  Updating loadouts.. RFMKey = %s, $newRFMKey = %s'.[$RFMKey, $newRFMKey]" chance="Main.$DeepDebug" />
                        <do_for_each name="$ShipKey" in="Main.$FleetRecords.{$RFMKey}.keys.list" counter="$index" >
                            <set_value name="$Ship" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$object "/>
                                <run_actions ref="Create_Loadout_AndSetTo" result="Main.$Loadouts.{$RFMKey}.{$ShipKey}">
                                    <param name="ship"          value="$Ship"/>
                                    <param name="macro"         value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$macro" />
                                    <param name="oldLoadout"    value="Main.$Loadouts.{$RFMKey}.{$ShipKey}" />
                                    <param name="wares"         value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$tWare" />
                                    <param name="FleetRec"      value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}"/>
                                </run_actions>
                                <set_value name="$stack" exact = "table[ 
                                        $RFMKey     = $RFMKey, 
                                        $ShipKey    = $ShipKey, 
                                        $object     = $Ship,
                                        $macro          = Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$macro,
                                        $issupplyship   = Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$issupplyship,
                                        $isGetShipPlan                = true, 
                                        $isGetIndividualInstructions  = true,
                                        $isGetCapacity  = true,
                                        $isGetPaintMod  = true,
                                        $isChangeCrewAmounts    = $isChangeCrewAmounts,
                                        $isdebug                = if $index == Main.$FleetRecords.{$RFMKey}.keys.list.count then true else false
                                ]"/>
                                <signal_cue_instantly cue="Get_PlanData_FromLua2" param="$stack" />
                        </do_for_each>
                    </do_if>
                    <do_else>
                        <set_value name="$pText" exact="'  REENABLED RFM_%s, Age: %s, %s'.[$RFMKey, player.age, player.systemtime.{'%F-%X'}]"/>
                        <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                        <!-- DEBUG : RFM SUB LOG FILES -->
                        <include_actions ref="Let_RFM_LogFileNames" />
                        <!-- DEBUG : Fleet Record File -->
                        <run_actions ref="Debug_FleetRecord">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                        <!-- DEBUG : Command File -->
                        <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command" />
                        <!-- DEBUG : reBuild File  -->
                        <debug_to_file text="$pText" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuild" />
                        <!-- DEBUG : ReBuildCues File -->
                        <debug_to_file text="$pText" name="$reBuildCues_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildCue" />
                        <!-- reAssign Log FILE -->
                        <debug_to_file text="$pText" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignment" />
                    </do_else>

                    <run_actions ref="Check_FleetLockStatus">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="forceCaptionUpdate" value="true" />
                    </run_actions>

                </do_for_each>

                <set_value name="$pText" exact="' REENABLE ALL RFM For PATCH [   END   ], Age: %s, %s'.[player.age, player.systemtime.{'%F-%X'}]"/>
                <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                <debug_text text="'%s'.[$pText]" chance="($pText != '') * 100"/>
                <!-- DEBUG : RM_FLEETS File-->
                <run_actions ref="Debug_RM_Fleets"/>
                <!-- ALL REBUILD CUES -->
                <run_actions ref="Debug_AllRebuildCues"/>

            </actions>
        </library>
        






        <!-- FIX  &  REPAIR   RECORDS 
            { RFMKey = RFMKey [, ShipKey = ShipKey][, isFleetCheck = false][, Record = Main.$FleetRecords.{$RFMKey}.{$ShipKey}][, FleetRecord = Main.$FleetRecords.{$RFMKey}][, isdebug = true] }
        -->
        <cue name="Fix_Ship_tShipPlan2" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled />
            </conditions>
            <actions>
                <set_value name="$params"   exact="event.param" />

                <set_value name="$RFMKey"   exact="$params.$RFMKey" />
                <set_value name="$ShipKey"      exact="@$params.$ShipKey" />
                <set_value name="$Record"       exact="@$params.$Record" />
                <set_value name="$isFleetCheck"    exact="@$params.$isFleetCheck" />
                <set_value name="$FleetRecord"      exact="@$params.$FleetRecord" />
                <set_value name="$isdebug"  exact="@$params.$isdebug" />

                <do_if value="$isFleetCheck == null" >
                    <set_value name="$isFleetCheck" exact="false" />
                </do_if>
                <do_if value="$FleetRecord == null" >
                    <set_value name="$FleetRecord" exact="Main.$FleetRecords.{$RFMKey}" />
                </do_if>
                <do_if value="$Record == null" >
                    <do_if value="(not $isFleetCheck) and Main.$FleetRecords.{$RFMKey}.{$ShipKey}?">
                        <set_value name="$Record" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}" />
                    </do_if>
                </do_if>
                <do_if value="$isdebug == null" >
                    <set_value name="$isdebug" exact="true" />
                </do_if>

                <do_if value="$isFleetCheck">
                    <set_value name="$checkRecords" exact="$FleetRecord" />
                </do_if>
                <do_else>
                    <set_value name="$checkRecords" exact="table[]" />
                    <set_value name="$checkRecords.{$ShipKey}" exact="$Record" />
                </do_else>
                
                <set_value name="$index" exact="0"/>
                <do_for_each name="$indexKey" valuename="$record" in="$checkRecords">

                    <set_value name="$index" operation="add" />
                    <set_value name="$ShipKey" exact="$record.$id" />
                    <set_value name="$isShip" exact="[class.ship_s, class.ship_m, class.ship_l, class.ship_xl].indexof.{$record.$class}" />

                    <!-- v.10 öncesinde oluşturulan tShipPlan içindeki slotlu propertylerde v.15de   Kontrol Yapılacak
                        1   'thruster', 'weapon', 'turret', 'shield', 'engine'  tablolarında
                            lua içinde a_slot değişkeni tabloya dönüştürüldü. a_slot = { slot = 'xx' , name = 'xx' , size = 'xx' }
                            a- thruster propertysinde a_slot, a_slotname ve a_slotsize (varsa boşluk içeriyordur) propertyleri eklenecek
                            b- weapon, turret, engine ve shield propertylerinde sadece a_slot propertysi var. a_slotsize ve a_slotname eklenecek.
                        2- shieldgroup, enginegroup ve turretgroup tablolarında değişiklik yapıldı. a_group = { name, slot, shortslotsize, slotsize, grouptype} , a_contextid, a_contextname oluşturuldu
                        <set_value name="$SlotSizeClassInfo" exact="table[
                            {class.ship_s}     = table[ $slotsize = 'small',       $shorttext = readtext.{1001}.{51} ],
                            {class.ship_m}     = table[ $slotsize = 'medium',      $shorttext = readtext.{1001}.{50} ],
                            {class.ship_l}     = table[ $slotsize = 'large',       $shorttext = readtext.{1001}.{49} ],
                            {class.ship_xl}    = table[ $slotsize = 'extralarge',  $shorttext = readtext.{1001}.{48} ]
                        ]" />
                        <set_value name="$ShortSizeInfo" exact="table[
                            {'$' + readtext.{1001}.{48}} = 'extralarge',
                            {'$' + readtext.{1001}.{49}} = 'large',
                            {'$' + readtext.{1001}.{50}} = 'medium',
                            {'$' + readtext.{1001}.{51}} = 'small'
                    ]" />
                    -->
                    <do_if value="$record.$tShipPlan?">
                        <!-- 'thruster', 'weapon', 'turret', 'shield', 'engine' -->
                        <set_value name="$properties" exact="[ 'shield', 'engine', 'thruster', 'weapon', 'turret' ]" />
                        <do_for_each name="$property" in="$properties">
                            <do_for_each name="$entry" in="$record.$tShipPlan.{'$' + $property}" >
                                <do_if value="$entry.$a_slot?">
                                    <do_if value="not $entry.$a_slot.$slot?">
                                        <set_value name="$newShipPlan"  />
                                    </do_if>
                                </do_if>
                                <do_else>
                                    <set_value name="$newShipPlan"  />
                                </do_else>
                                <break chance="$newShipPlan? * 100"/>
                            </do_for_each>
                            <break chance="$newShipPlan? * 100"/>
                        </do_for_each>

                        <do_if value="not $newShipPlan?">
                            <!-- 'shieldgroup', 'enginegroup', 'turretgroup' -->
                            <set_value name="$properties" exact="[ 'shieldgroup', 'enginegroup', 'turretgroup' ]" />
                            <do_for_each name="$property" in="$properties">
                                <do_for_each name="$entry" in="$record.$tShipPlan.{'$' + $property}" >
                                    <do_if value="not $entry.$a_group?">
                                        <set_value name="$newShipPlan"  />
                                        <break />
                                    </do_if>
                                </do_for_each>
                                <break chance="$newShipPlan? * 100"/>
                            </do_for_each>
                        </do_if>
                        
                        <remove_value name="$record.$tShipPlan" chance="$newShipPlan? * 100"/>
                        <remove_value name="$newShipPlan" />

                    </do_if>

                    <set_value name="$getShipPlan" exact="not $record.$destroyed and (not $record.$tShipPlan? or @$record.$tShipPlan.keys.count == 0)"/>
                    <set_value name="$getIndividualInstructions" exact="(not $record.$tIndividualInstructions?) or (@$record.$tIndividualInstructions.{1}.keys.count == 0)"/>
                    <set_value name="$getCapacity" exact="not $record.$tCapacity? or (not $record.$destroyed and $record.$tCapacity.$countermeasures? and $record.$tCapacity.$countermeasures lt 0)"/>
                    <set_value name="$getPaintMod" exact="$isShip and ( not $record.$tPaintModWareId? or ( not $record.$destroyed and (@$record.$tPaintModWareId.$installed == null or @$record.$tPaintModWareId.$default == null) )  )"/>

                    <do_if value="$getShipPlan or $getIndividualInstructions" comment="patch ver 3-7">
                        <set_value name="$updateShipPlan"  />
                    </do_if>
                    <do_if value="$getCapacity or $getPaintMod" comment="patch ver 19, mod v3.20">
                        <set_value name="$updateShipPlan"  />
                    </do_if>

                    <do_if value="$updateShipPlan?">
                        
                        <debug_text text="' Get Lua values RFM [%s][%s] [ SP=%s, II=%s, Cap=%s, PM=%s ]  %s %s'.[$RFMKey, $ShipKey, $getShipPlan, $getIndividualInstructions, $getCapacity, $getPaintMod, $record.$name, $record.$idcode]" chance="$isdebug * 100"/>

                        <do_if value="$getShipPlan">
                            <run_actions ref="Create_Loadout_AndSetTo" result="Main.$Loadouts.{$RFMKey}.{$ShipKey}">
                                <param name="ship"          value="$record.$object"/>
                                <param name="macro"         value="$record.$macro" />
                                <param name="oldLoadout"    value="Main.$Loadouts.{$RFMKey}.{$ShipKey}" />
                                <param name="FleetRec"      value="$record"/>
                            </run_actions>
                        </do_if>

                        <set_value name="$stack" exact = "table[ 
                                $RFMKey     = $RFMKey, 
                                $ShipKey    = $ShipKey, 
                                $object     = $record.$object,
                                $macro          = $record.$macro,
                                $issupplyship   = $record.$issupplyship,
                                $isGetShipPlan                = $getShipPlan, 
                                $isGetIndividualInstructions  = $getIndividualInstructions,
                                $isGetCapacity  = $getCapacity,
                                $isGetPaintMod  = $getPaintMod,
                                $isChangeCrewAmounts    = false,
                                $isdebug                = if $isdebug then (if $index == $checkRecords.keys.count then true else false ) else false
                        ]"/>
                        <signal_cue_instantly cue="Get_PlanData_FromLua2" param="$stack" />

                    </do_if>

                    <remove_value name="$updateShipPlan" />

                </do_for_each>

            </actions>
        </cue>

        <!-- lua yüklemesi gerçekleştikten sonra çağrılmalı-->
        <cue name="CheckAndFix_tShipPlans_AllRFM" instantiate="true">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                
                <do_for_each name="$RFMKey" in="Main.$RM_Fleets.keys.list">

                    <debug_text text="'   Checking RFM %s tShipPlan Records.'.[$RFMKey]" chance="Main.$DeepDebug" />
                    <!-- { RFMKey = RFMKey , ShipKey = ShipKey [, Record = Main.$FleetRecords.{$RFMKey}.{$ShipKey}][, isFleetCheck = false][, FleetRecord = Main.$FleetRecords.{$RFMKey}][, isdebug = true] }-->
                    <signal_cue_instantly cue="Fix_Ship_tShipPlan2" param="table[
                        $RFMKey = $RFMKey, 
                        $isFleetCheck = true
                    ]" />
                </do_for_each>

                <debug_text text="'Checked And Fixed to all RFM tShipPlan Records.'.[]" />
            </actions>
        </cue>

        <!-- record tablosuna (lua çağrısı ile olamayan düzeltmeler) eklenen veya çıkarılan propertyler için 
            v3 .tShipPlan property eklemesi için, 
            sonraki denetimlerde tShipPlan yazılı olacağından ya da yeni kayıt açıldığında zaten işleneceğinden hızlı kontrol gerçekleşecek.
            v15 de order yapıları değiştirildi. v14-15 öncesinde order düzeltmesi değişikliği olmayacak
        -->
        <cue name="Check_AllRFM_Records" instantiate="true">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <set_value name="$affectedfleets" exact="[]" />
                

                <set_value name="$Patch" exact="if event.param == null then 0 else (event.param)i"/>
                <set_value name="$forceCheck" exact="true"/>

                <do_for_each name="$RFMKey" in="Main.$RM_Fleets.keys.list">
                    <do_if value="not Main.$RM_Fleets.{$RFMKey}.$autobuild?">
                        <set_value name="Main.$RM_Fleets.{$RFMKey}.$autobuild" exact="true" />
                        <do_if value="$affectedfleets.indexof.{$RFMKey} == 0">
                            <append_to_list name="$affectedfleets" exact="$RFMKey" />
                        </do_if>
                    </do_if>
                    <do_if value="not Main.$RM_Fleets.{$RFMKey}.$rebuildtimerstatus?">
                        <set_value name="Main.$RM_Fleets.{$RFMKey}.$rebuildtimerstatus" exact="true" />
                        <do_if value="$affectedfleets.indexof.{$RFMKey} == 0">
                            <append_to_list name="$affectedfleets" exact="$RFMKey" />
                        </do_if>
                    </do_if>
                    <do_for_each name="$index" valuename="$rEntry" in="Main.$FleetRecords.{$RFMKey}">
                        <set_value name="$ShipKey" exact="$rEntry.$id" />
                        <run_actions ref="Check_Ship_Record" result="$isAffected">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="ShipKey" value="$ShipKey" />
                            <param name="forceCheck" value="$forceCheck" />
                            <param name="Patch" value="$Patch" />
                        </run_actions>
                        <do_if value="$isAffected">
                            <do_if value="$affectedfleets.indexof.{$RFMKey} == 0">
                                <append_to_list name="$affectedfleets" exact="$RFMKey" />
                            </do_if>
                        </do_if>

                    </do_for_each>
                </do_for_each>

                <!-- DEBUG : Fleet Record File -->
                <do_for_each name="$RFMKey" in="$affectedfleets">
                    <run_actions ref="Debug_FleetRecord">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>
                </do_for_each>

                <remove_value name="$affectedfleets" />
                <remove_value name="$Patch" />

                <debug_text text="'All Records Check and Updated'.[]" chance="100"/>

            </actions>
        </cue>

        <library name="Check_Ship_Record" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ShipKey" />
                <param name="forceCheck"  default="false"/>
                <param name="Patch"  default="0"/>
            </params>
            <actions>

                <set_value name="$rEntry" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}" />
                <do_if value="@$rEntry.$isRecordCorrupt">
                    <set_value name="$startCheck" />
                </do_if>
                <do_if value="$forceCheck">
                    <set_value name="$startCheck" />
                </do_if>

                <set_value name="$isAffectedFleet" exact="false" />

                <do_if value="$startCheck?">
                    <set_value name="$isRecordCorrupt" exact="$rEntry.$destroyed" />
                    <!-- $isRecordCorrupt
                        record yapısına ilerde eklenecek veya değiştirilecek yapılar (patlamış gemilerdeki kayıtlar) burada düzeltilememiş ise durumu setleyeceğiz 
                        Böylece üretim sonrası data yapsını güncellememiz gerekip gerekmediğine ya da rapor ekranlarında döküm yapılıp yapılamayacağına karar verebiliriz.
                        <set_value name="$rEntry.$isRecordCorrupt" exact="true" /> propertysini kullanacağız
                    -->

                    <!-- Main.$Loadouts içinde veri yoksa macro kullanarak oluştur -->
                    <set_value name="$loadout" exact="@Main.$Loadouts.{$RFMKey}.{$ShipKey}"/>
                    <do_if value="typeof $loadout != datatype.loadout">
                        <run_actions ref="Create_Loadout_AndSetTo" result="Main.$Loadouts.{$RFMKey}.{$ShipKey}">
                            <param name="ship"          value="$rEntry.$object"/>
                            <param name="macro"         value="$rEntry.$macro" />
                            <param name="wares"         value="$rEntry.$tWare" />
                            <param name="FleetRec"      value="$rEntry"/>
                        </run_actions>
                        <remove_value name="$rEntry.$tShipPlan" />
                    </do_if>

                    <!-- since main. Ver 3 -->
                    <do_if value="not $rEntry.$destroyedtime?" >
                        <set_value name="$rEntry.$destroyedtime" exact="null" />
                        <do_if value="$rEntry.$destroyed">
                            <set_value name="$rEntry.$destroyedtime" exact="player.age" />
                            <do_if value="$rEntry.$reBuildStartTime">
                                <set_value name="$rEntry.$destroyedtime" exact="$rEntry.$reBuildStartTime" />
                            </do_if>
                        </do_if>
                        <set_value name="$isAffectedFleet" exact="true" />
                    </do_if>

                    <!-- since main. Ver 7 -->
                    <do_if value="not $rEntry.$issupplyship?" >
                        <set_value name="$rEntry.$issupplyship" exact="false" />
                        <do_if value="( [shiptype.carrier, shiptype.resupplier].indexof.{$rEntry.$type} ) or ($rEntry.$macro.primarypurpose == purpose.auxiliary) ">
                            <set_value name="$rEntry.$issupplyship" exact="true" />
                        </do_if>
                        <set_value name="$isAffectedFleet" exact="true" />
                    </do_if>
                    <do_if value="not $rEntry.$loadoutlevel?" >
                        <set_value name="$rEntry.$loadoutlevel" exact="1" />
                        <set_value name="$isAffectedFleet" exact="true" />
                    </do_if>

                    <!-- since v 14 Trader, Miner ve Slavagerlere warebasketleri saklama özelliği eklendi -->
                    <!-- since v 15, 
                        patch v 15 yüklemesinde $RM_Fleets.{$RFMKey}.$order , $RM_Fleets.{$RFMKey}.$sectoid , $RM_Fleets.{$RFMKey}.$sector  propertyleri record.1 e taşındı
                        diğer record kayıtlarına da trader, miner ve salvagerlerde olduğu gibi .orders ve .defaultorder popertyleri eklendi.
                    -->
                    <do_if value="$Patch == 0 or $Patch ge 15">
                        <set_value name="$orders" exact="[]" />
                        <do_if value="$rEntry.$id == 1">
                            <set_value name="$sectorid" exact="@$rEntry.$object.sector"/>
                        </do_if>
                        <do_if value="(not $rEntry.$orders?) or (not $rEntry.$defaultorder?)">
                            <do_if value="$rEntry.$object != null" >
                                <run_actions ref="md.Upb_Library_Orders.Get_Defaultorder_Orders_Sector_From_Ship" result="$result">
                                    <param name="ship" value="$rEntry.$object" />
                                </run_actions>
                                <set_value name="$uiorderTable" exact="$result.{1}" />
                                <do_if value="$rEntry.$id == 1">
                                    <set_value name="$orders" exact="$result.{2}" />
                                </do_if>

                                <do_if value="not $rEntry.$defaultorder?">
                                    <set_value name="$rEntry.$defaultorder" exact="$uiorderTable"/>
                                </do_if>

                                <set_value name="$sectorid" exact="$result.{3}"/>

                            </do_if>
                            <set_value name="$isAffectedFleet" exact="true" />
                        </do_if>

                        <do_if value="not $rEntry.$orders?">
                            <set_value name="$rEntry.$orders" exact="$orders"/>
                        </do_if>
                        <do_if value="not $rEntry.$sectorid? and $rEntry.$id == 1">
                            <set_value name="$rEntry.$sectorid" exact="$sectorid" />
                            <set_value name="$rEntry.$sector" exact="if $sectorid.knownname then $sectorid.knownname else ''" />
                            <set_value name="$isAffectedFleet" exact="true" />
                        </do_if>
                    </do_if>


                    <!-- since main. Ver 15 -->
                    <!--  
                        0- önceki sürümlerde gemi üretimden çıkınca tPilot propertysi yerine Pilot propertysi kullanılarak record tablosuna ekllenmişti. Silinecek
                        1- tPilot ve tBulkCrew tablolarına 
                            isfemale, faction, name ve combinedskill propertyleri eklendi.
                        2- record tablosuna tCapacity tablosu eklendi.
                        3- record tablosuna dronecategory tablesu eklendi.
                            * v.17 de kaldırdık
                        4- record tablosuna deployablecategory tablesu eklendi.
                            * v.17 de kaldırdık
                    -->
                    <do_if value="not $rEntry.$tPilot.$isfemale? or $rEntry.$tPilot.$name == '' " >
                        <!-- Peoples-->
                        <do_if value="$rEntry.$object != null">
                            <!-- Gemi varsa mevcut olan personel durumu ile kaydı yeniden oluşturuyoruz -->
                            
                            <run_actions ref="GetPilotTable_From_Object" result="$rEntry.$tPilot">
                                <param name="object" value="$rEntry.$object" />
                            </run_actions>
            
                            <run_actions ref="GetCrewsTable_From_Object" result="$rEntry.$tBulkCrew">
                                <param name="object" value="$rEntry.$object" />
                            </run_actions>

                        </do_if>
                        <do_else>
                            <!-- Patlamış gemi üretildiğinde personel ve pilot kayıtları güncelledik. Şimdilik bulabildiğimiz değerleri düzeltiyoruz-->
                            <!-- PILOT-->
                            <set_value name="$faction" exact="''" />
                            <set_value name="$faction" exact="Main.$FactionByCharMacro.{$rEntry.$tPilot.$macro}" chance="Main.$FactionByCharMacro.{$rEntry.$tPilot.$macro}? * 100"/>
                            <set_value name="$rEntry.$tPilot.$isfemale" exact="$rEntry.$tPilot.$macro.isfemale" />
                            <set_value name="$rEntry.$tPilot.$faction" exact="$faction" />
                            <set_value name="$rEntry.$tPilot.$name" exact="''" />
                            <set_value name="$rEntry.$tPilot.$combinedskill" exact="-1" />
                            
                            <!-- PEOPLES-->
                            <set_value name="$rEntry.$tBulkCrew.$capacity" exact="$rEntry.$macro.people.capacity" />
                            <set_value name="$Roles" exact="[entityrole.service, entityrole.marine]"/>
                            <do_all exact="$Roles.count" counter="$i">
                                <do_for_each name="$Crew" in="$rEntry.$tBulkCrew.{$Roles.{$i}}">
                                    <set_value name="$faction" exact="''" />
                                    <set_value name="$faction" exact="Main.$FactionByCharMacro.{$Crew.$macro}" chance="Main.$FactionByCharMacro.{$Crew.$macro}? * 100"/>
                                    <set_value name="$Crew.$isfemale" exact="$Crew.$macro.isfemale" />
                                    <set_value name="$Crew.$faction" exact="$faction" />
                                    <set_value name="$Crew.$name" exact="''" />
                                    <set_value name="$Crew.$combinedskill" exact="-1" />
                                </do_for_each>
                            </do_all>
                        </do_else>

                        <set_value name="$isAffectedFleet" exact="true" />
                    </do_if>
                    <do_if value="not $rEntry.$tCapacity?">
                        <run_actions ref="GetCapacityTable" result="$rEntry.$tCapacity">
                            <param name="object" value="$rEntry.$object" />
                        </run_actions>
                        <set_value name="$isAffectedFleet" exact="true" />
                    </do_if>

                    <set_value name="$rEntry.$isRecordCorrupt" exact="$isRecordCorrupt and $isAffectedFleet"/>

                </do_if>
                <return value="$isAffectedFleet"/>
            </actions>
        </library>








        <!-- CONSTANTS 
        -->
        <library name="DefaultOptions" purpose="run_actions">
            <params>
                <param name="reset" default="false" />
            </params>
            <actions>

                <do_if value="not global.$upbRF_DATA?">
                    <set_value name="$changedGlobalDefaults" />
                </do_if>
                <do_elseif value="not global.$upbRF_DATA.$Default?">
                    <set_value name="$changedGlobalDefaults" />
                </do_elseif>
                <do_elseif value="not global.$upbRF_DATA.$Default.$v325?">
                    <set_value name="$changedGlobalDefaults" />
                </do_elseif>

                <set_value name="Main.$FactionByCharMacro" exact="table[]" />
				<set_value name="$allFactionsByRaceTable" exact="table[]" />
				<run_actions ref="Get_ByRace_AllFactionsTable" result="$allFactionsByRaceTable"/>
                <do_for_each name="$race" valuename="$rfactionlist" in="$allFactionsByRaceTable">
                    <do_for_each name="$nfaction" in="$rfactionlist" counter="$ifaction">
                        <get_character_definition macro="$fmacrolar" faction="$nfaction" multiple ="true" />
                        <do_for_each name="$macro" in="$fmacrolar" counter="$imacro">
                            <set_value name="Main.$FactionByCharMacro.{$macro}" exact="$nfaction"/>
                        </do_for_each>
                    </do_for_each>
                </do_for_each>

                <!-- Mod Paints-->
                <set_value name="Main.$PaintModWares" exact="table[]"/>
                <get_ware_definition result="$AllPaintModWares" tags="[tag.paintmod]" />
                <do_for_each name="$ware" in="$AllPaintModWares" counter="$i">
                    <!-- <debug_text text="'  %s modware = %s, name = %s, paintmodquality = %s, objectcount = %s, tags = %s, transporttag = %s, container = %s'.[$i, $ware.id, $ware.name, $ware.paintmodquality, $ware.objectcount, $ware.tags, $ware.transporttag, $ware.transporttag, $ware.container]" />-->
                    <set_value name="Main.$PaintModWares.{$ware}" exact="table[ $id = $ware.id, $name = $ware.name, $quality = $ware.paintmodquality, $ware = $ware ]" />
                </do_for_each>
                <!-- 
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="Main.$PaintModWares" />
                </run_actions>
                -->
                <!-- deployablecategory-->
                <set_value name="$deployablecategories" exact="[
                    deployablecategory.lasertower, 
                    deployablecategory.mine, 
                    deployablecategory.navbeacon, 
                    deployablecategory.resourceprobe, 
                    deployablecategory.satellite
                    ]" />
                <set_value name="$deployableMacroByType" exact="table[]"/>
                <do_for_each name="$category" in="$deployablecategories" counter="$i" >
                    <set_value name="$deployableMacroByType.{$category}" exact="[]"/>
                </do_for_each>

                <get_ware_definition result="$wares"  flags="equipment" />
                <do_for_each name="$ware" in="$wares" counter="$i">
                    <do_if value="$ware.isdeployable and ( $ware.tags.indexof.{tag.lasertower} or
                        $ware.tags.indexof.{tag.mine} or
                        $ware.tags.indexof.{tag.navbeacon} or 
                        $ware.tags.indexof.{tag.resourceprobe} or
                        $ware.tags.indexof.{tag.satellite} ) and 
                        not $ware.tags.indexof.{tag.noplayerblueprint}">
                        <set_value name="$macro" exact="$ware.objectmacro" />
                        <append_to_list name="$deployableMacroByType.{$macro.deployablecategory}" exact="$macro"/>
                    </do_if>
                </do_for_each>

                <!-- Drone kategorilerine ait macrolar-->
                <set_value name="$unitcategories" exact="[
                    unitcategory.attack, 
                    unitcategory.build, 
                    unitcategory.defence, 
                    unitcategory.gascollector, 
                    unitcategory.orecollector, 
                    unitcategory.repair, 
                    unitcategory.transport,
                    unitcategory.guard, 
                    unitcategory.police
                    ]" />
                <set_value name="$droneMacroByType" exact="table[]"/>
                <do_for_each name="$category" in="$unitcategories" counter="$i" >
                    <set_value name="$droneMacroByType.{$category}" exact="[]"/>
                </do_for_each>

                <get_ware_definition result="$wares" tags="[tag.drone]" />
                <do_for_each name="$ware" in="$wares" counter="$i">
                    <do_if value="not $ware.tags.indexof.{tag.noplayerblueprint}">
                        <set_value name="$macro" exact="$ware.objectmacro" />
                        <append_to_list name="$droneMacroByType.{$macro.unitcategory}" exact="$macro"/>
                    </do_if>
                </do_for_each>

                <do_if value="$changedGlobalDefaults? or $reset">
                    <set_value name="global.$upbRF_DATA" exact="table[]"/>
                    <debug_text text="'RFM Globals Is Set to Defaults'.[]" />
                    <do_if value="$reset" exact="true">
                        <show_help duration="7s" custom="'%s %s.\n %s'.[readtext.{Main.$tPage}.{1320}, readtext.{Main.$tPage}.{1}, readtext.{Main.$tPage}.{1400}]" comment="Reset Upb Restock Fleet Manager, Globals Is Setting to Defaults"/>
                    </do_if>
                    <do_else>
                        <show_help duration="7s" custom="'%s %s.\n %s'.[readtext.{Main.$tPage}.{1310}, readtext.{Main.$tPage}.{1}, readtext.{Main.$tPage}.{1400}]" comment="Updated Upb Restock Fleet Manager, Globals Is Setting to Defaults"/>
                    </do_else>
                </do_if>
                <set_value name="$alertlevels" exact="table[
                    $normal     = 1,
                    $verylow    = 2,
                    $low        = 3,
                    $medium     = 4,
                    $high       = 5,
                    $veryhigh   = 6
                ]" />
                <!-- BAKILACAK : RFM Renkleri ile ilgili Her rfm içine açıldığında aldığı N ve A renk bilgisi eklenecek
                        İlerde eklenecek her renk değişikliğinde geçmiş renkleri de kapsayan bir liste tutulacak.
                        RFM tag araması yaparken bu lsitedeki renkelre göre arama yaptırılacak.
                    Ya da Lua içinde MenuMap luaya bir callback eklenerek resim ikonu konabilir. 
                        menuMap.lua ya callback yazmak için SNApi ve lua kodlarına callback yazan mod kullanılmalı.
                    Renklendirme de genel renk bilgisinden alınır. 
                -->
                <!-- normal = 37b400 , 50dc14, 2d9600, 64b400 -->
                <!-- lua içindeki shipstatus renkleri ile uyumlu olsun
                    * * * * RFM Renkleri değişmemeli, rfm kapatıp açarken renkleri okuyoruz
                    37b400 = r=63, g=242, b=0       yeşil (RFM NORMAL)  Normal
                    dc8200 = r=249, g=132, b=31     turuncu (RFM ALERT) Medium
                    3ff200 = r=63, g=242, b=0       (playercolor)               - kullanmayacağız
                    bff2a8 = r=191, g=242, b=168    (currentplayershipcolor)    - kullanmayacağız
                    f2f287 = r=242, g=242, b=135    açık sarı (text_inprogress)
                    dcdc00 = r=220, g=220, b=0      kirli sarı ( )
                    f9841f = r=249, g=132, b=31     turuncu (text_warning)      - kullanmayacağız
                    f891b2 = r=248, g=145, b=178    açık kırmızı (enemy)
                    ec1c1c = r=236, g=28, b=28      kırmızı (hostile)
                -->
                <set_value name="$alertcolors" exact="table[ 
                    {$alertlevels.$normal}      = '#FF'+ '37b400' + '#' , 
                    {$alertlevels.$verylow}     = '#FF'+ 'f2f287' + '#' , 
                    {$alertlevels.$low}         = '#FF'+ 'dcdc00' + '#' , 
                    {$alertlevels.$medium}      = '#FF'+ 'dc8200' + '#' , 
                    {$alertlevels.$high}        = '#FF'+ 'f891b2' + '#' ,
                    {$alertlevels.$veryhigh}    = '#FF'+ 'ec1c1c' + '#' 
                                            ]"/>

                <set_value name="$alertstatues" exact="table[
                    $normal = table[                    
                                $level = $alertlevels.$normal, 
                                $text  = readtext.{Main.$tPage}.{9050}, 
                                $color = $alertcolors.{$alertlevels.$normal}
                            ],
                    $inprogress = table[                    
                                $level = $alertlevels.$verylow, 
                                $text  = readtext.{Main.$tPage}.{9055}, 
                                $color = $alertcolors.{$alertlevels.$verylow}
                            ],
                    $nopilot = table[                    
                                $level = $alertlevels.$low, 
                                $text  = readtext.{Main.$tPage}.{9051}, 
                                $color = $alertcolors.{$alertlevels.$low}
                            ],
                    $queuedship = table[                    
                                $level = $alertlevels.$medium,
                                $text  = readtext.{Main.$tPage}.{9052},
                                $color = $alertcolors.{$alertlevels.$medium}
                            ],
                    $noshipyard = table[                    
                                $level = $alertlevels.$high, 
                                $text  = readtext.{Main.$tPage}.{9053}, 
                                $color = $alertcolors.{$alertlevels.$high}
                            ],
                    $addbuildtask   = table[                    
                                $level = $alertlevels.$high, 
                                $text  = readtext.{Main.$tPage}.{9056}, 
                                $color = $alertcolors.{$alertlevels.$high}
                            ],
                    $rebuild    = table[                    
                                $level = $alertlevels.$veryhigh, 
                                $text  = readtext.{Main.$tPage}.{9054}, 
                                $color = $alertcolors.{$alertlevels.$veryhigh}
                            ]
                ]" />
                        
                <!-- $NextRetryTime değeri min cinsinden vereceğiz, saniyeye çevirme işlerini kodlar içinde yapacağız 
                    $maxallowedpricepership, playermoneythreshold ve $maxmoney değerlerini 
                        başlangıç olarak 2 milyon, 30 milyon ve max 100 milyon ayarlıyoruz
                -->
                <!-- burdaki numara sıralaması önemli, numarası büyük olan respond hazırlanırken öncelik alacak-->
                <set_value name="$failcaseOrders" exact="table[ 
                    $shipyard               = 1,
                    $sectorisknown          = 2,
                    $relationdockge         = 3,
                    $shiptrader             = 4,
                    $buildclass             = 5,
                    $buildmacro             = 6,
                    $m_ship_licence         = 7,
                    $c_ship_licence         = 8,
                    $equipment              = 9,
                    $m_equipment_licence    = 10,
                    $c_equipment_licence    = 11,
                    $selectbest             = 12,
                    $price                  = 13
                ]" />
                <set_value name="$failcases" exact="table[ 
                    $shipyard               = table[ $id = $failcaseOrders.$shipyard,           $check = true,  $name = 'shipyard',             $text = readtext.{Main.$tPage}.{9000}   ]   ,
                    $buildclass             = table[ $id = $failcaseOrders.$buildclass,         $check = true,  $name = 'buildclass',           $text = readtext.{Main.$tPage}.{9001}   ]   ,
                    $buildmacro             = table[ $id = $failcaseOrders.$buildmacro,         $check = true,  $name = 'buildmacro',           $text = readtext.{Main.$tPage}.{9002}   ]   ,
                    $sectorisknown          = table[ $id = $failcaseOrders.$sectorisknown,      $check = true,  $name = 'sectorisknown',        $text = readtext.{Main.$tPage}.{9003}   ]   ,
                    $relationdockge         = table[ $id = $failcaseOrders.$relationdockge,     $check = true,  $name = 'relationdockge',       $text = readtext.{Main.$tPage}.{9004}   ]   ,
                    $shiptrader             = table[ $id = $failcaseOrders.$shiptrader,         $check = true,  $name = 'shiptrader',           $text = readtext.{Main.$tPage}.{9005}   ]   ,

                    $m_ship_licence         = table[ $id = $failcaseOrders.$m_ship_licence,     $check = true,  $name = 'militaryship',         $text = readtext.{Main.$tPage}.{9006}   ]   ,
                    $c_ship_licence         = table[ $id = $failcaseOrders.$c_ship_licence,     $check = true,  $name = 'capitalship',          $text = readtext.{Main.$tPage}.{9007}   ]   ,

                    $equipment              = table[ $id = $failcaseOrders.$equipment,          $check = true,  $name = 'equipment',            $text = readtext.{Main.$tPage}.{9008}   ]   ,
                    $m_equipment_licence    = table[ $id = $failcaseOrders.$equipment,          $check = true,  $name = 'militaryequipment',    $text = readtext.{Main.$tPage}.{9009}   ]   ,
                    $c_equipment_licence    = table[ $id = $failcaseOrders.$equipment,          $check = true,  $name = 'capitalequipment',     $text = readtext.{Main.$tPage}.{9009}   ]   ,

                    $selectbest             = table[ $id = $failcaseOrders.$selectbest,         $check = true,  $name = 'selectbest',           $text = readtext.{Main.$tPage}.{9010}   ]   ,
                    $price                  = table[ $id = $failcaseOrders.$price,              $check = true,  $name = 'price',                $text = readtext.{Main.$tPage}.{9011}   ]   
                ]" />

                <set_value name="global.$upbRF_DATA.$Default" exact="table
                [
                    $v325 = null ,
                    $tPage                  = Main.$tPage,
                    $shownotification       = false  ,
                    $showhelp               = true   ,
                    $write_to_logbook       = true   ,
                    $UsePlayerYards         = true   ,
                    $UseNPCYards            = true   ,
                    $ValidUpdates   = table[
                        $PYards = table[ $equipments  = true, $peoples = true ]    ,
                        $NYards = table[ $equipments  = true, $peoples = true ]
                        ],
                    $failcaseOrders = $failcaseOrders,
                    $failcases      = $failcases,
                    $useTagOnName         = true,
                    $NextRetryTime              = 5         ,
                    $maxallowedpricepership     = 2000000       ,
                    $playermoneythreshold       = 30000000      ,
                    $moneystep                  = 500        ,
                    $maxmoney                   = 100000000     ,
                    $personnelcloning           = false     ,
                    $pilotcloning               = false     ,
                    $autobuildafterclone        = false     ,
                    $UserQuestions              = table[ $RemoveRFM = false, $RemoveShip = false ],
                    $deployablecategories       = $deployablecategories,
                    $unitcategories             = $unitcategories,
                    $deployableMacroByType      = $deployableMacroByType,
                    $droneMacroByType           = $droneMacroByType,
                    $DebugChance                = 0         ,
                    $DeepDebug                  = 0         ,
                    $ChangesOnFleetDebug        = 0         ,
                    $FleetLockStatusDebug       = 0         ,
                    $isDebugFileMode            = 0,
                    $BuildTasksChance           = 0,
                    $DFD            = table[ 
                        $MainCommands = false,
                        $MainCommandsDeep = false,
                        $RebuildCues = false,
                        $Fleets = false,
                        $FleetsDeep = false,
                        $Records = false,
                        $RecordsDeep = false,
                        $tShipPlan = false,
                        $tShipPlanDeep = false,
                        $tIndividualInstructions = false,
                        $tIndividualInstructionsDeep = false,
                        $tBulkCrew = false,
                        $Command = false,
                        $CommandDeep = false,
                        $reBuildCue = false,
                        $reBuildCueDeep = false,
                        $reBuild = false,
                        $reBuildDeep = false,
                        $reAssignment = false,
                        $reAssignmentDeep = false
                    ],
                    $Sounds   = table[
                        $RFM_Enable         = 'rfm_enable'             ,
                        $RFM_Disable        = 'rfm_disable'            
                        ]                                            ,
                    $Log   = table[
                            $DIR                = 'upb_ls_rfm'     ,
                            $TAG_Main           = '_RestockMain'     ,
                            $TAG_RFMleets       = '_RFMFleets'       ,
                            $TAG_RebuildCues    = '_RebuildCues'     ,
                            $TAG_DumpDebug      = '_DumpDebug'       ,
                            $TAG_Command        = '_Command'         ,
                            $TAG_FleetRecord    = '_FleetRecord'     ,
                            $TAG_reBuild        = '_reBuild'         ,
                            $TAG_reAssignment   = '_reAssignment'
                        ]                                            ,
                    $alertlevels            = $alertlevels              ,
                    $alertcolors            = $alertcolors              ,
                    $alertstatues           = $alertstatues             ,
                    $normalColor            = $alertcolors.{$alertlevels.$normal}    ,
                    $alertColor             = $alertcolors.{$alertlevels.$medium}    ,
                    $oldN                   = '#FF'+ 'c4ff0e' + '#'     , 
                    $oldA                   = '#FF'+ 'f37865' + '#'     , 
                    $RMShipCaptionTag       = ' (' + Main.$RFMTag + '_$KEY$_) '
                ]"/>
                <!--   on = c4ff0e , oa = f37865   nn = 37b400 na = dcdc00 -->
                <do_if value="not global.$upbRF_DATA.$Editing?">
                    <run_actions ref="TableCopy" result="$clonedata">
                        <param name="t" value="global.$upbRF_DATA.$Default" />
                    </run_actions>
                    <set_value name="global.$upbRF_DATA.$Editing" exact="$clonedata"/>
                    <remove_value name="$clonedata" />
                </do_if>

                <!-- 
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="global.$upbRF_DATA.$Editing" />
                </run_actions>
                -->
                <remove_value name="$changedGlobalDefaults" />
            </actions>
        </library>
        <library name="GlobalPersistentVariables">
            <actions>
                <set_value name="Main.$RebuildCues" exact="table[]"/>
                <set_value name="Main.$RM_Fleets" exact="table[]"/>
                <set_value name="Main.$FleetRecords" exact="table[]"/>
                <set_value name="Main.$Loadouts" exact="table[]"/>

                <debug_text text="'RFM PROGRAM Global PERSISTEND Değişkenler ATANDI'" chance="Main.$DebugChance" />
            </actions>
        </library>
        <library name="GlobalConstants">
            <actions>

                <set_value name="Main.$tPage" exact="1134010" />
                <set_value name="Main.$RFMTag" exact="readtext.{Main.$tPage}.{500}" />

                <run_actions ref="DefaultOptions">
                    <param name="reset" value="if $reset? then $reset else false" />
                </run_actions>


                <!-- listelerin yükleme işi load olayı bittikten sonra yazılacak, lua loader complete alındı-->
                <do_if value="not Main.$active_stations?">
                    <set_value name="Main.$active_stations" exact="[]"/>
                </do_if>
                <do_if value="not Main.$blacklist_stations?">
                    <create_group groupname="Main.$blacklist_stations" />
                </do_if>

                <do_if value="not Main.$BuildTaskIDs?">
                    <set_value name="Main.$BuildTaskIDs" exact="[]" />
                </do_if>

                <include_actions ref="TakeMainConstans" />

                <debug_text text="'RF Main Global CONSTANT Değişkenler ATANDI.  event.name = ' + event.name" chance="Main.$DebugChance"/>

                <do_if value="md.SWI_HQ_Discovery?" chance="0">
                    <set_value name="$possibleHQSectors" exact="[
                        md.SWI_HQ_Discovery.Start.$Sector_TheMaw,
                        md.SWI_HQ_Discovery.Start.$Sector_UnkRegion3,
                        md.SWI_HQ_Discovery.Start.$Sector_random_north,
                        md.SWI_HQ_Discovery.Start.$Sector_random_south
                        ]" />
                    <do_for_each name="$sector" in="$possibleHQSectors" counter="$i">
                        <debug_text text="'%s- %s'.[$i, $sector.knownname]" />
                        <create_object name="$Satellite" macro="macro.eq_arg_satellite_02_macro" owner="faction.player" sector="$sector">
                            <safepos x="10km" y="0km" z="10km"/>
                        </create_object>
                        <set_object_name object="$Satellite" name="'HQ Sector [%s] [%s]'.[$i, $sector.knownname]" />
                    </do_for_each>
                </do_if>

            </actions>
        </library>
        <library name="TakeMainConstans">
            <actions>
                <set_value name="$testmode" exact="false" />

                <do_if value="$testmode">
                    <set_value name="global.$upbRF_DATA.$Editing.$DebugChance" exact="100"/>
                    <set_value name="global.$upbRF_DATA.$Editing.$DeepDebug" exact="100"/>
                    <set_value name="global.$upbRF_DATA.$Editing.$ChangesOnFleetDebug" exact="100"/>
                    <set_value name="global.$upbRF_DATA.$Editing.$FleetLockStatusDebug" exact="100"/>
                    <set_value name="global.$upbRF_DATA.$Editing.$BuildTasksChance" exact="100"/>
                    <set_value name="global.$upbRF_DATA.$Editing.$isDebugFileMode" exact="true"/>
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD" exact="table[]" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$MainCommands" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$MainCommandsDeep" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$RebuildCues" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$Fleets" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$FleetsDeep" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$Records" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$RecordsDeep" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$tShipPlan" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$tShipPlanDeep" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$tIndividualInstructions" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$tIndividualInstructionsDeep" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$tBulkCrew" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$Command" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$CommandDeep" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$reBuildCue" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$reBuildCueDeep" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$reBuild" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$reBuildDeep" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$reAssignment" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DFD.$reAssignmentDeep" exact="true" />
                </do_if>

                <set_value name="Main.$DebugChance" exact="global.$upbRF_DATA.$Editing.$DebugChance"/>
                <set_value name="Main.$DeepDebug" exact="global.$upbRF_DATA.$Editing.$DeepDebug"/>
                <set_value name="Main.$ChangesOnFleetDebug" exact="global.$upbRF_DATA.$Editing.$ChangesOnFleetDebug"/>
                <set_value name="Main.$FleetLockStatusDebug" exact="global.$upbRF_DATA.$Editing.$FleetLockStatusDebug"/>
                <!-- özellikle record dosyalarının dökümü için Debug modunda iken bu değişkenler aktif olursa oyunda lag oluşmasına sebep olabilir -->
                <set_value name="Main.$BuildTasksChance" exact="global.$upbRF_DATA.$Editing.$BuildTasksChance"/>
                <set_value name="Main.$isDebugFileMode" exact="global.$upbRF_DATA.$Editing.$isDebugFileMode"/>
                <set_value name="Main.$DFD" exact="table[]" />
                <set_value name="Main.$DFD.$MainCommands" exact="global.$upbRF_DATA.$Editing.$DFD.$MainCommands * 100" />
                <set_value name="Main.$DFD.$MainCommandsDeep" exact="global.$upbRF_DATA.$Editing.$DFD.$MainCommandsDeep * 100" />
                <set_value name="Main.$DFD.$RebuildCues" exact="global.$upbRF_DATA.$Editing.$DFD.$RebuildCues * 100" />
                <set_value name="Main.$DFD.$Fleets" exact="global.$upbRF_DATA.$Editing.$DFD.$Fleets * 100" />
                <set_value name="Main.$DFD.$FleetsDeep" exact="global.$upbRF_DATA.$Editing.$DFD.$FleetsDeep * 100" />
                <set_value name="Main.$DFD.$Records" exact="global.$upbRF_DATA.$Editing.$DFD.$Records * 100" />
                <set_value name="Main.$DFD.$RecordsDeep" exact="global.$upbRF_DATA.$Editing.$DFD.$RecordsDeep * 100" />
                <set_value name="Main.$DFD.$tShipPlan" exact="global.$upbRF_DATA.$Editing.$DFD.$tShipPlan * 100" />
                <set_value name="Main.$DFD.$tShipPlanDeep" exact="global.$upbRF_DATA.$Editing.$DFD.$tShipPlanDeep * 100" />
                <set_value name="Main.$DFD.$tIndividualInstructions" exact="global.$upbRF_DATA.$Editing.$DFD.$tIndividualInstructions * 100" />
                <set_value name="Main.$DFD.$tIndividualInstructionsDeep" exact="global.$upbRF_DATA.$Editing.$DFD.$tIndividualInstructionsDeep * 100" />
                <set_value name="Main.$DFD.$tBulkCrew" exact="global.$upbRF_DATA.$Editing.$DFD.$tBulkCrew * 100" />
                <set_value name="Main.$DFD.$Command" exact="global.$upbRF_DATA.$Editing.$DFD.$Command * 100" />
                <set_value name="Main.$DFD.$CommandDeep" exact="global.$upbRF_DATA.$Editing.$DFD.$CommandDeep * 100" />
                <set_value name="Main.$DFD.$reBuildCue" exact="global.$upbRF_DATA.$Editing.$DFD.$reBuildCue * 100" />
                <set_value name="Main.$DFD.$reBuildCueDeep" exact="global.$upbRF_DATA.$Editing.$DFD.$reBuildCueDeep * 100" />
                <set_value name="Main.$DFD.$reBuild" exact="global.$upbRF_DATA.$Editing.$DFD.$reBuild * 100" />
                <set_value name="Main.$DFD.$reBuildDeep" exact="global.$upbRF_DATA.$Editing.$DFD.$reBuildDeep * 100" />
                <set_value name="Main.$DFD.$reAssignment" exact="global.$upbRF_DATA.$Editing.$DFD.$reAssignment * 100" />
                <set_value name="Main.$DFD.$reAssignmentDeep" exact="global.$upbRF_DATA.$Editing.$DFD.$reAssignmentDeep * 100" />

                <set_value name="Main.$EnableSoundId" exact="global.$upbRF_DATA.$Default.$Sounds.$RFM_Enable"/>
                <set_value name="Main.$DisableSoundId" exact="global.$upbRF_DATA.$Default.$Sounds.$RFM_Disable"/>

                <set_value name="Main.$deployablecategories" exact="global.$upbRF_DATA.$Default.$deployablecategories"/>
                <set_value name="Main.$unitcategories" exact="global.$upbRF_DATA.$Default.$unitcategories"/>
                
                <set_value name="Main.$logDIR" exact="global.$upbRF_DATA.$Default.$Log.$DIR"/>
                <set_value name="Main.$logTAG_Main" exact="global.$upbRF_DATA.$Default.$Log.$TAG_Main"/>
                <set_value name="Main.$logTAG_RFMleets" exact="global.$upbRF_DATA.$Default.$Log.$TAG_RFMleets"/>
                <set_value name="Main.$logTAG_RebuildCues" exact="global.$upbRF_DATA.$Default.$Log.$TAG_RebuildCues"/>
                <set_value name="Main.$logTAG_DumpDebug" exact="global.$upbRF_DATA.$Default.$Log.$TAG_DumpDebug" />
                <set_value name="Main.$logTAG_Command" exact="global.$upbRF_DATA.$Default.$Log.$TAG_Command" />
                <set_value name="Main.$logTAG_FleetRecord" exact="global.$upbRF_DATA.$Default.$Log.$TAG_FleetRecord" />
                <set_value name="Main.$logTAG_reBuild" exact="global.$upbRF_DATA.$Default.$Log.$TAG_reBuild" />
                <set_value name="Main.$logTAG_reAssignment" exact="global.$upbRF_DATA.$Default.$Log.$TAG_reAssignment" />
                                
                <set_value name="Main.$alertlevels" exact="global.$upbRF_DATA.$Default.$alertlevels"/>
                <set_value name="Main.$alertcolors" exact="global.$upbRF_DATA.$Default.$alertcolors"/>
                <set_value name="Main.$alertstatues" exact="global.$upbRF_DATA.$Default.$alertstatues"/>
                
                <set_value name="Main.$normalColor" exact="global.$upbRF_DATA.$Default.$normalColor"/>
                <set_value name="Main.$alertColor" exact="global.$upbRF_DATA.$Default.$alertColor"/>
                <set_value name="Main.$RMShipCaptionTag" exact="global.$upbRF_DATA.$Default.$RMShipCaptionTag"/>

            </actions>
        </library>






        <!-- MAIN 
        -->
        <cue name="Main" version="23">
            <conditions>
                <check_any>
                    <event_cue_signalled/>
                    <event_cue_signalled cue="md.Setup.GameStart"/>
                    <event_cue_signalled cue="md.Setup.Start" />
					<event_game_loaded/>
                </check_any>
            </conditions>
            <actions>
                <!-- md cue lerinin öncelikli başlama zaman aralıklarını Kontrol amaçlı -->
                <debug_text text="'RFM PROGRAM  Main START -  &lt;' + event.name + '&gt; , object = ' + @event.object.name + ', param = ' + @event.param " />
                <set_value name="$reset" exact="if @event.param != null then (if event.param == 'Reset' then true else false) else false" />
                <set_value name="$keepglobalreset" exact="if @event.param != null then (if event.param == 'KeepGlobalReset' then true else false) else false" />
                <do_if value="global.$upbRF_DATA? and not $keepglobalreset">
                    <remove_value name="global.$upbRF_DATA" />
                </do_if>
                <include_actions ref="GlobalConstants" />
                <include_actions ref="GlobalPersistentVariables" />
                
                <do_if value="@event.param == 'Reset' ">
                    <show_help duration="5s" custom="'%s %s'.[readtext.{Main.$tPage}.{1320}, readtext.{Main.$tPage}.{1}]" comment="Updated Upb Restock Fleet Manager"/>
                    <debug_to_file text="'- %s - - - - - - - U P D A T E - - - R E S E T - - - - Age: %s, %s - -'.[player.age, player.systemtime.{'%F-%X'}, this]" name="$logTAG_Main" directory="$logDIR" append="false" chance="Main.$DFD.$MainCommands"/>
                    <debug_to_file text="'- %s - - - - - - - U P D A T E - - - R E S E T - - - - Age: %s, %s - -'.[player.age, player.systemtime.{'%F-%X'}, this]" name="$logTAG_RebuildCues" directory="$logDIR" append="false" chance="Main.$DFD.$RebuildCues"/>
                    <debug_to_file text="'- %s - - - - - - - U P D A T E - - - R E S E T - - - - Age: %s, %s - -'.[player.age, player.systemtime.{'%F-%X'}, this]" name="$logTAG_RFMleets" directory="$logDIR" append="false" chance="Main.$DFD.$Fleets"/>
                </do_if>
                <do_else>
                    <show_help duration="5s" custom="'%s %s'.[readtext.{Main.$tPage}.{1300}, readtext.{Main.$tPage}.{1}]" comment="Installed Upb Restock Fleet Manager"/>
                    <debug_to_file text="'- %s - - - - - - - I N S T A L L - - - - - - - - - - - Age: %s, %s - -'.[player.age, player.systemtime.{'%F-%X'}, this]" name="$logTAG_Main" directory="$logDIR" append="false" chance="Main.$DFD.$MainCommands"/>
                    <debug_to_file text="'- %s - - - - - - - I N S T A L L - - - - - - - - - - - Age: %s, %s - -'.[player.age, player.systemtime.{'%F-%X'}, this]" name="$logTAG_RebuildCues" directory="$logDIR" append="false" chance="Main.$DFD.$RebuildCues"/>
                    <debug_to_file text="'- %s - - - - - - - I N S T A L L - - - - - - - - - - - Age: %s, %s - -'.[player.age, player.systemtime.{'%F-%X'}, this]" name="$logTAG_RFMleets" directory="$logDIR" append="false" chance="Main.$DFD.$Fleets"/>
                </do_else>

            </actions>
            <patch sinceversion="2">
                <debug_text text="'RFM PROGRAM  Main START sinceversion=2'"  />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_AllRFM_Records" param="2" />
                <run_actions ref="ReEnable_All_RFM_ForPatch" >
                    <param name="isSaveOrderData" value="true" />
                    <param name="printMessage" value="'PATCH ver 2'" />
                </run_actions>
                <show_help duration="5s" custom="'%s %s %s'.[readtext.{Main.$tPage}.{1}, readtext.{Main.$tPage}.{1310}, readtext.{Main.$tPage}.{1330}]" comment="Upb Restock Fleet Manager Update Complete"/>
            </patch>
            <patch sinceversion="3">
                <debug_text text="'RFM PROGRAM  Main START sinceversion=3'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_AllRFM_Records" param="3" />
                <!-- param  updateloadouts (default false) isChangeCrewAmounts (default false)        -->
                <run_actions ref="ReEnable_All_RFM_ForPatch" >
                    <param name="isSaveOrderData" value="true" />
                    <param name="printMessage" value="'PATCH ver 3'" />
                </run_actions>
                <show_help duration="5s" custom="'%s %s %s'.[readtext.{Main.$tPage}.{1}, readtext.{Main.$tPage}.{1310}, readtext.{Main.$tPage}.{1330}]" comment="Upb Restock Fleet Manager Update Complete"/>
            </patch>
            <patch sinceversion="4">
                <debug_text text="'RFM PROGRAM  Main START sinceversion=4'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_AllRFM_Records" param="4" />
                <!-- param  updateloadouts (default false) isChangeCrewAmounts (default false)        -->
                <run_actions ref="ReEnable_All_RFM_ForPatch" >
                    <param name="updateloadouts" value="true" />
                    <param name="isChangeCrewAmounts" value="true" />
                    <param name="isSaveOrderData" value="true" />
                    <param name="printMessage" value="'PATCH ver 4'" />
                </run_actions>
                <show_help duration="5s" custom="'%s %s %s'.[readtext.{Main.$tPage}.{1}, readtext.{Main.$tPage}.{1310}, readtext.{Main.$tPage}.{1330}]" comment="Upb Restock Fleet Manager Update Complete"/>
            </patch>
            <!-- BlacklistStation olayı getirildi
                record yapsındaki objectid propertysi idcode şekline dönüştürüldü
            -->
            <patch sinceversion="5">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 5'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_AllRFM_Records" param="5" />

                <do_for_each name="$RFMKey" in="Main.$RM_Fleets.keys.list">
                    <do_for_each name="$ShipKey" valuename="$record" in="Main.$FleetRecords.{$RFMKey}"  >
                        <set_value name="$record.$idcode" exact="$record.$objectid" />
                        <remove_value name="$record.$objectid" />
                    </do_for_each>
                </do_for_each>
                
                <set_value name="$active_stations" exact="[]" />
                <create_group groupname="$blacklist_stations" />
                <run_actions ref="Update_BlacklistStations" >
                    <param name="debugchance" value="100" />
                </run_actions>

                <do_for_each name="$RFMKey" in="Main.$RebuildCues">
                    <do_for_each name="$ShipKey" valuename="$entry" in="Main.$RebuildCues.{$RFMKey}">
                        <set_value name="$rebuildcue" exact="$entry.$cue" />
                        <set_value name="$rebuildcue.$cue" exact="$rebuildcue" />
                    </do_for_each>
                </do_for_each>

                <run_actions ref="ReEnable_All_RFM_ForPatch" >
                    <param name="isSaveOrderData" value="true" />
                    <param name="printMessage" value="'PATCH ver 5'" />
                </run_actions>

            </patch>
            <!-- record.tShipPlan datası düzeltildi-->
            <patch sinceversion="6">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 6'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_AllRFM_Records" param="6" />
                <do_for_each name="$RFMKey" in="Main.$RM_Fleets.keys.list">
                    <do_for_each name="$rKey" valuename="$rEntry" in="Main.$FleetRecords.{$RFMKey}">
                        <do_if value="$rEntry.$tShipPlan?" comment="since main. ver 6">
                            <remove_value name="$rEntry.$tShipPlan" />
                        </do_if>
                    </do_for_each>
                </do_for_each>
            </patch>
            <!-- record.issupplyship ve record.loadoutlevel propertyleri eklendi-->
            <patch sinceversion="7">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 7'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_AllRFM_Records" param="7" />
            </patch>
            <!-- RFM DefaultOrder DeadTater fixed -->
            <patch sinceversion="8">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 8'" />
                <include_actions ref="GlobalConstants" />
                <do_for_each name="$xRFMKey" valuename="$entry" in="Main.$RM_Fleets" >
                    <set_value name="$sectorid" exact="$entry.$sectorid" />
                    <set_value name="$recentry" exact="Main.$FleetRecords.{$entry.$id}.{1}" />
                    <do_if value="$recentry.$defaultorder.$id? and $recentry.$defaultorder.$id == 'DeadTater'">
                        <run_actions ref="TableCopy" result="$defaultorder">
                            <param name="t" value="$recentry.$defaultorder" />
                        </run_actions>
                        <set_value name="$recentry.$defaultorder" exact="table[
                            $id = 'DeadTater',
                                $autowares = if $defaultorder.$autowares? then $defaultorder.$autowares else 1,
                                $distancecheck = if $defaultorder.$distancecheck? then $defaultorder.$distancecheck else 0,
                                $distancecheckpercent = if $defaultorder.$distancecheckpercent? then $defaultorder.$distancecheckpercent else 5,
                                $enablelogbook = if $defaultorder.$enablelogbook? then $defaultorder.$enablelogbook else 1,
                                $ignoreshipbuyers = if $defaultorder.$ignoreshipbuyers? then $defaultorder.$ignoreshipbuyers else 1,
                                $ignoretraderules = if $defaultorder.$ignoretraderules? then $defaultorder.$ignoretraderules else 0,
                                $illegalwares = if $defaultorder.$illegalwares? then $defaultorder.$illegalwares else 0,
                                $maxbuy = if $defaultorder.$maxbuy? then $defaultorder.$maxbuy else 15,
                                $maxsell = if $defaultorder.$maxsell? then $defaultorder.$maxsell else 15,
                                $minbuy = if $defaultorder.$minbuy? then $defaultorder.$minbuy else 0,
                                $minfill = if $defaultorder.$minfill? then $defaultorder.$minfill else 0,
                                $minfillpercent = if $defaultorder.$minfillpercent? then $defaultorder.$minfillpercent else 5,
                                $minsell = if $defaultorder.$minsell? then $defaultorder.$minsell else 0,
                                $preferownfaction = if $defaultorder.$preferownfaction? then $preferownfaction.$preferownfaction else 0,
                                $preferownfactionbuy = if $defaultorder.$preferownfactionbuy? then $preferownfaction.$preferownfactionbuy else 0,
                                $preferownfactionsell = if $defaultorder.$preferownfactionsell? then $preferownfaction.$preferownfactionsell else 0,
                                $range = if $defaultorder.$range? then $preferownfaction.$range else $sectorid,
                                $warebasket = if $defaultorder.$warebasket? then $preferownfaction.$warebasket else []
                        ]" />
                    </do_if>
                </do_for_each>
            </patch>
            <patch sinceversion="9">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 9'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_AllRFM_Records" param="9" />
                <!-- tIndividualInstructions datası lua load esnasında güncellenmesi için propertyi siliyoruz -->
                <do_for_each name="$RFMKey" in="Main.$RM_Fleets.keys.list">
                    <do_for_each name="$rKey" valuename="$rEntry" in="Main.$FleetRecords.{$RFMKey}">
                        <remove_value name="$rEntry.$tIndividualInstructions" />
                    </do_for_each>
                </do_for_each>
                <!-- RFM Cue yapısı güncelle -->
                <!-- param  updateloadouts (default false) isChangeCrewAmounts (default false)        -->
                <run_actions ref="ReEnable_All_RFM_ForPatch" >
                    <param name="isSaveOrderData" value="true" />
                    <param name="printMessage" value="'PATCH ver 9'" />
                </run_actions>
                <show_help duration="5s" custom="'%s %s %s'.[readtext.{Main.$tPage}.{1}, readtext.{Main.$tPage}.{1310}, readtext.{Main.$tPage}.{1330}]" comment="Upb Restock Fleet Manager Update Complete"/>

            </patch>
            <!-- destroyedShipKeys listeleri düzeltildi
                Manager.Cue içerisinde bazı hatalar düzeltildi
                lockstatus değiştirildi
            -->
            <patch sinceversion="10">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 10'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_AllRFM_Records" param="10" />

                <do_for_each name="$RFMKey" in="Main.$RM_Fleets.keys.list">
                    <set_value name="$destroyedShipKeys" exact="[]"/>
                    <do_for_each name="$rKey" valuename="$rEntry" in="Main.$FleetRecords.{$RFMKey}">
                        <do_if value="$rEntry.$destroyed">
                            <do_if value="not Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.indexof.{$rKey}">
                                <append_to_list name="$destroyedShipKeys" exact="$rKey"/>
                            </do_if>
                        </do_if>
                    </do_for_each>
                    <set_value name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$destroyedShipKeys" />
                    <run_actions ref="Check_FleetLockStatus">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>
                </do_for_each>

                <run_actions ref="ReEnable_All_RFM_ForPatch" >
                    <param name="isSaveOrderData" value="true" />
                    <param name="printMessage" value="'PATCH ver 10'" />
                </run_actions>

            </patch>
            <!-- 2.1.7 ver 10 dan kaynaklanan rfm restart  hatası giderildi
                entity add remove olayındaki hata düzeltildi
                default değerlerde değişiklik yapıldı
             -->
            <patch sinceversion="11">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 11'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_AllRFM_Records" param="11" />
                <run_actions ref="ReEnable_All_RFM_ForPatch" >
                    <param name="isSaveOrderData" value="true" />
                    <param name="printMessage" value="'PATCH ver 11'" />
                </run_actions>
            </patch>
            <!--    1- RFM lere autobuild propertysi eklendi
                    2- Genel ayarlara üretim ve oyuncu parası için sınırlama kondu
            -->
            <patch sinceversion="12">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 12'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_AllRFM_Records" param="12" />
            </patch>
            <!-- ReBuild işleminde ship ve equipment lisans kontrolü eklendi -->
            <patch sinceversion="13">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 13'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_AllRFM_Records" param="13" />
                <run_actions ref="ReEnable_All_RFM_ForPatch" >
                    <param name="isSaveOrderData" value="true" />
                    <param name="printMessage" value="'PATCH ver 13'" />
                </run_actions>
            </patch>
            <!-- Trader, Miner ve Slavagerlere warebasketleri saklama özelliği eklendi -->
            <patch sinceversion="14">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 14'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_AllRFM_Records" param="14" />
            </patch>
            <!-- 1- tPilot ve tBulkCrew tablosuna name, combinedskill ve isfemale propertysi eklendi (lua içinde raporlama için kullanılacak) 
                tShipPlan tablosunda slotname bilgisi değiştirildi ( slotname ve slotsize propertysi versiyon 10 öncesi yoktu.  ) (lua içinde raporlama için kullanılacak)
                record tablosuna tCapacity tablosu eklendi (lua içinde raporlama için kullanılacak)
                record tablosuna dronecategory tablosu eklendi (lua içinde raporlama için kullanılacak)
                record tablosuna deployablecategory tablosu eklendi (lua içinde raporlama için kullanılacak)
            -->
            <!-- 2- Her geminin record kaydına defaultorder propertysi çıkaracağız.
                Ancak daha önce trader, salvager ve minerlar için bu proeprty oluşturulmuştu.
                yeni sürüm defaultorder özelliğinde order.id si haricindeki order parametreleri params değişkeni altında toplandı.
                    Bu yüzden varolan defaultorder propertysini yeni sisteme dönüştürerek saklayacağız.
                    Olmayan gemi kayıtlarını CheckRecord bölümünde kontrol edeceğiz.
            -->
            <patch sinceversion="15">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 15'" />
                <include_actions ref="GlobalConstants" />
                <set_value name="$debugchance" exact="0" />
                <!-- RFM 'sectorid' 'sector' ve 'order' bilgileri record.1 e record.sectorid, .sector ve .defaultorder olarak taşı
                    Ayrıca daha önce repeat order için kayıt tutmadığımız için record.orders boş [] oluşturulacak
                -->
                <do_for_each name="$j" valuename="$rfmEntry" in="Main.$RM_Fleets" >
                    
                    <set_value name="$recEntry" exact="Main.$FleetRecords.{$rfmEntry.$id}.{1}" comment="filonun 1 nolu gemi kaydı"/>
                    <set_value name="$isRecordCorrupt" exact="$recEntry.$destroyed" />
                    <set_value name="$recEntry.$isRecordCorrupt" exact="$isRecordCorrupt" />

                    <do_if value="$rfmEntry.$sectorid?">
                        <set_value name="$recEntry.$sectorid" exact="$rfmEntry.$sectorid" />
                        <set_value name="$recEntry.$sector" exact="$recEntry.$sectorid.knownname" />
                        <remove_value name="$rfmEntry.$sectorid" />
                        <remove_value name="$rfmEntry.$sector" />
                    </do_if>

                    <debug_text text="'RFM %s order fixing...'.[$rfmEntry.$id]" chance="$debugchance"/>
                    <do_if value="$rfmEntry.$order.$id?">
                        <set_value name="$id" exact="$rfmEntry.$order.$id" />
                        <run_actions ref="TableCopy" result="$mdparams">
                            <param name="t" value="$rfmEntry.$order" />
                        </run_actions>
                        <remove_value name="$mdparams.$id" />

                        <remove_value name="$rfmEntry.$order" />
                        
                        <!-- mdorder tablosunu uiorder tablosuna dönüştüreceğiz-->
                        <run_actions ref="md.Upb_Library_Orders.Get_ConvertedOrderTable" result="$result">
                            <param name="orderid" value="$id" />
                            <param name="ship" value="$recEntry.$object" />
                            <param name="sectormovewait" value="$recEntry.$sectorid" />
                        </run_actions>
                        <set_value name="$uiorderTable" exact="$result.{1}" />

                        <run_actions ref="DebugPrintValue" chance="$debugchance">
                            <param name="value" value="$uiorderTable" />
                            <param name="recursiondepth" value="2" />
                            <param name="nodename" value="'RFM %s new uiorderTable = '.[$rfmEntry.$id]" />
                        </run_actions>

                        <do_for_each name="$uiparam"  in="$uiorderTable.$params" counter="$i">
                            <debug_text text="'  %s - uiparam = %s'.[$i, $uiparam]" chance="$debugchance"/>
                            <do_if value="$mdparams.{'$' + $uiparam.$name }?">
                                <debug_text text="'  TRANSFER param name = %s  ,  recorded = %s  to  value = %s '.[ $uiparam.$name, $mdparams.{'$' + $uiparam.$name }, $uiparam.$value ]" chance="$debugchance"/>
                                <set_value name="$uiparam.$value" exact="$mdparams.{'$' + $uiparam.$name }" />
                            </do_if>
                            <do_else>
                                <debug_text text="'    SKIP found new param, name = %s  ,  recorded = %s   New value = %s '.[ $uiparam.$name, @$mdparams.{'$' + $uiparam.$name }, $uiparam.$value ]" chance="$debugchance"/>
                            </do_else>
                        </do_for_each>

                        <set_value name="$recEntry.$defaultorder" exact="table[
                            $id                 = $id,
                            $params             = $uiorderTable.$params,
                            $isinloop           = false,
                            $istemporary        = false,
                            $canplayercancel    = true
                        ]"/>

                        <do_if value="not $recEntry.$orders?">
                            <set_value name="$recEntry.$orders" exact="[]"/>
                        </do_if>

                    </do_if>
                    <do_else>
                        <!-- İstasyonlar-->
                        <set_value name="$recEntry.$defaultorder" exact="table[]"/>
                        <set_value name="$recEntry.$orders" exact="[]"/>
                        <remove_value name="$rfmEntry.$order" />
                    </do_else>
                </do_for_each>
                
                <!-- v.14 düzeltmesi (check record içinde denetlemeyeceğiz. burada fixliyoruz)
                    fleet içindeki diğer gemilerin varolan eski record.defaultorder bilgilerini (sadece trader, miner ve salvagerlerde bulunuyordu) düzenleyelim -->
                <do_for_each name="$i" valuename="$rfmEntry" in="Main.$RM_Fleets" >
                    <debug_text text="'RFM %s Checking Records For Old Order Data...'.[$rfmEntry.$id]" chance="$debugchance"/>
                    <do_for_each name="$k" valuename="$recEntry" in="Main.$FleetRecords.{$rfmEntry.$id}" >

                        <do_if value="$recEntry.$Pilot?" comment="önceki sürümlerde ship build üretiminden çıkınca pilot ve people update ederken hatalı property ile tanımladık">
                            <remove_value name="$recEntry.$Pilot" />
                        </do_if>

                        <do_if value="$recEntry.$defaultorder? and ($recEntry.$class != class.station)">
                            <debug_text text="' RFM %s_%s  $recEntry.$defaultorder = %s'.[$rfmEntry.$id, $recEntry.$id, $recEntry.$defaultorder]" chance="$debugchance"/>
                            <set_value name="$sectorid" exact="if $recEntry.$id == 1 then $recEntry.$sectorid else null"/>
                            <do_if value="$recEntry.$id > 1">
                                <debug_text text="'   Found Old Order Data in Record RFM %s_%s. Coverting...'.[$rfmEntry.$id, $recEntry.$id]" chance="$debugchance"/>
                                <set_value name="$isRecordCorrupt" exact="$recEntry.$destroyed" />
                                <set_value name="$recEntry.$isRecordCorrupt" exact="$isRecordCorrupt" />

                                <set_value name="$id" exact="$recEntry.$defaultorder.$id" />
                                <run_actions ref="TableCopy" result="$mdparams">
                                    <param name="t" value="$recEntry.$defaultorder" />
                                </run_actions>
                                <remove_value name="$mdparams.$id" />

                                <!-- mdorder tablosunu yeni tip uiorder tablosuna dönüştüreceğiz-->
                                <run_actions ref="md.Upb_Library_Orders.Get_ConvertedOrderTable" result="$result">
                                    <param name="orderid" value="$id" />
                                    <param name="ship" value="$recEntry.$object" />
                                    <param name="sectormovewait" value="$sectorid" />
                                </run_actions>
                                <set_value name="$uiorderTable" exact="$result.{1}" />

                                <run_actions ref="DebugPrintValue" chance="$debugchance">
                                    <param name="value" value="$uiorderTable" />
                                    <param name="recursiondepth" value="2" />
                                    <param name="nodename" value="'RFM %s_%s new uiorderTable = '.[$rfmEntry.$id, $recEntry.$id]" />
                                </run_actions>

                                <do_for_each name="$uiparam"  in="$uiorderTable.$params" counter="$i">
                                    <debug_text text="'  %s - uiparam = %s'.[$i, $uiparam]" chance="$debugchance"/>
                                    <do_if value="$mdparams.{'$' + $uiparam.$name }?">
                                        <debug_text text="'  TRANSFER param name = %s  ,  recorded = %s  to  value = %s '.[ $uiparam.$name, $mdparams.{'$' + $uiparam.$name }, $uiparam.$value ]" chance="$debugchance"/>
                                        <set_value name="$uiparam.$value" exact="$mdparams.{'$' + $uiparam.$name }" />
                                    </do_if>
                                    <do_else>
                                        <debug_text text="'    SKIP found new param, name = %s  ,  recorded = %s   New value = %s '.[ $uiparam.$name, @$mdparams.{'$' + $uiparam.$name }, $uiparam.$value ]" chance="$debugchance"/>
                                    </do_else>
                                </do_for_each>

                                <set_value name="$recEntry.$defaultorder" exact="table[
                                    $id                 = $id,
                                    $params             = $uiorderTable.$params,
                                    $isinloop           = false,
                                    $istemporary        = false,
                                    $canplayercancel    = true
                                ]"/>

                                <do_if value="not $recEntry.$orders?">
                                    <set_value name="$recEntry.$orders" exact="[]"/>
                                </do_if>

                            </do_if>
                        </do_if>
                    </do_for_each>
                </do_for_each>
                <signal_cue_instantly cue="Check_AllRFM_Records" param="15" />

            </patch>
            <!-- global.$BuildTaskIDs listesini Main.$BuildTaskIDs'ye taşıyyoruz-->
            <patch sinceversion="16">
                
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 16'" />
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="if global.$BuildTaskIDs? then global.$BuildTaskIDs else []" />
                    <param name="recursiondepth" value="2" />
                    <param name="nodename" value="'CHECKING global.$BuildTaskIDs = %s'.[(if global.$BuildTaskIDs? then '' else 'global.$BuildTaskIDs YOK. @Fikret')]" />
                    <param name="showindex" value="true" />
                    <param name="DebugChance" value="100" />
                </run_actions>

                <include_actions ref="GlobalConstants" />

                <do_if value="global.$BuildTaskIDs?">
                    <do_for_each name="$entry" in="global.$BuildTaskIDs" counter="$i" >
                        <debug_text text="'%s - typeof %s is %s'.[$i, $entry.$id, typeof $entry.$id]" />
                        <set_value name="$a" exact="'&lt;%s&gt;'.[$entry.$id]" />
                        <set_value name="$b" exact="'&lt;%s&gt;'.['0x0']" />
                        <do_if value="$a == $b">
                            <debug_text text="' %s - RFM_%s_%s'.[$i, $entry.$RFMKey, $entry.$ShipKey]" />
                            <set_value name="$a" exact="'&lt;%s&gt;'.[$entry.$build]" />
                            <do_if value="$a == $b">
                                <debug_text text="'   skipp broken entry. %s- RFM_%s_%s '.[$i, $entry.$RFMKey, $entry.$ShipKey]" />
                            </do_if>
                            <do_else>
                                <debug_text text="'   entry append to new list. %s- RFM_%s_%s '.[$i, $entry.$RFMKey, $entry.$ShipKey]" />
                                <set_value name="$entry.$id" exact="$entry.$build" />
                                <append_to_list name="Main.$BuildTaskIDs" exact="$entry" />
                            </do_else>
                        </do_if>
                    </do_for_each>
                    <remove_value name="global.$BuildTaskIDs" />
                </do_if>
                
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="if Main.$BuildTaskIDs? then Main.$BuildTaskIDs else []" />
                    <param name="recursiondepth" value="2" />
                    <param name="nodename" value="'CHECKING Main.$BuildTaskIDs = %s'.[(if Main.$BuildTaskIDs? then '' else 'Main.$BuildTaskIDs YOK. @Fikret')]" />
                    <param name="showindex" value="true" />
                    <param name="DebugChance" value="100" />
                </run_actions>
                <include_actions ref="PrintBuildTaskIDs" />

            </patch>
            <!--1-  istasyonların record[1].sectorid ve sector propertyleri tanımlanmamıştı. 
                2- clone alınan rfm lerin üretimi sırasında destroyed ship keys listesinde 1 nolu key kalıyordu ve sonrasında isLockedFleet true kalıyordu. Düzeltelim.
                3- record tablosuna dronecategory tablosunu kaldıracağız
                4- record tablosuna deployablecategory tablosunu kaldıracağız
                5- Main.$BuildTaskIDs içindeki .id hex verilerini .build verisine çevirip güncelleyeceğiz
            -->
            <patch sinceversion="17">
                
                <debug_text text="'PATCH - RFM PROGRAM  Main START  sinceversion = 17'" />
                <include_actions ref="GlobalConstants" />

                <do_for_each name="$entry" in="Main.$BuildTaskIDs" counter="$i" >
                    <run_actions ref="GetBuild_FromContainer" result="$result">
                        <param name="buildingcontainer" value="$entry.$buildingcontainer" />
                        <param name="buildHexID" value="$entry.$id" />
                    </run_actions>
                    <set_value name="$entry.$build" exact="$result.{1}"/>
                    <set_value name="$entry.$buildstatus" exact="$result.{2}"/>
                    <debug_text text="' RFM[%s][%s].BuildTaskIDs düzeltildi. build.&lt;%s&gt; (status %s)'.[$rfmEntry.$id, $recEntry.$id, $entry.$build, $entry.$buildstatus]" />
                </do_for_each>

                <do_for_each name="$j" valuename="$rfmEntry" in="Main.$RM_Fleets" >
                    <do_for_each name="$k" valuename="$recEntry" in="Main.$FleetRecords.{$rfmEntry.$id}" >
                        <do_if value="$recEntry.$id == 1">
                            <do_if value="not $recEntry.$sectorid?">
                                <set_value name="$sectorid" exact="$recEntry.$object.sector" />
                                <set_value name="$sectorid" exact="if $sectorid != null then $sectorid else player.zone.sector" />
                                <set_value name="$recEntry.$sectorid" exact="$sectorid" />
                                <set_value name="$recEntry.$sector" exact="$sectorid.knownname" />
                                <debug_text text="' RFM[%s][%s].sectorid düzeltildi. %s &lt;%s&gt;'.[$rfmEntry.$id, $recEntry.$id, $recEntry.$sectorid, $recEntry.$sector]" />
                            </do_if>
                        </do_if>
                        <debug_text text="' RF[%s][%s].dronecategory property kaldırıldı.'.[$rfmEntry.$id, $recEntry.$id]"  chance="$recEntry.$dronecategory? * 100"/>
                        <remove_value name="$recEntry.$dronecategory"                                                       chance="$recEntry.$dronecategory? * 100"/>
                        <debug_text text="' RF[%s][%s].deployablecategory property kaldırıldı.'.[$rfmEntry.$id, $recEntry.$id]" chance="$recEntry.$deployablecategory? * 100"/>
                        <remove_value name="$recEntry.$deployablecategory"                                                      chance="$recEntry.$deployablecategory? * 100"/>
                    </do_for_each>
                </do_for_each>

                <include_actions ref="CrossExamine_HeadersAndRecords" />

            </patch>
            <patch sinceversion="18">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 18'" />
                <include_actions ref="GlobalConstants" />
                <run_actions ref="ReEnable_All_RFM_ForPatch" >
                    <param name="printMessage" value="'PATCH ver 18'" />
                </run_actions>
            </patch>
            <!-- 
                1- pilot skilleri için $pilotcloning özelliği 
                2- RFM Warf ya da Shipyard İstasyonlarına sonradan atanan shiptraderler RFMCommander Entitysi olarak kaydediliyordu. Düzeltildi.
            -->
            <patch sinceversion="19">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 19, Mod v 3.20'" />
                <include_actions ref="GlobalConstants" />

                <set_value name="global.$upbRF_DATA.$Editing.$pilotcloning" exact="global.$upbRF_DATA.$Default.$pilotcloning"/>

                <do_for_each name="$xRFMKey" valuename="$fleet" in="Main.$RM_Fleets" >
                    <do_if value="($fleet.$isStation or @$fleet.$commander.$object.realclass == class.station) and $fleet.$entity and $fleet.$entity == @$fleet.$entity.assignedcontrolled.shiptrader">
                        <set_value name="$entityRFM" exact="$fleet.$id" />
                        <debug_text text="' Entitys is a Shiptrader RFM = %s. Fixing..'.[@$entityRFM]" />
                        <remove_value name="$fleet.$entity.$RFM" />

                        <run_actions ref="PromoteEntity">
                            <param name="RFMKey" value="$entityRFM" />
                            <param name="Entity" value="@$fleet.$entity.assignedcontrolled.tradenpc" />
                        </run_actions>

                    </do_if>
                </do_for_each>
            </patch>
            <!-- 3.19 da lua içindeki add construct fonksiyonu hatalı parametre aldığı için build emirleri yarım kalıyordu
            -->
            <patch sinceversion="20">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 20, Mod v 3.21'" />
                <include_actions ref="GlobalConstants" />
                <include_actions ref="CrossExamine_BuildTaskStacks" />
            </patch>

            <!--1- RFM Ship bir istayona bağlandığında istasyon propertysi ship kalıyordu. düzeltildi.
                2- patch 19 da düzeltilmeye çalışılan shiptrader olyı az önceki durum yüzüdnen düzeltilememiş oldu. düzeltildi.
                3- kayıt içindeki fleet hasarlı durum verisi düzeltildi.
                4- XL gemilerin shield loadoutlarındaki slotlar 1 den başlamıyorsa üretilemiyorlar. sonraki yamada bakılacak
            -->
            <patch sinceversion="21">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 21, Mod v 3.22'" />
                <include_actions ref="GlobalConstants" />
                <do_for_each name="$xi" valuename="$fleet" in="Main.$RM_Fleets" >
                    <do_if value="$fleet.$commander.$object != null">
                        <do_if value="($fleet.$commander.$object.realclass == class.station) and (not $fleet.$isStation)">
                            <set_value name="$fleet.$isStation" exact="true" />
                            <debug_text text="' RFM [%s].isStation Fixed. %s %s (%s)'.[$fleet.$id, $fleet.$commander.$name, $fleet.$commander.$object.idcode, $fleet.$commander.$object.sector]" />
                        </do_if>
                    </do_if>

                    <do_if value="($fleet.$isStation or @$fleet.$commander.$object.realclass == class.station) and $fleet.$entity and $fleet.$entity == @$fleet.$entity.assignedcontrolled.shiptrader">
                        <debug_text text="' Entitys is a Shiptrader RFM [%s]. Fixed..'.[$fleet.$id]" />
                        <remove_value name="$fleet.$entity.$RFM" />
                        <run_actions ref="PromoteEntity">
                            <param name="RFMKey" value="$fleet.$id" />
                            <param name="Entity" value="@$fleet.$entity.assignedcontrolled.tradenpc" />
                        </run_actions>
                    </do_if>

                    <do_if value="$fleet.$destroyedShipKeys.count == 0 and $fleet.$isLockedFleet">
                        <set_value name="$fleet.$isLockedFleet" exact="false" />
                        <debug_text text="' RFM [%s].isLockedFleet Fixed..'.[$fleet.$id]" />
                    </do_if>
                </do_for_each>
            </patch>

            <!-- rfm kargo kaydında 0 lanan equipmentlar loadout kaydından çıkarıldı. 
                loadout ve tWare kaydı taranacak
             -->
            <patch sinceversion="22">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 22, Mod v 3.26'" />
                <include_actions ref="GlobalConstants" />
                <do_for_each name="$xi" valuename="$fleet" in="Main.$RM_Fleets" >
                    <do_for_each name="$xk" valuename="$record" in="Main.$FleetRecords.{$fleet.$id}">
                        <set_value name="$tWare" exact="$record.$tWare" />
                        <do_for_each name="$ware" valuename="$count" in="$tWare" reverse="true">
                            <!-- <debug_text text="'RFM[%s_%s].tWare Check ware %s, count = %s'.[$fleet.$id, $record.$id, $ware.name, $count]" />-->
                            <do_if value="$count == 0">
                                <debug_text text="'  RFM[%s_%s].tWare Removing ware %s, count = %s'.[$fleet.$id, $record.$id, $ware.name, $count]" />
                                <remove_value name="$tWare.{$ware}" />
                            </do_if>
                        </do_for_each>
                        <do_if value="$record.$tShipPlan?">
                            <set_value name="$tShipPlan" exact="$record.$tShipPlan" />
                            <set_value name="$searcTables" exact="[ '$countermeasure', '$deployable', '$drone', '$missile' ]" />
                            <do_for_each name="$tableKey" in="$searcTables" >
                                <do_for_each name="$macroKey" valuename="$count" in="$tShipPlan.{$tableKey}" reverse="true">
                                    <!-- <debug_text text="'RFM[%s_%s].%s Check $macroKey %s, count = %s'.[$fleet.$id, $record.$id, $tableKey, $macroKey, $count]" />-->
                                    <do_if value="$count == 0">
                                        <debug_text text="'  RFM[%s_%s].%s Removing $macroKey %s, count = %s'.[$fleet.$id, $record.$id, $tableKey, $macroKey, $count]" />
                                        <remove_value name="$tShipPlan.{$tableKey}.{$macroKey}" />
                                    </do_if>
                                </do_for_each>
                            </do_for_each>
                        </do_if>
                    </do_for_each>
                </do_for_each>
            </patch>

            <patch sinceversion="23">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 23, Mod v 3.28'" />
                <set_value name="global.$upbRF_DATA.$Default.$useTagOnName" exact="true" />
                <set_value name="global.$upbRF_DATA.$Editing.$useTagOnName" exact="true" />
                
            </patch>
            <cues>
                <cue name="SetConfigVars">
                    <actions>
                        <debug_text text="'RFM PROGRAM SetConfigVars BAŞLADI'" chance="$DebugChance" />
                        <debug_to_file text="'-' + player.systemtime.{'%F-%X'} + '- DebugChance : %s, DeepDebug : %s '.[$DebugChance, $DeepDebug]" name="$logTAG_Main" directory="$logDIR" chance="Main.$DFD.$MainCommands" />
                        <debug_to_file text="'- &lt;none event enter mode&gt; Cue[%s] -  Age: %s, %s'.[this.name, player.age, player.systemtime.{'%F-%X'}]" name="$logTAG_Main" directory="$logDIR" chance="Main.$DFD.$MainCommands"/>
                    </actions>
                    <cues>
                        <cue name="SetConfigVars_Reset">
                            <conditions>
                                <check_any>
                                    <event_cue_signalled/>
                                    <event_game_loaded/>
                                </check_any>
                            </conditions>
                            <actions>
                                
                                <debug_text text="'RFM PROGRAM - SetConfigVars_RESET - BAŞLADI -  &lt;%s&gt; , object = %s , param = %s'.[event.name, @event.object.name, @event.param]" chance="$DebugChance" />
                                <include_actions ref="GlobalConstants" />
                                <debug_to_file text="'- GAME %s Cue[%s] Genel Değişkenler yüklendi.. -  Age: %s, %s , textPage = %s'.[event.name, this.name, player.age, player.systemtime.{'%F-%X'}, $tPage]" name="$logTAG_Main" directory="$logDIR" chance="Main.$DFD.$MainCommands" append="false"/>

                                <include_actions ref="CrossExamine_HeadersAndRecords" />
                                <include_actions ref="CrossExamine_ALLRFM_OrdersNameAndIdcode" />
                                <include_actions ref="CrossExamine_BuildTaskStacks" />

                                <run_actions ref="DebugFilesReset_Main">
                                    <param name="debugchance" value="Main.$DebugChance" />
                                </run_actions>

                                <reset_cue cue="SetConfigVars"/>
                            </actions>
                        </cue>
                    </cues>
                </cue>
                <cue name="Debug_FilesReset_Main" comment="Her oyun yüklemesinde main debug dosyalarını resetleyip döküm almak için">
                    <conditions>
                        <event_cue_signalled/>
                    </conditions>
                    <actions>
                        <run_actions ref="DebugFilesReset_Main">
                            <param name="debugchance" value="Main.$DebugChance" />
                        </run_actions>

                        <reset_cue cue="this" />
                    </actions>
                </cue>

                <!-- RUNNING CODE-->

                <!-- Conversations -->
                <cue name="Conversation_menu_entrance_universal_ai" instantiate="true" >
                    <conditions>
                        <check_any>
                            <event_conversation_started conversation="default" />
                            <event_conversation_returned_to_section section="default"/>
                        </check_any>
                        <check_value value="@event.object.isclass.entity"/>
                        <check_any>
                            <check_value value="@event.object.assignedcontrolled.isclass.ship and event.object.assignedcontrolled.pilot == event.object" />
                            <check_value value="@event.object.assignedcontrolled.isclass.station and event.object.assignedcontrolled.tradenpc == event.object" />
                        </check_any>
                        <check_value value="event.object.isplayerowned and event.object.assignedcontrolled.isplayerowned" />
                        <check_value value="not event.object.assignedcontrolled.commander" comment="Ana commander olacak"/>
                        <remove_value name="event.object.$Restock" />
                    </conditions>
                    <actions>
                        <remove_value name="$ispilot" />
                        <remove_value name="$istradenpc" />

                        <debug_text text="'isShip = %s, isStation = %s'.[@event.object.assignedcontrolled.isclass.ship, @event.object.assignedcontrolled.isclass.station]" />
                        <do_if value="@event.object.assignedcontrolled.isclass.ship and event.object.assignedcontrolled.pilot == event.object">
                            <set_value name="$ispilot" exact="true"/>
                        </do_if>
                        <do_if value="@event.object.assignedcontrolled.isclass.station and event.object.assignedcontrolled.tradenpc == event.object">
                            <set_value name="$istradenpc" exact="true"/>
                        </do_if>
                        <debug_text text="'$ispilot = %s $istradenpc = %s , commander = %s'.[@$ispilot, @$istradenpc, event.object.assignedcontrolled.commander]" chance="100"/>

                        <!-- RFM Hatalı Kapanma testi-->
                        <set_value name="$entityFlag" exact="true"/>
                        <do_if value="not event.object.$RFM? and @event.object.$RFM == null ">
                            <remove_value name="$entityFlag" />
                        </do_if>
                        <debug_text text="'1 %s %s : entity = %s, %s , player.entity = %s, RFM? %s, @RFM %s , $entityFlag? %s'.[event.name, event.param, event.object, event.object.name, player.entity, event.object.$RFM?, @event.object.$RFM, $entityFlag?]" />
                        <do_for_each name="$xRFMKey" valuename="$entry" in="Main.$RM_Fleets" >
                            <do_if value="$entry.$entity == event.object">
                                <set_value name="$entityRFM" exact="$entry.$id" />
                                <debug_text text="' Found Entitys RFM = %s  , $entityFlag = %s'.[@$entityRFM, $entityFlag?]" />
                                <break />
                            </do_if>
                            <do_elseif value="$entry.$entity and $entry.$entity == event.object.assignedcontrolled.shiptrader">
                                <set_value name="$entityRFM" exact="$entry.$id" />
                                <debug_text text="' Entitys is a Shiptrader RFM = %s. Fixing.. ($entityFlag = %s)'.[@$entityRFM, $entityFlag?]" />
                                <remove_value name="event.object.$RFM" />

                                <run_actions ref="PromoteEntity">
                                    <param name="RFMKey" value="$entityRFM" />
                                    <param name="Entity" value="@event.object.assignedcontrolled.tradenpc" />
                                </run_actions>

                                <!-- DEBUG : RM_FLEETS File-->
                                <run_actions ref="Debug_RM_Fleets"/>
                                <run_actions ref="Debug_FleetRecord">
                                    <param name="RFMKey" value="$entityRFM" />
                                </run_actions>
                                <break />
                            </do_elseif>
                        </do_for_each>
                        <do_if value="not $entityRFM? and $entityFlag?">
                            
                            <debug_text text="' B R O K E N    R F M. Clearing Entity Flag '.[]" />
                            
                            <run_actions ref="Clear_ShipCaption">
                                <param name="RFMKey" value="0" />
                                <param name="ship" value="event.object.assignedcontrolled" />
                            </run_actions>
                            <remove_value name="event.object.$RFM" />
                            <!-- 
                            <debug_text text="' Signalling Start for Manager '.[]" />
                            <signal_cue_instantly cue="RF_Manager" param="[event.object, true]"/>
                            -->
                        </do_if>
                        <remove_value name="$entityRFM" />
                        <remove_value name="$entityFlag" />

                        <do_if value="@md.ExtendedConversationMenu.Main.exists">
                            <set_value name="md.ExtendedConversationMenu.Main.$convOptions.$RFMmenu" exact="table[
                                $signalCue = md.Upb_Restock_Fleet.RFM_Conv_ECMSupport, 
                                $params = [event.object] 
                                ]" />
                        </do_if>
                        <do_else>
                           <signal_cue_instantly cue="RFM_Conv_ECMSupport" param="[event.object]" /> 
                        </do_else>
                    </actions>
                </cue>

                <cue name="RFM_Conv_ECMSupport" instantiate="true">
                    <conditions>
                      <event_cue_signalled/>
                    </conditions>
                    <actions>
                        <set_value name="$object" exact="if event.param? and typeof event.param == datatype.list then event.param.{1} else event.param" />
                        <do_if value="@md.ExtendedConversationMenu.Main.exists">
                            <add_player_choice_sub text="'\33' + $normalColor + readtext.{Main.$tPage}.{1500} + '\33X'" section="RestockManager"  comment="Upb Restock Fleet"/>
                        </do_if>
                        <do_else>
                            <add_player_choice_sub text="'\33' + $normalColor + readtext.{Main.$tPage}.{1500} + '\33X'" position="bottom_left" section="RestockManager"  comment="Upb Restock Fleet"/>
                        </do_else>
                        
                    </actions>
                </cue>
        
                <cue name="Conversation_Menu_Main" instantiate="true" >
                    <conditions>
                        <check_any>
                            <event_conversation_next_section section="RestockManager"/>
                            <event_conversation_returned_to_section section="RestockManager"/>
                        </check_any>
                        <check_value value="not event.object.assignedcontrolled.commander" />
                    </conditions>
                    <actions>
                        <!-- 
                        <remove_value name="event.object.$RFM" />
                        -->
                        <!-- 
                        <debug_text text="'1 %s %s : entity = %s, %s , RFM? %s, @RFM %s'.[event.name, event.param, event.object, event.object.name, event.object.$RFM?, @event.object.$RFM]" />
                        -->
                        <remove_value name="$ispilot" />
                        <remove_value name="$istradenpc" />
                        <remove_value name="$isShip" />
                        <remove_value name="$isStation" />

                        <do_if value="@event.object.assignedcontrolled.isclass.ship and event.object.assignedcontrolled.pilot == event.object">
                            <set_value name="$ispilot" exact="true"/>
                        </do_if>
                        <do_if value="@event.object.assignedcontrolled.isclass.station and event.object.assignedcontrolled.tradenpc == event.object">
                            <set_value name="$istradenpc" exact="true"/>
                        </do_if>
                        <debug_text text="'$ispilot = %s $istradenpc = %s , commander = %s'.[@$ispilot, @$istradenpc, event.object.assignedcontrolled.commander]" chance="100"/>

                        <do_if value="not event.object.$RFM? and @event.object.$RFM == null ">
                            <add_player_choice_sub text="'\33' + $normalColor + readtext.{Main.$tPage}.{1510} + '\33X'" section="csRFM_Enable" position="left" comment="Enable Restock Fleet" chance="(not event.object.assignedcontrolled.commander) * 100"/>
                            <set_value name="$selectable" exact="true"/>
                            <do_if value="event.object.assignedcontrolled.subordinates.count">
                                <set_value name="$selectable" exact="false"/>
                            </do_if>
                            <add_player_choice_sub text="readtext.{Main.$tPage}.{1520} " selectable="$selectable" section="csRFM_fleets" position="right" comment="Enable From RFM"/>
                        </do_if>
                        
                        <add_player_choice_sub text="readtext.{Main.$tPage}.{1050}" section="csRFM_OpenLua" choiceparam="'manager'" position="top_left" comment="Management" />
                        <add_player_choice_sub text="readtext.{Main.$tPage}.{1060}" section="csRFM_OpenLua" choiceparam="'options'" position="top_right" comment="Options"/>
                        <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                    </actions>
                </cue>

                <cue name="Conversation_Menu_Sections" instantiate="true" >
                    <conditions>
                        <check_any>
                            <event_conversation_next_section sectionprefix="csRFM_" />
                            <event_conversation_returned_to_section sectionprefix="csRFM_" />
                        </check_any>
                    </conditions>
                    <actions>

                        <do_if value="event.param == 'csRFM_Enable'">
                            <do_if value="event.object.isplayerowned">
                                <!-- param [ entity, singlestartup ]  -->
                                <signal_cue_instantly cue="RF_Manager" param="[event.object, true]"/>
                                <speak actor="event.object" line="2103"/>
                                <play_sound object="player.entity" sound="Main.$EnableSoundId" />
                            </do_if>
                            <do_else>
                                <signal_cue_instantly cue="EnableCloneFromNPC" param="event.object"/>
                            </do_else>
                        </do_if>

                        <do_elseif value="event.param == 'csRFM_OpenLua'">
                            <run_actions ref="md.Upb_Restock_Fleet.SetInformationsToPlayer" >
                                <param name="TableMode" value="event.param2" />
                                <param name="entity" value="event.object" />
                            </run_actions>
                        </do_elseif>
                        
                        <do_elseif value="event.param == 'csRFM_fleets'">
                            <set_value name="$fleetsKeyList" exact="[]"/>
                            <do_if value="@md.Upb_Restock_Fleet.Main.$RM_Fleets.keys.count">
                                
                                <do_for_each name="$fkey" in="md.Upb_Restock_Fleet.Main.$RM_Fleets.keys.list">
                                    <append_to_list name="$fleetsKeyList" exact="$fkey" />
                                    <!-- 
                                    <do_if value="not md.Upb_Restock_Fleet.Main.$RM_Fleets.{$fkey}.$isStation">
                                        <append_to_list name="$fleetsKeyList" exact="$fkey" />
                                    </do_if>
                                    -->
                                </do_for_each>

                                <run_actions ref="Sort_ListKeys" result="$fleetsKeyList">
                                    <param name="list" value="$fleetsKeyList" />
                                </run_actions>

                                <do_if value="event.param2 == 'rm_f_previous' and event.name == 'event_conversation_next_section'">
                                    <set_value name="$rm_f_Page" operation="subtract"/>
                                </do_if>
                                <do_elseif value="event.param2 == 'rm_f_next' and event.name == 'event_conversation_next_section'">
                                    <set_value name="$rm_f_Page" operation="add"/>
                                </do_elseif>
                                <do_elseif value="event.name == 'event_conversation_next_section'">
                                    <set_value name="$rm_f_Page" exact="0"/>
                                </do_elseif>

                                <do_all exact="4" counter="$i">
                                    <set_value name="$actual_rm_f_Item" exact="$i + (4 * $rm_f_Page)"/>
                                    <do_if value="$fleetsKeyList.count lt $actual_rm_f_Item">
                                        <break/>
                                    </do_if>
                                    <set_value name="$selRFMKey" exact="$fleetsKeyList.{$actual_rm_f_Item}"/>
                                    
                                    <set_value name="$selText" exact="'%s-%s_%s_%s%s'.[
                                    $actual_rm_f_Item, Main.$RFMTag, $selRFMKey, $RM_Fleets.{$selRFMKey}.$commander.$name,
                                    if $RM_Fleets.{$selRFMKey}.$commander.$object != null then
                                        ' (' + $RM_Fleets.{$selRFMKey}.$commander.$object.idcode + ')'
                                    else ''
                                    ]"/>
                                    <add_player_choice_sub text="$selText" section="csRFM_fleetselected" choiceparam="$selRFMKey" position="$i" selectable="not md.Upb_Restock_Fleet.Main.$RM_Fleets.{$selRFMKey}.$isStation"/>
                                    
                                    <do_if value="$rm_f_Page == 0">
                                        <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                                    </do_if>
                                    <do_else>
                                        <add_player_choice text="readtext.{Main.$tPage}.{1071}" section="csRFM_fleets" choiceparam="'rm_f_previous'" position="bottom_right" comment="Previous"/>
                                    </do_else>
                                    <do_if value="$fleetsKeyList.count gt ((4 * $rm_f_Page) + 4)">
                                        <add_player_choice text="readtext.{Main.$tPage}.{1072}" section="csRFM_fleets" choiceparam="'rm_f_next'" position="right" comment="Next"/>
                                    </do_if>
        
                                </do_all>
                            </do_if>
                            <do_else>
                                <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                            </do_else>
                        </do_elseif>

                        <do_elseif value="event.param == 'csRFM_fleetselected'">
                            <add_player_choice text="readtext.{Main.$tPage}.{1073}" section="csRFM_RFMConfirmed" position="top_left" choiceparam="event.param2" comment="Confirm"/>
                            <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                        </do_elseif>

                        <do_elseif value="event.param == 'csRFM_RFMConfirmed'">

                            <signal_cue_instantly cue="RequestedRFMClone" param="table[
                                $fleetID = event.param2,
                                $entity = event.object
                            ]" />
                        </do_elseif>

                    </actions>
                </cue>




                <!-- Bu Eventi sadece lua açıkken oyuncunun anlık değişimi yakalaması için yazıldı
                    AddConstructToBuild zamanı zaten son güncel istasyon listesini alarak işe başlıyacağız
                -->
                <cue name="Object_Known_To_Player" instantiate="true">
                    <conditions>
                        <check_any>
                            <event_object_known_to_player group="$blacklist_stations" />
                        </check_any>
                        
                    </conditions>
                    <actions>
                            <debug_text text="'New Object KNOWN To Player   object = %s %s ( %s )'.[event.object.knownname, event.object.idcode, event.object.sector.knownname ]" chance="Main.$DebugChance"/>

                            <remove_from_group group="Main.$blacklist_stations" object="event.object" />
                            <debug_text text="'  Removed from blacklist_stations. %s %s == %s'.[event.object.idcode, event.object.knownname, event.object.sector.knownname]" chance="Main.$DeepDebug"/>
                            
                            <play_sound object="player.entity" sound="'ui_notification_player_alert_04'" />
                            <!-- objenin unknown olayı bu cueden çıkınca düzelecek, bu yüzden istasyon güncelleme çağırmıyoruz -->
                            <do_if value="player.entity.$Flag_RFM_Menu?">
                                <set_value name="player.entity.$blacklist_stations" exact="$blacklist_stations" />
                                <run_actions ref="Get_Converted_Active_Stations" result="$active_stations" />
                                <set_value name="player.entity.$active_stations" exact="$active_stations" />
                                <debug_text text="'        buildstations.changed BİLDİRİMİ YAPILDI .. #active=%s , #blacklist=%s'.[Main.$active_stations.count, Main.$blacklist_stations.list.count]" chance="Main.$DeepDebug"/>
                                <raise_lua_event name="'buildstations.changed'" />
                            </do_if>
                            <do_else>
                                <debug_text text="'        MANAGER KAPALI. BİLDİRİM YOK .. #active=%s , #blacklist=%s'.[Main.$active_stations.count, Main.$blacklist_stations.list.count]" chance="Main.$DeepDebug"/>
                            </do_else>

                    </actions>
                </cue>

                <cue name="Relation_Changed" instantiate="true">
                    <conditions>
                        <event_player_relation_changed />
                        <!-- <debug_text text="'object = %s , faction = %s , [new, old] relation = %s , relationchangereason = %s '.[event.object, event.param, event.param2, event.param3]" />-->
                        <!-- belli süre için değişen durumları istemiyoruz (gemiye saldırı zamanı oluşan relation düşmeleri gibi) -->
                        <check_value value="not event.object" comment="only permanent changes are relevant"/>
                        <!-- Sadece dock relationun olumlu ve olumsuz değişmini yakalamak istiyoruz-->
                        <set_value name="$TargetRelation" exact="-0.0099" comment="-0.0099 (UI value -9) = allowed to dock"/>
                        <check_any>
                            <check_value value="(event.param2.{1} ge $TargetRelation) and (event.param2.{2} lt $TargetRelation)" comment="Dock Status Changed, Can Dock"/>
                            <check_value value="(event.param2.{1} lt $TargetRelation) and (event.param2.{2} ge $TargetRelation)" comment="Dock Status Changed, No Dock"/>
                        </check_any>
                    </conditions>
                    <actions>
                        <debug_text text="'R E L A T I O N   C H A N G E D   \n
                        entity = %s , faction = %s , [new,old] = %s , relationchangereason = %s
                        '.[event.object, event.param, event.param2, event.param3]" chance="Main.$DeepDebug"/>
                        
                        <!-- DOCK-->
                        <do_if value="(event.param2.{1} ge $TargetRelation) and (event.param2.{2} lt $TargetRelation)" comment="Dock status changed, dock yapabiliyor">
                            <debug_text text="'%s CHANGED DOCK STATUS [ Dock yapabiliyoruz ]'.[event.param]" chance="Main.$DebugChance"/>
                            <play_sound object="player.entity" sound="'ui_notification_player_alert_04'" chance="Main.$DeepDebug"/>

                            <do_for_each name="$station" in="Main.$active_stations" counter="$i" >
                                <do_if value="$station.trueowner == event.param">
                                    <debug_text text="'  %s - Station. %s %s == %s'.[$i, $station.idcode, $station.knownname, $station.sector.knownname]" chance="Main.$DeepDebug"/>
                                    <do_if value="Main.$blacklist_stations.indexof.{$station}">
                                        <remove_from_group group="Main.$blacklist_stations" object="$station" />
                                        <debug_text text="'    Removed from Blacklist. %s %s == %s'.[$station.idcode, $station.knownname, $station.sector.knownname]" chance="Main.$DeepDebug"/>
                                        
                                        <do_if value="player.entity.$Flag_RFM_Menu?">
                                            <set_value name="player.entity.$blacklist_stations" exact="Main.$blacklist_stations.list" />
                                            <debug_text text="'      buildstations.changed ATAMASI YAPILDI .. %s %s'.[Main.$blacklist_stations.count, Main.$blacklist_stations.list]" chance="Main.$DeepDebug"/>
                                            <raise_lua_event name="'buildstations.changed'" />
                                        </do_if>
        
                                    </do_if>
                                </do_if>
                            </do_for_each>

                        </do_if>

                        <!-- CANT DOCK-->
                        <do_if value="(event.param2.{1} lt $TargetRelation) and (event.param2.{2} ge $TargetRelation)" comment="Dock status changed, dock yapamayacak">
                            <debug_text text="'%s CHANGED DOCK STATUS [ Dock izni yok ]'.[event.param]" chance="Main.$DebugChance"/>

                            <do_for_each name="$station" in="Main.$active_stations" counter="$i" >
                                <do_if value="$station.trueowner == event.param">
                                    <debug_text text="'  %s - Station. %s %s == %s'.[$i, $station.idcode, $station.knownname, $station.sector.knownname]" chance="Main.$DeepDebug"/>
                                    
                                    <do_if value="not Main.$blacklist_stations.indexof.{$station}">
                                        <add_to_group groupname="Main.$blacklist_stations" object="$station" />
                                        <debug_text text="'    Added to Blacklist. %s %s == %s'.[$station.idcode, $station.knownname, $station.sector.knownname]" chance="Main.$DeepDebug"/>
                                        
                                        <do_if value="player.entity.$Flag_RFM_Menu?">
                                            <set_value name="player.entity.$blacklist_stations" exact="Main.$blacklist_stations.list" />
                                            <debug_text text="'      blacklist_stations.changed ATAMASI YAPILDI .. %s %s'.[Main.$blacklist_stations.count, Main.$blacklist_stations.list]" chance="Main.$DeepDebug"/>
                                            <raise_lua_event name="'buildstations.changed'" />
                                        </do_if>
                                        
                                    </do_if>
                                </do_if>
                            </do_for_each>

                        </do_if>

                        <!-- Debug -->
                        <set_value name="$EntryRelation" exact="event.param.relation.friend.min" comment="0.01 (UI value 10) = friend"/>
                        <debug_text text="'  $EntryRelation (friend.min) = %s , $TargetRelation (allowed to dock) = %s'.[$EntryRelation, $TargetRelation]" chance="Main.$DeepDebug"/>
                        <do_if value="(event.param.relationto.{faction.player} ge $EntryRelation) ">
                            <debug_text text="'   %s FRIEND'.[event.param]" chance="Main.$DeepDebug"/>
                        </do_if>
                        <do_else>
                            <debug_text text="'   %s NOT FRIEND'.[event.param]" chance="Main.$DeepDebug"/>
                        </do_else>
                        <do_if value="(event.param.relationto.{faction.player} ge $TargetRelation) ">
                            <debug_text text="'   %s ALLOWED TO DOCK'.[event.param]" chance="Main.$DeepDebug"/>
                        </do_if>
                        <do_else>
                            <debug_text text="'   %s DOCKING IS NOT ALLOWED'.[event.param]" chance="Main.$DeepDebug"/>
                        </do_else>
                        
                    </actions>
                </cue>
        
                <!-- ENABLE RFM  param [ entity, singlestartup (default true),  refFleetTable (default null) ] 
                    
                    refFleetTable null ise
                        Restart amaçlı çalıştırılıyor. Cue Temel Değişkenleri oluşturulup değerleri
                        refFleetTable değerleinden alacağız 

                    singlestartup : record yapısına eklemek için luaya tShipPlan isteği gönderilecek mi? ( default true )
                        toplu reenable yapıldığında tek tek debug dosyalarına yazma oyunu yavaşlatır 
                            ayrıca lua iletişimi toplu haberleşmelerde son girdiyi dikkate alıyor.
                        bu yüzden toplu reenable edileceği zaman bu değişken false alacak, 
                            lua verileri ve debug dökümü işlemleri allreenable işi bitince ilgili yerde yapılacak
                -->
                <cue name="RF_Manager" instantiate="true" namespace="this">
                    <conditions>
                        <event_cue_signalled/>
                    </conditions>
                    <actions>

                        <!-- CREATE RFMKey-->
                        <run_actions ref="Get_New_RFMKey" result="$RFMKey"/>
                        <debug_text text="'     RF MANAGER _%s_ [ STARTING ]'.[$RFMKey]" chance="Main.$DeepDebug"/>

                        <set_value name="$this_rfm_connects_to_other_rfm" exact="0"/>
                        <create_list name="$RemoveProcessShipKeys" />
                        <create_list name="$reAssignedShips" />

                        <set_value name="$RFMCue" exact="this"/>

                        
                        <set_value name="Main.$RebuildCues.{$RFMKey}" exact="table[]"/>
                        <set_value name="Main.$FleetRecords.{$RFMKey}" exact="table[]"/>
                        <set_value name="Main.$Loadouts.{$RFMKey}" exact="table[]"/>

                        <set_value name="$Entity" exact="event.param.{1}"/>
                        <set_value name="$singlestartup" exact="if event.param.{2}? then event.param.{2} else true" />
                        <set_value name="$refFleetTable" exact="if event.param.{3}? then event.param.{3} else null" />

                        <set_value name="$PromotedCommander" exact="@$Entity.assignedcontrolled"/>
                        <set_value name="$RMCommander" exact="$PromotedCommander"/>
                        <set_value name="$RMCommanderIdCode" exact="@$PromotedCommander.idcode"/>
                        <do_if value="$Entity != null ">
                            <set_value name="$Entity.$RFM" exact="true" chance="$Entity.isplayerowned * 100"/>
                        </do_if>

                        <set_value name="$alertstatus" exact="Main.$alertstatues.$normal" />

                        <do_if value="typeof $refFleetTable != datatype.table">
        
                            <set_value name="$RMCommanderName" exact="if $PromotedCommander != null then $PromotedCommander.name else ''"/>

                            <!-- ADD RM_FLEETS -->
                            <set_value name="Main.$RM_Fleets.{$RFMKey}" exact="table[
                                $cue                = $RFMCue,
                                $commander          = table[
                                    $object = $RMCommander,
                                    $name   = $RMCommanderName
                                ],
                                $autobuild          = true,
                                $rebuildtimerstatus = true,
                                $alertstatus        = $alertstatus,
                                $destroyedShipKeys  = [],
                                $entity             = $Entity,
                                $id                 = $RFMKey,
                                $isLockedFleet      = false,
                                $isStation          = if $RMCommander.realclass == class.station then true else false,
                                $name               = if $PromotedCommander != null then $PromotedCommander.name else '',
                                $object             = $PromotedCommander,
                                $shipid             = 1
                            ]"/>

                            <!-- CREATE FLEET RECORD and LOADOUT-->
                            <!-- result="$Data  = [$HeaderData, $FleetRec, $Loadouts]"-->
                            <run_actions ref="CreateAndGet_Records_By_Commander" result="$Data">
                                <param name="RFMKey" value="$RFMKey" />
                                <param name="Commander" value="$RMCommander" />
                                <param name="SendPlanData" value="$singlestartup" />
                            </run_actions>
                            <set_value name="$HeaderData" exact="$Data.{1}"/>

                            <!-- $HeaderData içindekileri al (grp $Promoted , tbl $fleetshipsByComp, tbl $fleetshipsByIdx, grp $Subordinates ) -->
                            <include_actions ref="Let_HeaderData_To_HeaderValues" />
                            
                            <run_actions ref="Update_RFMCaption" chance="$Entity.isplayerowned * 100">
                                <param name="RFMKey" value="$RFMKey" />
                            </run_actions>

                            <debug_text text="'      RFM_%s  FleetRecords Created'.[$RFMKey]" chance="Main.$DeepDebug"/>

                            <run_actions ref="Check_FleetLockStatus">
                                <param name="RFMKey" value="$RFMKey" />
                            </run_actions>
    
                            <debug_text text="'       Manager _%s_ Creted with Normal'.[$RFMKey]" chance="Main.$DeepDebug"/>

                        </do_if>
                        <do_else>

                            <set_value name="$RMCommander" exact="$refFleetTable.$commander.$object"/>
                            <set_value name="$RMCommanderName" exact="$refFleetTable.$commander.$name"/>

                            <!-- ADD RM_FLEETS -->
                            <!-- Bu kısım yeniden başlatma ile çalışacağından baazı propertyler çıkışta düznelenecek, örneğin $alertstatus gibi-->
                            <set_value name="Main.$RM_Fleets.{$RFMKey}" exact="table[
                                $cue                = $RFMCue,
                                $commander          = table[
                                    $object = $RMCommander,
                                    $name   = $RMCommanderName
                                ],
                                $autobuild          = $refFleetTable.$autobuild,
                                $rebuildtimerstatus = $refFleetTable.$rebuildtimerstatus,
                                $alertstatus        = $alertstatus,
                                $destroyedShipKeys  = $refFleetTable.$destroyedShipKeys,
                                $entity             = $Entity,
                                $id                 = $RFMKey,
                                $isLockedFleet      = false,
                                $isStation          = $refFleetTable.$isStation,
                                $name               = $refFleetTable.$name,
                                $object             = $refFleetTable.$object,
                                $shipid             = $refFleetTable.$shipid
                            ]"/>
                            
                            <!-- Header DATA-->
                            <create_group groupname="$Promoted" />
                            <set_value name="$fleetshipsByComp" exact="table[]" />
                            <set_value name="$fleetshipsByIdx" exact="table[]" />
                            <create_group groupname="$Subordinates"/>

                            <debug_text text="'       Manager _%s_ Creted with Restart'.[$RFMKey]" chance="Main.$DeepDebug"/>

                        </do_else>


                        <include_actions ref="Let_RFM_LogFileNames" />
                        <do_if value="$singlestartup" comment="toplu başlatma yapılıyorsa yazdırmayacağız">
                            <!-- DEBUG : MAIN PROGRAM LOG FILES -->
                            <set_value name="$pText" exact="'RFM_%s_ ENABLED Commander : &lt;%s&gt; %s %s (%s) , Entity : %s &lt;%s&gt;  Age: %s, %s'.[$RFMKey, $RMCommander, $RMCommanderName, $RMCommanderIdCode, $RMCommander.sector.knownname, $Entity.name, $Entity, player.age, player.systemtime.{'%F-%X'}]" />
                            <!-- DEBUG : MAIN LOG File -->
                            <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                            <!-- DEBUG : RM_FLEETS File-->
                            <run_actions ref="Debug_RM_Fleets">
                                <param name="inserttext" value="$pText" />
                            </run_actions>
                            <!-- ALL REBUILD CUES -->
                            <run_actions ref="Debug_AllRebuildCues"/>

                            <!-- DEBUG : RFM SUB LOG FILES -->
                            <set_value name="$pText" exact="'- - R M F - E N A B L E - - - - - - - - - - - - - - - - - - - - - - - - - -  Age: %s, %s'.[player.age, player.systemtime.{'%F-%X'}]" />
                            <!-- DEBUG : Command File -->
                            <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command" append="false"/>
                            <!-- DEBUG : Fleet Record File -->
                            <run_actions ref="Debug_FleetRecord">
                                <param name="RFMKey" value="$RFMKey" />
                                <param name="inserttext" value="$pText" />
                            </run_actions>
                            <!-- DEBUG : reBuild File  -->
                            <debug_to_file text="$pText" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuild" append="false"/>
                            <!-- REBUILD CUES -->
                            <run_actions ref="Debug_RebuildCue">
                                <param name="RFMKey" value="$RFMKey" />
                                <param name="inserttext" value="$pText" />
                            </run_actions>
                            <!-- reAssign Log FILE -->
                            <debug_to_file text="$pText" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignment" append="false"/>
                        </do_if>

                        <!-- Aynı anda hem assign hem de grp değişimi olunca 2 sini birden değişiyor. 
                            Biz ayrı ayrı ele alacağız her iki durumu
                        -->
                        <set_value name="$oldAssignment" exact="null"/>
                        <debug_text text="'     RF MANAGER _%s_ [ ENABLED ]'.[$RFMKey]" chance="Main.$DebugChance"/>

                    </actions>
                    <cues>
                        <cue name="Debug_FilesReset_Sub" comment="Her oyun yüklemesinde sub debug dosyalarını resetleyip döküm almak için">
                            <conditions>
                                <check_any>
                                    <event_cue_signalled/>
                                    <event_game_loaded/>
                                </check_any>
                            </conditions>
                            <actions>
                                <run_actions ref="DebugFilesReset_Sub">
                                    <param name="RFMKey" value="$RFMKey" />
                                    <param name="debugchance" value="Main.$DebugChance" />
                                </run_actions>    
                                <reset_cue cue="this" />
                            </actions>
                        </cue>

                        <cue name="Conversation_Menu_Sub_Main" instantiate="true">
                            <conditions>
                                <check_any>
                                    <event_conversation_next_section section="RestockManager"/>
                                    <event_conversation_returned_to_section section="RestockManager"/>
                                </check_any>
                                <check_value value="event.object == $Entity"/>
                                <check_value value="$Entity.$RFM?" />
                            </conditions>
                            <actions>

                                <!-- 
                                <debug_text text="'2 event.name = %s, param = %s, param2 = %s, param3 = %s '.[event.name, @event.param, @event.param2, @event.param3]" />
                                -->
                                <add_player_choice_sub text="readtext.{Main.$tPage}.{1050}" position="top_left" section="cSO_RFM_OpenLua" choiceparam="'manager'" comment="Management"/>
                                <add_player_choice_sub text="readtext.{Main.$tPage}.{1060}" position="top_right" section="cSO_RFM_OpenLua" choiceparam="'options'" comment="Options"/>
                                
                                <add_player_choice_sub text="readtext.{Main.$tPage}.{1090} + ' ' + readtext.{Main.$tPage}.{1101}" position="bottom_left" section="cSO_RFM_More_1" comment="More 1"/>
                                
                                <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>

                            </actions>
                        </cue>
                        <cue name="Conversation_Menu_Sub_Sections" instantiate="true">
                            <conditions>
                                <check_any>
                                    <event_conversation_next_section sectionprefix="cSO_RFM_"/>
                                    <event_conversation_returned_to_section sectionprefix="cSO_RFM_"/>
                                </check_any>
                                <check_value value="event.object == $Entity"/>
                            </conditions>
                            <actions>
                                <!-- 
                                <debug_text text="'event.name = %s, param = %s, param2 = %s, param3 = %s '.[event.name, @event.param, @event.param2, @event.param3]" />
                                -->
                                <do_if value="event.param == 'cSO_RFM_More_1'">

                                    <add_player_choice_sub text="readtext.{Main.$tPage}.{1530}" position="top_left" section="cSO_RFM_LostShips" comment="Produce for Lost Ships"/>
                                    
                                    <add_player_choice_sub text="readtext.{Main.$tPage}.{1090} + ' ' + readtext.{Main.$tPage}.{1102}" position="bottom_left" section="cSO_RFM_More_2"  comment="More 2"/>
                                    
                                    <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                                    
                                </do_if>

                                <do_if value="event.param == 'cSO_RFM_More_2'">
                                    <set_value name="$color" exact="Main.$normalColor" />
                                    <do_for_each name="$entryKey" valuename="$entry" in="Main.$RebuildCues" >
                                        <do_if value="$entry.keys.count gt 0">
                                            <set_value name="$color" exact="Main.$alertColor" />
                                            <break />
                                        </do_if>
                                    </do_for_each>

                                    <set_value name="$CS" exact="'\33' + (if md.Upb_Restock_Fleet.Main.$RebuildCues.{$RFMKey}.keys.count gt 0 then md.Upb_Restock_Fleet.Main.$alertColor else md.Upb_Restock_Fleet.Main.$normalColor)" />
                                    <set_value name="$CE" exact="'\33X'" />
                                    
                                    <add_player_choice_sub text="'[ # %s%s%s ] - %s %s_%s'.[$CS, md.Upb_Restock_Fleet.Main.$RebuildCues.{$RFMKey}.keys.count, $CE, readtext.{Main.$tPage}.{1022}, Main.$RFMTag, $RFMKey]"  position="top_left" section="cSO_RFM_ReEnable" comment="Restart RFM_xx"  />
                                    <add_player_choice text="'%s %s_%s - [ # %s%s%s ]'.[readtext.{Main.$tPage}.{1021}, Main.$RFMTag, $RFMKey, $CS, md.Upb_Restock_Fleet.Main.$RebuildCues.{$RFMKey}.keys.count, $CE]"  position="top_right" section="cSO_RFM_Disable" comment="Disable RFM_xx"/>

                                    <set_value name="$CS" exact="'\33' + $color" />
                                    <add_player_choice_sub text="'%s%s%s'.[$CS, readtext.{Main.$tPage}.{1550}, $CE ]"  position="left" section="cSO_RFM_AllReEnable" comment="Restart All Fleets" chance="Main.$DeepDebug" />
                                    <add_player_choice text="'%s%s%s'.[$CS, readtext.{Main.$tPage}.{1560}, $CE ]"  position="bottom_left" section="cSO_RFM_AllDisable" comment="Disable All Fleets" />

                                    <remove_value name="$CS" />
                                    <remove_value name="$CE" />
                                    <remove_value name="$color" />
                                    <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                                </do_if>

                                <do_elseif value="event.param == 'cSO_RFM_ReEnable'">
                                    <!-- param : $RFMKey Or a list [ $RFMKey, $IsSound (default false)  ]-->
                                    <signal_cue_instantly cue="Re_Enable_RFM" param="[ $RFMKey, true ]" />
                                    <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                                </do_elseif>
            
                                <do_elseif value="event.param == 'cSO_RFM_AllReEnable'">
                                    <run_actions ref="ReEnable_All_RFM" />
                                    <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                                </do_elseif>

                                <do_elseif value="event.param == 'cSO_RFM_AllDisable'" >
                                    <run_actions ref="Disable_All_RFM" />
                                    <signal_cue_instantly cue="KeepAlive" param="'Reset'" />
                                    <reset_cue cue="Main"/>
                                </do_elseif>

                                <do_elseif value="event.param == 'cSO_RFM_Disable'">
                                    <!-- param : $RFMKey Or a list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false) ]-->
                                    <signal_cue_instantly cue="Disable__RFM" param="[$RFMKey, 'Player', true, true ]" />
                                </do_elseif>

                                <do_elseif value="event.param == 'cSO_RFM_OpenLua'">
                                    <run_actions ref="md.Upb_Restock_Fleet.SetInformationsToPlayer" >
                                        <param name="TableMode" value="event.param2" />
                                        <param name="entity" value="event.object" />
                                    </run_actions>
                                </do_elseif>

                                <do_elseif value="event.param == 'cSO_RFM_LostShips'">
                                    
                                    <set_value name="$chSection" exact="event.param2"/>

                                    <set_value name="$deadShips" exact="[]"/>
                                    <do_for_each name="$xKey" valuename="$rec" in="Main.$FleetRecords.{$RFMKey}" >
                                        <do_if value="$rec.$object == null or $rec.$destroyed">
                                            <append_to_list name="$deadShips" exact="$xKey" />
                                        </do_if>
                                    </do_for_each>


                                    <do_if value="$chSection == 'rprevious' and event.name == 'event_conversation_next_section'">
                                        <set_value name="$rPage" operation="subtract"/>
                                    </do_if>
                                    <do_elseif value="$chSection == 'rnext' and event.name == 'event_conversation_next_section'">
                                        <set_value name="$rPage" operation="add"/>
                                    </do_elseif>
                                    <do_elseif value="event.name == 'event_conversation_next_section'">
                                        <set_value name="$rPage" exact="0"/>
                                    </do_elseif>


                                    <do_all exact="4" counter="$i">
                                        <set_value name="$actualRow" exact="$i + (4 * $rPage)"/>
                                        <do_if value="$deadShips.count lt $actualRow">
                                            <break/>
                                        </do_if>
                                        <set_value name="$Build" exact="null"/>
                                        <set_value name="$selKey" exact="$deadShips.{$actualRow}"/>

                                        <debug_text text="'\n
                                                        %s_%s_%s Table.Exist %s, .build = %s \n
                                                        %s.$cue .$Build %s, .exists = %s, .state = %s \n'.[Main.$RFMTag, $RFMKey, $selKey, 
                                        Main.$RebuildCues.{$RFMKey}.{$selKey}?,
                                        @Main.$RebuildCues.{$RFMKey}.{$selKey}.$build,
                                        @Main.$RebuildCues.{$RFMKey}.{$selKey}.$cue,
                                        @Main.$RebuildCues.{$RFMKey}.{$selKey}.$cue.$Build,
                                        @Main.$RebuildCues.{$RFMKey}.{$selKey}.$cue.exists,
                                        @Main.$RebuildCues.{$RFMKey}.{$selKey}.$cue.state
                                        ] " chance="Main.$DebugChance"/>

                                        <do_if value="@Main.$RebuildCues.{$RFMKey}.{$selKey}.$cue.$Build != null">
                                            <set_value name="$Build" exact="Main.$RebuildCues.{$RFMKey}.{$selKey}.$cue.$Build"/>
                                        </do_if>
                                        <do_elseif value="@Main.$RebuildCues.{$RFMKey}.{$selKey}.$build != null">
                                            <set_value name="$Build" exact="Main.$RebuildCues.{$RFMKey}.{$selKey}.$build"/>
                                        </do_elseif>

                                        <add_player_choice_sub text="'%s - %s%s'.[$actualRow, Main.$FleetRecords.{$RFMKey}.{$selKey}.$name, if Main.$DebugChance == 100 then ' (' + $selKey + ')' else '']" 
                                        selectable="not $Build.exists" section="cSO_RFM_LostShips_Selected" choiceparam="$selKey" position="$i" />

                                    </do_all>

                                    <do_if value="$rPage == 0">
                                        <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                                    </do_if>
                                    <do_else>
                                        <add_player_choice text="readtext.{Main.$tPage}.{1071}" section="cSO_RFM_LostShips" choiceparam="'rprevious'" position="bottom_right" comment="Previous"/>
                                    </do_else>
                                    <do_if value="$deadShips.count gt ((4 * $rPage) + 4)">
                                        <add_player_choice text="readtext.{Main.$tPage}.{1072}" section="cSO_RFM_LostShips" choiceparam="'rnext'" position="right" comment="Next"/>
                                    </do_if>

                                    <remove_value name="$deadShips" />
                                    <remove_value name="$Build" />
                                    <remove_value name="$chSection"/>
                                    <remove_value name="$xKey" />
                                    <remove_value name="$selKey" />

                                </do_elseif>

                                <do_elseif value="event.param == 'cSO_RFM_LostShips_Selected'">

                                    <signal_cue_instantly cue="StartRebuildShips" param="table[
                                        $fleetID = $RFMKey, 
                                        $shipID = event.param2, 
                                        $isAllShips = false
                                    ]" />

                                    <add_player_choice text="readtext.{Main.$tPage}.{1540}" selectable="false" section="" position="top_left"/>
                                    <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>

                                </do_elseif>

                            </actions>
                        </cue>

                        
                        <!-- oyuncu gemileri  Equipment Change  yaptığında record güncelleme için denetleyeceğiz -->
                        <cue name="Changed_Equipment" instantiate="true" >
                            <conditions>
                                <check_all>
                                    <event_build_finished group="$Subordinates"/>
                                    <check_value value="not $Cancelling?" />
                                    <check_value value="@event.param3.buildobject.isplayerowned" />
                                    <check_value value="not event.param3.isshipbuild" />
                                </check_all>
                            </conditions>
                            <actions>

                                <set_value name="$buildprocessor"  exact="event.param"/>
                                <set_value name="$buildtask"  exact="event.param3"/>
                                <set_value name="$dock" exact="$buildtask.object" />
                                <set_value name="$tShip"  exact="$buildtask.buildobject"/>
                                <set_value name="$tShipKey" exact="@$fleetshipsByComp.{$tShip}" />
                                
                                <debug_text text="'\n
                                    $buildtask.buildobject  = &lt;%s&gt; %s %s \n
                                    $buildtask.faction      = %s %s \n
                                    $buildtask.construction = &lt;%s&gt; %s %s \n
                                    $buildtask.object       = &lt;%s&gt; %s %s \n
                                    $buildtask.constructionsequence = %s \n
                                    $buildtask.buildmodule      = %s \n
                                    $buildtask.buildprocessor   = %s \n
                                    $buildtask.macro    = %s \n
                                    isshipbuild         = %s \n
                                    isupgrade           = %s \n
                                    isshipmodification  = %s \n
                                    isrestock           = %s \n
                                    isexpansion         = %s \n
                                    isrecycleshipbuild  = %s \n
                                    isprocessing        = %s \n
                                    RFMKey  = %s \n
                                    ShipKey = %s
                                    '.[
                                    $buildtask.buildobject, $buildtask.buildobject.idcode, $buildtask.buildobject.knownname,
                                    (if $buildtask.faction == faction.player then 'Player' else 'NPC'), $buildtask.faction,
                                    @$buildtask.construction, @$buildtask.construction.idcode, @$buildtask.construction.knownname,
                                    $buildtask.object, $buildtask.object.idcode, $buildtask.object.knownname,
                                    $buildtask.constructionsequence,
                                    $buildtask.buildmodule,
                                    $buildtask.buildprocessor,
                                    $buildtask.macro,
                                    $buildtask.isshipbuild, 
                                    $buildtask.isupgrade, 
                                    $buildtask.isshipmodification, 
                                    $buildtask.isrestock, 
                                    $buildtask.isexpansion,
                                    $buildtask.isrecycleshipbuild, 
                                    $buildtask.isprocessing,
                                    $RFMKey,
                                    $tShipKey
                                    ]" chance="0"/>
                                
                                <!-- EQUIPMENT CHANGE -->
                                <do_if value="($dock.isclass.station) and (not $buildtask.isshipbuild) and ($tShipKey != null) ">
                                    <debug_text text="' RFMKey %s_%s  &lt;CHANGE EQUIPMENT&gt; \n
                    Ship = %s %s&lt;%s&gt; state = %s , build = %s , buildprocessor = %s, event.object = &lt;%s&gt; dock = &lt;%s&gt; %s %s %s
                                    '.[$RFMKey, $tShipKey, $tShip.idcode, $tShip.knownname, $tShip,$tShip.state, $buildtask, $buildprocessor, event.object, $dock, $dock.idcode, $dock.knownname, (if $dock.isclass.ship then 'Ship' else 'Station') ]" chance="Main.$ChangesOnFleetDebug"/>

                                    <do_if value="$dock.isplayerowned">
                                    <set_value name="$updateEquipments" exact="global.$upbRF_DATA.$Editing.$ValidUpdates.$PYards.$equipments"/>
                                    <set_value name="$updatePeoples" exact="global.$upbRF_DATA.$Editing.$ValidUpdates.$PYards.$peoples"/>
                                    </do_if>
                                    <do_else>
                                        <set_value name="$updateEquipments" exact="global.$upbRF_DATA.$Editing.$ValidUpdates.$NYards.$equipments"/>
                                        <set_value name="$updatePeoples" exact="global.$upbRF_DATA.$Editing.$ValidUpdates.$NYards.$peoples"/>
                                    </do_else>
                                    <!-- ShipKey vermiyoruz, olası ad değişikliği yapıldıysa ad bilgisini ship.name den  alacak-->
                                    <run_actions ref="Get_NoneColor_ShipName" result="$name">
                                        <param name="RFMKey" value="$RFMKey" />
                                        <param name="ship" value="$tShip" />
                                    </run_actions>
                                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$name" exact="$name"/>
                                    <!-- real commander ise kaydı güncelliyoruz-->
                                    <do_if value="$tShipKey == 1">
                                        <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$name" exact="$name"/>
                                    </do_if>
                                    <!-- promoted commander ise rfm tagı kontrol edelim-->
                                    <do_if value="$tShipKey == 1 or Main.$RM_Fleets.{$RFMKey}.$object == $tShip">
                                        <set_value name="Main.$RM_Fleets.{$RFMKey}.$name" exact="$name"/>
                                        <run_actions ref="Update_RFMCaption">
                                            <param name="RFMKey" value="$RFMKey" />
                                        </run_actions>
                                    </do_if>
                                    

                                    <run_actions ref="Get_ShipLoadouts" result="$NewLoadout">
                                        <param name="Ship" value="$tShip"/>
                                    </run_actions>

                                    <!-- .tShipPlan güncellemesini sadece equipment üzerinden yapacağız -->
                                    <!-- .tShipPlan.crew de güncellenecek bu yüzden geçerli crew okuma işini .tBulkCrew üzerinden yapacağız -->
                                    <do_if value="$updatePeoples">
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$tPilot" exact="$NewLoadout.{3}"/>
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$tBulkCrew" exact="$NewLoadout.{4}"/>
                                        <do_if value="not $updateEquipments">
                                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$tShipPlan.$crew.$marine" exact="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$tBulkCrew.{entityrole.marine}.count" />
                                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$tShipPlan.$crew.$service" exact="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$tBulkCrew.{entityrole.service}.count" />
                                        </do_if>
                                    </do_if>
                                    <do_if value="$updateEquipments">
                                        <set_value name="Main.$Loadouts.{$RFMKey}.{$tShipKey}" exact="$NewLoadout.{1}"/>
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$tWare" exact="$NewLoadout.{2}"/>
                                        
                                        <set_value name="$stack" exact = "table[ 
                                                $RFMKey     = $RFMKey, 
                                                $ShipKey    = $tShipKey, 
                                                $object     = $tShip, 
                                                $isGetShipPlan                = true, 
                                                $isGetIndividualInstructions  = true,
                                                $isGetCapacity  = true,
                                                $isGetPaintMod  = true,
                                                $isChangeCrewAmounts    = true,
                                                $isdebug                = if Main.$DeepDebug == 100 then true else false
                                        ]"/>
                                        <signal_cue_instantly cue="Get_PlanData_FromLua2" param="$stack" />

                                    </do_if>
                                    
                                    <set_value name="$pText" exact="'( %s ) &lt;%s&gt; %s %s EQUIPMENT CHANGED on Shipyard %s, Age: %s, %s'
                                    .[$tShipKey, $tShip, $name, $tShip.idcode, event.param.knownname, player.age, player.systemtime.{'%F-%X'}]" />


                                    <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                                            $fleetID = $RFMKey,
                                            $shipID = $tShipKey,
                                            $Record = Main.$FleetRecords.{$RFMKey}.{$tShipKey},
                                            $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                                            $description = 'Equipments Changed'
                                        ]" chance="player.entity.$Flag_RFM_Menu? * 100"/>

                                    <set_value name="$pText" exact="'RFM_%s_%s'.[$RFMKey, $pText]"/>
                                    <!-- DEBUG : RM_FLEETS File-->
                                    <run_actions ref="Debug_RM_Fleets">
                                        <param name="inserttext" value="$pText" />
                                    </run_actions>
                                    <!-- FLEET RECORD TABLE -->
                                    <do_if value="$stack?">
                                        <run_actions ref="Debug_FleetRecord_NoPlan">
                                            <param name="RFMKey" value="$RFMKey" />
                                            <param name="inserttext" value="$pText" />
                                        </run_actions>
                                    </do_if>
                                    <do_else>
                                        <run_actions ref="Debug_FleetRecord">
                                            <param name="RFMKey" value="$RFMKey" />
                                            <param name="inserttext" value="$pText" />
                                        </run_actions>
                                    </do_else>
                                    <debug_to_file text="'%s'.[$pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                                    <debug_to_file text="'%s'.[$pText]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command"/>
                                    <do_if value="$updatePeoples">
                                        <debug_to_file text="'    RFM_%s_%s record.tShipPlan.crew amounts update'.[$RFMKey, $tShipKey]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$CommandDeep"/>
                                    </do_if>

                                </do_if>

                                <remove_value name="$updatePeoples" />
                                <remove_value name="$updateEquipments" />
                                <remove_value name="$NewLoadout"/>
                                <remove_value name="$tShip" />
                                <remove_value name="$tShipKey" />
                                <remove_value name="$pText" />


                            </actions>
                        </cue>
                        
                        <!-- 
                            Normal Olay sıralaması :
                                1-Removed
                                2-Added
                                3-Subgroupchanged
                                4-Assignment
                                5-Promoted
                                6-Destroyed
                                7-Order Canceled
                                8-Order Ready
                        -->
                        <cue name="SubordinatePromoted" instantiate="true" comment="5. Olay Sırası" >
                            <conditions>
                                <check_all>
                                    <event_object_subordinate_promoted group="$Promoted" />
                                    <check_value value="not $Cancelling?" />
                                </check_all>
                            </conditions>
                            <actions>

                                <set_value name="$oldPromotedCommander" exact="$PromotedCommander" />

                                <debug_text text="'\n
                    SUB PROMOTED  \n
                        status %s \n
                            RFMKey : %s   [table idx : %s] \n
                                RFM Cancelling?    %s   \n
                                new Promoted Ship param : [%s] (isWreck %s) (exists %s) (isactive %s) (isoperational %s) %s %s %s     \n
                                Object (Old Commander)  : [%s] (isWreck %s) (exists %s) (isactive %s) (isoperational %s) %s %s %s     \n
                                        (%s $PromotedCommander = %s) ( group $Promoted = %s )
                                '.[
                                if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'LOCKED' else 'open',
                                $RFMKey, @$fleetshipsByComp.{event.param},
                                (if $Cancelling? then 'YES' else 'no'),
                                if $fleetshipsByComp.{event.param}? then
                                    '%s'.[$fleetshipsByComp.{event.param}]
                                else
                                    '-',
                                event.param.iswreck, event.param.exists, @event.param.isactive, event.param.isoperational,
                                event.param, event.param.knownname, event.param.idcode,
                                if $fleetshipsByComp.{event.object}? then
                                    '%s'.[$fleetshipsByComp.{event.object}]
                                else
                                    '-',
                                event.object.iswreck, event.object.exists, @event.object.isactive, event.object.isoperational,
                                event.object, event.object.knownname, event.object.idcode,
                                if $PromotedCommander != event.object then 'ERROR ' else '',
                                $PromotedCommander, $Promoted
                                ]"  chance="Main.$ChangesOnFleetDebug"/>

                                <set_value name="$newPromotedCommander" exact="event.param" />

                                <set_value name="$pText" exact="'- Cue[%s] started, RFM_%s_  Age: %s, %s\n
                            Old Commander&lt;%s&gt; %s %s, \n
                            Promoted Ship&lt;%s&gt; %s %s
                            '.[
                            this.name, $RFMKey, player.age, player.systemtime.{'%F-%X'},
                            $oldPromotedCommander, $oldPromotedCommander.knownname, $oldPromotedCommander.idcode, 
                            $newPromotedCommander, $newPromotedCommander.knownname, $newPromotedCommander.idcode]" />

                                <run_actions ref="PromoteToCommander">
                                    <param name="RFMKey" value="$RFMKey" />
                                    <param name="Commander" value="$newPromotedCommander" />
                                    <param name="oldCommander" value="$oldPromotedCommander" />
                                </run_actions>

                                <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommandsDeep"/>
                                <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$CommandDeep"/>

                                <debug_text text="'%s'.[$pText]" chance="Main.$ChangesOnFleetDebug"/>
                                <remove_value name="$oldPromotedCommander" />
                                <remove_value name="$newPromotedCommander" />

                            </actions>
                        </cue>

                        <cue name="Changed_Order" instantiate="true" comment="7. Olay Sırası" >
                            <conditions>
                                <check_all>
                                    <check_any>
                                        <event_object_order_ready group="$Promoted" />
                                        <event_object_order_cancelled group="$Promoted" />
                                        <event_object_order_param_edited group="$Promoted"/>
                                    </check_any>
                                </check_all>
                            </conditions>
                            <actions>
                                <!-- 
                                    * Looporder harici orderlarda defaultorder kaydı dikkate alınır.
                                        RFM açıldıktan sonra order parametrelerinde yapılan düzenlemeler confirm edilerek yapılmışsa order kaydı otomatik güncellenir.
                                            (* destination içeren orderlarda destination imlecinin map üzerinde kaydırılması ile kayıt güncellenmez.)
                                    * Loop Order yapılandırması hazırlandıktan sonra RFM açılmalı.
                                -->
                                <set_value name="$sakla" exact="false" />
                                <set_value name="$order" exact="event.param"/>
                                <do_if value="not $isEntityChanged?">
                                    <do_if value="@$PromotedCommander.orders != null" comment="ölmemişse">
                                        <!-- *** loop orderlar menumap üzerinden silinirken ilk sıra haricinden siliniyorsa md tetiklenmiyor.-->
                                        <!-- eklenen order looporder ise ve record kaydında yoksa ekleyelim -->
                                        <do_if value="@$order.isinloop != null and ($order.isinloop and not $order.istemporary)">
                                            <!-- Repeat orderlarda çalışma anında aktif order satırı started alıyor önceki cancell ediliyor.
                                                Biz sadece ekleme anını yakalamak istiyoruz.
                                            -->
                                            <do_if value="$order.state == orderstate.ready and event.name == 'event_object_order_ready' ">
                                                <do_if value="not Main.$FleetRecords.{$RFMKey}.{1}.$orders.indexof.{$order}">
                                                    <set_value name="$sakla" exact="true" />
                                                </do_if>
                                            </do_if>
                                        </do_if>
                                        <do_else>
                                            <do_if value="not @$order.istemporary">
                                                <!-- $PromotedCommander.order.state  çalışma anında listeye eklenen aktif orderları atlayacağız, bize sadece loop order çıkarma (ilk satırdaki execute olan ise) lazım -->
                                                <do_if value="@$PromotedCommander.order.state == orderstate.ready and ($order != $PromotedCommander.defaultorder)">
                                                    <!-- kullanıcı loopoerderlardan birini kaldırdığında
                                                            DİKKAT * orderlar lsitesindeki sadece executing satırı kaldırıldığında bu eventler dereye giriyor. 
                                                            normal orderlardan biri kaldırdığında event tetiklenmediğinden olayı yakalayamıyoruz. 
                                                            Bu yüzden Repeat orderların RFM çalışma anında düzenlemesi etkili sonuç vermiyor.
                                                    -->
                                                    <do_if value="(event.name == 'event_object_order_cancelled') and ($PromotedCommander.orders.count lt Main.$FleetRecords.{$RFMKey}.{1}.$orders.count) and not @$order.istemporary">
                                                        <set_value name="$sakla" exact="true" />
                                                    </do_if>
                                                </do_if>
                                                <do_if value="@$PromotedCommander.defaultorder.state == orderstate.ready">
                                                    <!-- kullanıcı yeni order ekledi ya da aynı orderı düzenleyip confirm etti
                                                        - eklenen normal order eklemelerini kabul etmeyeceğiz.
                                                        - eklenen order defaultorder ise defaultorder bilgisi olarak kayıt alacağız.
                                                    -->
                                                    <do_if value="(event.name == 'event_object_order_ready') and ($order == $PromotedCommander.defaultorder) ">
                                                        <set_value name="$sakla" exact="true" />
                                                        <do_if value="$dontSaveDefaultorder?">
                                                            <set_value name="$sakla" exact="false" />
                                                            <remove_value name="$dontSaveDefaultorder" />
                                                            <set_value name="$internalPromotedChanged" />
                                                        </do_if>
                                                    </do_if>
                                                </do_if>
                                            </do_if>
                                        </do_else>
                                    </do_if>
                                </do_if>
                                
                                <set_value name="$testdebugchance" exact="0" />
                                <debug_text text="'\n
        %s , [ %s ]  RFM_%s_ %s \n
        Promoted Commander &lt;%s&gt; %s %s (%s)  \n
            (receving) object : &lt;%s&gt; %s %s  \n
            (order) param               : %s &lt;%s&gt;  state&lt;%s&gt;    \n
            (is critical order) param2  : %s   \n
            isinloop    : %s  \n
            istemporary : %s  \n
            PromotedCommander order     : %s &lt;%s&gt;  state&lt;%s&gt; \n
            PromotedCommander orders    : %s   \n
            PromotedCommander Default   : %s &lt;%s&gt;  state&lt;%s&gt;  \n
            record.{1} orders           : #%s %s    \n
            record.{1} default          : %s    \n
            isEntityChanged? %s                 
                                '.[
                                if $sakla then 'NEW ORDER YAZ' else 'ATLA', event.name, $RFMKey, if $internalPromotedChanged? then '[Promoted Chanced]' else '',
                                $PromotedCommander, $RMCommanderName, $PromotedCommander.idcode, $PromotedCommander.sector.knownname,
                                @event.object, @event.object.idcode, @event.object.knownname,
                                @event.param.id, event.param, @event.param.state, 
                                @event.param2,
                                @$order.isinloop, @$order.istemporary,
                                @$PromotedCommander.order.id, @$PromotedCommander.order, @$PromotedCommander.order.state,
                                @$PromotedCommander.orders,
                                @$PromotedCommander.defaultorder.id, @$PromotedCommander.defaultorder, @$PromotedCommander.defaultorder.state,
                                Main.$FleetRecords.{$RFMKey}.{1}.$orders.count, Main.$FleetRecords.{$RFMKey}.{1}.$orders,
                                Main.$FleetRecords.{$RFMKey}.{1}.$defaultorder.$id,
                                $isEntityChanged?
                                ]" chance="if $sakla then Main.$ChangesOnFleetDebug else $testdebugchance"/>

                                <remove_value name="$isEntityChanged" />
                                <remove_value name="$internalPromotedChanged" />

                                <do_if value="$sakla">

                                    <run_actions ref="Save_OrderInfo_To_CommanderRecord">
                                        <param name="RFMKey" value="$RFMKey" />
                                        <param name="debugchance" value="Main.$DeepDebug" />
                                    </run_actions>
            
                                    <!-- <do_if value="event.name != 'event_object_order_cancelled'">-->
                                        <debug_to_file text="'RFM_%s_ CHANGED ORDER %s  Age: %s, %s
                                    '.[$RFMKey, $PromotedCommander.defaultorder.id,player.age,player.systemtime.{'%F-%X'}]" 
                                        name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommandsDeep"/>
                                        <debug_to_file text="'RFM_%s_ CHANGED ORDER %s  Age: %s, %s
                                    '.[$RFMKey, $PromotedCommander.defaultorder.id,player.age,player.systemtime.{'%F-%X'}]" 
                                        name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$CommandDeep"/>
                                    <!-- </do_if>-->

                                    <set_value name="$pText" exact="'RFM_%s_ CHANGED ORDER, Age: %s, %s'.[$RFMKey, player.age, player.systemtime.{'%F-%X'}]"/>
                                    <!-- DEBUG : RM_FLEETS File-->
                                    <run_actions ref="Debug_RM_Fleets">
                                        <param name="inserttext" value="$pText" />
                                    </run_actions>


                                </do_if>

                                <remove_value name="$sakla" />
                            </actions>
                        </cue>

                        <cue name="Changed_Entity" instantiate="true" >
                            <conditions>
                                <check_all>
                                    <check_any>
                                        <event_control_entity_added group="$Promoted" />
                                        <event_control_entity_removed group="$Promoted" />
                                    </check_any>
                                    <!-- player koltuğa oturduğunda entity bilgisini değişmeyeceğiz-->
                                    <check_value value="event.param != player.entity" />
                                </check_all>
                            </conditions>
                            <actions>

                                <do_if value="event.name == 'event_control_entity_added'">
                                    <do_if value="event.object.isrealclass.station">
                                        <do_if value="event.param.controlpost == controlpost.manager">
                                            <set_value name="$entityAdd" />
                                        </do_if>
                                    </do_if>
                                    <do_elseif value="event.object.isrealclass.ship">
                                        <do_if value="event.param.controlpost == controlpost.aipilot">
                                            <set_value name="$entityAdd" />
                                        </do_if>
                                    </do_elseif>
                                </do_if>
                                <do_else>
                                    <do_if value="event.param == $Entity">
                                        <set_value name="$entityRemove" />
                                    </do_if>
                                </do_else>

                                <debug_text text="'\n
                            &lt;%s&gt;  \n
                                %s \n
                                The incident happened because of the player = %s \n
                                player  entity                      = &lt;%s&gt; %s \n
                                isStation %s        ,     isShip = %s \n
                                Object (controlabble or entity)     = &lt;%s&gt; %s %s         \n
                                    @.assignedcontrolentity.{controlpost.aipilot}     = &lt;%s&gt; %s \n
                                    @.assignedcontrolentity.{controlpost.manager}     = &lt;%s&gt; %s \n
                                    @.assignedcontrolentity.{controlpost.shiptrader}  = &lt;%s&gt; %s \n
                                Param  (entity)                     = &lt;%s&gt; %s \n
                                    @.param.controlpost             = %s \n
                                    .param.assignedcontrolled       = &lt;%s&gt; %s %s         \n
                                [cue.Entity]      = &lt;%s&gt;        \n
                                cue.Promoted    = %s                \n
                                PromotedCommander&lt;%s&gt; \n
                                    .pilot          = &lt;%s&gt; %s \n
                                    .assignedpilot  = &lt;%s&gt; %s \n
                                    .tradenpc       = &lt;%s&gt; %s \n
                                    .shiptrader     = &lt;%s&gt; %s \n
                                    .assignedcontrolentity.{controlpost.aipilot}    = &lt;%s&gt; %s \n
                                    .assignedcontrolentity.{controlpost.manager}    = &lt;%s&gt; %s \n
                                    .assignedcontrolentity.{controlpost.shiptrader} = &lt;%s&gt; %s \n
                                Param2 (kill method)    = %s
                                 '.[
                                event.name, 
                                if $entityAdd? or $entityRemove? then 
                                    if $entityAdd?  then 
                                        '[   ADD  ]'
                                    else
                                        if $entityRemove? then 
                                            '[ REMOVE ]' 
                                        else 
                                            '[ ATLA ]'
                                else '',
                                if (event.param == player.entity) then 'YES' else 'no',
                                player.entity, player.entity.knownname,
                                event.object.isrealclass.station, event.object.isrealclass.ship,
                                event.object, event.object.knownname, @event.object.idcode,
                                @event.object.assignedcontrolentity.{controlpost.aipilot}, @event.object.assignedcontrolentity.{controlpost.aipilot}.knownname, 
                                @event.object.assignedcontrolentity.{controlpost.manager}, @event.object.assignedcontrolentity.{controlpost.manager}.knownname, 
                                @event.object.assignedcontrolentity.{controlpost.shiptrader}, @event.object.assignedcontrolentity.{controlpost.shiptrader}.knownname, 
                                event.param, event.param.knownname,
                                @event.param.controlpost,
                                event.param.assignedcontrolled, @event.param.assignedcontrolled.knownname, @event.param.assignedcontrolled.idcode,
                                $Entity,
                                $Promoted,
                                @$PromotedCommander, 
                                @$PromotedCommander.pilot, @$PromotedCommander.pilot.knownname,
                                @$PromotedCommander.assignedpilot, @$PromotedCommander.assignedpilot.knownname, 
                                @$PromotedCommander.tradenpc, @$PromotedCommander.tradenpc.knownname, 
                                @$PromotedCommander.shiptrader, @$PromotedCommander.shiptrader.knownname, 
                                @$PromotedCommander.assignedcontrolentity.{controlpost.aipilot}, @$PromotedCommander.assignedcontrolentity.{controlpost.aipilot}.knownname, 
                                @$PromotedCommander.assignedcontrolentity.{controlpost.manager}, @$PromotedCommander.assignedcontrolentity.{controlpost.manager}.knownname, 
                                @$PromotedCommander.assignedcontrolentity.{controlpost.shiptrader}, @$PromotedCommander.assignedcontrolentity.{controlpost.shiptrader}.knownname, 
                                @event.param2
                                 ]" chance="Main.$ChangesOnFleetDebug"/>

                                
                                <do_if value="$entityAdd?">

                                    <run_actions ref="PromoteEntity">
                                        <param name="RFMKey" value="$RFMKey" />
                                        <param name="Entity" value="event.param" />
                                    </run_actions>
                                    
                                    <set_value name="$PromotedCommander" exact="event.param.assignedcontrolled"/>
                                    <set_value name="$RMCommander" exact="$PromotedCommander"/>
                                    
                                    <set_value name="$isEntityChanged" exact="true" />

                                    <set_value name="$pText" exact="'ENTITY ADDED new Entity %s &lt;%s&gt;'.[event.param.knownname, event.param]" />
                                    <debug_to_file text="'  RFM_%s_ ENTITY ADDED new Entity %s &lt;%s&gt;, PromotedCommander &lt;%s&gt; %s %s (%s),  Age: %s, %s'.[$RFMKey, event.param.knownname, event.param, $PromotedCommander, Main.$FleetRecords.{$RFMKey}.{$fleetshipsByComp.{$PromotedCommander}}.$name, $PromotedCommander.idcode, $PromotedCommander.sector.knownname, player.age, player.systemtime.{'%F-%X'}]" name="Main.$logTAG_RFMleets" directory="Main.$logDIR" chance="Main.$DFD.$Fleets" append="false"/>
                                    <debug_to_file text="'RFM_%s_ NEW PILOT &quot;%s &lt;%s&gt;&quot; to Promoted Comander Ship ( %s ) &lt;%s&gt; %s %s (%s) Age: %s, %s
                                    '.[
                                    $RFMKey, 
                                    event.param.knownname, event.param, 
                                    $fleetshipsByComp.{$PromotedCommander}, $PromotedCommander, $RMCommanderName, $PromotedCommander.idcode, $PromotedCommander.sector.knownname,
                                    player.age, player.systemtime.{'%F-%X'}
                                    ]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                                    <debug_to_file text="'NEW PILOT &quot;%s &lt;%s&gt;&quot; to Promoted Comander Ship ( %s ) &lt;%s&gt; %s %s (%s),  Age: %s, %s
                                    '.[
                                    event.param.knownname, event.param, 
                                    $fleetshipsByComp.{$PromotedCommander}, $PromotedCommander, $RMCommanderName, $PromotedCommander.idcode, $PromotedCommander.sector.knownname,
                                    player.age, player.systemtime.{'%F-%X'}
                                    ]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command"/>
                                </do_if>
                                <do_if value="$entityRemove?">
                                    <run_actions ref="UnPromoteEntity">
                                        <param name="RFMKey" value="$RFMKey" />
                                        <param name="Entity" value="event.param" />
                                    </run_actions>
                                    <set_value name="$pText" exact="'ENTITY REMOVED Entity %s &lt;%s&gt;'.[event.param.knownname, event.param]" />
                                    <debug_to_file text="'  RFM_%s_ ENTITY REMOVED Entity %s &lt;%s&gt;, PromotedCommander &lt;%s&gt; %s %s (%s),  Age: %s, %s'.[$RFMKey, event.param.knownname, event.param, $PromotedCommander, Main.$FleetRecords.{$RFMKey}.{$fleetshipsByComp.{$PromotedCommander}}.$name, $PromotedCommander.idcode, $PromotedCommander.sector.knownname, player.age, player.systemtime.{'%F-%X'}]" name="Main.$logTAG_RFMleets" directory="Main.$logDIR" chance="Main.$DFD.$Fleets" append="false"/>
                                    <debug_to_file text="'RFM_%s_ PILOT REMOVED &quot;%s &lt;%s&gt;&quot; from Promoted Comander Ship ( %s ) &lt;%s&gt; %s %s (%s)  Age: %s, %s
                                    '.[
                                    $RFMKey, 
                                    event.param.knownname, event.param, 
                                    $fleetshipsByComp.{$PromotedCommander}, $PromotedCommander, $RMCommanderName, $PromotedCommander.idcode, $PromotedCommander.sector.knownname,
                                    player.age, player.systemtime.{'%F-%X'}
                                    ]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                                    <debug_to_file text="'PILOT REMOVED &quot;%s &lt;%s&gt;&quot; from Promoted Comander Ship ( %s ) &lt;%s&gt; %s %s (%s)  Age: %s, %s
                                    '.[
                                    event.param.knownname, event.param, 
                                    $fleetshipsByComp.{$PromotedCommander}, $PromotedCommander, $RMCommanderName, $PromotedCommander.idcode, $PromotedCommander.sector.knownname,
                                    player.age, player.systemtime.{'%F-%X'}
                                    ]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command"/>
                                </do_if>

                                <do_if value="$entityAdd? or $entityRemove?">
                                    <remove_value name="$entityAdd" />
                                    <remove_value name="$entityRemove" />
                                    <!-- DEBUG : RM_FLEETS File-->
                                    <run_actions ref="Debug_RM_Fleets"/>
                                    <run_actions ref="Debug_FleetRecord">
                                        <param name="RFMKey" value="$RFMKey" />
                                        <param name="inserttext" value="$pText" />
                                    </run_actions>
                                </do_if>
                            </actions>
                        </cue>

                        <!-- Subordinatelerin kontrolünde remove ve add olayları gerçekleşmesin-->
                        <cue name="PlayerStartedControl" instantiate="true">
                            <conditions>
                                <event_player_started_control/>
                            </conditions>
                            <actions>
                                <do_if value="$Subordinates.indexof.{event.param}">
                                    <set_value name="$takedControl" exact="event.param" />
                                    <debug_text text="'Player STARTED CONTROL [RFM_%s_%s] SET &lt;%s&gt;'.[$RFMKey, $fleetshipsByComp.{event.param}, $takedControl]" chance="Main.$DebugChance"/>
                                    <run_actions ref="Debug_RM_Fleets"/>
                                    <run_actions ref="Debug_FleetRecord_NoOthers">
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>
                                </do_if>
                            </actions>
                        </cue>
                        <cue name="PlayerStoppedControl" instantiate="true">
                            <conditions>
                                <event_player_stopped_control />
                            </conditions>
                            <actions>
                                <do_if value="$Subordinates.indexof.{event.param}">
                                    <debug_text text="'Player STOPPED CONTROL [RFM_%s_%s] %s'.[$RFMKey, $fleetshipsByComp.{event.param}, if not Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'Removing takedControl = %s'.[$takedControl] else '' ]" chance="Main.$DebugChance"/>
                                    <remove_from_list name="$reAssignedShips" exact="event.param" />
                                    <debug_text text="'   [re Assigned Ships]:%s'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                    <remove_value name="$takedControl" />
                                    <debug_text text="'   removed takedControl'.[]" chance="Main.$ChangesOnFleetDebug"/>
                                    <signal_cue_instantly cue="Adjust_Fleet_Formations" param="table[$RFMKey = $RFMKey]"/>
                                    <run_actions ref="Debug_RM_Fleets"/>
                                    <run_actions ref="Debug_FleetRecord_NoOthers">
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>
                                </do_if>
                                
                            </actions>
                        </cue>
                        
                        <!-- Filo Commanderi dışındakiler için remove olayı gerçekleşiyor
                            sublar için ownerchanged durumunda remove olayı kontrolü ele alıyor.
                            Bu yüzden sadece promoted komutan için kontrol yapacağız.
                                Egosoft; commander satıldığında altındaki filoyu disband ediyor.
                            Disband olayına dokunmayacağız, sadece PromotedCommander satılmış ise RFM'yi kapatacağız
                            * remove olaylarındaki delaylardan dolayı önce changed_owner olayı geliyor, 
                                remove olaylarının bitmesinden sonra kapatılmalı. bu yüzden buraya da delay ekleyeceğiz.
                        -->
                        <cue name="Changed_Owner" instantiate="true">
                            <conditions>
                                <check_any>
                                    <event_object_changed_owner group="$Promoted"/>
                                </check_any>
                            </conditions>
                            <delay exact="2ms" comment="+1ms destroy delay den sonra oluşması için ve remove ile aynı duruma getirdik."/>
                            <actions>
                                <set_value name="$tShip"  exact="event.object"/>
                                <set_value name="$tShipKey" exact="@$fleetshipsByComp.{$tShip}" />
                                <do_if value="@event.object.isactive == null" >
                                    <set_value name="$invalid" />
                                </do_if>

                                <debug_text text="'\n
                                CHANGED OWNER  \n
                                    %s   \n
                                        RFMKey : %s   [table idx : %s] \n
                                            %s \n
                                            RFM Cancelling?    %s  \n
                                            object      : (isWreck %s) (exists %s) (isactive %s) (isoperational %s) %s %s &lt;%s&gt;    \n
                                            new faction : &lt;%s&gt;\n
                                            old faction : &lt;%s&gt;\n
                                            PromotedCommander : [%s] %s %s &lt;%s&gt;
                                            '.[
                                            if @Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'LOCKED' else 'open',
                                            $RFMKey, @$fleetshipsByComp.{event.object}, 
                                            if $Subordinates.indexof.{event.object} then 'Subordinates() İÇİNDE' else 'Subordinates() DIŞINDA',
                                            (if $Cancelling? then 'YES' else 'no'),
                                            event.object.iswreck, event.object.exists, @event.object.isactive, event.object.isoperational,
                                            if not $invalid? then event.object.knownname else '(invalid)', if not $invalid? then event.object.idcode else '', event.object, 
                                            event.param, event.param2,
                                            @$fleetshipsByComp.{$PromotedCommander}, @$PromotedCommander.knownname, @$PromotedCommander.idcode, $PromotedCommander
                                            ]"  chance="Main.$ChangesOnFleetDebug"/>
                                
                                <!-- Promoted patlayıp yerine birisi geçerse bu olay tetiklenmez, ancak;
                                    patlamadan sonra promoted olabilecek gemi bulunamaz ise (üretilemez ya da filoda başka gemi kalmamıştır) bu olay tetiklenir. -->
                                <!-- Bu yüzden owner değişimi patlamadan dolayı rfm kapatılmayacak. Ancak factionu değişmiş olduğunda RFM kapanacak. -->
                                <do_if value="event.object.isoperational and ( event.param != '' and event.param != faction.player ) ">
                                    <!-- param $RFMKey Or list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false) ] -->
                                    <signal_cue_instantly cue="Disable__RFM" param="[$RFMKey, 'Changed Owner', false, true]"/>
                                </do_if>

                            </actions>
                        </cue>
                        <!-- Olay sıralarını değişmek için delay eklendi-->
                        <!-- normalde Destroy en sonda oluşuyor, add ve remove olayını en geçe alıcağız-->
                        <!-- -->
                        <!-- Filoda bir gemide Destroy gerçekleştiğinde o gemi için 3 olay sırasıyla 
                            event_object_changed_owner
                            event_object_abandoned ve en sonunda da
                            event_object_destroyed gerçekleşiyor.
                        -->
                        <!-- 6.20 de 3 olaya da aynı anda trigger almıyordu
                            7.0 da check any bloğu tek birini seçmesi gerekirken 3 ünü de ayrı ayrı çağırıyor
                            bu yüzden sadece destroy kısmına odaklandık
                            player gemilere ait abandoned olayı olmayacağı için (harici bir mod olmaz ise) ele almayacağız
                            changed_owner olayı sonrasında remove gerçekleşecek bu yüzden remove içinde güncellenecek
                        -->
                        <!-- destroy 1ms beklediğinde wreck olşuyor ancak gemi bir hangarın içinde iken hangarın yokedilmesi ile patlıyorsa
                            normalde wreck oluşur ve exists dir, hangarın patlamasıyla ise wreck oluşmaz ve exists de değildir.
                            bu durumda destroy edilmiş olan bir gemi içim
                            (isreck and exists) or (not iswreck and not exists) or not isactive
                            şartı olması gerekir.
                        -->
                        <cue name="FleetShipDestroyed_Handler" instantiate="true" comment=" * 6. Olay Sırası - 1. e çevrildi" >
                            <conditions>
                                <check_all>
                                    <event_object_destroyed group="$Subordinates"/>
                                    <check_value value="$fleetshipsByComp.{event.object}?"/>
                                    <check_value value="not $Cancelling?" />
                                </check_all>
                            </conditions>
                            <delay exact="1ms" comment="!!! wreck oluşması 1ms için beklendi !!! sub add ve remove ekle"/>
                            <actions>
                                <do_if value="not $Cancelling?">
                                    <!-- hangar içinde bekleyen rfm gemileri, hangarın yıkılması sonucu exists ya da active olamıyorlar -->
                                    <do_if value="not event.object.exists or @event.object.isactive == null" >
                                        <set_value name="$invalid" />
                                    </do_if>

                                    <do_if value="event.name == 'event_object_changed_owner'">
                                        <set_value name="$eventStatus" exact="'Changed Owner'"/>
                                    </do_if>
                                    <do_elseif value="event.name == 'event_object_abandoned'">
                                        <set_value name="$eventStatus" exact="'Abandoned'"/>
                                    </do_elseif>
                                    <do_else>
                                        <set_value name="$eventStatus" exact="'Destroyed'"/>
                                    </do_else>

                                    <set_value name="$isRealDestroyed" exact="false"/>
                                    <do_if value="(event.object.iswreck and event.object.exists) or (not event.object.iswreck and not event.object.exists) or not @event.object.isactive">
                                        <set_value name="$isRealDestroyed" exact="true"/>
                                    </do_if>
                                    <set_value name="$Ship_IDX" exact="$fleetshipsByComp.{event.object}"/>
                                    <set_value name="$Ship_Name" exact="Main.$FleetRecords.{$RFMKey}.{$Ship_IDX}.$name"/>
                                    <set_value name="$Ship_idcode" exact="Main.$FleetRecords.{$RFMKey}.{$Ship_IDX}.$idcode"/>
                                    <set_value name="$macro"  exact="Main.$FleetRecords.{$RFMKey}.{$Ship_IDX}.$macro"/>
                                    <set_value name="$isship" exact="$macro.isclass.ship"/>

                                    <debug_text text="'\n
                            RFM %s %s     status %s                     \n
                    $eventStatus    = %s                    \n
                    Destroyed object= %s                    \n
                    isactive        = %s                    \n
                    exists          = %s                    \n
                    iswreck         = %s                    \n
                    isoperational   = %s            \n
                    isRealDestroyed = %s            \n
                    [   RMCommander         = %s    \n
                        PromotedCommander   = %s    \n
                        group Promoted      = %s    \n
                    ] \n
                    $fleetshipsByComp.{event.object}?   %s,   \n
                    @$fleetshipsByComp.{event.object}   %s,   \n
                    @$takedControl  = %s \n
                    macro           = %s  $macro  = %s       \n
                    object.macro    .isclass.ship = %s    $macro.isclass.ship ($isship) = %s      \n
                    object          .isclass.ship = %s    .isclass.station = %s   \n
                    realclass       = %s                    \n
                    $Subordinates = %s
                    '.[
                    $RFMKey, $Ship_IDX,
                    if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'LOCKED' else 'open',
                    $eventStatus,
                    event.object, 
                    @event.object.isactive, 
                    event.object.exists,
                    event.object.iswreck,
                    event.object.isoperational,
                    if $isRealDestroyed then 'YES' else 'NO',
                    $RMCommander, $PromotedCommander, $Promoted, 
                    if $fleetshipsByComp.{event.object}? then 'VAR' else 'YOK', 
                    @$fleetshipsByComp.{event.object}, 
                    @$takedControl,
                    @event.object.macro, $macro,
                    (if @event.object.macro.isclass.ship then 'Ship' else 'Station'), (if $isship then 'Ship' else 'Station'),
                    (if event.object.isclass.ship then 'True' else 'false'), (if event.object.isclass.station then 'True' else 'false'),
                    (if event.object.isrealclass.ship then 'Ship' else 'Station'),
                    $Subordinates
                    ]" chance="Main.$ChangesOnFleetDebug"/>

                                    
                                    <!-- promote sub destroyden önce oluşur ama filoda son gemi patlıyorsa promoted olayı olmaz -->
                                    <do_if value="$fleetshipsByIdx.keys.count == 1" >
                                        <debug_text text="' Empty PROMTOTING (The last object in RFM_%s exploded.)'.[$RFMKey]" chance="Main.$ChangesOnFleetDebug"/>
                                        <run_actions ref="PromoteToCommander">
                                            <param name="RFMKey" value="$RFMKey" />
                                            <param name="Commander" value="null" />
                                            <param name="oldCommander" value="event.object" />
                                        </run_actions>
                                    </do_if>

                                    <set_value name="$TopLevelCommanderDie" exact="false" />
                                    <do_if value="event.object == $RMCommander" comment="Top Commander öldü">
                                        <set_value name="$TopLevelCommanderDie" exact="true" />

                                        <set_value name="$RMCommander" exact="$PromotedCommander"/>
                                        <set_value name="$RMCommanderName" exact="if $PromotedCommander != null then Main.$FleetRecords.{$RFMKey}.{$fleetshipsByComp.{$PromotedCommander}}.$name else ''"/>
                                        <set_value name="$RMCommanderIdCode" exact="if $PromotedCommander != null then $PromotedCommander.idcode else ''"/>
                                    </do_if>

                                    <do_if value="not $isship">
                                        <!-- YAPILACAK-->
                                        <!-- ISTASYON patlarsa sublar promote olur mu?-->
                                        <!-- Olursa Promote olan gemiye sublar bağlanıp  
                                            Bulunduğu pozisyona commander için protect posizyon verilip
                                            Manager oluşturulmalı
                                        -->
                                        <!-- Olmazsa kayıtlı gemileri en büyük gemi altında defans verip
                                            Bulunduğu pozisyona commander için protect posizyon verilip
                                            Manager oluşturulmalı
                                        -->
                                        <!-- Şimdilik hiç bir şey yapmayacağız. RFM kapatılacak. -->
                                        <!-- param : $RFMKey Or a list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false), $cancelcue (default true) , $removetable (default true) ]-->
                                        <!-- 
                                        <signal_cue_instantly cue="Disable__RFM" param="[ $RFMKey, 'Commander Station Destroyed' ]" />
                                        -->
                                        <cancel_cue cue="FleetShipDestroyed_Handler" />
                                    </do_if>

                                    <debug_to_file text="'RFM_%s_( %s ) DESTROYED &lt;%s&gt;, %s RFM_%s_PromotedCommander&lt;%s&gt;, Commander&lt;%s&gt;,  Destroyed Ship&lt;%s&gt;  Age: %s, %s'.[$RFMKey, $fleetshipsByComp.{event.object}, $eventStatus, player.age, $RFMKey, $PromotedCommander, $RMCommander, event.object, player.age, player.systemtime.{'%F-%X'}]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                                    <debug_to_file text="'( %s ) DESTROYED &lt;%s&gt;, RFM_%s_PromotedCommander&lt;%s&gt;, Commander&lt;%s&gt;,  Destroyed Ship&lt;%s&gt;  Age: %s, %s'.[$fleetshipsByComp.{event.object}, $eventStatus, $RFMKey, $PromotedCommander, $RMCommander, event.object, player.age, player.systemtime.{'%F-%X'}]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command"/>

                                    <do_if value="$TopLevelCommanderDie">
                                        <do_if value="$Ship_IDX == 1" comment="Gerçek fleet commander öldü">
                                            <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$object" exact="null"/>
                                            <set_value name="$capText" exact="'\033' + 'R' + readtext.{Main.$tPage}.{6620} + ' ' + Main.$RFMTag + '_' + $RFMKey + '_ ' + readtext.{Main.$tPage}.{6570} + '\033X'" />
                                        </do_if>
                                        <do_else>
                                            <set_value name="$capText" exact="'\033' + 'O' + readtext.{Main.$tPage}.{6620} + ' ' + Main.$RFMTag + '_' + $RFMKey + '_ '+  readtext.{Main.$tPage}.{6570} + '\033X'" />
                                        </do_else>
                                    </do_if>
                                    <do_else>
                                        <set_value name="$capText" exact="'\033' + 'Y' + readtext.{Main.$tPage}.{6620} + ' ' + 'RFM' + '_' + $RFMKey + '_ ' + readtext.{Main.$tPage}.{6571} + '\033X'" />
                                    </do_else>
                                    

                                    <show_help custom="'
                %s\n\n
    %s : (%s) %s %s\n\n
    %s : %s %s\n
    %s          : %s\n
                                    '.[
                                    $capText,
                                    readtext.{Main.$tPage}.{6571}, $Ship_IDX, $Ship_Name, event.object.idcode,
                                    readtext.{Main.$tPage}.{6500}, $RMCommanderName, $RMCommanderIdCode,
                                    readtext.{Main.$tPage}.{1210}, event.object.sector.knownname
                                    ]" duration="5s" chance="if global.$upbRF_DATA.$Editing.$showhelp then 100 else 0" />
                                    <remove_value name="$capText" />

                                    <append_to_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="($Ship_IDX)i"/>

                                    <do_if value="$takedControl? and $takedControl == event.object">
                                        <remove_from_list name="$reAssignedShips" exact="$takedControl" />
                                        <remove_value name="$takedControl" />
                                        <debug_text text="'   [re Assigned Ships]:%s , takedControl removed'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                    </do_if>

                                    <do_if value="not $invalid?">
                                        <remove_from_group group="$Subordinates" object="event.object"  />
                                    </do_if>
                                    <!-- tablodan çıkarıyoruz, add remove olaylarında kriter olacak -->
                                    <remove_value name="$fleetshipsByIdx.{$fleetshipsByComp.{event.object}}"/>
                                    <remove_value name="$fleetshipsByComp.{event.object}"/>

                                    <run_actions ref="SetRecord_DestroyedObject">
                                        <param name="record" value="Main.$FleetRecords.{$RFMKey}.{$Ship_IDX}" />
                                    </run_actions>

                                    <run_actions ref="Check_FleetLockStatus">
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>

                                    <!-- DEBUG MAIN-->
                                    <!-- DEBUG : RM_FLEETS File-->
                                    
                                    <run_actions ref="Debug_RM_Fleets"/>
                                    
                                    <!-- FLEET RECORD TABLE -->
                                    <run_actions ref="Debug_FleetRecord">
                                        <param name="RFMKey" value="$RFMKey" />
                                        <param name="inserttext" value="''" />
                                    </run_actions>


                                    <debug_text text="'\n
                        DESTROY \n
                            %s \n
                                RFMKey : %s   \n
                                    ShipIdx: %s \n
                                    Object : &lt;%s&gt; %s %s (isWreck %s) (exists %s) (isactive %s) (isoperational %s) \n
                                    [   RMCommander         = %s    \n
                                        PromotedCommander   = %s    \n
                                        group Promoted      = %s    \n
                                    ]
                                    '.[
                                    if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'LOCKED' else 'open',
                                    $RFMKey,
                                    $Ship_IDX,
                                    event.object, $Ship_Name, $Ship_idcode, 
                                    event.object.iswreck, event.object.exists, @event.object.isactive, event.object.isoperational,
                                    $RMCommander, $PromotedCommander, $Promoted
                                    ]" chance="Main.$ChangesOnFleetDebug"/>

                                    <set_value name="RF_Manager.$destroyedshipkey" exact="$Ship_IDX" />
                                    <set_value name="RF_Manager.$destroyedshipcommanderkey" exact="Main.$FleetRecords.{$RFMKey}.{$Ship_IDX}.$commanderidx" />

                                    <do_if value="Main.$RM_Fleets.{$RFMKey}.$autobuild">
                                        <debug_text text="'Signalled Cue for Construct RMF_%s_(%s) &lt;%s&gt; Age:%s'.[$RFMKey, $Ship_IDX, event.object, player.age]"  chance="Main.$ChangesOnFleetDebug"/>
                                        <!-- PARAM table[ $RFMKey = RFMKey, $ShipKey [, $passingcriterias = [] ] [, $rebuildtimerstatus = Main.$RM_Fleets.{$RFMKey}.$rebuildtimerstatus] [, $destroyedobject = null] ]  -->
                                        <signal_cue_instantly cue="Check_Add_ConstructionShip_ForFleet" param="table[ $RFMKey = $RFMKey, $ShipKey = $Ship_IDX , $destroyedobject = if not $invalid? then event.object else null ]" />
                                    </do_if>
                                    <do_else>
                                        <debug_text text="'[RFM_%s].autobuild is disabled. Skipping add construct'.[$RFMKey]" chance="Main.$ChangesOnFleetDebug"/>
                                    </do_else>

                                    <remove_value name="$Ship_IDX" />
                                    <remove_value name="$Ship_Name" />
                                    <remove_value name="$Ship_idcode" />
                                    <remove_value name="$invalid" />
                                    <remove_value name="$macro" />
                                    <remove_value name="$isship" />
                                    <remove_value name="$isRealDestroyed" />
                                </do_if>
                            </actions>
                        </cue>
                        

                        <!-- Grp değişimi zaten iş görüyor -->
                        <!-- Assignment değişimine gerek kalmadı-->
                        <!-- 
                        <cue name="Changed_Assignment" instantiate="true" comment="4. Olay Sırası">
                            <conditions>
                                <check_any>
                                    <event_object_changed_assignment group="$Subordinates"/>
                                </check_any>
                            </conditions>
                            <actions>
                                <do_if value="event.param != event.object">
                                    <do_if value="$RFMKey == 1">
                                        <debug_text text="'\n
                                        ASSIGNMENT CHANGED  \n
                                        RFMKey   : %s   \n
                                        Locked : %s \n
                                        Changed Ship : %s %s %s \n
                                        Object(PlayerOrEntityOrSubOrComm): %s %s %s   \n
                                        Assignment Pre : %s , New : %s \n
                                        Groupid : %s \n
                                        '.[
                                        $RFMKey,
                                        if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'YES' else 'none',
                                        event.param, event.param.knownname, event.param.idcode,
                                        event.object, event.object.knownname, event.object.idcode,
                                        event.param2, event.param3,
                                        event.param.subordinategroupid
                                        ]" />

                                        <do_if value="Main.$RM_Fleets.{$RFMKey}.$isLockedFleet" comment="patlayan gemi var. düzen bozuk">
                                            <debug_text text="'Filo Kilitli, ATLA'" />
                                        </do_if>
                                        <do_else>
                                            <debug_text text="'Manuel Değişim yapılıyor, GÜNCELLE'" />
                                        </do_else>

                                    </do_if>
                                    <do_else>
                                        <debug_text text="'\n
                                        ASSIGNMENT CHANGED  \n
                                        RFMKey   : %s   \n
                                        Locked : %s \n
                                        Changed Ship : %s %s %s \n
                                        Object(PlayerOrEntityOrSubOrComm): %s %s %s   \n
                                        Assignment Pre : %s , New : %s \n
                                        Groupid : %s \n
                                        '.[
                                        $RFMKey,
                                        if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'YES' else 'none',
                                        event.param, event.param.knownname, event.param.idcode,
                                        event.object, event.object.knownname, event.object.idcode,
                                        event.param2, event.param3,
                                        event.param.subordinategroupid
                                        ]" />
                                    </do_else>                                
                                </do_if>
                            </actions>
                        </cue>
                        -->
                        <!-- COMMANDER DEĞİŞTİRİLEREK YAPILAN FİLO İÇİ DÜZENLEMEDE ADD REMOVE OLAYLARI GERÇEKLEŞİR-->
                        <!-- AYNI COMMANDER içindeki değişimleri kapsar
                            Grup kümesi sabit (kilitli) olduğundan aynı grubu farklı assigment olarak değiştiremez.
                            oyuncu ya sadece grp değiştirecek ya da assigmentı değiştirerek grp değişimi yapacak.
                        -->
                        <cue name="Changed_Subordinategroup" instantiate="true" comment="3. Olay Sırası">
                            <conditions>
                                <check_all>
                                    <event_object_changed_subordinategroup group="$Subordinates"/>
                                </check_all>
                            </conditions>
                            <actions>
                                <do_if value="event.param != event.object">

                                    <debug_text text="'\n
                        GROUP CHANGED  \n
                            %s \n
                                RFMKey : %s   (shipKeyIdx:%s) \n
                                    Changed Ship        : %s %s %s   \n
                                    Object(Sub Or Comm) : %s %s %s   \n
                                    Groupid    Pre      : %s,   New : %s \n
                                    Assignment Rec      : %s,   New : %s \n
                                    Commander  Rec      : %s
                                    '.[
                                    if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'LOCKED' else 'open',
                                    $RFMKey, @$fleetshipsByComp.{event.param},
                                    event.param, event.param.knownname, event.param.idcode,
                                    event.object, event.object.knownname, event.object.idcode,
                                    event.param2, event.param3,
                                    if @$fleetshipsByComp.{event.param} then Main.$FleetRecords.{$RFMKey}.{$fleetshipsByComp.{event.param}}.$assignment else 'not in ByComp', event.param.assignment,
                                    if @$fleetshipsByComp.{event.param} then 
                                        if Main.$FleetRecords.{$RFMKey}.{$fleetshipsByComp.{event.param}}.$commanderidx == @$fleetshipsByComp.{event.object} then
                                            '[%s] ok'.[@$fleetshipsByComp.{event.object}]
                                        else
                                            'ERROR (Different Commander Records)'
                                    else 
                                        'ERROR (this ship is not in ByComp)'
                                    ]"  chance="Main.$ChangesOnFleetDebug"/>

                                    <debug_text text="'Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                    <debug_text text="'Remove Process Ship Keys:%s'.[$RemoveProcessShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                    <debug_text text="'re Assigned Ships:%s'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                    <do_if value="$reAssignedShips.indexof.{event.param} gt 0">
                                        <remove_from_list name="$reAssignedShips" exact="event.param" />
                                        <debug_text text="'   [re Assigned Ships]:%s'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                    </do_if>

                                    <!-- groupchanged eventinde değişime uğrayan geminin commanderi değişmez
                                        (filo içinde commander değiştirerek yapılan değişimlerde de remove ve add olayları peşpeşe gerçekleşir)
                                        sadece subordinategroupid, Assignment bilgileri record tablosunda güncelleyeceğiz
                                        değişime uğrayan gemi sublarının durumu zaten kendisine bağlı olduğundan güncellemeye gerek yok.
                                    -->
                                    <set_value name="$shipKey" exact="@$fleetshipsByComp.{event.param}" />
                                    <do_if value="$shipKey" exact="null">
                                        <debug_text text="'! ? SHIPKEY NULL ? ! OLUŞURSA SEBEP TESPİT EDİLİP KODA EKLENECEK'.[]" />
                                    </do_if>
                                    <do_else>
                                        <run_actions ref="GetNameSubordinateGroupId" result="$oldsubordinategrouptext">
                                            <param name="subordinategroupid" value="event.param2" />
                                        </run_actions>
                                        <run_actions ref="GetNameSubordinateGroupId" result="$subordinategrouptext">
                                            <param name="subordinategroupid" value="event.param3" />
                                        </run_actions>
                                        <do_if value="Main.$FleetRecords.{$RFMKey}.{$shipKey}.$commanderidx != $fleetshipsByComp.{event.object}">
                                            <debug_text text="'!!! K O N T R O L   E D İ L E C E K . Grup değişirken COMMANDER değiştirilmiş. Record = %s, new = %s'.[Main.$FleetRecords.{$RFMKey}.{$shipKey}.$commanderidx, $fleetshipsByComp.{event.object}]" chance="Main.$ChangesOnFleetDebug"/>    
                                        </do_if>
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}.$subordinategroupid" exact="event.param3" />
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}.$subordinategrouptext" exact="$subordinategrouptext" />
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}.$assignment" exact="event.param.assignment" />

                                        <!-- Debug-->
                                        <set_value name="$pText" exact="'( %s ) Group Changed, &lt;%s&gt; subordinategroupid Pre %s(%s) New %s(%s), Assignment %s, Commander [%s] &lt;%s&gt;  Age: %s, %s'.[$fleetshipsByComp.{event.param}, event.param, event.param2, $oldsubordinategrouptext, event.param3, $subordinategrouptext, event.param.assignment, $fleetshipsByComp.{event.object}, event.object, player.age, player.systemtime.{'%F-%X'}]" />
                                        <debug_text text="'%s'.[$pText]" chance="Main.$ChangesOnFleetDebug"/>
                                        <debug_to_file text="'RFM_%s_%s'.[$RFMKey, $pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                                        <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command"/>
                                        <!-- FLEET RECORD TABLE -->
                                        <run_actions ref="Debug_FleetRecord_NoOthers">
                                            <param name="RFMKey" value="$RFMKey" />
                                            <param name="inserttext" value="'Last entry is ' + $pText" />
                                        </run_actions>
                                        <remove_value name="$pText" />
                                        <remove_value name="$shipKey" />
                                        <remove_value name="$oldsubordinategrouptext" />
                                        <remove_value name="$subordinategrouptext" />
                                        
                                    </do_else>
                                </do_if>
                            </actions>                        
                        </cue>

                        <!-- YAPILACAK : bekleme süresi olduğundan PAUSE zamanı yapılan filo değşimleri hemen algılanmıyor. 
                            bekleme süreleri iptal edilecek ancak destroy olayını nasıl yakalayacağız?
                            -->
                        <!-- Patlama ve Üretim esnasında filo düzeni değişiyor -->
                        <!-- ADD-->
                        <cue name="Subordinate_Added" instantiate="true" comment="2. Olay Sırası" >
                            <conditions>
                                <check_all>
                                    <event_object_subordinate_added group="$Subordinates"/>
                                    <check_value value="not event.param.macro.isunit and not event.param.macro.isclass.ship_xs" />
                                    <check_value value="not $Cancelling?" />
                                </check_all>
                            </conditions>
                            <delay exact="2ms" comment="+1ms destroy delay den sonra oluşması için"/>
                            <actions>

                                <do_if value="not $Cancelling?">
                                    <run_actions ref="GetNameSubordinateGroupId" result="$grpname">
                                        <param name="subordinategroupid" value="event.param.subordinategroupid" />
                                    </run_actions>
    
                                    <debug_text text="'\n
                        ADDED  %s\n
                            status %s   \n
                                RFMKey : %s   [table idx : %s] \n
                                    is the added ship is a RFM command ship? : %s \n
                                    Plyer Controlled?   : %s \n
                                    RFM Cancelling?     : %s  \n
                                    Added Ship     [param]  : [%s] (state %s) (isWreck %s) (exists %s) (isactive %s) (isoperational %s) %s %s %s     \n
                                    New Commander  [object] : [%s] (state %s) (isWreck %s) (exists %s) (isactive %s) (isoperational %s) %s %s %s     \n
                                    Assignment New [param2] : %s  \n
                                    Groupid                 : %s (%s)
                                    '.[
                                    if event.param.state != componentstate.operational then 'ATLA' else '',
                                    if @Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'LOCKED' else 'open',
                                    $RFMKey, @$fleetshipsByComp.{event.param},
                                    if $this_rfm_connects_to_other_rfm gt 0 then 'Yes (' + $this_rfm_connects_to_other_rfm  + ' connect to ' + $RFMKey + ')'  else 'No',
                                    (if $takedControl? and @$takedControl != null and @$fleetshipsByComp.{@$takedControl} != null then '%s &lt;%s&gt;'.[$fleetshipsByComp.{$takedControl}, $takedControl] else 'no'),
                                    (if $Cancelling? then 'YES' else 'no'),
                                    if $fleetshipsByComp.{event.param}? then
                                        '%s'.[$fleetshipsByComp.{event.param}]
                                    else
                                        '-',
                                    @event.param.state, @event.param.iswreck, @event.param.exists, @event.param.isactive, @event.param.isoperational,
                                    event.param, @event.param.knownname, @event.param.idcode, 
                                    if $fleetshipsByComp.{event.object}? then
                                        '%s'.[$fleetshipsByComp.{event.object}]
                                    else
                                        '-',
                                    @event.object.state, @event.object.iswreck, @event.object.exists, @event.object.isactive, @event.object.isoperational,
                                    @event.object, @event.object.knownname, @event.object.idcode, 
                                    @event.param2,
                                    @event.param.subordinategroupid, $grpname
                                    ]"  chance="Main.$ChangesOnFleetDebug"/>

                                    <do_if value="event.param.state == componentstate.operational">
                                    
                                        <do_if value="$this_rfm_connects_to_other_rfm gt 0" comment="Başka bir RFM Bağlanıyor">
                                            <debug_text text="' Filo DIŞIndan  RFM  Ekleme'" chance="Main.$ChangesOnFleetDebug"/>
                                            <set_value name="$newF_RMCommander" exact="@event.object.fleet.commander" />
                                            <do_if value="@event.object.fleet.iscommander or $newF_RMCommander == null">
                                                <set_value name="$newF_RMCommander" exact="event.object" />
                                            </do_if>
                                            
                                            <!-- Eski fleet commander şuanda zaten yeni filoya bağlı durumda -->
                                            <!-- 
                                            <do_if value="event.param.isclass.ship">
                                                <set_value name="$oldF_RMCommander" exact="event.param.fleet.commander" />
                                                <do_if value="event.param.fleet.iscommander or $oldF_RMCommander == null">
                                                    <set_value name="$oldF_RMCommander" exact="event.param" />
                                                </do_if>
                                            </do_if>
                                            -->
        
                                            <do_if value="Main.$RM_Fleets.{$RFMKey}.$isLockedFleet">
                                                <debug_text text="'  C1 Filo Kilitli..'"  chance="Main.$ChangesOnFleetDebug"/>
                                                <debug_text text="'  C1 Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                            </do_if>
                                            <do_else>
                                                <debug_text text="'  C1 Filo Açık..'"  chance="Main.$ChangesOnFleetDebug"/>
                                            </do_else>
        
                                            <do_if value="Main.$RM_Fleets.{$this_rfm_connects_to_other_rfm}.$isLockedFleet">
                                                <debug_text text="'  A1 Filo Kilitli..'"  chance="Main.$ChangesOnFleetDebug"/>
                                                <debug_text text="'  A1 Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$this_rfm_connects_to_other_rfm}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                            </do_if>
                                            <do_else>
                                                <debug_text text="'  A1 Filo Açık..'"  chance="Main.$ChangesOnFleetDebug"/>
                                            </do_else>
                                            <!-- Sadece RFM RFM ye bağlanırken NewCommanderSet olayı ile buraya gelinir. -->
                                            <!-- A Fleet (promoted durumunda da olsa) olduğu gibi gibi C de bağlandığı gemi altına bağlanacak-->
                                            <run_actions ref="SpecAdd3_ApplyRecorFleet">
                                                <param name="RMCommander" value="$newF_RMCommander" />
                                                <param name="Commander" value="event.object" />
                                                <param name="ship" value="event.param" />
                                                <param name="C_RFMKey" value="$RFMKey" />
                                                <param name="A_RFMKey" value="$this_rfm_connects_to_other_rfm" />
                                            </run_actions>
                                            <set_value name="$this_rfm_connects_to_other_rfm" exact="0"/>
                                            <remove_value name="$newF_RMCommander" />
                                        </do_if>
                                        <do_else>
                                            <debug_text text="' No DUAL RFM Connect'" chance="Main.$ChangesOnFleetDebug"/>
                                            <do_if value="$takedControl? and $takedControl == event.param">
                                                <debug_text text="'  ATLA, Player Pilot Koltuğundan Kalktı RFM %s_%s, takedControl = %s'.[$RFMKey, $fleetshipsByComp.{$takedControl}, $takedControl]"  chance="Main.$ChangesOnFleetDebug"/>
                                                    <remove_from_list name="$reAssignedShips" exact="$takedControl" />
                                                    <debug_text text="'   [re Assigned Ships]:%s'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <remove_value name="$takedControl" />
                                                    <debug_text text="'   [removed takedControl]'.[]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <signal_cue_instantly cue="Adjust_Fleet_Formations" param="table[$RFMKey = $RFMKey]"/>
                                                    <run_actions ref="Debug_RM_Fleets"/>
                                                    <run_actions ref="Debug_FleetRecord_NoOthers">
                                                        <param name="RFMKey" value="$RFMKey" />
                                                    </run_actions>
                                            </do_if>
                                            <do_else>
                                                <do_if value="Main.$RM_Fleets.{$RFMKey}.$isLockedFleet" comment="Filo Kilitli. düzen bozuk">
                                                    <debug_text text="'  Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <debug_text text="'  Remove Process Ship Keys:%s'.[$RemoveProcessShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <debug_text text="'  re Assigned Ships:%s'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <set_value name="$check_SpecAdd"  />
                                                </do_if>
                                                <do_else>
                                                    <debug_text text="'  GÜNCELLE, Filo Açık..'"  chance="Main.$ChangesOnFleetDebug"/>
                                                    <do_if value="$Subordinates.indexof.{event.param} == 0">
                                                        <set_value name="$check_SpecAdd"  />
                                                        <debug_text text="'   SPEC GÜNCELLE. Filo DIŞIndan Normal Ekleme.'"  chance="Main.$ChangesOnFleetDebug"/>
                                                    </do_if>
                                                    <do_else>
                                                        <do_if value="event.param == $PromotedCommander" >
                                                            <set_value name="$changedCommander" exact="event.object" comment="sub remove olayında bu değişken silinecek "/>
                                                            <set_value name="$RMCommander" exact="$changedCommander" />
                                                            
                                                            <debug_text text="'event.object.class = %s'.[event.object.class]" chance="Main.$ChangesOnFleetDebug"/>
                                                            <debug_text text="'event.object.fleet.iscommander = %s'.[@event.object.fleet.iscommander]" chance="Main.$ChangesOnFleetDebug"/>
                                                            <debug_text text="'event.object.fleet.commander = %s'.[@event.object.fleet.commander]" chance="Main.$ChangesOnFleetDebug"/>
                                                            <set_value name="$fleetCommander" exact="event.object" />
                                                            <do_if value="event.object.isclass.ship">
                                                                <set_value name="$fleetCommander" exact="event.object.fleet.commander" />
                                                                <do_if value="event.object.fleet.iscommander or $fleetCommander == null">
                                                                    <set_value name="$fleetCommander" exact="event.object" />
                                                                </do_if>
                                                            </do_if>
                                                            <debug_text text="'fleet.commander = (%s) %s  isFleetCommander %s'.[@$fleetCommander, @$fleetCommander.name, @$fleetCommander.fleet.iscommander]" chance="Main.$ChangesOnFleetDebug"/>
                        
                                                            <set_value name="$RMCommander" exact="$fleetCommander" />
                                                                        
                                                            <do_if value="$changedCommander?">
                                                                <run_actions ref="PromoteToCommander">
                                                                    <param name="RFMKey" value="$RFMKey" />
                                                                    <param name="Commander" value="$fleetCommander" />
                                                                    <param name="oldCommander" value="event.param" />
                                                                </run_actions>
                                                                <debug_text text="'Promote edildi .. %s'.[$PromotedCommander]"  chance="Main.$ChangesOnFleetDebug"/>
                                                            </do_if>
                                                            <remove_value name="$fleetCommander" />
            
                                                            <!-- Debug ?-->
            
                                                            <debug_text text="'   ? GÜNCELLECEK Mİ ?. Promoted Commander Değiştik.'.[]"  />
                                                        </do_if>
                                                        <do_else>
                                                            <debug_text text="'   Üretilen gemi bağlanıldı. Reassign Filo İçinden Ekleme.'"  chance="Main.$ChangesOnFleetDebug"/>
                                                            <set_value name="$check_SpecAdd" />
                                                        </do_else>
                                                    </do_else>
                                                </do_else>
                                            </do_else>
                                        </do_else>
        
                                        <do_if value="$check_SpecAdd?" comment="ATLA Durumu için özel güncelleme var mı">
                                            <do_if value="$reAssignedShips.indexof.{event.param}" comment="Üretim">
                                                <remove_from_list name="$reAssignedShips" exact="event.param" />

                                                <set_value name="$isSubShipBuilded" exact="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.indexof.{$fleetshipsByComp.{event.param}}"/>
                                                <set_value name="$isRMCommanderBuilded" exact="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.indexof.{$fleetshipsByComp.{event.object}}"/>
                                                <do_if value="$isSubShipBuilded">
                                                    <remove_from_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$fleetshipsByComp.{event.param}" />
                                                    <debug_text text="'   [UPDATED] Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <debug_text text="'   [re Assigned Ships]:%s'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <debug_text text="'   ATLA. Üretilen geminin kendisi dahil edildiği için düzenleme alıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                                </do_if>
                                                <do_else>
                                                    <do_if value="$isRMCommanderBuilded">
                                                        <remove_from_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$fleetshipsByComp.{event.object}" />
                                                        <debug_text text="'   [UPDATED] Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                                        <debug_text text="'   [re Assigned Ships]:%s'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                                        <debug_text text="'   ATLA. RM Commanderi üretilip dahil edildiği için düzenleme alıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                                    </do_if>
                                                    <do_else>
                                                        <debug_text text="'   Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                                        <debug_text text="'   [re Assigned Ships]:%s'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                                        <debug_text text="'   ATLA. Filodaki bir gemi üretilip dahil edildiği için düzenleme alıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                                    </do_else>
                                                </do_else>

                                                <do_if value="$reAssignedShips.count == 0">
                                                    <debug_text text="' All ASSIGMENT ORDERS COMPLETED.'" chance="Main.$ChangesOnFleetDebug"/>
                                                    <run_actions ref="Check_FleetLockStatus">
                                                        <param name="RFMKey" value="$RFMKey" />
                                                    </run_actions>

                                                    <!-- DEBUG : RM_FLEETS File-->
                                                    <run_actions ref="Debug_RM_Fleets"/>
                                                    <!-- FLEET RECORD TABLE -->
                                                    <run_actions ref="Debug_FleetRecord_NoOthers">
                                                        <param name="RFMKey" value="$RFMKey" />
                                                    </run_actions>

                                                </do_if>
                                                <remove_value name="$isSubShipBuilded" />
                                                <remove_value name="$isRMCommanderBuilded" />

                                                <!-- gemi kontrolü bıraklıdığında oyuncu atanmış assign orderları silerse gemi defaultorder ile bağlanır
                                                    bu durumda assignment ve grup değişimi default olarak geldiğinden kayıttakinden farklı bir gruba bağlanır.
                                                    Bunu engellemek için tekrar bağlantıları güncelleyelim
                                                -->
                                                <do_if value="Main.$FleetRecords.{$RFMKey}.{$fleetshipsByComp.{event.param}}.$assignment != event.param.assignment">
                                                    <debug_text text="'   [assignment Kayıttakinden Farklı. recorded = %s , new = %s]'.[Main.$FleetRecords.{$RFMKey}.{$fleetshipsByComp.{event.param}}.$assignment, event.param.assignment]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <set_value name="$requestReassign" />
                                                </do_if>
                                                <do_if value="Main.$FleetRecords.{$RFMKey}.{$fleetshipsByComp.{event.param}}.$subordinategroupid != event.param.subordinategroupid">
                                                    <debug_text text="'   [subordinategroupid Kayıttakinden Farklı. recorded = %s , new = %s]'.[Main.$FleetRecords.{$RFMKey}.{$fleetshipsByComp.{event.param}}.$subordinategroupid, event.param.subordinategroupid]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <set_value name="$requestReassign" />
                                                </do_if>
                                                <do_if value="$requestReassign?">
                                                    <remove_value name="$requestReassign" />
                                                    <signal_cue_instantly cue="Adjust_Fleet_Formations" param="table[$RFMKey = $RFMKey]"/>
                                                </do_if>
                                            </do_if>
                                            <do_elseif value="$RemoveProcessShipKeys.indexof.{@$fleetshipsByComp.{event.param}}" comment="Patlama Olayları">
                                                <remove_from_list name="$RemoveProcessShipKeys" exact="$fleetshipsByComp.{event.param}" />
                                                <debug_text text="'   [UPDATED] Remove Process Ship Keys:%s'.[$RemoveProcessShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                                <debug_text text="'   ATLA. Patlamadan dolayı yeni düzenleme yapılıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                                <set_value name="$addedshipkey" exact="$fleetshipsByComp.{event.param}" />
                                                <set_value name="$addednewcommanderkey" exact="$fleetshipsByComp.{event.object}" />
                                                <!-- Özel durum trader, miner, salvager için görevi devralma -->
                                                <do_if value="$destroyedshipcommanderkey?">
                                                    <debug_text text="'   destroyedshipkey = %s , destroyedshipcommanderkey = %s , addedshipkey = %s, addednewcommanderkey = %s'.[$destroyedshipkey, $destroyedshipcommanderkey, $addedshipkey, $addednewcommanderkey]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <!-- sublardan biri patlayan komutanının görevini devralıyor-->
                                                    <do_if value="$addednewcommanderkey == $destroyedshipcommanderkey">
                                                        <debug_text text="'     sub [%s], patlayan komutanının [%s] yerine yeni commander oluyor..'.[$addedshipkey, $destroyedshipkey]" chance="Main.$ChangesOnFleetDebug"/>    
                                                        <!-- patlayan geminin order bilgisi trader, miner veya salvager ise warebasket listesini de yeni commandere ekle ancak kaydı güncellemeyceğiz-->
                                                        <debug_text text="'    T E S T   E D İ L E C E K   RFM_%s_[%s] %s %s recorded order (%s) , now = %s'.[$RFMKey, $addedshipkey, event.param.knownname, event.param.idcode, @Main.$FleetRecords.{$RFMKey}.{$addedshipkey}.$defaultorder.$id, @event.param.defaultorder.id ]"  chance="Main.$ChangesOnFleetDebug"/>
                                                        <!-- Main Subın altındaki gemiler için mainsub komutanın yerine geçme durumunda görev devralması gerekmez
                                                            1-mainsub escort görevinde ise görev devralmasına gerek yok,
                                                            2-mainsub trader vb ise?
                                                            TEST EDİLECEKMİ?
                                                        -->
                                                        <!-- 
                                                        <do_if value="Main.$FleetRecords.{$RFMKey}.{$destroyedshipkey}.$defaultorder?">
                                                            <run_actions ref="md.Upb_Library_Orders.Set_DefaultorderAndOrdersTable_To_Ship">
                                                                <param name="defaultorder" value="Main.$FleetRecords.{$RFMKey}.{$destroyedshipkey}.$defaultorder" />
                                                                <param name="orders" value="Main.$FleetRecords.{$RFMKey}.{$destroyedshipkey}.$orders" />
                                                                <param name="ship" value="event.param" />
                                                            </run_actions>
                                                            <debug_text text="'     sub [%s], patlayan komutanının[%s] order görevini devraldı..'.[$addedshipkey, $destroyedshipkey]" chance="Main.$ChangesOnFleetDebug"/>    
                                                            
                                                        </do_if>
                                                        -->
                                                        <remove_value name="$addedshipkey" />
                                                        <remove_value name="$addednewcommanderkey" />
                                                        <remove_value name="$destroyedshipkey" />
                                                        <remove_value name="$destroyedshipcommanderkey" />
                                                    </do_if>
                                                </do_if>
                                            </do_elseif>
                                            <do_else>
                                                <debug_text text="'   SPECADD. Kullanıcı ekleme yapıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                                <run_actions ref="SpecAdd_ApplyRecordFleet">
                                                    <param name="RFMKey" value="$RFMKey" />
                                                    <param name="ship" value="event.param" />
                                                </run_actions>
                                                <debug_text text="'   SPECADD. Fleet Record Güncellendi ..'.[]"  chance="Main.$ChangesOnFleetDebug"/>
                                            </do_else>
                                        </do_if>
                                        <remove_value name="$check_SpecAdd" />

                                    </do_if>

                                </do_if>
                            </actions>
                        </cue>
                        
                        <!-- REMOVE-->
                        <cue name="Subordinate_Removed" instantiate="true" comment="1. Olay Sırası" >
                            <conditions>
                                <check_all>
                                    <event_object_subordinate_removed group="$Subordinates" />
                                    <check_value value="not event.param.macro.isunit and not event.param.macro.isclass.ship_xs" />
                                    <check_value value="not $Cancelling?" />
                                </check_all>
                            </conditions>
                            <delay exact="2ms" comment="+1ms destroy delay den sonra oluşması için"/>
                            <actions>
                                <do_if value="not $Cancelling?">
                                    <!-- hangar içinde bekleyen rfm gemileri, hangarın yıkılması sonucu exists ya da active olamıyorlar 
                                     not event.param.exists or 
                                    -->
                                    <do_if value="@event.param.isactive == null" >
                                        <set_value name="$invalid" />
                                    </do_if>

                                    <debug_text text="'\n
                                    REMOVED  \n
                                        %s   \n
                                            RFMKey : %s   [table idx : %s] \n
                                                %s \n
                                                Plyer Controlled?       : %s \n
                                                dontRemovePromotedShip  : %s \n
                                                RFM Cancelling?         : %s  \n
                                                Removed Ship param  : [%s] (isWreck %s) (exists %s) (isactive %s) (isoperational %s) %s %s %s    \n
                                                Object (Old Comm)   : [%s] (isWreck %s) (exists %s) (isactive %s) (isoperational %s) %s %s %s    \n
                                                Old Commander       : [%s] (isWreck %s) (exists %s) (isactive %s) (isoperational %s) %s %s %s    \n
                                                '.[
                                                if @Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'LOCKED' else 'open',
                                                $RFMKey, @$fleetshipsByComp.{event.param}, 
                                                if $Subordinates.indexof.{event.param} then 'Subordinates() İÇİNDE' else 'Subordinates() DIŞINDA',
                                                (if $takedControl? and @$takedControl != null and @$fleetshipsByComp.{@$takedControl} != null then '%s &lt;%s&gt;'.[$fleetshipsByComp.{$takedControl}, $takedControl] else 'no'),
                                                (if $dontRemovePromotedShip? and @$dontRemovePromotedShip != null and @$fleetshipsByComp.{@$dontRemovePromotedShip} != null then '%s &lt;%s&gt;'.[$fleetshipsByComp.{$dontRemovePromotedShip}, $dontRemovePromotedShip] else 'no'),
                                                (if $Cancelling? then 'YES' else 'no'),
                                                if $fleetshipsByComp.{event.param}? then
                                                    '%s'.[$fleetshipsByComp.{event.param}]
                                                else
                                                    '-',
                                                event.param.iswreck, event.param.exists, @event.param.isactive, event.param.isoperational,
                                                event.param, if not $invalid? then event.param.knownname else '(invalid)', if not $invalid? then event.param.idcode else '', 
                                                if $fleetshipsByComp.{event.object}? then
                                                    '%s'.[$fleetshipsByComp.{event.object}]
                                                else
                                                    '-',
                                                event.object.iswreck, event.object.exists, @event.object.isactive, event.object.isoperational,
                                                event.object, event.object.knownname , event.object.idcode,
                                                if $fleetshipsByComp.{event.param2}? then
                                                    '%s'.[$fleetshipsByComp.{event.param2}]
                                                else
                                                    '-',
                                                event.param2.iswreck, event.param2.exists, @event.param2.isactive, event.param2.isoperational,
                                                @event.param2, event.param2.knownname, @event.param2.idcode
                                                ]"  chance="Main.$ChangesOnFleetDebug"/>

                                        <do_if value="$takedControl? and event.param == $takedControl">
                                            <debug_text text="' ATLA. Player Pilot Koltuğunda. takedControl = %s'.[$takedControl]"  chance="Main.$ChangesOnFleetDebug"/>
                                        </do_if>
                                        <do_else>
                                            <do_if value="Main.$RM_Fleets.{$RFMKey}.$isLockedFleet" comment="patlayan gemi var. Düzen bozuk">
                                                <!-- filo kitli olduğundan remove tipi için araştırma yapılacak-->
                                                <debug_text text="' Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                                <debug_text text="' Remove Process Ship Keys:%s'.[$RemoveProcessShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                                <debug_text text="' re Assigned Ships:%s'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                                <set_value name="$specRemove"  />
                                            </do_if>
                                            <do_else>
                                                <debug_text text="'Filo Açık..'"  chance="Main.$ChangesOnFleetDebug"/>
                                                <do_if value="event.param == @$changedCommander">
                                                    <remove_value name="$changedCommander" />
                                                    <debug_text text="' ATLA. Promote den dolayı Commander değişti. Add olayı içinde ele alındı..'"  chance="Main.$ChangesOnFleetDebug"/>
                                                </do_if>
                                                <do_else>
                                                    <debug_text text="' GÜNCELLE. İÇerdeki bir gemi remove edildi.'"  chance="Main.$ChangesOnFleetDebug"/>
                                                    <set_value name="$removeFleetRecord"  />
                                                </do_else>
                                            </do_else>
                                        </do_else>

                                    
                                    <!-- filo kilit açıkken manuel çıkartılıyor demektir. patlamadan dolayı değil -->
                                    <do_if value="$removeFleetRecord?">
                                        <remove_value name="$removeFleetRecord" />
                                        
                                        <set_value name="$rShip" exact="event.param" />
                                        <set_value name="$rShipKey" exact="@$fleetshipsByComp.{$rShip}"/>
                                        <set_value name="$rShipName" exact="@Main.$FleetRecords.{$RFMKey}.{$rShipKey}.$name"/>
                                        
                                        <!-- Gemiyi ve sub gemilerini kayıtlardan sil-->
                                        <!-- Geminin kayıtlarını sil-->
                                        <set_value name="$pText" exact="'( %s ) Fleet Record Changed (Removed &lt;%s&gt; %s from Commander &lt;%s&gt; )  Age: %s, %s'
                                        .[$rShipKey, $rShip, $rShipName, event.object, player.age, player.systemtime.{'%F-%X'}]" />
                                        <debug_to_file text="'RFM_%s_%s'.[$RFMKey, $pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                                        <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command"/>
                                        <debug_text text="'  %s'.[$pText]"  chance="Main.$ChangesOnFleetDebug"/>
                                        <remove_from_group group="$Subordinates" object="$rShip"/>
                                        <remove_value name="$fleetshipsByIdx.{$fleetshipsByComp.{$rShip}}"/>
                                        <remove_value name="$fleetshipsByComp.{$rShip}"/>
                                        <remove_value name="Main.$FleetRecords.{$RFMKey}.{$rShipKey}" />
                                        <remove_value name="Main.$Loadouts.{$RFMKey}.{$rShipKey}" />
                                        <!-- Sub gemiler için kayıtlar silinecek-->
                                        <do_for_each name="$sub" in="$rShip.allsubordinates">
                                            <do_if value="not $sub.isunit and not $sub.isclass.ship_xs">
                                                <set_value name="$sShipKey" exact="$fleetshipsByComp.{$sub}"/>
                                                <set_value name="$sShipName" exact="@Main.$FleetRecords.{$RFMKey}.{$sShipKey}.$name"/>
                                                
                                                <set_value name="$pText" exact="'( %s ) Fleet Record Changed ( Removed Sub &lt;%s&gt; %s )'.[$sShipKey, $sub, $sShipName]" />
                                                <debug_to_file text="'RFM_%s_%s'.[$RFMKey, $pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                                                <debug_to_file text="'  ' + $pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command"/>
                                                <debug_text text="'    %s'.[$pText]"  chance="Main.$ChangesOnFleetDebug"/>
    
                                                <remove_from_group group="$Subordinates" object="$sub"/>
                                                <remove_value name="$fleetshipsByIdx.{$sShipKey}"/>
                                                <remove_value name="$fleetshipsByComp.{$sub}"/>
                                                <remove_value name="Main.$FleetRecords.{$RFMKey}.{$sShipKey}" />
                                                <remove_value name="Main.$Loadouts.{$RFMKey}.{$sShipKey}" />
    
                                                <remove_value name="$sShipKey" />
                                                <remove_value name="$sShipName" />
                                            </do_if>
                                        </do_for_each>
    
                                        <debug_text text="'  Fleet Record güncellendi ..'.[]"  chance="Main.$ChangesOnFleetDebug"/>
    
    
                                        <!-- FLEET RECORD TABLE -->
                                        <run_actions ref="Debug_FleetRecord">
                                            <param name="RFMKey" value="$RFMKey" />
                                            <param name="inserttext" value="'Last entry is ' + $pText" />
                                        </run_actions>
                                        
                                        <remove_value name="$pText" />
                                        <remove_value name="$rShip" />
                                        <remove_value name="$rShipKey" />
                                        <remove_value name="$rShipName" />
                                        <remove_value name="$invalid" />
        
                                    </do_if>
                                    
                                    <!-- Filo kilit kapalı olduğu için çıkarılan gemi neden çıkarıldığı aranıyor -->
                                    <do_if value="$specRemove?">
                                        <!-- üretilen geminin bağlanma işleri-->
                                        <do_if value="$reAssignedShips.indexof.{event.param}">
                                            <debug_text text="'  ATLA. Filodaki bir gemi üretilip dahil edildiği için düzenleme alıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                        </do_if>
                                        <!-- filo kilitli iken patlama mı yoksa manuel çıkarma mı? -->
                                        <!-- patlamadan dolayı filo yapısı otomotaik değişir -->
                                        <do_else>
                                            <!-- destroy olayı önce oluştuğuna göre, destroy içinde gemiyi tabloadan çıkarmıştık -->
                                             <!-- gemi istasyon içinde istasyon yıkımından dolayı ölmüş ise wreck oluşmaz ama active de değildir.-->
                                            <do_if value="@$fleetshipsByComp.{event.param} == null">
                                                <set_value name="$isRealDestroyed" exact="false"/>
                                                <do_if value="(event.param.iswreck and event.param.exists) or (not event.param.iswreck and not event.param.exists) or not @event.param.isactive">
                                                    <set_value name="$isRealDestroyed" exact="true"/>
                                                </do_if>
                                                <do_if value="$isRealDestroyed" >
                                                    <debug_text text="'  ATLA. Patalyan gemi kendisi olduğu için yeni düzenleme yapılıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                                </do_if>
                                                <do_else>
                                                    <debug_text text="'  ? ? ? SPEC REMOVE GÜNCELLE ??. Filoda kaydedilmemiş bir gemi. ! ! ! Bu satıra uğrar mı? .! ! ! '" />
                                                </do_else>
                                            </do_if>
                                            <!-- tabloda bulunduğuna göre (add remove) otomatik filo yapısı değişiyor -->
                                            <do_else>
                                                <!-- komutanı öldüğü için promoted ve otomatik filo yapsı değişiyordur
                                                    bir şey yapmayacağız -->
                                                <set_value name="$isRealDestroyed" exact="false"/>
                                                <do_if value="(event.object.iswreck and event.object.exists) or (not event.object.iswreck and not event.object.exists) or not @event.object.isactive">
                                                    <set_value name="$isRealDestroyed" exact="true"/>
                                                </do_if>
                    
                                                <do_if value="$isRealDestroyed" >
                                                    <!-- remove edilmeye çalışılan promoted değeri almış mı
                                                        SubPromoted olayı gerçekleştikten sonra add remove güncelleme olayları sonrası en son burası devreye girecek
                                                    -->
                                                    <do_if value="event.param == $PromotedCommander">
                                                        <debug_text text="'  ATLA. Filodaki bir gemi. Promote olduğu için yeni düzenleme yapılıyor.'" chance="Main.$ChangesOnFleetDebug"/>

                                                        <debug_text text="'  Promoted güncelleme sonrası yeni commander aranacak.'" chance="Main.$ChangesOnFleetDebug"/>
                                                        <run_actions ref="GetBestCommander" result="$newRMCommanderKey">
                                                            <param name="RFMKey" value="$RFMKey" />
                                                            <param name="isInMainSubs" value="false" />
                                                            <param name="isIncludeExploded" value="false" />
                                                        </run_actions>
                                                        <set_value name="$dontRemovePromotedShip" exact="$fleetshipsByIdx.{$newRMCommanderKey}" chance="($newRMCommanderKey gt 0) * 100"/>
                                                        <signal_cue_instantly cue="CheckPromoteAndAssignToFleet" param="[$RFMKey, $newRMCommanderKey, $fleetshipsByIdx.{$newRMCommanderKey}]" chance="($newRMCommanderKey gt 0) * 100"/>

                                                    </do_if>
                                                    <do_else>
                                                        <append_to_list name="$RemoveProcessShipKeys" exact="$fleetshipsByComp.{event.param}"/>
                                                        <debug_text text="'updated Remove Process Ship Keys:%s'.[$RemoveProcessShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                                        <debug_text text="'  ATLA. Filodaki bir gemi. Commanderi patladığı için yeni düzenleme yapılıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                                    </do_else>
                                                </do_if>
                                                <!-- remove edilen geminin komutanı yaşıyorsa ; takedcontrol ya da manuel çıkarılmak isteniyordur -->
                                                <do_else>
                                                    <do_if value="$takedControl? and $takedControl == event.param">
                                                        <debug_text text="' ATLA. Under Player Controll. %s &lt;%s&gt;'.[$fleetshipsByComp.{$takedControl}, $takedControl]"  chance="Main.$ChangesOnFleetDebug"/>
                                                    </do_if>
                                                    <do_else>
                                                        <do_if value="$dontRemovePromotedShip? and $dontRemovePromotedShip == event.param">
                                                            <debug_text text="' ATLA. Dont Remove new Promoted. %s &lt;%s&gt;'.[$fleetshipsByComp.{$dontRemovePromotedShip}, $dontRemovePromotedShip]"  chance="Main.$ChangesOnFleetDebug"/>
                                                            <remove_value name="$dontRemovePromotedShip" />
                                                        </do_if>
                                                        <do_else>
                                                            <debug_text text="'  SPEC GÜNCELLE. Filodaki bir gemi. Kullanıcı tarafından remove dildi.'" chance="Main.$ChangesOnFleetDebug"/>
                                                            <run_actions ref="SpecRemove_ApplyRecordFleet">
                                                                <param name="RFMKey" value="$RFMKey" />
                                                                <param name="ship" value="event.param" />
                                                            </run_actions>
                                                            <debug_text text="'  Fleet Record Güncellendi (SpecRemove)..'.[]"  chance="Main.$ChangesOnFleetDebug"/>
                                                        </do_else>
                                                    </do_else>
                                                </do_else>
                                            </do_else>
                                        </do_else>
                                    </do_if>
                                    <remove_value name="$specRemove" />

                                </do_if>
                            </actions>
                        </cue>
                        
                        <cue name="NewCommanderSet" instantiate="true">
                            <conditions>
                                <check_all>
                                    <event_object_commander_set group="$Promoted"/>
                                    <check_value value="event.param != null" />
                                    <check_value value="not @$Subordinates.indexof.{event.param2}" />
                                </check_all>
                            </conditions>
                            <actions>
                                <debug_text text="'\n
                    NEW COMMANDER SET  \n
                        %s   \n
                            RFMKey : %s   (idx:%s)      ( %s ) \n
                                object (Promoted Ship)  : %s %s %s (isWreck %s) (group $Promoted = %s) \n
                                param  (New Comm)       : %s %s %s (isWreck %s)   ( %s )\n
                                param2 (Old Comm)       : %s %s %s (isWreck %s) \n
                                param3 (new Assign)     : %s
                                '.[
                                if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'LOCKED' else 'open',
                                $RFMKey, @$fleetshipsByComp.{event.object},
                                if $Subordinates.indexof.{event.object} then 'Filo İÇİNDE' else 'Filo DIŞINDA',
                                event.object, event.object.knownname, event.object.idcode, event.object.iswreck, $Promoted,
                                event.param, @event.param.knownname, @event.param.idcode, event.param.iswreck, 
                                if $Subordinates.indexof.{event.param} then
                                    '[%s] Filo İÇİNDE ! CIRCULAR CONNECT'.[$fleetshipsByComp.{event.param}]
                                else 'Filo DIŞINDA',
                                if $Subordinates.indexof.{event.param2} then
                                    '[%s] Filo İÇİNDE ! Önceki bizim commander miydi?'.[$fleetshipsByComp.{event.param2}]
                                else
                                    '',
                                @event.param2, @event.param2.knownname, @event.param2.idcode, @event.param2.iswreck,
                                event.param3
                                ]"  chance="Main.$ChangesOnFleetDebug"/>
                                
                                <do_if value="$Subordinates.indexof.{event.param} and $Subordinates.indexof.{event.object}">
                                    <debug_text text="'Has a circular commander structure, cancelling cue'.[]" />
                                    <cancel_cue cue="this" />
                                </do_if>

                                <debug_text text="' event.param.class = %s'.[event.param.class]" chance="Main.$ChangesOnFleetDebug"/>
                                <debug_text text="' event.param.fleet.iscommander = %s'.[@event.param.fleet.iscommander]" chance="Main.$ChangesOnFleetDebug"/>
                                <debug_text text="' event.param.fleet.commander = %s'.[@event.param.fleet.commander]" chance="Main.$ChangesOnFleetDebug"/>
                                <set_value name="$new_RMCommander" exact="event.param" />
                                <do_if value="event.param.isclass.ship">
                                    <set_value name="$new_RMCommander" exact="event.param.fleet.commander" />
                                    <do_if value="event.param.fleet.iscommander or $new_RMCommander == null">
                                        <set_value name="$new_RMCommander" exact="event.param" />
                                    </do_if>
                                </do_if>
                                <debug_text text="' new RMCommander = (%s) %s  isFleetCommander %s'.[@$new_RMCommander, @$new_RMCommander.name, @$new_RMCommander.fleet.iscommander]" chance="Main.$ChangesOnFleetDebug"/>

                                <run_actions ref="Get_RFMKey_From_ShipObject" result="$new_RFMKey">
                                    <param name="ship" value="$new_RMCommander" />
                                </run_actions>

                                <do_if value="$new_RFMKey gt 0" comment="RFM ye bağlanılıyor">
                                    <debug_text text="' &lt;%s&gt;(%s %s), RFM Commandera &lt;%s&gt;(%s %s) Bağlandı.'
                                    .[$PromotedCommander, $PromotedCommander.idcode, $PromotedCommander.name, $new_RMCommander, $new_RMCommander.idcode, $new_RMCommander.name]" chance="Main.$ChangesOnFleetDebug"/>
                                    <set_value name="$new_RFMCue" exact="Main.$RM_Fleets.{$new_RFMKey}.$cue" />
                                    <set_value name="$new_RFMCue.$this_rfm_connects_to_other_rfm" exact="$RFMKey" />
                                    <debug_text text="' ATLA, yeni RFMnin Add olayında SPECADD 3 ele alacak..'"  chance="Main.$ChangesOnFleetDebug"/>
                                    <remove_value name="$new_RFMCue" />
                                </do_if>
                                <do_else>
                                    <debug_text text="' &lt;%s&gt;(%s %s), RFM Olmayan Commandera &lt;%s&gt;(%s %s) Bağlandı.'
                                    .[$PromotedCommander, $PromotedCommander.idcode, $PromotedCommander.name, $new_RMCommander, $new_RMCommander.idcode, $new_RMCommander.name]" chance="Main.$ChangesOnFleetDebug"/>
                                    <do_if value="Main.$RM_Fleets.{$RFMKey}.$isLockedFleet">
                                        <debug_text text="' GÜNCELLE, Eski Filo Kilitli..'"  chance="Main.$ChangesOnFleetDebug"/>
                                        <set_value name="$specAdd2"  />
                                    </do_if>
                                    <do_else>
                                        <debug_text text="' GÜNCELLE, Eski Filo Açık..'"  chance="Main.$ChangesOnFleetDebug"/>
                                        <set_value name="$specAdd2"  />
                                    </do_else>
                                </do_else>
                                
                                
                                <debug_text text="'\n
                                new RM Commander : &lt;%s&gt; %s %s  \n
                                is RFM Commander : %s  (RFMKey : %s)
                                '.[
                                $new_RMCommander, $new_RMCommander.knownname, $new_RMCommander.idcode,
                                if $new_RFMKey > 0 then 'YES' else 'NO',
                                if $new_RFMKey? then $new_RFMKey  else 'none'
                                ]"  chance="Main.$ChangesOnFleetDebug"/>
                                <remove_value name="$new_RFMKey" />

                                <do_if value="$specAdd2?">
                                    <debug_text text="'  SPECADD 2. Kullanıcı RFM yi bir gemiye bağlıyor..'" chance="Main.$ChangesOnFleetDebug"/>
                                    <run_actions ref="SpecAdd2_ApplyRecorFleet">
                                        <param name="RFMKey" value="$RFMKey" />
                                        <param name="RMCommander" value="$new_RMCommander" />
                                        <param name="Commander" value="event.param" />
                                        <param name="oldCommander" value="event.object" />
                                    </run_actions>
                                    <debug_text text="'  SPECADD 2 GÜNCELLE. Fleet Record güncellendi ..'.[]"  chance="Main.$ChangesOnFleetDebug"/>
                                </do_if>

                                <remove_value name="$specAdd2" />
                                <remove_value name="$new_RMCommander" />
                                
                            </actions>
                        </cue>
                    </cues>
                </cue>

            </cues>
        </cue>




        <!-- v3.04 - v3.10 arası çalışma esnasında bozulan 0x0 component ve destroyedships durumlarını çapraz sorgulamak için
            (sorunun nasıl oluştuğunu bulamadım)
            real commander üreildiği halde tablo kayıtlrına eklenmedi. 
                -real commander idx tablosuna eklenmedi
                -real commander comp tablosuna ekli
                -eski promoted commanderidx kendini gösteriyor
                - eski promoted zamanı var olan gemilerin comamnderidx leri eski prmotedi göstermeye devam ediyor.
                * Sorun? muhtemelen promoted zamanı gemi bağlanırken commanderidxler güncellendi. araştır.
        -->
        <library name="CrossExamine_HeadersAndRecords" purpose="include_actions">
            <actions>

                <remove_value name="$changed" />
                <set_value name="$ERR" exact="table[]" />
                <do_for_each name="$j" valuename="$rfmEntry" in="Main.$RM_Fleets" >

                    <!-- Component ve Idx tabloları uyumsuz 
                        component tablosuna real commander key yerine promoted key işlenmiş
                    -->
                    <do_if value="($rfmEntry.$cue.$fleetshipsByIdx.keys.count != $rfmEntry.$cue.$fleetshipsByComp.keys.count) or ($rfmEntry.$cue.$fleetshipsByComp.keys.count != $rfmEntry.$cue.$Subordinates.count)">
                        <set_value name="$ERR.{1}" />
                        <debug_text text="' RF[%s].fleetshipsByIdx ve .fleetshipsByComp Tabloları Uyuşmuyor. RFM var olan hali ile kapatılıp yeniden açılacak'.[$rfmEntry.$id]" />
                        <set_value name="$entity" exact="$rfmEntry.$cue.$Entity" />
                        <signal_cue_instantly cue="Disable__RFM" param="$rfmEntry.$id" />
                        <signal_cue_instantly cue="RF_Manager" param="[$entity]" />
                        <!-- Logbook a yazdıralım-->
                    </do_if>

                    <do_if value="not $ERR.{1}?">

                        <do_if value="$rfmEntry.$cue.$fleetshipsByComp.keys.count == Main.$FleetRecords.{$rfmEntry.$id}.keys.count and @$rfmEntry.$cue.$reAssignedShips.count gt 0">
                            <debug_text text="' RF[%s]. tüm gemiler sağlam ancak reAssignedShips listesi temiz değil. Liste temizleniyor.. reAssignedShips = %s'.[$rfmEntry.$id, $rfmEntry.$cue.$reAssignedShips]" />
                            <clear_list list="$rfmEntry.$cue.$reAssignedShips" />
                        </do_if>

                        <do_for_each name="$k" valuename="$recEntry" in="Main.$FleetRecords.{$rfmEntry.$id}" >
                            
                            <!-- rfm v3.10 çalışma esnasında oluşan hataları düzeltelim-->
                            <do_if value="$recEntry.$object != null and (not $recEntry.$object.exists or $recEntry.$object.iswreck) and (not @$recEntry.$object.isconstruction)">
                                <debug_text text="' RF[%s].fleetshipsByIdx (%s) 0x0 INVALID ya da WRECK kaydı kaldırıldı ve kayıt LOST ship yapıldı.'.[$rfmEntry.$id, $recEntry.$id]" />
                                <remove_value name="$rfmEntry.$cue.$fleetshipsByIdx.{$recEntry.$id}" />
                                <set_value name="$recEntry.$object" exact="null" />
                                <set_value name="$recEntry.$idcode" exact="''" />
                                <set_value name="$recEntry.$destroyed" exact="true" />
                                <set_value name="$recEntry.$destroyedtime" exact="player.age" />
                                <debug_text text="' RF[%s][%s].RebuildCues kaydı kaldırıldı.'.[$rfmEntry.$id, $recEntry.$id]" chance="Main.$RebuildCues.{$rfmEntry.$id}.{$recEntry.$id}? * 100"/>
                                <remove_value name="Main.$RebuildCues.{$rfmEntry.$id}.{$recEntry.$id}" chance="Main.$RebuildCues.{$rfmEntry.$id}.{$recEntry.$id}? * 100"/>

                                <debug_text text="' RF[%s].destroyedShipKeys listesine (%s) eklendi. Eski liste = %s'.[$rfmEntry.$id, $recEntry.$id, $rfmEntry.$destroyedShipKeys]" chance="if $rfmEntry.$destroyedShipKeys.indexof.{$recEntry.$id} gt 0 then 0 else 100"/>
                                <append_to_list name="$rfmEntry.$destroyedShipKeys" exact="$recEntry.$id" chance="if $rfmEntry.$destroyedShipKeys.indexof.{$recEntry.$id} gt 0 then 0 else 100"/>
                                <set_value name="$changed" />
                            </do_if>
                            <!-- rfm v3.04 den gelen hataları düzeltelim-->
                            <do_if value="$recEntry.$object != null and ($recEntry.$object.exists and not $recEntry.$object.iswreck) and (not @$recEntry.$object.isconstruction) and ($rfmEntry.$destroyedShipKeys.indexof.{$recEntry.$id} gt 0)">
                                <remove_from_list name="$rfmEntry.$destroyedShipKeys" exact="$recEntry.$id" />
                                <debug_text text="' RF[%s].destroyedShipKeys listesinden [%s] çıkarıldı. Güncel liste = %s'.[$rfmEntry.$id, $recEntry.$id, $rfmEntry.$destroyedShipKeys]" />
                                <set_value name="$changed" />
                            </do_if>

                        </do_for_each>
                    </do_if>

                    <do_if value="$changed?">
                        <run_actions ref="Check_FleetLockStatus">
                            <param name="RFMKey" value="$rfmEntry.$id" />
                        </run_actions>
                    </do_if>


                    <remove_value name="$changed" />
                    <remove_value name="$ERR.{1}" />
                </do_for_each>

            </actions>
        </library>
        
        <!-- mod v 3.12 Fixed a record corruption issue caused by using the ship_names mod on rfm. This will be tested on every game load. -->
        <library name="CrossExamine_ALLRFM_OrdersNameAndIdcode" purpose="include_actions">
            <actions>
                <do_for_each name="$i" valuename="$fleet" in="Main.$RM_Fleets">
                    <set_value name="$RFMKey" exact="$fleet.$id" />
                    <set_value name="$debugchance" exact="100" />
                    <include_actions ref="CrossExamine_NameIdcodeAndOrders" />
                </do_for_each>
            </actions>
        </library>


        <library name="CrossExamine_BuildTaskStacks" purpose="include_actions">
            <actions>
                <do_for_each name="$xi" valuename="$fleet" in="Main.$RM_Fleets" >
                    <do_for_each name="$xk" valuename="$record" in="Main.$FleetRecords.{$fleet.$id}">
                        <do_if value="Main.$RebuildCues.{$fleet.$id}.{$record.$id}?">
                            <do_if value="Main.$RebuildCues.{$fleet.$id}.{$record.$id}.$cue == null">
                                <remove_value name="Main.$RebuildCues.{$fleet.$id}.{$record.$id}" />
                                <debug_text text="'Removed RebuildCues[%s][%s]'.[$fleet.$id, $record.$id]" />
                                <set_value name="$affected" />
                            </do_if>
                        </do_if>
                    </do_for_each>
                    <do_if value="$affected?">
                        <remove_value name="$affected" />
                        <run_actions ref="Check_FleetLockStatus">
                            <param name="RFMKey" value="$fleet.$id" />
                            <param name="forceCaptionUpdate" value="true" />
                        </run_actions>
                    </do_if>
                </do_for_each>

                <do_if value="player.entity.$BuildTaskStacks? and player.entity.$BuildTaskStacks.count ">
                    <do_for_each name="$stack"  in="player.entity.$BuildTaskStacks" reverse="true" counter="$i" >
                        <do_for_each name="$task"  in="Main.$BuildTaskIDs" counter="$taskindex">
                            <do_if value="$task.$RFMKey == $stack.$fleetID and $task.$ShipKey == $stack.$shipID">
                                <set_value name="$found" />
                            </do_if>
                        </do_for_each>
                        <do_if value="not $found?">
                            <remove_value name="player.entity.$BuildTaskStacks.{$i}" />
                            <debug_text text="'Removed BuildTaskStacks[%s] for [%s][%s] - - Left #BuildTaskStacks = %s'.[$i, $stack.$fleetID, $stack.$shipID, player.entity.$BuildTaskStacks.count]" />
                        </do_if>
                        <remove_value name="$found" />
                    </do_for_each>
                    <do_if value="player.entity.$BuildTaskStacks.count == 0">
                        <remove_value name="player.entity.$BuildTaskStacks" />
                    </do_if>
                </do_if>

            </actions>
        </library>

        <!-- dışardan beklenen değişkenler
            $RFMKey, $debugchance
        -->
        <library name="CrossExamine_NameIdcodeAndOrders" purpose="include_actions">
            <actions>
                
                <do_for_each name="$k" valuename="$record" in="Main.$FleetRecords.{$RFMKey}"  >
                    <set_value name="$ShipKey" exact="$record.$id" />
                    <do_if value="$record.$object">
                        <set_value name="$FleetRec" exact="$record" />
                        <set_value name="$Ship" exact="$record.$object" />
                    </do_if>
                    <do_if value="not $record.$name">
                        <do_if value="$record.$object">
                            <include_actions ref="SetFleetRec_ShipMainProps" />
                            <debug_text text="'Fixed RFM %s_%s.main properties name = \'%s\' '.[$RFMKey, $ShipKey, $record.$name]" chance="$debugchance"/>
                        </do_if>
                        <do_else>
                            <set_value name="$record.$name" exact="$record.$macro.name"/>
                            <debug_text text="'Fixed RFM %s_%s.name = \'%s\' '.[$RFMKey, $ShipKey, $record.$name]" />
                            <set_value name="$record.$idcode" exact="''"/>
                            <debug_text text="'Fixed RFM %s_%s.idcode = \'%s\' '.[$RFMKey, $ShipKey, $record.$idcode]" chance="$debugchance"/>
                        </do_else>
                    </do_if>
                    <do_if value="$record.$defaultorder.$id? and not $record.$defaultorder.$id">
                        <do_if value="$record.$object">
                            <include_actions ref="SetFleetRec_ShipOrderProps" />
                        </do_if>
                        <do_else>
                            <remove_value name="$record.$defaultorder" />
                            <remove_value name="$record.$order" />
                        </do_else>
                    </do_if>
                    <do_if value="not @$record.$sector and $ShipKey == 1">
                        <set_value name="$record.$sector" exact="if $record.$sectorid then $record.$sectorid.knownname else ''" />
                        <debug_text text="'Fixed RFM %s_%s.sector = \'%s\' '.[$RFMKey, $ShipKey, $record.$sector]" chance="$debugchance"/>
                    </do_if>
                </do_for_each>

                <set_value name="$fleet" exact="Main.$RM_Fleets.{$RFMKey}" />
                <do_if value="$fleet.$commander.$object and not $fleet.$commander.$name">
                    <set_value name="$fleet.$commander.$name" exact="Main.$FleetRecords.{$RFMKey}.{1}.$name"/>
                    <debug_text text="'Fixed RFM %s.$commander.$name = \'%s\' '.[$RFMKey, $fleet.$commander.$name]" chance="$debugchance"/>
                </do_if>
                <do_if value="$fleet.$object and not $fleet.$name">
                    <set_value name="$fleet.$name" exact="Main.$FleetRecords.{$RFMKey}.{$fleet.$shipid}.$name"/>
                    <debug_text text="'Fixed RFM %s.$name = \'%s\' '.[$RFMKey, $fleet.$name]" chance="$debugchance"/>
                </do_if>

            </actions>
        </library>

        <library name="DebugFilesReset" purpose="run_actions">
            <params>
                <param name="debugchance" default="0" />
            </params>
            <actions>
                <run_actions ref="DebugFilesReset_Main">
                    <param name="debugchance" value="$debugchance" />
                </run_actions>
                <do_for_each name="$RFMKey" in="Main.$RM_Fleets">
                    <run_actions ref="DebugFilesReset_Sub">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="debugchance" value="$debugchance" />
                    </run_actions>    
                </do_for_each>
            </actions>
        </library>
        <library name="DebugFilesReset_Main" purpose="run_actions">
            <params>
                <param name="debugchance" default="0" />
            </params>
            <actions>
                <debug_text text="'RFM PROGRAM Cue[%s]'.[this.name]" chance="$debugchance" />
                <debug_to_file text="'- Cue[%s] -  Age: %s, %s'.[this.name, player.age, player.systemtime.{'%F-%X'}]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands" />
                <!-- DEBUG : RM_FLEETS File-->
                <run_actions ref="Debug_RM_Fleets"/>
                <!-- ALL REBUILD CUES -->
                <run_actions ref="Debug_AllRebuildCues"/>
                <include_actions ref="PrintBuildTaskIDs" />
            </actions>
        </library>
        <library name="DebugFilesReset_Sub" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="debugchance" default="0" />
            </params>
            <actions>
                <set_value name="$cue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />
                <debug_text text="'RFM PROGRAM _%s_ Commander %s %s &lt;%s&gt; , Cue[%s] , '.[$RFMKey, $cue.$RMCommanderName, $cue.$RMCommanderIdCode, $cue.$RMCommander, this.name]" chance="$debugchance"/>
                <!-- DEBUG : MAIN FILE-->
                <debug_to_file text="'- RFM_%s_  - Cue[%s] - %s'.[$RFMKey, this.name, player.systemtime.{'%F-%X'}]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommandsDeep" />
                <debug_to_file text="'     Commander %s %s &lt;%s&gt; , entity = %s, %s , RFM? %s, @RFM %s'
                .[
                $cue.$RMCommanderName, $cue.$RMCommanderIdCode, $cue.$RMCommander,
                @$cue.$Entity, @$cue.$Entity.name, $cue.$Entity.$RFM?, @$cue.$Entity.$RFM 
                ]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommandsDeep"/>

                <include_actions ref="Let_RFM_LogFileNames" />

                <!-- DEBUG : Command File -->
                 <set_value name="$pText" exact="'- ' + player.systemtime.{'%F-%X'} + ' R M F - F I L E - R E S E T - - - - - - - - - - - - - - - - - - - - - - '" />
                <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command" append="false"/>
                <!-- FLEET RECORD TABLE -->
                <run_actions ref="Debug_FleetRecord">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="inserttext" value="$pText" />
                </run_actions>
                <!-- REBUILD CUES -->
                <run_actions ref="Debug_RebuildCue">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="inserttext" value="$pText" />
                </run_actions>
                <!-- DEBUG : reBuild File  -->
                <debug_to_file text="$pText" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuild" append="false"/>
                <!-- DEBUG :  reAssign Log FILE -->
                <debug_to_file text="$pText" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignment" append="false"/>
            </actions>
        </library>







        <!-- RFM CONNECTS
        -->
        <!-- YAPILACAK -->
        <!-- RFM_A RFM_C ye bağlanıyor -->
        <library name="SpecAdd3_ApplyRecorFleet" purpose="run_actions">
            <params>
                <param name="RMCommander"   comment="C fleetcommander"/>
                <param name="Commander"     comment="C ye Bağlanılan gemi"/>
                <param name="ship"          comment="A daki bağlanan gemi"/>
                <param name="C_RFMKey"      comment="C RFM"/>
                <param name="A_RFMKey"      comment="A RFM"/>
            </params>
            <actions>

                <do_if value="$C_RFMKey gt 0 and $A_RFMKey gt 0">

                    <set_value name="$C_RFMCue" exact="Main.$RM_Fleets.{$C_RFMKey}.$cue" />
                    <set_value name="$A_RFMCue" exact="Main.$RM_Fleets.{$A_RFMKey}.$cue" />
                    <set_value name="$A_FleetRecords" exact="Main.$FleetRecords.{$A_RFMKey}" />
                    <set_value name="$A_Loadouts" exact="Main.$Loadouts.{$A_RFMKey}" />
                    <set_value name="$A_RebuildCues" exact="Main.$RebuildCues.{$A_RFMKey}" />

                    <!-- 
                    <include_actions ref="Let_RFM_LogFileNames" />
                    -->
                    <do_if value="Main.$RM_Fleets.{$A_RFMKey}.$isLockedFleet">
                        <debug_text text="'Dikkat !!! RFM_%s Filoda kayıp gemiler var. Bu gemiler yeni kayda aktarılmayacak.'.[$A_RFMKey]" chance="Main.$ChangesOnFleetDebug"/>    
                    </do_if>
                    <substitute_text text="$endBy" source="Main.$RMShipCaptionTag">
                        <replace string="'$KEY$'" with="$C_RFMKey" />
                    </substitute_text>
                    <set_value name="$endBy" exact="'Added to %sFleet.'.[$endBy]"/>
                    
                    <!-- param : $RFMKey Or a list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false) ]-->
                    <signal_cue_instantly cue="Disable__RFM" param="[ $A_RFMKey, $endBy ]" />

                    <debug_text text="'Kayıplar aktarılmadan kapatıldı. Disabled Fleet %s %s'.[$A_RFMKey, $endBy]" chance="Main.$ChangesOnFleetDebug"/>

                    <debug_text text="'SPEC GÜNCELLE Yapılıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                    <run_actions ref="SpecAdd_ApplyRecordFleet">
                        <param name="RFMKey" value="$C_RFMKey" />
                        <param name="ship" value="$ship" />
                    </run_actions>
                    <debug_text text="'SPEC GÜNCELLE. Fleet %s Record Güncellendi ..'.[$C_RFMKey]"  chance="Main.$ChangesOnFleetDebug"/>


                </do_if>
                <do_else>
                    <debug_text text="'WRONG CODE SpecAdd3 uygunsuz RFM. C_RFMKey %s , A_RFMKey %s'.[$C_RFMKey, $A_RFMKey]" />
                </do_else>
            </actions>
        </library>
        <!--CONNECT SHIPS TO RFM 
            RFM olan bir Commandera dışardan bir fleet ya da gemi eklendi.
            ?Eklenen Fleet, RFM de olabilir. 
                SPECADD3 yazılmalı ?RFM ise mevcut gemi aktarımını kayıttan yaparken patlayan gemiler de dahil commanderidx ler düzenlenmeli (SPECADD2 deki gibi) 
                    ?İŞlem bitince Eski RFM ye ait kayıt ve cue ler temizlenecek
        -->
        <library name="SpecAdd_ApplyRecordFleet" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ship" />
            </params>
            <actions>
                <!-- Add olayı için gelindi. 
                        FleetRecors yapısında ilk boş shipkey bulunarak ship ve altındaki gemiler FleetRecors a eklenecek.
                        Boş kayıt yoksa kaydın sonuna eklenecek
                 -->
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>
                <set_value name="$addShipsByKeys" exact="table[]" />
                <set_value name="$rShip" exact="$ship" />

                <!-- Gelen Fleet ya da ship Eklenecek -->
                <!-- Gelen Filodaki Ship (kendisi commander de olabilir) RFMcue nin HeaderDatasına ekleme yapılacak-->
                <run_actions ref="Get_FirstFreeShipKey_From_FleetRecord" result="$shipKey">
                    <param name="FleetRecord" value="Main.$FleetRecords.{$RFMKey}" />
                </run_actions>
               
                <debug_text text="'%s &lt;%s&gt; Eklenecek, Yeni Ship Key %s
                '.[
                if $rShip.allsubordinates.count gt 0 then 'Commander' else 'Ship',
                $rShip,
                $shipKey
                ]" chance="Main.$ChangesOnFleetDebug"/>

                <set_value name="$RFMCue.$fleetshipsByComp.{$rShip}" exact="$shipKey" />
                <set_value name="$RFMCue.$fleetshipsByIdx.{$shipKey}" exact="$rShip" />
                <add_to_group groupname="$RFMCue.$Subordinates" object="$rShip"  />
                <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}" exact="table[]"/>

                <set_value name="$addShipsByKeys.{$shipKey}" exact="$rShip" />
                
                 <!-- Gelen Shipe bağlı Sub gemiler için RFMcue nin HeaderDatasına ekleme yapılacak -->
                <do_for_each name="$sub" in="$rShip.allsubordinates">
                    <do_if value="not $sub.isunit and not $sub.isclass.ship_xs">
                        <run_actions ref="Get_FirstFreeShipKey_From_FleetRecord" result="$shipKey">
                            <param name="FleetRecord" value="Main.$FleetRecords.{$RFMKey}" />
                        </run_actions>
                        <debug_text text="'Sub %s Eklenecek, Yeni Ship Key %s'.[$sub, $shipKey]" chance="Main.$ChangesOnFleetDebug"/>

                        <set_value name="$RFMCue.$fleetshipsByComp.{$sub}" exact="$shipKey" />
                        <set_value name="$RFMCue.$fleetshipsByIdx.{$shipKey}" exact="$sub" />
                        <add_to_group groupname="$RFMCue.$Subordinates" object="$sub"  />
                        <!-- $FleetRecords.{$RFMKey}.{$shipKey} daha sonra dolduracağız-->
                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}" exact="table[]"/>

                        <set_value name="$addShipsByKeys.{$shipKey}" exact="$sub" />
                    </do_if>
                </do_for_each>

                <include_actions ref="Let_RFM_LogFileNames" />

                <debug_text text="'$addShipsByKeys.keys.list = %s'.[$addShipsByKeys.keys.list]" chance="Main.$ChangesOnFleetDebug"/>

                <!-- Eklenen gemileri record tablosuna işle -->
                <do_for_each name="$shipKey" in="$addShipsByKeys.keys.list"  counter="$index">
                    <set_value name="$rShip" exact="$addShipsByKeys.{$shipKey}" />
                    
                    <run_actions ref="Set_ShipPropertiesToFleetRec">
                        <param name="FleetRec" value="Main.$FleetRecords.{$RFMKey}.{$shipKey}" />
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="Ship" value="$rShip" />
                        <param name="ShipKey" value="$shipKey" />
                        <param name="commanderidx" value="if $rShip.commander then $RFMCue.$fleetshipsByComp.{$rShip.commander} else -1" />
                    </run_actions>

                    <run_actions ref="Get_ShipLoadouts" result="$NewLoadout">
                        <param name="Ship" value="$rShip"/>
                    </run_actions>

                    <set_value name="Main.$Loadouts.{$RFMKey}.{$shipKey}" exact="$NewLoadout.{1}"/>
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}.$tWare" exact="$NewLoadout.{2}"/>
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}.$tPilot" exact="$NewLoadout.{3}"/>
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}.$tBulkCrew" exact="$NewLoadout.{4}"/>
                    
                    <set_value name="$stack" exact = "table[ 
                            $RFMKey     = $RFMKey, 
                            $ShipKey    = $shipKey, 
                            $object     = $rShip, 
                            $isGetShipPlan                = true, 
                            $isGetIndividualInstructions  = true,
                            $isGetCapacity  = true,
                            $isGetPaintMod  = true,
                            $isChangeCrewAmounts    = false,
                            $isdebug                = if $index == $addShipsByKeys.keys.list.count then (if Main.$DeepDebug == 100 then true else false) else false
                    ]"/>
                    <signal_cue_instantly cue="Get_PlanData_FromLua2" param="$stack" />

                    <remove_value name="$NewLoadout"/>

                    <set_value name="$pText" exact="'( %s ) Fleet Record Spec Added &lt;%s&gt; Age: %s, %s'
                    .[$shipKey, $rShip, player.age, player.systemtime.{'%F-%X'}]" />
                    <debug_to_file text="'RFM_%s_%s'.[$RFMKey, $pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                    <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command"/>
                    <debug_text text="$pText"  chance="Main.$ChangesOnFleetDebug"/>

                </do_for_each>


                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>

                <!-- DEBUG : RM_FLEETS File-->
                <!-- <run_actions ref="Debug_RM_Fleets"/>-->
                <!-- FLEET RECORD TABLE -->
                <do_if value="$stack?">
                    <run_actions ref="Debug_FleetRecord_NoPlan">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="inserttext" value="''" />
                    </run_actions>
                </do_if>
                <do_else>
                    <run_actions ref="Debug_FleetRecord">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="inserttext" value="''" />
                    </run_actions>
                </do_else>
            </actions>
        </library>
        <!--CONNECT RFM TO SHIP(S) or STATION  
            RFM olmayan bir  commandera  RFM olan filo eklendi  NewCommanderSet
            eklenen filonun hali hazırdaki kayıp gemileri de dikkate alınacak
            Bu iş oyunun yaptığı ekleme ile oluşan fleet yapısı üzerinden çalışmaya başlayacak
        -->
        <library name="SpecAdd2_ApplyRecorFleet" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="RMCommander" />
                <param name="Commander" />
                <param name="oldCommander" />
            </params>
            <actions>
                <!-- RFM Kapatılmadan üstğnde düzenleme yapacağız-->
                <!-- mevcut RFM (A), RFM olmayan bir gemiye (C Old) bağlandı 
                        Oluşturulacak FleetRecord daki ShipKey ler üzerinden çalışacağız.
                    A           : Eski rfm (yeni commandera eklenen) filo yapısı
                    Old_A       : A nın orijinal kaydı (patlamış gemiler de dahil)
                    Görünen_A   : A nın patlamış gemiler yüzünden düzen yapısı bozulmuş Yaşayan A yapısı
                    Kayıp_A     : A nın varsa patlamış gemileri
                    C           : C Yeni commandere  A eklendikten sonraki görünen filo yapısı
                    C Old       : A, C ye bağlanmadan önceki C filo yapısı
                    Kırpık_C    : C Yeni commanderin orijinal (bağlanma olmadan önceki) filo yapısı
                -->
                
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />

                <include_actions ref="Let_RFM_LogFileNames" />

                <!-- Filoyu yeni bir filoya eklediğimizde eklenilen yerden itibaren ekranda listeleniyor. 
                    Yeni filo, eski filonun patlamış gemilerini ve orijinal düzenini bilmiyor. 

                -->


                <!-- Yeni Filonun kaydını çıkartalım ( C )
                    C kaydı A nın sadece görünen (patlamışlar hariç) gemilerini ve şu anki düzenini kapsayacaktır
                    (* $FleetRec ve $Loadouts değişkenlerini C nin kaydı için hazırlayacağız, düzenlemelerden sonra Main. kayıtlarına ekleyeceğiz.)
                 -->
                <create_group groupname="$Promoted" />
                <set_value name="$fleetshipsByComp" exact="table[]"/>
                <set_value name="$fleetshipsByIdx" exact="table[]"/>
                <create_group groupname="$Subordinates" />

                <set_value name="$old_defaultorder" exact="Main.$FleetRecords.{$RFMKey}.{1}.$defaultorder" />
                <set_value name="$old_orders" exact="Main.$FleetRecords.{$RFMKey}.{1}.$orders" />
                <set_value name="$old_sector" exact="Main.$FleetRecords.{$RFMKey}.{1}.$sector" />
                <set_value name="$old_sectorid" exact="Main.$FleetRecords.{$RFMKey}.{1}.$sectorid" />

                <!-- Sanal FleetRecords kaydı açacağız, tShipPlan aktarabilmek için  -->
                <run_actions ref="Get_New_RFMKey" result="$TemplateRFMKey"/>

                <!-- result="$Data  = [$HeaderData, $FleetRec, $Loadouts]"-->
                <!-- SendPlanData true yaparsak buradan çıkarken tabloalrı sileceğiz ve luadan cevap geç geleceği için fleetrec tablosunu bulamayacak 
                    bu yüzden işimiz bitince en son luadan Plandatayı isteyeceğiz -->
                <run_actions ref="CreateAndGet_Records_By_Commander" result="$Data">
                    <param name="RFMKey" value="$TemplateRFMKey" />
                    <param name="Commander" value="$RMCommander" />
                    <param name="SendPlanData" value="false" />
                </run_actions>
                <set_value name="$HeaderData" exact="$Data.{1}"/>
                <!-- $HeaderData içindekileri al (grp $Promoted , tbl $fleetshipsByComp, tbl $fleetshipsByIdx, grp $Subordinates ) -->
                <include_actions ref="Let_HeaderData_To_HeaderValues" />
                <set_value name="$FleetRec" exact="$Data.{2}" />
                <set_value name="$Loadouts" exact="$Data.{3}" />


                <set_value name="$pText" exact="'Setting to New Commander %s %s %s&lt;%s&gt; Old Commander %s %s&lt;%s&gt;  Age: %s, %s  [Spec2]'
                .[
                if $RMCommander.realclass == class.station then 'Station' else 'Ship',
                $RMCommander.knownname, $RMCommander.idcode, $RMCommander, $oldCommander.knownname, $oldCommander.idcode, $oldCommander, player.age, player.systemtime.{'%F-%X'}]" />
                <debug_to_file text="'RFM_%s %s'.[$RFMKey, $pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command"/>
                <debug_text text="$pText"  chance="Main.$ChangesOnFleetDebug"/>

                <!-- C içindeki Görünen_A yı bulacağız. 
                        (* Henüz A sadece görünen gemileri kapsıyor )
                        (* Kayıp_A gemi record bilgilerini daha sonra orijinal A kaydından alacağız )
                -->
                <!--   C nin oluşturulan FleetRec tablosundan eski commander ve ona bağlı görünen tüm gemilerin (içinde patlamış olanlar yoktur)
                    listesini bulalım (Görünen_A) = $Old_Added_FleetShipKeys -->
                <set_value name="$oldCommanderKey"  exact="$fleetshipsByComp.{$oldCommander}" />
                <run_actions ref="Get_AllSubKeys_From_FleetRecord" result="$Old_Added_FleetShipKeys">
                    <param name="FleetRecord" value="Main.$FleetRecords.{$TemplateRFMKey}" />
                    <param name="CommanderKey" value="$oldCommanderKey" />
                </run_actions>
                <append_to_list name="$Old_Added_FleetShipKeys" exact="$oldCommanderKey" />
                <debug_text text="'Eski Commander ve subordinateleri, shipKey list = %s'.[$Old_Added_FleetShipKeys]" chance="Main.$ChangesOnFleetDebug"/>

                <!-- Kırpık_C oluşturalım; 
                        (C şu hali ile hem kendi C_Old hem de Görünen_A yı kapsıyor.
                        Bu yüzden eklenen fleetin (Görünen_A) mevcut kayıtlarını C içinden temizlememiz gerekiyor. 
                        ( Yeni commanderin orijinal yapısı Kırpık_C yi bulacağız)
                            ( Sonra, eski RFM deki kaydı (Old_A ölülerle birlikte olan kayıt) elimizdeki kaydın (Kırpık_C) sonuna ekleyeceğiz.)
                -->
                <debug_text text="'Main.$FleetRecords.{$TemplateRFMKey}.keys.list = %s'.[Main.$FleetRecords.{$TemplateRFMKey}.keys.list]" chance="Main.$ChangesOnFleetDebug"/>
                <do_for_each name="$tShipKey" in="Main.$FleetRecords.{$TemplateRFMKey}.keys.list"  >
                    <set_value name="$tShip" exact="@$fleetshipsByIdx.{$tShipKey}" />
                    <do_if value="$Old_Added_FleetShipKeys.indexof.{$tShipKey}">
                        <remove_value name="$fleetshipsByComp.{$tShipKey}" />
                        <remove_value name="$fleetshipsByIdx.{$tShipKey}" />
                        <remove_from_group group="$Subordinates" object="$tShip" />
                        <remove_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$tShipKey}" />
                        <remove_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$tShipKey}" />
                        <remove_value name="$tShip" />
                    </do_if>
                    <do_else>
                        <set_value name="$pText" exact="'( %s ) of the new commanders fleet ships ShipKey value in the new RecordFleet  &lt;%s&gt;  [%s %s]'
                        .[$tShipKey, if $tShip != null then $tShip else 'DEAD',
                        Main.$FleetRecords.{$TemplateRFMKey}.{$tShipKey}.$name, 
                        Main.$FleetRecords.{$TemplateRFMKey}.{$tShipKey}.$idcode
                        ]" />
                        <debug_to_file text="'RFM_%s_%s'.[$RFMKey, $pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                        <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command"/>
                        <debug_text text="$pText"  chance="Main.$ChangesOnFleetDebug"/>
                    </do_else>
                </do_for_each>



                <!-- Old_A RFM kaydını, Kırpık_C ye ekleyeceğiz,
                        (* Aktarılacak olan Old_A RFM kaydı  Kırpık_C nin Son kaydından 1 sonraya eklenecek )
                -->
                <debug_text text="'Main.$FleetRecords.{$TemplateRFMKey}.keys.list = %s'.[Main.$FleetRecords.{$TemplateRFMKey}.keys.list]" chance="Main.$ChangesOnFleetDebug"/>

                <set_value name="$startShipKey" exact="Main.$FleetRecords.{$TemplateRFMKey}.keys.list.last" />
                <set_value name="$newShipKey" exact="$startShipKey" />
                <set_value name="$destroyedShipKeys" exact="[]" />
                <set_value name="$rebuildcues" exact="table[]" />

                <do_for_each name="$tShipKey" in="Main.$FleetRecords.{$RFMKey}.keys.list"  >
                    <set_value name="$tShip" exact="@$RFMCue.$fleetshipsByIdx.{$tShipKey}"/>
                    
                    <set_value name="$newShipKey" operation="add" exact="1" />
                    <set_value name="$pText" exact="'    [%s] Changed Key = = = = = New ShipKey [%s]'
                    .[$tShipKey, $newShipKey]" />

                    <do_if value="$tShip != null">
                        <set_value name="$fleetshipsByComp.{$tShip}" exact="$newShipKey" />
                        <set_value name="$fleetshipsByIdx.{$newShipKey}" exact="$tShip" />
                        <add_to_group groupname="$Subordinates" object="$tShip"/>
                        <!-- commander zaten direk add olacak. daha sonra remove add olaylarında sadece sublar için skipp yapacak -->
                    </do_if>

                    <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}" exact="Main.$FleetRecords.{$RFMKey}.{$tShipKey}" />
                    <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}.$id" exact="$newShipKey" />
                    <set_value name="Main.$Loadouts.{$TemplateRFMKey}.{$newShipKey}" exact="Main.$Loadouts.{$RFMKey}.{$tShipKey}" />
                    

                    <!-- Güncellenmesi Gerekenler-->
                    <!--    eklenen gemilerin commanderidx Keyleri ve ilgili assignment, subordinategroupid bilgileri değişecek-->
                    <set_value name="$CommanderKey"  exact="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$commanderidx" />
                    <set_value name="$newCommanderKey"  exact="$CommanderKey + $startShipKey" />
                    <do_if value="$tShipKey == 1">
                        <set_value name="$newCommanderKey"  exact="$fleetshipsByComp.{$Commander}" />
                        <set_value name="$oldCommanderNewKey" exact="$newShipKey" />
                        <run_actions ref="GetNameSubordinateGroupId" result="$subordinategrouptext">
                            <param name="subordinategroupid" value="$oldCommander.subordinategroupid" />
                        </run_actions>
                        <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}.$assignment" exact="$oldCommander.assignment" />
                        <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}.$subordinategroupid" exact="$oldCommander.subordinategroupid" />
                        <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}.$subordinategrouptext" exact="$subordinategrouptext" />

                    </do_if>
                    <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}.$commanderidx" exact="$newCommanderKey" />

                    <!-- Destroyed Ships-->
                    <do_if value="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.indexof.{$tShipKey}">
                        <remove_from_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$tShipKey" />
                        <append_to_list name="$destroyedShipKeys" exact="$newShipKey" />
                        <debug_text text="$pText + ' for destroyedShipKeys old=%s new=%s'.[Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys, $destroyedShipKeys]"  chance="Main.$ChangesOnFleetDebug"/>
                    </do_if>
                    
                    <!-- *** İlerde sorunlar oluşursa, alternatif olarak beklemedeki buildleri kapatıp işleme öyle devam edelim-->
                    <!-- Rebuild takibi yapan cuenin içindekini eski key değerini yeni key değeri ile değişiyoruz-->
                    <do_if value="Main.$RebuildCues.{$RFMKey}.keys.list.indexof.{$tShipKey}">
                        <set_value name="$rebuildcues.{$newShipKey}" exact="Main.$RebuildCues.{$RFMKey}.{$tShipKey}" />
                        <set_value name="$rebuildCue" exact="Main.$RebuildCues.{$RFMKey}.{$tShipKey}.$cue"/>
                        <set_value name="$rebuildCue.$ShipIDX" exact="$newShipKey" />
                        <set_value name="$rebuildCue.$ShipKey" exact="$newShipKey" />
                        <remove_value name="Main.$RebuildCues.{$RFMKey}.{$tShipKey}" />
                        <debug_text text="$pText + ' for RebuildCue'"  chance="Main.$ChangesOnFleetDebug"/>
                        <debug_to_file text="'%s'.[$pText]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuild"/>
                    </do_if>
                    <!-- BuildtaskID listesindeki keyleri de düzeltelim-->
                    <do_for_each name="$task" in="Main.$BuildTaskIDs">
                        <do_if value="($task.$RFMKey == $RFMKey and $task.$ShipKey == $tShipKey) and not $task.$changed?">
                            <debug_text text="$pText + ' for BuildTaskIDs'"  chance="Main.$ChangesOnFleetDebug"/>
                            <set_value name="$task.$ShipKey" exact="$newShipKey" />
                            <set_value name="$task.$changed"  />
                            <break />
                        </do_if>
                    </do_for_each>
                    <set_value name="$eText" exact="' ( %s ) OldShipKey[%s] &lt;%s&gt;  Changed to NewShipKey[%s]  [%s %s]'
                    .[$newShipKey, $tShipKey, 
                    if $tShip != null then $tShip else 'DEAD', $newShipKey, 
                    Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}.$name, 
                    Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}.$idcode
                    ]" />
                    <debug_to_file text="'RFM_%s_%s'.[$RFMKey, $eText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                    <debug_to_file text="$eText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command"/>
                    <debug_text text="$eText"  chance="Main.$ChangesOnFleetDebug"/>

                </do_for_each>

                <!-- Veriler Aktarım için Hazır. -->
                <!--    Destroy edilmiş gemi listesi ve rebuilds tablolarını güncelliyoruz-->
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$destroyedShipKeys" />
                <set_value name="Main.$RebuildCues.{$RFMKey}" exact="$rebuildcues" />
                <!--    Fleets tablosu güncelleniyor-->
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$name" exact="$RMCommander.name" />
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$object" exact="$RMCommander" />
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$isStation" exact="$RMCommander.realclass == class.station" />
                

                <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{1}.$defaultorder"  exact="$old_defaultorder" />
                <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{1}.$orders"        exact="$old_orders" />
                <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{1}.$sectorid"      exact="$old_sectorid" />
                <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{1}.$sector"        exact="$old_sector" />
                <!-- 
                <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{1}.$sectorid" exact="$RMCommander.sector" />
                <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{1}.$sector" exact="$RMCommander.sector.knownname" />
                -->
                <!--    düzenlenmiş C kaydı sisteme ekleniyor-->
                <set_value name="Main.$FleetRecords.{$RFMKey}" exact="Main.$FleetRecords.{$TemplateRFMKey}" />
                <set_value name="Main.$Loadouts.{$RFMKey}" exact="Main.$Loadouts.{$TemplateRFMKey}"/>

                <!-- Çalışan cue nin Eski RFM Header değerlerini güncelliyoruz -->
                <clear_group group="$RFMCue.$Promoted" />
                <add_to_group groupname="$RFMCue.$Promoted" object="$Promoted.list.{1}"/>
                
                <set_value name="$RFMCue.$fleetshipsByComp" exact="$fleetshipsByComp" />
                <set_value name="$RFMCue.$fleetshipsByIdx" exact="$fleetshipsByIdx" />

                <clear_group group="$RFMCue.$Subordinates" />
                <do_all exact="$Subordinates.count" counter="$i">
                    <add_to_group groupname="$RFMCue.$Subordinates" object="$Subordinates.list.{$i}" />
                </do_all>

                <!-- record yapısı .tShipPlan propertysi için denetlenecek -->
                <debug_text text="'Fixing tShipPlan on RFM_%s all Records Table '.[$RFMKey]" />
                <!-- { RFMKey = RFMKey , ShipKey = ShipKey [, Record = Main.$FleetRecords.{$RFMKey}.{$ShipKey}][, isFleetCheck = false][, FleetRecord = Main.$FleetRecords.{$RFMKey}][, isdebug = true] }-->
                <signal_cue_instantly cue="Fix_Ship_tShipPlan2" param="table[
                    $RFMKey = $RFMKey, 
                    $isFleetCheck = true
                ]" />

                <!-- Template tablolarını siliyoruz -->
                <remove_value name="Main.$FleetRecords.{$TemplateRFMKey}" />
                <remove_value name="Main.$Loadouts.{$TemplateRFMKey}" />

                
                <debug_text text="'Yeni Commander Promote edilecek..%s %s %s'.[$Commander.knownname, $Commander.idcode, $Commander]" />
                <!-- Yeni Commander Promote ediliyor-->
                <run_actions ref="PromoteToCommander">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="Commander" value="$RMCommander" />
                    <param name="oldCommander" value="$oldCommander" />
                    <param name="forceCaptionUpdate" value="true" />
                </run_actions>
                <set_value name="$RFMCue.$RMCommander" exact="$RMCommander" />

                <!-- Yeni fleetin kilit sistemi kontrol ediliyor-->
                <!-- Promote commander rutini içinde check ediliyor , kaldırılıp kaldırılmayacağı Daha sona test edilecek
                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="forceCaptionUpdate" value="true" />
                </run_actions>
                -->

                <!-- DEBUG :  -->
                <include_actions ref="PrintBuildTaskIDs" />
                <!-- FLEET RECORD TABLE -->
                <run_actions ref="Debug_FleetRecord">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>
                <!-- REBUILD CUES -->
                <set_value name="$pText" exact="'    SET NEW Commander,    Age: %s, %s'.[player.age, player.systemtime.{'%F-%X'}]" />
                <run_actions ref="Debug_RebuildCue">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="inserttext" value="$pText" />
                </run_actions>
                <!-- ALL REBUILD CUES -->
                <run_actions ref="Debug_AllRebuildCues"/>
            </actions>
        </library>
        <!-- REMOVE SHIPS FROM RFM
        -->
        <library name="SpecRemove_ApplyRecordFleet" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ship" />
            </params>
            <actions>
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>
                <set_value name="$CommanderKey" exact="$RFMCue.$fleetshipsByComp.{$ship}"/>
                <run_actions ref="Get_AllSubKeys_From_FleetRecord" result="$AllSubKeys">
                    <param name="FleetRecord" value="Main.$FleetRecords.{$RFMKey}" />
                    <param name="CommanderKey" value="$CommanderKey"/>
                </run_actions>
                <append_to_list name="$AllSubKeys" exact="$CommanderKey" />
                <run_actions ref="Sort_ListKeys" result="$AllSubKeys">
                    <param name="list" value="$AllSubKeys" />
                </run_actions>

                <include_actions ref="Let_RFM_LogFileNames" />

                <do_for_each name="$removeKey" in="$AllSubKeys" reverse="true" >
                    <set_value name="$removeShip" exact="@$RFMCue.$fleetshipsByIdx.{$removeKey}" />
                    <do_if value="$removeShip != null">
                        <remove_from_group group="$RFMCue.$Subordinates" object="$removeShip" />
                        <remove_value name="$RFMCue.$fleetshipsByComp.{$removeShip}" />
                        <remove_value name="$RFMCue.$fleetshipsByIdx.{$removeKey}" />
                    </do_if>
                    <remove_value name="Main.$FleetRecords.{$RFMKey}.{$removeKey}" />
                    <remove_value name="Main.$Loadouts.{$RFMKey}.{$removeKey}" />

                    <set_value name="$pText" exact="'( %s ) Fleet Record Spec Removed &lt;%s&gt; Age: %s, %s'
                    .[$removeKey, if $removeShip != null then $removeShip else 'DEAD', player.age, player.systemtime.{'%F-%X'}]" />
                    <debug_to_file text="'RFM_%s_%s'.[$RFMKey, $pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                    <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command"/>
                    <debug_text text="$pText"  chance="Main.$ChangesOnFleetDebug"/>

                    <!-- Güncellenecek Olan Değişkenler-->
                    <!-- Destroyed Ships-->
                    <do_if value="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.indexof.{$removeKey}">
                        <remove_from_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$removeKey" />
                    </do_if>
                    <!-- Rebuild takibi yapan cuenin içindekini key i yeni key değeri ile değişiyoruz-->
                    <do_if value="Main.$RebuildCues.{$RFMKey}.keys.list.indexof.{$removeKey}">
                        <!-- <set_value name="$rebuildCue" exact="Main.$RebuildCues.{$RFMKey}.{$removeKey}.$cue"/>-->
                        <!-- <set_value name="$rebuildCue.$ShipIDX" exact="-1" comment="filo kaydından çıkarma anlamında rebuildship cue içinde takip edilecek"/>-->
                        <remove_value name="Main.$RebuildCues.{$RFMKey}.{$removeKey}" />
                        <set_value name="$pText" exact="'( %s ) Filo kaydından çıkarıldığı için Üretim Kaydı Silindi. Fleet Record Spec Remove Changed   Age: %s, %s'
                        .[$removeKey, player.age, player.systemtime.{'%F-%X'}]" />
                        <debug_to_file text="'%s'.[$pText]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuild"/>
                        <debug_text text="$pText"  chance="Main.$ChangesOnFleetDebug"/>
                    </do_if>

                </do_for_each>

                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>

                <!-- DEBUG :  -->
                <!-- FLEET RECORD TABLE -->
                <run_actions ref="Debug_FleetRecord_NoOthers">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>
                <!-- REBUILD CUES -->
                <set_value name="$pText" exact="'    Spec Remove &lt;%s&gt;,  Age: %s, %s'.[$ship, player.age, player.systemtime.{'%F-%X'}]" />
                <run_actions ref="Debug_RebuildCue">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="inserttext" value="$pText" />
                </run_actions>
                <!-- ALL REBUILD CUES -->
                <run_actions ref="Debug_AllRebuildCues"/>

            </actions>
        </library>






        <!-- PROMOTE
        -->
        <!-- IN :   RFMKey          , RM Fleet numarası
                    Entity       , promote si kaldırılacak rmcommander entity si
        -->
        <library name="PromoteEntity" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="Entity" />
            </params>
            <actions>
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>

                <set_value name="$Entity.$RFM" exact="true"/>
                
                <set_value name="$RFMCue.$Entity" exact="$Entity"/>
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$entity" exact="$Entity" />

                <run_actions ref="GetPilotTable_From_Entity" result="Main.$FleetRecords.{$RFMKey}.{1}.$tPilot">
                    <param name="entity" value="$Entity" />
                </run_actions>

                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>

                <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                    $fleetID = $RFMKey,
                    $shipID = 1,
                    $Record = Main.$FleetRecords.{$RFMKey}.{1},
                    $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                    $description = 'Promoted Entity'
                ]" chance="player.entity.$Flag_RFM_Menu? * 100"/>

            </actions>
        </library>
        <!-- IN :   RFMKey          , RM Fleet numarası
                    Entity       , promote si kaldırılacak rmcommander entity si
        -->
        <library name="UnPromoteEntity" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="Entity" />
            </params>
            <actions>
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>

                <do_if value="$Entity != $RFMCue.$Entity">
                    <remove_value name="$Entity.$RFM" />
                </do_if>
                <do_if value="$RFMCue.$Entity.$RFM?">
                    <remove_value name="$RFMCue.$Entity.$RFM" />
                </do_if>

                <set_value name="$RFMCue.$Entity" exact="null"/>
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$entity" exact="null" />

                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>

                <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                        $fleetID = $RFMKey,
                        $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                        $description = 'Unpromoted Entity'
                    ]" chance="player.entity.$Flag_RFM_Menu? * 100"/>

            </actions>
        </library>
        <!-- IN :   RFMKey          , RM Fleet numarası
                    Commander         , Promote edilecek obje
                    oldCommander         , Promote durumu elinden alınacak  obje
        -->
        <library name="PromoteToCommander" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="Commander" />
                <param name="oldCommander" default="null" />
                <param name="forceCaptionUpdate" default="false" />
            </params>
            <actions>
                <!-- -->
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>
                <do_if value="$oldCommander != null">
                    <set_value name="$oShipId" exact="0" />
                    <do_for_each name="$entryKey" valuename="$entry" in="Main.$FleetRecords.{$RFMKey}">
                        <do_if value="$entry.$object == $oldCommander">
                            <set_value name="$oShipId" exact="$entryKey" />
                            <break />
                        </do_if>
                    </do_for_each>
                    <debug_text text="'  Old Commander (state=%s) %s in records.  [ID : %s] %s'.[@$oldCommander.state, (if $oShipId gt 0 then 'found' else 'No have'), $oShipId, ( if $oShipId == Main.$RM_Fleets.{$RFMKey}.$shipid then 'Matching with fleet.shipid' else 'MISSMATCH [Fleets.shipid : %s]'.[Main.$RM_Fleets.{$RFMKey}.$shipid]) ]" chance="100"/>
                    <do_if value="$oShipId != Main.$RM_Fleets.{$RFMKey}.$shipid">
                        <!-- TEST EDİLECEK : RFM bir gemiye bağlandı ve yeni gemi promote edilecek-->
                        <!-- <set_value name="$oShipId" exact="Main.$RM_Fleets.{$RFMKey}.$shipid" />-->
                        <debug_text text="'RFM, yeni bir gemiye bağlandığı için eski fleet içindeki commander shipID kaydı değişik. Do nothing (@_Fikret)'" />
                    </do_if>
                    <run_actions ref="Clear_ShipCaption">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="ship" value="$oldCommander" />
                        <param name="ShipKey" value="$oShipId" />
                        <param name="debugchance" value="Main.$DeepDebug" />
                    </run_actions>
                    <do_if value="$RFMCue.$Entity != null">
                        <remove_value name="$RFMCue.$Entity.$RFM" />
                    </do_if>

                    <!-- Devranılan ayarları temizleyelim -->
                    <!-- eski promoted commanderin order bilgilerini objeye geri setleyeceğiz -->
                    <do_if value="$oldCommander.state != componentstate.wreck">
                        
                        <set_value name="$oldCommanderorders" exact="$oldCommander.orders" chance="0"/>
                        
                        <cancel_all_orders object="$oldCommander" />
                        <run_actions ref="md.Upb_Library_Orders.Set_DefaultorderAndOrdersTable_To_Ship" >
                            <param name="ship" value="$oldCommander" />
                            <param name="commander" value="$Commander" />
                            <param name="defaultorder" value="Main.$FleetRecords.{$RFMKey}.{$oShipId}.$defaultorder" />
                            <param name="orders" value="Main.$FleetRecords.{$RFMKey}.{$oShipId}.$orders" />
                        </run_actions>
                        
                        <!-- eski promoted commandere her zaman kendi ayarlarını geri yükleyeceğizz.
                            individual resupply ayarını objeye geri setleyeceğiz -->
                        <run_actions ref="Set_IndividualInstuctions_To">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="object" value="$oldCommander" />
                            <param name="itself" value="true" />
                            <param name="debugchance" value="Main.$DeepDebug" />
                        </run_actions>
                    </do_if>
                </do_if>
                
                <set_value name="$Entity" exact="null"/>
                <set_value name="$xShipId" exact="0" />
                <do_if value="$Commander != null">
                    <do_for_each name="$entryKey" valuename="$entry" in="Main.$FleetRecords.{$RFMKey}">
                        <do_if value="$entry.$object == $Commander">
                            <set_value name="$xShipId" exact="$entryKey" />
                            <break />
                        </do_if>
                    </do_for_each>
    
                    <do_if value="$Commander.isrealclass.station">
                        <do_if value="$Commander.tradenpc.exists">
                            <set_value name="$Entity" exact="$Commander.tradenpc"/>
                        </do_if>
                    </do_if>
                    <do_else>
                        <do_if value="$Commander.pilot == player.entity">
                            <set_value name="$Entity" exact="$Commander.assignedcontrolentity.{controlpost.aipilot}"/>
                        </do_if>
                        <do_else>
                            <set_value name="$Entity" exact="$Commander.assignedpilot"/>
                        </do_else>
                    </do_else>
                    <do_if value="$Entity != null">
                        <set_value name="$Entity.$RFM" exact="true"/>
                    </do_if>
                </do_if>
                <debug_text text="'  New Commander &lt;%s&gt; %s in records.  [ID : %s]'.[$Commander, (if $xShipId gt 0 then 'found' else 'No have'), $xShipId]" chance="Main.$DebugChance"/>

                <!-- Cue içindeki değişkenleri güncelliyoruz -->
                <set_value name="$RFMCue.$Entity" exact="$Entity"/>
                <set_value name="$RFMCue.$PromotedCommander" exact="$Commander"/>
                <clear_group group="$RFMCue.$Promoted" />
                <do_if value="$Commander != null">
                    <add_to_group groupname="$RFMCue.$Promoted" object="$Commander"/>
                </do_if>

               
                <run_actions ref="Get_NoneColor_ShipName" result="$name">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="ship" value="$Commander" />
                    <param name="ShipKey" value="$xShipId" />
                </run_actions>
                <set_value name="$RFMCue.$RMCommanderName" exact="$name"/>
                <set_value name="$RFMCue.$RMCommanderIdCode" exact="if $Commander != null then $Commander.idcode else ''"/>
                
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$object" exact="$Commander"/>
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$name" exact="$name"/>
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$shipid" exact="$xShipId"/>
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$entity" exact="$Entity"/>

                <do_if value="$Commander != null">
                    <!-- Yeni commandera  rfmcommanderdan setleyeceğiz -->
                    <cancel_all_orders object="$Commander" />

                    <!-- Yeni commandera order bilgisini -->
                    <do_if value="$Commander.isrealclass.ship">
                        <debug_text text="'  Transfering DefaultOrder information to new commander. %s %s'.[$Commander.knownname, $Commander.idcode]" chance="Main.$DebugChance"/>
                        <run_actions ref="Set_Defaultorder_To_RMCommander">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                        
                        <do_if value="$oldCommanderorders?">
                            <do_for_each name="$order" in="$oldCommanderorders">
                                <debug_text text="'  Getting Order %s from old commander.'.[$order.id]" chance="Main.$DebugChance"/>
                                <run_actions ref="md.Upb_Library_Orders.Get_ConvertedOrderTable" result="$resulttable">
                                    <param name="order" value="$order" />
                                    <param name="ship"  value="$oldCommander" />
                                </run_actions>
                                <set_value name="$recordedorder" exact="$resulttable.{1}"/>
                                <debug_text text="'    Transfering Order %s to new commander.'.[$recordedorder.$id]" chance="Main.$DebugChance"/>
                                <run_actions ref="md.Upb_Library_Orders.CreteOrder_To_Ship">
                                    <param name="ship" value="$Commander" />
                                    <param name="recordedorder" value="$recordedorder" />
                                    <param name="default" value="false" />
                                </run_actions>
                            </do_for_each>
                            <cancel_all_orders object="$oldCommander" />
                        </do_if>
                    </do_if>
                    <!-- yeni commandera her zaman record (1) individual resupply ayarını atayacağız -->
                    <run_actions ref="Set_IndividualInstuctions_To">
                        <param name="object" value="$Commander" />
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="itself" value="false" />
                        <param name="debugchance" value="Main.$DeepDebug" />
                    </run_actions>
                </do_if>

                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="forceCaptionUpdate" value="$forceCaptionUpdate" />
                </run_actions>

                <debug_text text="'RFM_%s [%s] Promoted %s Cue.PromotedCommander = %s, .grp Promoted = %s, .Entity'.[$RFMKey, $xShipId, $name, $RFMCue.$PromotedCommander, $RFMCue.$Promoted, $RFMCue.$Entity]" chance="Main.$DeepDebug"/>

                <!-- DEBUG : MainLog File-->
                <set_value name="$pText" exact="'  RFM_%s_ PROMOTED TopLevelCommander &lt;%s&gt; %s %s (%s),  Age: %s, %s'.[$RFMKey, $Commander, @$Commander.name, @$Commander.idcode, @$Commander.sector.knownname, player.age, player.systemtime.{'%F-%X'}]" />
                <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands" />
                <!-- DEBUG : RM_FLEETS File-->
                <run_actions ref="Debug_RM_Fleets">
                    <param name="inserttext" value="$pText" />
                </run_actions>
            </actions>
        </library>








        <!-- HeaderData değişkenlerinden filodaki kayıp gemi durumuna bakar ve lock durumu fleetin önceki kaydından farklı ise filo adını günceller
                *** $isLockedFleet ataması Sadece burda yapılmalı
            IN : RFMKey
            OUT: return value islocked status (gerekli ise kullanmak için)-->
        <library name="Check_FleetLockStatus" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="forceCaptionUpdate" default="false" />
                <param name="batchprocessing" default="false" />
                <param name="isdebug" default="true"/>
            </params>
            <actions>

                <set_value name="$testdebugchance" exact="0" />
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>

                <set_value name="$FIndx" exact="$RFMCue.$fleetshipsByIdx.clone"/>
                
                <set_value name="$oldLockStatus" exact="Main.$RM_Fleets.{$RFMKey}.$isLockedFleet"/>
                

                <!-- Önce Hızlı bir kontrol yapalım -->
                <do_if value="$FIndx.keys.count == Main.$FleetRecords.{$RFMKey}.keys.count">
                    <set_value name="$islocked" exact="false" />
                </do_if>
                <do_else>
                    <set_value name="$islocked" exact="true" />
                </do_else>
                
                <!-- Gemi commanderları üzerinden check ediyoruz -->
                <do_if value="not $islocked">
                    <do_for_each name="$idx" in="Main.$FleetRecords.{$RFMKey}.keys.list">
                        <do_if value="$idx gt 1">
                            <set_value name="$rCommIdx" exact="Main.$FleetRecords.{$RFMKey}.{$idx}.$commanderidx" />
                            <set_value name="$rComm" exact="@$FIndx.{$rCommIdx}" />
                            <set_value name="$ship" exact="@$FIndx.{$idx}" />
                            
                            <debug_text text="'\n
                            [ %s ] Checked RFM[%s] subs[%s] [&lt;%s&gt;%s %s] commanders..       \n
                                Ship.commander    : &lt;%s&gt;%s %s   \n
                                recCommander (%s)  : &lt;%s&gt;%s %s   
                            '.[
                            (if @$ship.commander == null or $rComm == null then 'Locked' else
                                if $ship.commander != $rComm then 'Locked' else 'Pass'),
                            $RFMKey, $idx, @$ship, @$ship.knownname, @$ship.idcode,
                            @$ship.commander, @$ship.commander.knownname, @$ship.commander.idcode,
                            @$rCommIdx, @$rComm, @$rComm.knownname, @$rComm.idcode
                            ]" chance="$testdebugchance"/>
                            
                            <do_if value="@$ship.commander == null or $rComm == null">
                                <set_value name="$islocked" exact="true" />
                                <debug_text text="'        RFM_%s LOCK  Status Locked  (   none  )  %s.commander : %s, $rComm = %s'.[$RFMKey, $ship, $ship.commander, $rComm]" chance="Main.$FleetLockStatusDebug"/>
                                <break />
                            </do_if>
                            <do_if value="$ship.commander != $rComm" comment="istasyonda iken commandere bağlanma emri verilmiş ise istasyondan çıkmadan order geçerli olmayacaktır.">
                                <do_if value="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.count == 0">
                                    <set_value name="$orders" exact="[]" />
                                    <do_for_each name="$order" in="$ship.orders">
                                        <append_to_list name="$orders" exact="$order.id" />
                                    </do_for_each>
                                    <debug_text text="'        RFM_%s_%s PASSING  (destroyed ships count = 0)  (saw different commanders ship.commander = %s %s %s &lt;&gt; recComm = %s %s %s) ship. order = %s , orders = %s'.[$RFMKey, $idx, $ship.commander.knownname, $ship.commander.idcode, $ship.commander, $rComm.knownname, $rComm.idcode, $rComm, $ship.order.id, $orders]" chance="Main.$FleetLockStatusDebug"/>
                                    <continue />
                                </do_if>
                                <do_else>
                                    <set_value name="$islocked" exact="true" />
                                    <debug_text text="'        RFM_%s LOCK  Status Locked  (Different)  %s.commander : %s, $rComm = %s'.[$RFMKey, $ship, $ship.commander, $rComm]" chance="Main.$FleetLockStatusDebug"/>
                                    <break />
                                </do_else>
                            </do_if>

                        </do_if>
                    </do_for_each>
                    <do_if value="not $islocked">
                        <debug_text text="'        RFM_%s LOCK  Status Open                [%s] to [%s]'.[$RFMKey, $oldLockStatus, $islocked]" chance="Main.$FleetLockStatusDebug"/>
                    </do_if>
                </do_if>
                <do_else>
                    <debug_text text="'        RFM_%s LOCK  Status Locked                old = %s, new = %s'.[$RFMKey, $oldLockStatus, $islocked]" chance="Main.$FleetLockStatusDebug"/>
                </do_else>
                
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$isLockedFleet" exact="$islocked" />


                <!-- RFM Alert durum testi yapıalcak
                    alert seviyesi 1-Sarı, 2-Turuncu 3-Kırmızı
                    3 den 1 e doğru kontrol yapacağız , aldığımız herhangi bir değerde kontrolü bırakacağız
                    (LOCKED = FALSE)
                    0 - normal 
                    (LOCKED = TRUE)
                    * patlamış gemiler için alert durumu ortaya çıkacak 
                    1 - istasyon bulup, istasyonda sırada bekleyenler
                        rebuild cue kaydı var build.isprocessing = false
                    2 - İstasyon bulamayanlar 
                        rebuild cue kaydı var ve build null
                    3 - lost ships 
                        rebuildcue kaydı yok
                -->
                <do_if value="not Main.$RM_Fleets.{$RFMKey}.$alertstatus?">
                    <set_value name="Main.$RM_Fleets.{$RFMKey}.$alertstatus" exact="Main.$alertstatues.$normal"/>
                </do_if>
                <set_value name="$oldalertstatus" exact="Main.$RM_Fleets.{$RFMKey}.$alertstatus" />
                <set_value name="$alertstatus" exact="Main.$alertstatues.$normal" />

                <!-- RFM Entity var mı-->
                <do_if value="not $RFMCue.$Entity.isclass.entity">
                    <set_value name="$alertstatus" exact="Main.$alertstatues.$nopilot" />
                </do_if>

                <do_if value="$islocked">
                    <do_for_each name="$idx" valuename="$entry" in="Main.$FleetRecords.{$RFMKey}">
                        <do_if value="$entry.$destroyed">
                            <!-- 3 Lost -->
                            <do_if value="not Main.$RebuildCues.{$RFMKey}.{$entry.$id}?">
                                <do_if value="$alertstatus.$level le Main.$alertstatues.$rebuild.$level">
                                    <set_value name="$alertstatus" exact="Main.$alertstatues.$rebuild" />
                                </do_if>
                            </do_if>
                            <!-- 2, 1-->
                            <do_else>
                                <!-- 2  build null 2 durumda da oluşur. (1- shipyard bulamamıştır. 2- rebuildtimer kapalıdır. 3- add task almıştır henüz başlamamıştır.)-->
                                <do_if value="Main.$RebuildCues.{$RFMKey}.{$entry.$id}.$build == null or Main.$RebuildCues.{$RFMKey}.{$entry.$id}.$shipyard.$object == null">
                                    <do_if value="Main.$RebuildCues.{$RFMKey}.{$entry.$id}.$shipyard.$object == null">
                                        <do_if value="$alertstatus.$level le Main.$alertstatues.$noshipyard.$level">
                                            <set_value name="$alertstatus" exact="Main.$alertstatues.$noshipyard" />
                                        </do_if>
                                        <do_if value="not Main.$RM_Fleets.{$RFMKey}.$rebuildtimerstatus">
                                            <do_if value="$alertstatus.$level le Main.$alertstatues.$rebuild.$level">
                                                <set_value name="$alertstatus" exact="Main.$alertstatues.$rebuild" />
                                            </do_if>
                                        </do_if>
                                    </do_if>
                                    <do_else>
                                        <do_if value="$alertstatus.$level le Main.$alertstatues.$addbuildtask.$level">
                                            <set_value name="$alertstatus" exact="Main.$alertstatues.$addbuildtask" />
                                        </do_if>
                                    </do_else>
                                </do_if>
                                <!-- 1 -->
                                <do_else>
                                    <do_if value="not @Main.$RebuildCues.{$RFMKey}.{$entry.$id}.$build.isprocessing">
                                        <do_if value="$alertstatus.$level le Main.$alertstatues.$queuedship.$level">
                                            <set_value name="$alertstatus" exact="Main.$alertstatues.$queuedship" />
                                        </do_if>
                                    </do_if>
                                    <do_else>
                                        <do_if value="$alertstatus.$level le Main.$alertstatues.$inprogress.$level">
                                            <set_value name="$alertstatus" exact="Main.$alertstatues.$inprogress" />
                                        </do_if>
                                        <do_else>
                                            <do_if value="$alertstatus.$level == Main.$alertstatues.$nopilot.$level">
                                                <set_value name="$alertstatus" exact="Main.$alertstatues.$inprogress" />
                                            </do_if>
                                        </do_else>
                                    </do_else>
                                </do_else>
                            </do_else>
                        </do_if>
                    </do_for_each>
                </do_if>

                <set_value name="Main.$RM_Fleets.{$RFMKey}.$alertstatus" exact="$alertstatus" />

                <set_value name="$captionupdate" exact="($oldLockStatus != $islocked) or ($oldalertstatus != $alertstatus) or $forceCaptionUpdate" />
                <do_if value="$captionupdate">
                    <run_actions ref="Update_RFMCaption">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>

                    <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                            $fleetID = $RFMKey,
                            $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                            $description = 'RFM Caption Changed'
                        ]" chance="player.entity.$Flag_RFM_Menu? * 100 * (not $batchprocessing)"/>

                    <!-- DEBUG : RM_FLEETS File-->
                    <run_actions ref="Debug_RM_Fleets" chance="$isdebug * 100 * (not $batchprocessing)"/>
                </do_if>

                <debug_text text="'RFM_%s ALERT %s %s-LOCK %s %s%s'.[
                    $RFMKey, 
                    if ($oldalertstatus != $alertstatus) then
                        '[%s]%s Changed To'.[$oldalertstatus.$level, $oldalertstatus.$text]
                    else
                        'SAME'
                    ,
                    '[%s]%s'.[$alertstatus.$level, $alertstatus.$text],
                    if ($oldLockStatus != $islocked) then
                        '[%s] Changed To [%s]'.[if $oldLockStatus then 'OFF' else 'ON', if $islocked then 'OFF' else 'ON']
                    else
                        'SAME %s'.[(if $islocked then '[OFF]' else '[ON]')]
                    , 
                    if $captionupdate then '(%sCaption Updated)'.[if $forceCaptionUpdate then 'Force ' else ''] else '', 
                    if $isdebug and $captionupdate then '(Printed RM Fleets)' else ''
                ]" chance="Main.$DeepDebug"/>

                <remove_value name="$FIndx" />
                <remove_value name="$RFMCue" />
                <remove_value name="$oldLockStatus" />
                <remove_value name="$oldalertstatus" />
                <remove_value name="$alertstatus" />
                

                <return value="$islocked"/>
            </actions>
        </library>
        <!-- IN :   RFMKey      , fleet number
                    Ship , who is changed to original name in fleet -->
        <library name="Clear_ShipCaption" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ship" />
                <param name="ShipKey" default="0" />
                <param name="debugchance" default="0" />
            </params>
            <actions>
                <set_value name="$name" exact="''" />
                <do_if value="$RFMKey > 0">
                    <run_actions ref="Get_NoneColor_ShipName" result="$name">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="ship" value="$ship" />
                        <param name="ShipKey" value="$ShipKey" />
                    </run_actions>
                </do_if>
                <do_if value="$name == ''">
                    <set_value name="$name" exact="$ship.macro.name" />    
                </do_if>
                <set_object_name object="$ship" name="$name"/>
                <debug_text text="'Cleared ShipCaption object = &lt;%s&gt; name = %s , idcode = %s'.[$ship, $name, @$ship.idcode]" chance="$debugchance"/>
            </actions>
        </library>
        <!-- default olarak Record yapısındaki name bilgisini okuyup renk tagını düzenleyerek gemi adını setleyecek
            RM_Fleets deki obje ve shipid sini kullanarak temiz isim bulacak , RM_Fleets lock durumuna göre renk tagını ekleyecek
            IN : RFMKey 
        -->
        <library name="Update_RFMCaption" purpose="run_actions">
            <params>
                <param name="RFMKey" />
            </params>
            <actions>
                <do_if value="global.$upbRF_DATA.$Editing.$useTagOnName">
                    <set_value name="$Commander" exact="Main.$RM_Fleets.{$RFMKey}.$object"/>
                    <set_value name="$ShipKey" exact="Main.$RM_Fleets.{$RFMKey}.$shipid" />
                    <run_actions ref="Get_NoneColor_ShipName" result="$CommanderName">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="ship" value="$Commander" />
                        <param name="ShipKey" value="$ShipKey" />
                    </run_actions>
                    <debug_text text="'               :Get_NoneColor_ShipName:   $Commander = &lt;%s&gt; %s'.[@$Commander, @$CommanderName]" chance="Main.$FleetLockStatusDebug"/>
                    <do_if value="$Commander != null">
                        
                        <run_actions ref="GetCaptionStamp" result="$CaptionStamp">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                        
                        <set_object_name object="$Commander" name="$CommanderName + $CaptionStamp " />
                    </do_if>
                    <debug_text text="'               :GetCaptionStamp:          isLockedFleet = %s, return $CaptionStamp = %s'.[Main.$RM_Fleets.{$RFMKey}.$isLockedFleet, @$CaptionStamp]" chance="Main.$FleetLockStatusDebug"/>
                    <debug_text text="'             RFM_%s  Caption Updated'.[$RFMKey]" chance="Main.$DeepDebug"/>
                    <remove_value name="$CommanderName" />
                    <remove_value name="$Commander" />
                </do_if>
            </actions>
        </library>
        <!--IN : Object adını bulma işini yapar ve getirir.
                ShipKey ile ulaşabiliyorsa ise record yapısındaki adı
                Shipkey yoksa ; 
                    1- obje null ise macro.adı 
                    2- obje varsa obje.adı 
                        renk tagı varsa temizlenmiş .name
                ship as object 
                RFMKey for caption tag
                ShipKey default 0
            OUT : ship's name  
        -->
        <library name="Get_NoneColor_ShipName" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ship"  default="null" />
                <param name="ShipKey" default="0"/>
                <param name="debugchance" default="0" />
            </params>
            <actions>
                <!-- <set_value name="$name" exact="$ship.macro.name"/> 
                <debug_text text="'$RFMKey = %s ,  $ship = %s , $ShipKey = %s'.[$RFMKey, $ship, $ShipKey]" />
                -->
                <do_if value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}?">
                    <set_value name="$name" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$name"/>
                </do_if>
                <do_if value="@$name == null">
                    <do_if value="$ship == null">
                        <set_value name="$name" exact="''"/>
                    </do_if>
                    <do_else>
                        <set_value name="$sname" exact="$ship.name"/>
                        <debug_text text="' Source Object Name = &lt;%s&gt; '.[$sname]" chance="$debugchance"/>
                        <substitute_text text="$name" source="$sname">
                            <replace string="'\033'" with="''" comment="ismi temizle, renk tagı varsa sil"/>
                        </substitute_text>
                        <do_if value="$sname != $name">
                            <!-- Renk tagı var-->
                            <substitute_text text="$CaptionStamp" source="Main.$RMShipCaptionTag">
                                <replace string="'$KEY$'" with="$RFMKey" comment="RFM_Key tagını sil"/>
                            </substitute_text>
                            <debug_text text="'  substitute_text name = &lt;%s&gt;'.[$name]" chance="$debugchance"/>
                            <substitute_text text="$sname" source="$name">
                                <!-- Daha önce kullanıp kaldırdığımız renk kodlarını da ekleyelim -->
                                <replace string="' ' + 'e62d5f' + $CaptionStamp + 'X'" with="''" comment="ismi temizle"/>
                                
                                <replace string="' ' + global.$upbRF_DATA.$Editing.$oldN + $CaptionStamp + 'X'" with="''" comment="ismi temizle"/>
                                <replace string="' ' + global.$upbRF_DATA.$Editing.$oldA + $CaptionStamp + 'X'" with="''" comment="ismi temizle"/>
    
                                <replace string="' ' + global.$upbRF_DATA.$Editing.$alertcolors.{Main.$alertlevels.$normal} + $CaptionStamp + 'X'" with="''" comment="ismi temizle"/>
                                <replace string="' ' + global.$upbRF_DATA.$Editing.$alertcolors.{Main.$alertlevels.$verylow} + $CaptionStamp + 'X'" with="''" comment="ismi temizle"/>
                                <replace string="' ' + global.$upbRF_DATA.$Editing.$alertcolors.{Main.$alertlevels.$low} + $CaptionStamp + 'X'" with="''" comment="ismi temizle"/>
                                <replace string="' ' + global.$upbRF_DATA.$Editing.$alertcolors.{Main.$alertlevels.$medium} + $CaptionStamp + 'X'" with="''" comment="ismi temizle"/>
                                <replace string="' ' + global.$upbRF_DATA.$Editing.$alertcolors.{Main.$alertlevels.$high} + $CaptionStamp + 'X'" with="''" comment="ismi temizle"/>
                                <replace string="' ' + global.$upbRF_DATA.$Editing.$alertcolors.{Main.$alertlevels.$veryhigh} + $CaptionStamp + 'X'" with="''" comment="ismi temizle"/>
                            </substitute_text>
                        </do_if>
                        <set_value name="$name" exact="$sname"/>
                        <debug_text text="' None Color Object Name = &lt;%s&gt;'.[$sname]" chance="$debugchance"/>
                    </do_else>
                    
                </do_if>
                <return value="$name"/>
            </actions>
        </library>
        <!-- IN : isLockedFleet durumuna göre RFMKey değerinin renkli çıktısını verir
                    RFMKey 
                    isLockedFleet value 
                OUT : CaptionStamp  (CaptionSource   'colorcode (RFM_$KEY$_) colorcodeend' and chenged $KEY$) 
        -->
        <library name="GetCaptionStamp" purpose="run_actions">
            <params>
                <param name="RFMKey" />
            </params>
            <actions>
                <do_if value="not Main.$RM_Fleets.{$RFMKey}.$alertstatus?">
                    <set_value name="$alertstatus" exact="table[ 
                        $level = Main.$alertlevels.$normal , 
                        $text = 'Normal', 
                        $color = global.$upbRF_DATA.$Editing.$alertcolors.{Main.$alertlevels.$normal}
                    ]" />
                    <set_value name="Main.$RM_Fleets.{$RFMKey}.$alertstatus" exact="$alertstatus" />
                </do_if>
                <set_value name="$alertstatus" exact="Main.$RM_Fleets.{$RFMKey}.$alertstatus" />
                <set_value name="$alertcolor" exact="$alertstatus.$color" />
                <set_value name="$CaptionSource" exact="' \033' + $alertcolor + Main.$RMShipCaptionTag + '\033X'"/>
            
                <substitute_text text="$CaptionStamp" source="$CaptionSource">
                    <replace string="'$KEY$'" with="$RFMKey"/>
                </substitute_text>
                <return value="$CaptionStamp"/>
            </actions>
        </library>




        <!-- RFM ORDER
        -->
        <!-- IN :   RFMKey          , RM Fleet numarası
        -->
        <library name="Save_OrderInfo_To_CommanderRecord" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="debugchance" default="0" />
            </params>
            <actions>
                <set_value name="$Commander" exact="Main.$RM_Fleets.{$RFMKey}.$object" />
                
                <do_if value="$Commander != null">

                    <run_actions ref="md.Upb_Library_Orders.Get_Defaultorder_Orders_Sector_From_Ship" result="$result">
                        <param name="ship" value="$Commander" />
                    </run_actions>
                    
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{1}.$defaultorder" exact="$result.{1}"/>
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{1}.$orders" exact="$result.{2}"/>
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{1}.$sectorid" exact="$result.{3}"/>
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{1}.$sector" exact="if $result.{3} != null then $result.{3}.knownname else ''"/>

                    <debug_text text="'  RFM_%s  Defaultorder = \'%s\' saved.'.[$RFMKey, Main.$FleetRecords.{$RFMKey}.{1}.$defaultorder.$id]" chance="$debugchance"/>
                    <debug_text text="'          Orders #[%s] = %s '.[Main.$FleetRecords.{$RFMKey}.{1}.$orders.count, Main.$FleetRecords.{$RFMKey}.{1}.$orders]" chance="$debugchance"/>
                    <!-- FLEET RECORD TABLE -->
                    <run_actions ref="Debug_FleetRecord">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>

                </do_if>

            </actions>
        </library>
        <!-- IN :   RFMKey          , RM Fleet numarası
        -->
        <library name="Set_Defaultorder_To_RMCommander" purpose="run_actions">
            <params>
                <param name="RFMKey" />
            </params>            
            <actions>
                <set_value name="$Commander" exact="Main.$RM_Fleets.{$RFMKey}.$object" />
                <set_value name="$sector" exact="Main.$FleetRecords.{$RFMKey}.{1}.$sectorid" />
                <set_value name="$result" exact="''" />
                <do_if value="$Commander != null and $Commander.isrealclass.ship">
                    <set_value name="$defaultorder"  exact="Main.$FleetRecords.{$RFMKey}.{1}.$defaultorder"/>
                    <set_value name="$orders"  exact="Main.$FleetRecords.{$RFMKey}.{1}.$orders"/>
                                        <!-- RFMCommander istasyon olabilir-->
                    <do_if value="typeof $defaultorder == datatype.table and $defaultorder.$id?">
                        <set_value name="Main.$RM_Fleets.{$RFMKey}.$cue.$dontSaveDefaultorder" />
                        <run_actions ref="md.Upb_Library_Orders.Set_DefaultorderAndOrdersTable_To_Ship" >
                            <param name="ship" value="$Commander" />
                            <param name="defaultorder" value="$defaultorder" />
                            <param name="orders" value="$orders" />
                        </run_actions>
                        <do_if value="$defaultorder.$id == 'Wait' and $sector != null">
                            <do_if value="$sector.isclass.sector">
                            </do_if>
                            <do_elseif value="$sector.sector">
                                <set_value name="$sector"  exact="$sector.sector"/>
                            </do_elseif>
                            <do_else>
                                <set_value name="$sector"  exact="$sector.zone.sector"/>
                            </do_else>
                            <set_value name="$destination" exact="[ $sector, $sector.coreposition ]" />
                            <create_order object="$Commander" id="'MoveWait'">
                                <param name="destination" value="$destination" />
                                <param name="recallsubordinates" value="false" />
                            </create_order>
                        </do_if>
                    </do_if>
                </do_if>
                
            </actions>
        </library>










        <!-- LOADOUTS
        -->
        <!-- LUA LOADOUT
        -->
        <!--    IN stack table
                object null gönderilecekse mutlaka macro ve issupplyship değerlerini de göndermek gerekir değilse object üzerinden alınacak
                param : stack = table[ 
                    $RFMKey     = $RFMKey, 
                    $ShipKey    = $ShipKey, 
                    $object     = $object, 
                    $macro          = $macro, 
                    $issupplyship   = $object.issupplyship,
                    $isGetShipPlan          = true, 
                    $isChangeCrewAmounts    = true,
                    $isGetIndividualInstructions  = true,
                    $isGetCapacity  = true,
                    $isGetPaintMod  = true,
                    $isdebug    = false
                    ]        
        -->
        <cue name="Get_PlanData_FromLua2" instantiate="true">
            <conditions>
                <event_cue_signalled />
            </conditions>
            <actions>
                
                <set_value name="$stack"  exact="event.param"/>

                <do_if value="not player.entity.$SPD_Stacks?">
                    <set_value name="player.entity.$SPD_Stacks" exact="[]"/>
                </do_if>
                <!-- luadan boşaltılan liste, yapı olarak md içinde table olarak algılanıyor-->
                <do_if value="typeof player.entity.$SPD_Stacks == datatype.table">
                    <set_value name="player.entity.$SPD_Stacks" exact="[]"/>
                </do_if>

                <do_if value="$stack.$object != null">
                    <set_value name="$stack.$macro"             exact="$stack.$object.macro"/>
                    <set_value name="$stack.$issupplyship"      exact="if $stack.$object.macro.isclass.ship then $stack.$object.issupplyship else false"/>
                </do_if>

                <do_if value="$stack.$macro? and $stack.$issupplyship?">
                    <set_value name="$stack.$isShip"            exact="$stack.$macro.isclass.ship"/>
                    <set_value name="$stack.$primarypurpose"    exact="$stack.$macro.primarypurpose"/>
                    <set_value name="$stack.$faction"           exact="faction.player.id"/>

                    <append_to_list name="player.entity.$SPD_Stacks" exact="$stack" />
                    <raise_lua_event name="'ShipPlan.get'" />
                    <debug_text text="' RFM_%s_%s APPEND Stack SP=%s, II=%s, Cap=%s, PM=%s (SPD_Stacks #%s)'.[$stack.$RFMKey, $stack.$ShipKey, $stack.$isGetShipPlan, $stack.$isGetIndividualInstructions, $stack.$isGetCapacity, $stack.$isGetPaintMod, player.entity.$SPD_Stacks.count]" chance="Main.$DebugChance"/>
                </do_if>
                <do_else>
                    <debug_text text="'! ! ! Parametre Hatalı. object null olduğundan macro ve issupplyship propertyleri eklenmeli. RFM_%s_%s (@_Fikret)'.[$stack.$RFMKey, $stack.$ShipKey]" />
                </do_else>

            </actions>
        </cue>
        <!-- object_signalled from lua -->
        <cue name="ArrivedShipPlan" instantiate="true" namespace="this">
            <conditions>
                <event_object_signalled object="player.entity"/>
                <check_value value="event.param == 'ShipPlan.ready'" />
            </conditions>
            <actions>
                <!-- <debug_text text="'event.param %s , event.param2 = %s , event.param3 = %s '.[event.param, event.param2, event.param3]" />  -->
                <set_value name="$stacktable" exact="event.param2" />
                <set_value name="$RFMKey"   exact="$stacktable.$RFMKey"/>
                <set_value name="$ShipKey"  exact="$stacktable.$ShipKey"/>
                <set_value name="$isGetShipPlan"    exact="$stacktable.$isGetShipPlan"/>
                <set_value name="$isChangeCrewAmounts"    exact="$stacktable.$isChangeCrewAmounts"/>
                <set_value name="$ShipPlanTable"    exact="$stacktable.$ShipPlanTable"/>
                <set_value name="$isGetIndividualInstructions"  exact="$stacktable.$isGetIndividualInstructions"/>
                <set_value name="$IndividualInstructions"       exact="$stacktable.$IndividualInstructions"/>
                <set_value name="$isGetCapacity"    exact="$stacktable.$isGetCapacity"/>
                <set_value name="$capacity"    exact="$stacktable.$capacity"/>
                <set_value name="$isGetPaintMod"    exact="$stacktable.$isGetPaintMod"/>
                <set_value name="$paintmodwareid"    exact="$stacktable.$paintmodwareid"/>
                <set_value name="$debug"    exact="$stacktable.$isdebug" />

                <do_if value="player.entity.$SPD_Stacks?">
                    <do_if value="typeof player.entity.$SPD_Stacks == datatype.list">
                        <set_value name="$count" exact="player.entity.$SPD_Stacks.count" />
                    </do_if>
                    <do_else>
                        <set_value name="$count" exact="player.entity.$SPD_Stacks.keys.count" />
                    </do_else>
                </do_if>
                <!-- 
                <do_if value="$count == 0">
                    <remove_value name="player.entity.$SPD_Stacks" />
                </do_if>
                -->
                <set_value name="$debugfilechance" exact="$debug * Main.$DebugChance * (not $count)" />
                <debug_text text="'Received ReceivedPlanData. isdebug = %s, Stack ? %s , Count = %s,  debugfilechance = %s'.[$debug, player.entity.$SPD_Stacks?, $count, $debugfilechance]" chance="$debug * 100" />

                <do_if value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}?">

                    <include_actions ref="Let_RFM_LogFileNames" />

                    <set_value name="$shipRec" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}" />
                    <set_value name="$isShip" exact="[class.ship_s, class.ship_m, class.ship_l, class.ship_xl].indexof.{$shipRec.$class}" />
                    <!-- luadan dönen listeler boş = {} ise md bu bilgiyi tablo yapısında algılıyor. Object olmadığından, kaydetmeyeceğiz -->
                    <do_if value="(typeof $ShipPlanTable == datatype.table) and $ShipPlanTable.keys.count > 0">
                        <!-- lua da boş bir liste md içinde table olarak algılanıyor -->
                        <do_if value="(typeof $ShipPlanTable.$engine == datatype.table) and ($ShipPlanTable.$engine.keys.count == 0)">
                            <set_value name="$ShipPlanTable.$engine" exact="[]" />
                        </do_if>
                        <do_if value="(typeof $ShipPlanTable.$enginegroup == datatype.table) and ($ShipPlanTable.$enginegroup.keys.count == 0)">
                            <set_value name="$ShipPlanTable.$enginegroup" exact="[]" />
                        </do_if>
                        <do_if value="(typeof $ShipPlanTable.$shield == datatype.table) and ($ShipPlanTable.$shield.keys.count == 0)">
                            <set_value name="$ShipPlanTable.$shield" exact="[]" />
                        </do_if>
                        <do_if value="(typeof $ShipPlanTable.$shieldgroup == datatype.table) and ($ShipPlanTable.$shieldgroup.keys.count == 0)">
                            <set_value name="$ShipPlanTable.$shieldgroup" exact="[]" />
                        </do_if>
                        <do_if value="(typeof $ShipPlanTable.$weapon == datatype.table) and ($ShipPlanTable.$weapon.keys.count == 0)">
                            <set_value name="$ShipPlanTable.$weapon" exact="[]" />
                        </do_if>
                        <do_if value="(typeof $ShipPlanTable.$turret == datatype.table) and ($ShipPlanTable.$turret.keys.count == 0)">
                            <set_value name="$ShipPlanTable.$turret" exact="[]" />
                        </do_if>
                        <do_if value="(typeof $ShipPlanTable.$turretgroup == datatype.table) and ($ShipPlanTable.$turretgroup.keys.count == 0)">
                            <set_value name="$ShipPlanTable.$turretgroup" exact="[]" />
                        </do_if>
                        <do_if value="(typeof $ShipPlanTable.$thruster == datatype.table) and ($ShipPlanTable.$thruster.keys.count == 0)">
                            <set_value name="$ShipPlanTable.$thruster" exact="[]" />
                        </do_if>
                        <do_if value="(typeof $ShipPlanTable.$software == datatype.table) and ($ShipPlanTable.$software.keys.count == 0)">
                            <set_value name="$ShipPlanTable.$software" exact="[]" />
                        </do_if>

                        <do_if value="$isGetShipPlan">
                            <set_value name="$shipRec.$tShipPlan" exact="$ShipPlanTable" />

                            <do_if value="$isChangeCrewAmounts">
                                <!-- ShipPlanTable içine lua içinde ayalanabilir?-->
                                <set_value name="$shipRec.$tShipPlan.$crew.$marine" exact="$shipRec.$tBulkCrew.{entityrole.marine}.count" />
                                <set_value name="$shipRec.$tShipPlan.$crew.$service" exact="$shipRec.$tBulkCrew.{entityrole.service}.count" />
                                <do_if value="$debug" >
                                    <debug_to_file text="'     RFM_%s_%s number of record.tShipPlan.crew amounts equals to the number of tBulkCrew'.[$RFMKey, $ShipKey]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$CommandDeep"/>
                                    <debug_text text="'     RFM_%s_%s number of record.tShipPlan.crew amounts equals to the number of tBulkCrew'.[$RFMKey, $ShipKey]" chance="Main.$DeepDebug" />
                                </do_if>
                            </do_if>

                            <do_if value="$debug" >
                                <debug_to_file text="'  RFM_%s_%s record.tShipPlan data updated'.[$RFMKey, $ShipKey]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$CommandDeep"/>
                                <debug_text text="'  RFM_%s_%s record.tShipPlan data updated'.[$RFMKey, $ShipKey]" chance="Main.$DeepDebug" />
                                <run_actions ref="Debug_FleetRecord_tShipPlan" chance="$debugfilechance">
                                    <param name="RFMKey" value="$RFMKey" />
                                </run_actions>
                            </do_if>

                        </do_if>

                    </do_if>

                    <do_if value="(typeof $IndividualInstructions == datatype.table and $IndividualInstructions.keys.count > 0) or (typeof $IndividualInstructions == datatype.list and $IndividualInstructions.count > 0)">

                        <do_if value="$isGetIndividualInstructions">
                            <set_value name="$shipRec.$tIndividualInstructions" exact="$IndividualInstructions" />
                            <do_if value="$debug" >
                                <debug_to_file text="'    RFM_%s_%s record.IndividualInstructions data updated'.[$RFMKey, $ShipKey]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$CommandDeep"/>
                                <debug_text text="'    RFM_%s_%s record.IndividualInstructions data updated'.[$RFMKey, $ShipKey]" chance="Main.$DeepDebug" />
                                <run_actions ref="Debug_FleetRecord_tIndividualInstructions" chance="$debugfilechance">
                                    <param name="RFMKey" value="$RFMKey" />
                                </run_actions>
                            </do_if>
                        </do_if>

                    </do_if>
                    
                    <do_if value="(typeof $capacity == datatype.table and $capacity.keys.count > 0) or (typeof $capacity == datatype.list and $capacity.count > 0)">
                        <do_if value="$isGetCapacity">
                            <set_value name="$shipRec.$tCapacity" exact="$capacity" />
                            <do_if value="$debug" >
                                <debug_to_file text="'      RFM_%s_%s record.tCapacity data updated'.[$RFMKey, $ShipKey]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$CommandDeep"/>
                                <debug_text text="'      RFM_%s_%s record.tCapacity data updated'.[$RFMKey, $ShipKey]" chance="Main.$DeepDebug" />
                            </do_if>
                        </do_if>
                    </do_if>
                    
                    <do_if value="(typeof $paintmodwareid == datatype.table and $paintmodwareid.keys.count > 0) or (typeof $paintmodwareid == datatype.list and $paintmodwareid.count > 0)">
                        <do_if value="$isGetPaintMod and $isShip">
                            <set_value name="$shipRec.$tPaintModWareId" exact="$paintmodwareid" />
                            <do_if value="$debug" >
                                <debug_to_file text="'      RFM_%s_%s record.tPaintModWareId data updated'.[$RFMKey, $ShipKey]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$CommandDeep"/>
                                <debug_text text="'      RFM_%s_%s record.tPaintModWareId data updated'.[$RFMKey, $ShipKey]" chance="Main.$DeepDebug" />
                            </do_if>
                        </do_if>
                    </do_if>
                    
                    <do_if value="$isGetCapacity or $isGetPaintMod" >

                        <run_actions ref="Debug_FleetRecord_NoOthers" chance="$debugfilechance">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>

                    </do_if>

                </do_if>
                <do_else>
                    <debug_text text="'ERROR, FleetRecords[%s][%s] table not found (@_Fikret)'.[$RFMKey, $ShipKey]" />
                </do_else>

            </actions>        
        </cue>
        <!-- MD LOADOUT
        -->
        <!-- IN :   Ship Obje     , kaydı çıkarılacak gemi
                    Commander Obje, debug gemi dosyası içinde geminin commander bilgisi için yazılacak, gerekli değil
            OUT : Loadout table, 
            Table [
                1-  Ship.loadout, loaduot
                2-  allWares, table
                3-  Pilot , Table[ $Macro = string, $Skill = table [ {skilltypes } = value ]
                4-  Peoples table [ {entityrole} = list [ $Macro = string, $Skill = table [ {skilltypes } = value ] ]
                skipped others
                5-  Engines, table
                6- Weapons, table
                7- Shields, table
                8- Turrets, table
                9- CounterMeasures, table
                10- Missiles, table
                11- Deployables, table
                12- Softwares, table
                13- Thrusters, table
                14- Ammo, table
                15- Units, table
            ]
        -->
        <library name="Get_ShipLoadouts" purpose="run_actions" >
            <params>
                <param name="Ship" />
                <param name="usedammobay" default="false" />
            </params>
            <actions>
                <!-- bu modulül ware tabloları şeklinde geri veriyor, -->
                <!-- ilerde yapılacak, veri tablosunu macro tabloları şeklinde dönmesi seçenek olarak sunulacak -->
                <set_value name="$Engines" exact="table[]"/>
                <set_value name="$Weapons" exact="table[]"/>
                <set_value name="$Shields" exact="table[]"/>
                <set_value name="$Turrets" exact="table[]"/>
                <set_value name="$CounterMeasures" exact="table[]"/>
                <set_value name="$Missiles" exact="table[]"/>
                <set_value name="$Deployables" exact="table[]"/>
                <set_value name="$Softwares" exact="table[]"/>
                <set_value name="$Thrusters" exact="table[]"/>
                <set_value name="$Ammo" exact="table[]"/>
                <set_value name="$Units" exact="table[]"/>

                <set_value name="$allWares" exact="table[]"/>

                <!--        FIND  ENGINE EQUIPMENTS-->
                <run_actions ref="GetEquipments" result="$Engines">
                    <param name="Ship" value="$Ship" />
                    <param name="Class" value="[class.engine]" />
                    <param name="addTable" value="$allWares"/>
                </run_actions>

                <!--        FIND   WEAPONS  EQUIPMENTS-->
                <run_actions ref="GetEquipments" result="$Weapons">
                    <param name="Ship" value="$Ship" />
                    <param name="Class" value="[class.weapon]" />
                    <param name="addTable" value="$allWares"/>
                </run_actions>

                <!--        FIND   SHIELD  EQUIPMENTS-->
                <run_actions ref="GetEquipments" result="$Shields">
                    <param name="Ship" value="$Ship" />
                    <param name="Class" value="[class.shieldgenerator]" />
                    <param name="addTable" value="$allWares"/>
                </run_actions>

                <!--        FIND   TURRET  EQUIPMENTS-->
                <run_actions ref="GetEquipments" result="$Turrets">
                    <param name="Ship" value="$Ship" />
                    <param name="Class" value="[class.turret]" />
                    <param name="addTable" value="$allWares"/>
                </run_actions>

                <do_if value="$Ship.isclass.ship">
                    <!--                AMMO STORAGE        -->
                    <debug_text text="'          $usedammobay           %s'.[$usedammobay]" chance="0"/>
                    <debug_text text="'name %s   MISSILE STORAGE        %s'.[$Ship.name, $Ship.ammostorage.missile.table]" chance="0"/>
                    <debug_text text="'name %s   DEPLOYABLE STORAGE     %s'.[$Ship.name, $Ship.ammostorage.deployable.table]" chance="0"/>
                    <debug_text text="'name %s   COUNTERMEASURE STORAGE %s'.[$Ship.name, $Ship.ammostorage.countermeasure.table]" chance="0"/>
                    <do_if value="not $usedammobay">
                        <!--        MISSILES    -->
                        <do_for_each name="$macro" valuename="$amount" in="$Ship.ammostorage.missile.table">
                            <set_value name="$Item" exact="$macro.ware" />
                            <set_value name="$Missiles.{$Item}" exact="$amount"/>
                            <set_value name="$Ammo.{$Item}" exact="$amount"/>
                            <set_value name="$allWares.{$Item}" exact="$amount"/>
                        </do_for_each>
                        <!--        DEPLOYABLES    -->
                        <set_value name="$consumables" exact="Main.$deployablecategories"/>
                        <do_for_each name="$consumable" in="$consumables">
                            <set_value name="$Deployables.{$consumable}" exact="[]" />
                        </do_for_each>
                        <do_for_each name="$macro" valuename="$amount" in="$Ship.ammostorage.deployable.table">
                            <set_value name="$Item" exact="$macro.ware" />
                            <append_to_list name="$Deployables.{$macro.deployablecategory}" exact="table[ $macro = $macro, $amount = $amount, $category = $macro.deployablecategory ]" />
                            <set_value name="$Ammo.{$Item}" exact="$amount"/>
                            <set_value name="$allWares.{$Item}" exact="$amount"/>
                        </do_for_each>
                        <!--        COUNTER MEASURE    -->
                        <do_for_each name="$macro" valuename="$amount" in="$Ship.ammostorage.countermeasure.table">
                            <set_value name="$Item" exact="$macro.ware" />
                            <set_value name="$CounterMeasures.{$Item}" exact="$amount"/>
                            <set_value name="$Ammo.{$Item}" exact="$amount"/>
                            <set_value name="$allWares.{$Item}" exact="$amount"/>
                        </do_for_each>
                    </do_if>
                    <!-- AKTİF KULLANDIKLARI (sadece MISSILES için geçerli olacaktır, diğerleri yine kargoda olanları verecektir) -->
                    <do_else>
                        <!--        MISSILES    -->
                        <evaluate_ammo_storage object="$Ship" type="missile" wares="$AmmoT" amounts="$AmmoAmt" />
                        <do_for_each name="$Item" in="$AmmoT">
                            <debug_text text="'$Item = %s $Item.objectmacro = %s , loop.index = %s , %s , %s'.[$Item, $Item.objectmacro, loop.index, $AmmoAmt.{loop.index}, $Ship.ammostorage.{$Item.objectmacro}.count]" />
                            <set_value name="$Missiles.{$Item}" exact="[$AmmoAmt.{loop.index}, $Ship.ammostorage.{$Item.objectmacro}.count].max"/>
                            <set_value name="$Ammo.{$Item}" exact="[$AmmoAmt.{loop.index}, $Ship.ammostorage.{$Item.objectmacro}.count].max"/>
                            <set_value name="$allWares.{$Item}" exact="[$AmmoAmt.{loop.index}, $Ship.ammostorage.{$Item.objectmacro}.count].max"/>
                        </do_for_each>
                        <!--        DEPLOYABLES    -->
                        <evaluate_ammo_storage object="$Ship" type="deployable" wares="$AmmoT" amounts="$AmmoAmt" />
                        <do_for_each name="$Item" in="$AmmoT">
                            <set_value name="$Deployables.{$Item.macro}" exact="table[ $amount = [$Ship.ammostorage.{$Item.objectmacro}.count, 1].max, $category = $Item.objectmacro.deployablecategory ]"/>
                            <set_value name="$Ammo.{$Item}" exact="[$Ship.ammostorage.{$Item.objectmacro}.count, 1].max"/>
                            <set_value name="$allWares.{$Item}" exact="[$Ship.ammostorage.{$Item.objectmacro}.count, 1].max"/>
                        </do_for_each>
                        <!--        COUNTER MEASURE    -->
                        <evaluate_ammo_storage object="$Ship" type="countermeasure" wares="$AmmoT" amounts="$AmmoAmt" />
                        <do_for_each name="$Item" in="$AmmoT">
                            <set_value name="$CounterMeasures.{$Item}" exact="[$AmmoAmt.{loop.index}, $Ship.ammostorage.{$Item.objectmacro}.count].max"/>
                            <set_value name="$Ammo.{$Item}" exact="[$AmmoAmt.{loop.index}, $Ship.ammostorage.{$Item.objectmacro}.count].max"/>
                            <set_value name="$allWares.{$Item}" exact="[$AmmoAmt.{loop.index}, $Ship.ammostorage.{$Item.objectmacro}.count].max"/>
                        </do_for_each>

                    </do_else>
                    <!--             INTSTALLED  SOFTWARES -->
                    <!-- Flight Assist Her Mobil objede kesinlikle olan bir software-->
                    <set_value name="$Softwares.{ware.software_flightassistmk1}" exact="1" />
                    <set_value name="$allWares.{ware.software_flightassistmk1}" exact="1" />
                    <!-- Targeting Computer Extension 1 varsa listede Al-->
                    <do_if value="$Ship.software.installed.list.indexof.{ware.software_targetmk1}" >
                        <set_value name="$Softwares.{ware.software_targetmk1}" exact="1" />
                        <set_value name="$allWares.{ware.software_targetmk1}" exact="1" />
                    </do_if>
                    <!-- Trading Computer Extension 1 varsa listede Al-->
                    <do_if value="$Ship.software.installed.list.indexof.{ware.software_trademk1}" >
                        <set_value name="$Softwares.{ware.software_trademk1}" exact="1" />
                        <set_value name="$allWares.{ware.software_trademk1}" exact="1" />
                    </do_if>
                    <!-- Docking Softwers, Long Range Scanners ve Obje Scanners lardan hangisi takılıysa Al-->
                    <do_for_each name="$Item" in="$Ship.software.installed.list">
                        <do_if value="$Item == $Ship.software.dock">
                            <set_value name="$Softwares.{$Item}" exact="1" />
                            <set_value name="$allWares.{$Item}" exact="1" />
                        </do_if>
                        <do_elseif value="$Item == $Ship.software.longrange">
                            <set_value name="$Softwares.{$Item}" exact="1" />
                            <set_value name="$allWares.{$Item}" exact="1" />
                        </do_elseif>
                        <do_elseif value="$Item == $Ship.software.police">
                            <set_value name="$Softwares.{$Item}" exact="1" />
                            <set_value name="$allWares.{$Item}" exact="1" />
                        </do_elseif>
                    </do_for_each>

                    <!--                  GET THRUSTER-->
                    <get_ware_definition result="$AllThrusters" group="'thrusters'" />
                    <do_for_each name="$Item" in="$AllThrusters">
                        <check_object result="$GotIt" object="$Ship">
                            <match_loadout wares="[$Item]"/>
                        </check_object>
                        <do_if value="$GotIt">
                            <set_value name="$Thrusters.{$Item}" exact="1"/>
                            <set_value name="$allWares.{$Item}" exact="1"/>
                            <break/>
                        </do_if>
                    </do_for_each>

                </do_if>

                <!--                  GET UNIT DRONES          -->
                
                <do_for_each name="$Category" in="Main.$unitcategories">
                    <set_value name="$Units.{$Category}" exact="[]"/>
                    <do_for_each name="$Item" in="$Ship.units.{$Category}.list">
                        <set_value name="$macro" exact="$Item" />
                        <set_value name="$amount" exact="$Ship.units.{$Item}.count" />
                        <append_to_list name="$Units.{$Category}" exact="table[ $macro = $macro, $amount = $amount, $category = $Category ]" />
                        
                        <do_if value="$Item.ware and $Units.keys.list.indexof.{$Item} == 0 and $Ship.units.{$Item}.count">
                            <set_value name="$allWares.{$Item.ware}" exact="$Ship.units.{$Item}.count"/>
                        </do_if>
                        
                        <break />
                    </do_for_each>
                </do_for_each>

                <run_actions ref="GetPilotTable_From_Object" result="$Pilot">
                    <param name="object" value="$Ship" />
                </run_actions>

                <run_actions ref="GetCrewsTable_From_Object" result="$Peoples">
                    <param name="object" value="$Ship" />
                </run_actions>
                
                <set_value name="$Loadout" exact="[
                $Ship.loadout, 
                $allWares,
                $Pilot,
                $Peoples,
                $Units,
                $Deployables
                ]" />
                <!-- 
                <set_value name="$Loadout" exact="[
                $Ship.loadout, 
                $allWares,
                $Pilot,
                $Peoples,
                $Engines, 
                $Weapons,
                $Shields,
                $Turrets,
                $CounterMeasures,
                $Missiles,
                $Deployables,
                $Softwares,
                $Thrusters,
                $Ammo,
                $Units
                ]" />
                -->
                <!-- 
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$allWares" />
                    <param name="nodename" value="'allWares = '" />
                </run_actions>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$Ship.loadout.wares.list" />
                    <param name="nodename" value="'loadout.wares = '" />
                </run_actions>
                -->
                <remove_value name="$Engines" />
                <remove_value name="$Weapons" />
                <remove_value name="$Shields" />
                <remove_value name="$Turrets" />
                <remove_value name="$CounterMeasures" />
                <remove_value name="$Missiles" />
                <remove_value name="$Deployables" />
                <remove_value name="$Softwares" />
                <remove_value name="$Thrusters" />
                <remove_value name="$Ammo" />
                <remove_value name="$Units" />
                <remove_value name="$allWares" />
                <remove_value name="$Peoples" />
                <remove_value name="$Pilot" />

                <return value="$Loadout"/>
            </actions>
        </library>
        <!-- IN :   Ship            : as obje
		            Class           : as list like [class.engine] or [class.engine, class.weapon] 
					CollectTable    : as table, result tablasını buraya ekler, belirtilmezse eklemez
		    OUT :   Table : table[ {equipware1} = 3, {equipware2} = 3  ]
		-->
        <library name="GetEquipments" purpose="run_actions" namespace="this">
            <params>
                <param name="Ship"/>
                <param name="Class"/>
                <param name="addTable" default="null"/>
            </params>
            <actions>
                <set_value name="$Equipments" exact="table[]"/>
                <!--weapon equipmentları, hem weapon hem de turretları içerir.
                    turret equipmentları ise sadece turretları verir.
                    sadece weapon arıyacaksak turret listesini çıkarmamız gerkiyor.
                -->
                <!--        FIND  EQUIPMENTS-->
                <do_if value="$Class.indexof.{class.weapon} and not $Class.indexof.{class.turret}">
                    <find_object_component name="$Comps" multiple="true" object="$Ship" checkoperational="false">
                        <match class="$Class" negate="false"/>
                        <match class="class.turret" negate="true"/>
                    </find_object_component>
                </do_if>
                <do_elseif value="$Class.indexof.{class.weapon} and $Class.indexof.{class.turret}">
                    <find_object_component name="$Comps" multiple="true" object="$Ship" checkoperational="false" >
                        <match class="$Class" negate="false"/>
                        <match class="class.turret" negate="true"/>
                    </find_object_component>
                    <find_object_component name="$Comps" multiple="true" object="$Ship" checkoperational="false" append="true">
                        <match class="class.turret" negate="false"/>
                    </find_object_component>
                </do_elseif>
                <do_else>
                    <find_object_component name="$Comps" multiple="true" object="$Ship" checkoperational="false">
                        <match class="$Class" negate="false"/>
                    </find_object_component>
                </do_else>
                <!--        COLLECT EQUIPMENTS-->
                <do_for_each name="$Obj" in="$Comps">
                    <do_if value="$Obj.macro.ware">
                        <set_value name="$Equipments.{$Obj.macro.ware}" exact="1" operation="add"/>
                        <do_if value="$addTable != null and typeof $addTable == datatype.table">
                            <set_value name="$addTable.{$Obj.macro.ware}" exact="1" operation="add"/>
                        </do_if>
                    </do_if>
                </do_for_each>
                <return value="$Equipments"/>
            </actions>
        </library>
        <!-- verilen gemiye ait Loadout ve FleetRecord ve loadout tablosunu günceller (record.tShipPlan Hariç)
            IN  :
                Ship        object planı çıkarılacak gemi
                FlletRec    üstüne yazılacak olan record tablosu    örn. Main.$FleetRecors.{$RFMKey}.{$ShipKey}
            OUT : 
                retvaule loadout  
        -->
        <library name="Create_Loadout_AndSetTo" purpose="run_actions">
            <params>
                <param name="ship"                          comment="ship objesi varsa .loadout"/>
                <param name="macro"                         comment="ship objesi yoksa macro üzerinden loadout"/>
                <param name="oldLoadout"    default="null"  comment="macro üzerinden varsa default alınacak"/>
                <param name="wares"         default="null"  comment="macro üzerinden varsa generateye eklenecek"/>
                <param name="FleetRec"      />
            </params>
            <actions>
                <do_if value="$ship != null">
                    <!-- componentstate.construction , componentstate.operational -->
                    <!-- 
                    <debug_text text="'%s %s &lt;%s&gt;.state = %s'.[$ship.idcode, $ship.knownname, $ship, $ship.state]" />
                    -->
                    <do_if value="$ship.state == componentstate.operational">
                        <run_actions ref="Get_ShipLoadouts" result="$NewLoadout">
                            <param name="Ship" value="$ship"/>
                        </run_actions>
                        <set_value name="$Loadout" exact="$NewLoadout.{1}"/>
                        <set_value name="$FleetRec.$tWare" exact="$NewLoadout.{2}"/>
                        <set_value name="$FleetRec.$tPilot" exact="$NewLoadout.{3}"/>
                        <set_value name="$FleetRec.$tBulkCrew" exact="$NewLoadout.{4}"/>
                    </do_if>
                    <do_else>
                        <set_value name="$Loadout" exact="$ship.loadout"/>
                    </do_else>
                </do_if>
                <do_else>
                    <set_value name="$Loadout" exact="$oldLoadout"/>
                    <do_if value="$oldLoadout == null">
                        <do_if value="$wares == null">
                            <set_value name="$wares" exact="@$FleetRec.$tWare"/>
                            <do_if value="$wares == null">
                                <generate_loadout result="$loadout" macro="$macro" level="1.0" variation="1.0" faction="faction.player" />
                            </do_if>
                            <do_else>
                                <generate_loadout result="$loadout" macro="$macro" level="1.0" wares="$wares" variation="1.0" faction="faction.player" />    
                            </do_else>
                        </do_if>
                        <do_else>
                            <generate_loadout result="$loadout" macro="$macro" level="1.0" wares="$wares" variation="1.0" faction="faction.player" />
                        </do_else>
                        <set_value name="$Loadout" exact="$loadout.{1}"/>
                    </do_if>
                </do_else>

                <return value="$Loadout"/>
            </actions>
        </library>

        <!-- Promote olaylarında RFM içindeki object den okunan IndividualInstuctions kaydı 
            itself = true   ise kendine aktarılacak, 
                            değilse recorddaki 1 nolu gemiye
                            aktarılacak. !!! Record datasına kayıt aktarılmayacak
        -->
        <library name="Set_IndividualInstuctions_To" purpose="run_actions">
            <params>
                <param name="RFMKey"        />
                <param name="object"        />
                <param name="itself"        default="true"/>
                <param name="debugchance"   default="0" />
            </params>
            <actions>
                <do_if value="$object != null">
                    
                    <do_for_each name="$key" valuename="$record" in="Main.$FleetRecords.{$RFMKey}">
                        <do_if value="$record.$object == $object">
                            <set_value name="$writeShipKey" exact="$record.$id" />
                        </do_if>
                        <do_if value="$itself">
                            <do_if value="$record.$object == $object">
                                <set_value name="$readShipKey" exact="$record.$id" />
                                <do_if value="$record.$tIndividualInstructions?">
                                    <set_value name="$tIndividualInstructions"  exact="$record.$tIndividualInstructions"/>
                                </do_if>
                                <break />
                            </do_if>
                        </do_if>
                        <do_else>
                            <do_if value="$record.$id == 1">
                                <set_value name="$readShipKey" exact="1" />
                                <do_if value="$record.$tIndividualInstructions?">
                                    <set_value name="$tIndividualInstructions"  exact="$record.$tIndividualInstructions"/>
                                </do_if>
                            </do_if>
                        </do_else>
                        <do_if value="$readShipKey? and $writeShipKey?">
                            <break />
                        </do_if>
                    </do_for_each>

                    <!-- bulunan kayıt içinde aktarmak istemediklerimizi kaldıracağız. record kaydının bozulmaması için yeni bir değişkene aktarıyoruz-->
                    <do_if value="$tIndividualInstructions?">
                        <set_value name="$Send_IndividualInstructions" exact="[]" />
                        <!-- Aktarmak istediklerimiz -->
                        <!-- 'orders_resupply' -->
                        <run_actions ref="Find_IndividualInstruction" result="$retentry">
                            <param name="IndividualInstructions" value="$tIndividualInstructions" />
                            <param name="rowdata" value="'orders_resupply'" />
                        </run_actions>
                        <do_if value="$retentry != null">
                            <append_to_list name="$Send_IndividualInstructions" exact="$retentry" />
                        </do_if>

                        <!-- 'orders_blacklist_' ...  -->
                        <do_for_each name="$bl_type" in="lookup.blacklisttype.list">
                            <run_actions ref="Find_IndividualInstruction" result="$retentry">
                                <param name="IndividualInstructions" value="$tIndividualInstructions" />
                                <param name="rowdata" value="'orders_blacklist_' + $bl_type" />
                            </run_actions>
                            <do_if value="$retentry != null">
                                <append_to_list name="$Send_IndividualInstructions" exact="$retentry" />
                            </do_if>
                        </do_for_each>
                        
                        <!-- 'orders_fightrule_attack' -->
                        <run_actions ref="Find_IndividualInstruction" result="$retentry">
                            <param name="IndividualInstructions" value="$tIndividualInstructions" />
                            <param name="rowdata" value="'orders_fightrule_attack'" />
                        </run_actions>
                        <do_if value="$retentry != null">
                            <append_to_list name="$Send_IndividualInstructions" exact="$retentry" />
                        </do_if>
                        
                        <do_if value="$Send_IndividualInstructions.count gt 0">
                            <debug_text text="'(%s) RFM.{%s} IndividualInstructions.{%s} to {%s} = %s %s&lt;%s&gt; Send_IndividualInstructions = %s'.[(if $itself then 'itself' else 'RFMCommander'), $RFMKey, $readShipKey, $writeShipKey, $object.idcode, $object.knownname, $object, $Send_IndividualInstructions]" chance="$debugchance" />

                            <do_if value="not player.entity.$IIStack?">
                                <set_value name="player.entity.$IIStack" exact="[]"/>
                            </do_if>
                            <!-- 
                            <debug_text text="'2- %s player.entity.$IIStack = %s'.[(typeof player.entity.$IIStack),  player.entity.$IIStack]" />
                            -->
                            <!-- luadan boşaltılan liste, yapı olarak md içinde table olarak algılanıyor-->
                            <do_if value="typeof player.entity.$IIStack == datatype.table">
                                <set_value name="player.entity.$IIStack" exact="[]"/>
                            </do_if>

                            <set_value name="$IndividualInstructions" exact="table[
                                $controllable = $object,
                                $RFMKey = $RFMKey,
                                $ShipKey = $writeShipKey,
                                $tIndividualInstructions = $Send_IndividualInstructions,
                                $itself = $itself,
                                $readKey = $readShipKey,
                                $isdebug = (if $debugchance == 100 then true else false)
                            ]" />
                            <append_to_list name="player.entity.$IIStack" exact="$IndividualInstructions" />
                            <raise_lua_event name="'Set_IndividualInstructions'" />
                        </do_if>
                        <do_else>
                            <debug_text text="'RFM.{%s}, no have [%s_%s] any Set_IndividualInstructions data. Skipping...'.[$RFMKey, $readShipKey, (if $itself then 'itSelf' else 'RFMCommander')]" chance="$debugchance" />    
                        </do_else>
                    </do_if>
                    <do_else>
                        <debug_text text="'RFM.{%s}.{%s_%s}.tIndividualInstructions record not found. Skipping...'.[$RFMKey, $readShipKey, (if $itself then 'itself' else 'RFMCommander')]" chance="$debugchance" />
                    </do_else>
                </do_if>
                <do_else>
                    <debug_text text="'RFM.{%s} Ship object is NULL. cant set to loadout level.. [@_Fikret check param object] '.[$RFMKey]" />
                </do_else>
            </actions>
        </library>

        <!-- IndividualInstructions listeleri içindeki tablolardaki rowdata ile uyuşan veri tablosunu geri döndürür-->
        <library name="Find_IndividualInstruction" purpose="run_actions">
            <params>
                <param name="IndividualInstructions" />
                <param name="rowdata" />
            </params>
            <actions>
                <set_value name="$result" exact="null" />
                <do_for_each name="$entry" in="$IndividualInstructions">
                    <do_if value="$entry.$a_rowdata == $rowdata">
                        <set_value name="$result" exact="$entry" />
                        <break />
                    </do_if>
                </do_for_each>
                <return value="$result"/>
            </actions>
        </library>

        <!-- record.$tCapacity tablesini obje üzerinden oluşturur. 
            ayrıca shipPlan istekleri ile lua içinde menu.GetCapacityTableFrom(object64) çağrıalarak yapı recorda ekleniyor.
        -->
        <library name="GetCapacityTable" purpose="run_actions">
            <params>
                <param name="object" />
            </params>
            <actions>
                <set_value name="$tCapacity" exact="table[
                    $countermeasures    = -1,
                    $deployables        = -1,
                    $missiles           = -1,
                    $drones             = table[
                        $stored     = -1,
                        $capacity   = -1
                    ]
                ]"/>
                <!-- 
                <debug_text text="'countermeasure   bcap = %s , cap = %s , count = %s , free = %s'.[@$object.ammostorage.countermeasure.basecapacity, @$object.ammostorage.countermeasure.capacity, @$object.ammostorage.countermeasure.count, @$object.ammostorage.countermeasure.free]" />
                <debug_text text="'deployable       bcap = %s , cap = %s , count = %s , free = %s'.[@$object.ammostorage.deployable.basecapacity, @$object.ammostorage.deployable.capacity, @$object.ammostorage.deployable.count, @$object.ammostorage.deployable.free]" />
                <debug_text text="'missile          bcap = %s , cap = %s , count = %s , free = %s'.[@$object.ammostorage.missile.basecapacity, @$object.ammostorage.missile.capacity, @$object.ammostorage.missile.count, @$object.ammostorage.missile.free]" />
                -->
                <do_if value="$object != null">
                    <set_value name="$tCapacity" exact="table[
                        $countermeasures    = $object.ammostorage.countermeasure.capacity,
                        $deployables        = $object.ammostorage.deployable.capacity,
                        $missiles           = $object.ammostorage.missile.capacity,
                        $drones             = table[
                            $stored     = $object.units.count,
                            $capacity   = $object.units.count + $object.units.free
                        ]
                    ]"/>
                </do_if>
                <return value="$tCapacity"/>
            </actions>
        </library>
        <!-- Verilen objenin Pilot ve Peoples tablosunu hazırlar-->
        <library name="CreateCrewTables" purpose="run_actions">
            <params>
                <param name="object" />
            </params>
            <actions>

                <run_actions ref="GetPilotTable_From_Object" result="$Pilot">
                    <param name="object" value="object" />
                </run_actions>

                <run_actions ref="GetCrewsTable_From_Object" result="$Peoples">
                    <param name="object" value="object" />
                </run_actions>

                <return value="[$Pilot, $Peoples]" />
            </actions>
        </library>
        <!-- Pilot or Manager -->
        <library name="GetPilotTable_From_Object" purpose="run_actions">
            <params>
                <param name="object" />
            </params>
            <actions>
                <do_if value="$object.isclass.station">
                    <set_value name="$entity" exact="@$object.tradenpc" />
                </do_if>
                <do_else>
                    <set_value name="$entity" exact="@$object.pilot" />
                </do_else>

                <run_actions ref="GetPilotTable_From_Entity" result="$Pilot">
                    <param name="entity" value="$entity" />
                </run_actions>

                <return value="$Pilot" />
            </actions>
        </library>
        <library name="GetPilotTable_From_Entity" purpose="run_actions">
            <params>
                <param name="entity" />
            </params>
            <actions>

                <set_value name="$Pilot" exact="table
                [
                    $name           = '',
                    $combinedskill  = -1,
                    $isfemale       = 0,
                    $faction        = '',
                    $macro          = '',
                    $skill          = table
                        [
                            {skilltype.management}  = 0,
                            {skilltype.morale}      = 0,
                            {skilltype.piloting}    = 0,
                            {skilltype.engineering} = 0,
                            {skilltype.boarding}    = 0
                        ]
                ]"/>

                <do_if value="$entity != null ">

                    <set_value name="$faction" exact="''" />
                    <set_value name="$faction" exact="Main.$FactionByCharMacro.{$entity.macro}" chance="Main.$FactionByCharMacro.{$entity.macro}? * 100"/>

                    <set_value name="$Pilot" exact="table
                    [
                        $name           = $entity.knownname,
                        $combinedskill  = $entity.combinedskill,
                        $isfemale       = $entity.macro.isfemale,
                        $faction        = $faction,
                        $macro      = $entity.macro,
                        $skill      = table
                            [
                                {skilltype.management} = $entity.skill.{skilltype.management},
                                {skilltype.morale} = $entity.skill.{skilltype.morale},
                                {skilltype.piloting} = $entity.skill.{skilltype.piloting},
                                {skilltype.engineering} = $entity.skill.{skilltype.engineering},
                                {skilltype.boarding} = $entity.skill.{skilltype.boarding}
                            ]
                    ]"/>
                
                </do_if>

                <return value="$Pilot" />
            </actions>
        </library>
        <!-- Peoples-->
        <library name="GetCrewsTable_From_Object" purpose="run_actions">
            <params>
                <param name="object" />
            </params>
            <actions>

                <set_value name="$Peoples" exact="table[
                    $capacity = 0,
                    {entityrole.service} = table[], 
                    {entityrole.marine} = table[]
                ]" />

                <do_if value="($object != null) and (not $object.isclass.station)">
                    <set_value name="$Peoples.$capacity" exact="$object.people.capacity" />

                    <do_for_each name="$Role" in="[entityrole.service, entityrole.marine]" >
                        <set_value name="$Peoples.{$Role}" exact="[]" />
                        <do_for_each name="$Crew" in="$object.people.{$Role}.list">

                            <set_value name="$macro" exact="$object.people.{$Crew}.macro" />
                            <set_value name="$faction" exact="''" />
                            <set_value name="$faction" exact="Main.$FactionByCharMacro.{$macro}" chance="Main.$FactionByCharMacro.{$macro}? * 100"/>

                            <append_to_list name="$Peoples.{$Role}" exact="table
                                [
                                $name           = $object.people.{$Crew}.name,
                                $combinedskill  = $object.people.{$Crew}.combinedskill,
                                $isfemale       = $macro.isfemale,
                                $faction        = $faction,
                                $macro          = $macro,
                                $skill          = table
                                    [
                                    {skilltype.management}  = $object.people.{$Crew}.skill.{skilltype.management},
                                    {skilltype.morale}      = $object.people.{$Crew}.skill.{skilltype.morale},
                                    {skilltype.piloting}    = $object.people.{$Crew}.skill.{skilltype.piloting},
                                    {skilltype.engineering} = $object.people.{$Crew}.skill.{skilltype.engineering},
                                    {skilltype.boarding}    = $object.people.{$Crew}.skill.{skilltype.boarding}
                                ]
                            ]" />
                        </do_for_each>
                    </do_for_each>
                </do_if>

                <return value="$Peoples" />
            </actions>
        </library>









        <!-- BUILD 
        -->
        <!--ADD BUILD TASK 
            Yalnızca shipbuild işlemlerini ve Main.$BuildTaskIDs listesinde olan tasklar için çalıştıracağız 
            LUA içinden yaptığımız BuildTask Orderların işleyişini bu 2 foksiyon (Player_Build_Added, Player_Build_Started) ile denetleyeceğiz
            lua içindeyken add yaptığımızdan dolayı add olayı luadan çıkmadan gerçekleşiyor, 
            md içindeki recevied_lua henüz başlamamış oluyor
            build_added deki tetiklemeyi kontrol edebilmek için bu cue yi geciktireceğiz.
            * Player_build_started lua dan çıktıktan sonra tetikleniyor ancak add ile uyumlu çalışması için
                ikisinin de delay sürelerini aynı şekilde geciktireceğiz
            * Böylece md içinde recevied den sonra bu cueler sırasıyla add ve started başlamış olacak
                Order shipbuild ile task almış ve Main.$BuildTaskIDs listesinde de varsa denetimini ele alcağız 
                    a- bekleme sırası > 0  (malzeme eksikliği vb.. var) ship objesi ya da processors henüz oluşmamıştır.    ADD
                    b- bekeleme sırası = 0 (build_started) oluştuğunda ise bu takip cueyi sonlandıracağız                   STARTED
            (İstasyon task orderı; restock, shipmodification vb diğer işler için ise bu taskı direk atlayacağız)
        -->
        <cue name="Player_Build_Added" instantiate="true" namespace="this">
            <conditions>
                <check_all>
                    <event_player_build_added />
                    <check_value value="event.param.exists and event.param.isshipbuild" />
                </check_all>
            </conditions>
            <actions>
                <create_group groupname="$buildercomponents" />

                <set_value name="$build" exact="event.param"/>
                <set_value name="$shipyard" exact="event.param2"/>

                <set_value name="$buildprocessor" exact="@$build.buildprocessor"/>
                <set_value name="$buildmodule" exact="@$buildprocessor.buildmodule"/>

                <!-- 
                <debug_text text="'PLAYER     BUILD     ADD   Part 1 - buildtask = %s , buildingcontainer = %s &lt;%s&gt; , buildmodule = %s &lt;%s&gt; , buildprocessor = %s &lt;%s&gt;'.[event.param, event.param2, event.param2.knownname, $buildmodule, @$buildmodule.knownname, @event.param.buildprocessor, @event.param.buildprocessor.knownname]" chance="0"/>
                <debug_text text="'container = %s'.[$shipyard.knownname]" />
                <debug_text text="'                 .builds.queued      = %s'.[$shipyard.builds.queued]" />
                <debug_text text="'                 .builds.inprogress  = %s'.[$shipyard.builds.inprogress]" />
                <debug_text text="'                 .builds.todelete    = %s'.[$shipyard.builds.todelete]" />
                -->
                <set_value name="$cue" exact="this" />
                
                <set_value name="$price" exact="0"/>
                <set_value name="$RFMKey" exact="0"/>
                <set_value name="$ShipKey" exact="0"/>
                
                <set_value name="$cancell" exact="not (event.param.exists and event.param.isshipbuild)" />

                <set_value name="$extrBuild" exact="table[
                    $base                           = $build.base,
                    $buildmodule                    = $build.buildmodule,
                    $buildobject	                = $build.buildobject,
                    $buildprocessor	                = $build.buildprocessor,
                    $construction	                = $build.construction,
                    $constructionsequence	        = $build.constructionsequence,
                    $consumables	                = $build.consumables,
                    $exists	                        = $build.exists,
                    $faction	                    = $build.faction,
                    $isexpansion	                = $build.isexpansion,
                    $isprocessing	                = $build.isprocessing,
                    $isrecycleshipbuild	            = $build.isrecycleshipbuild,
                    $isrestock	                    = $build.isrestock,
                    $isshipbuild	                = $build.isshipbuild,
                    $isshipmodification	            = $build.isshipmodification,
                    $issoftwareonlyupgrade	        = $build.issoftwareonlyupgrade,
                    $isupgrade	                    = $build.isupgrade,
                    $loadout	                    = $build.loadout,
                    $macro	                        = $build.macro,
                    $mayrequireconstructionvessel   = $build.mayrequireconstructionvessel,
                    $object	                        = $build.object,
                    $position	                    = $build.position,
                    $price	                        = $build.price,
                    $rotation	                    = $build.rotation,
                    $time	                        = $build.time,
                    $transferredamount	            = $build.transferredamount,
                    $zone                           = $build.zone
                ]" />
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$extrBuild" />
                    <param name="recursiondepth" value="2" />
                    <param name="nodename" value="' ADD build Info  (Continue for Check in BuildTaskIDs = %s) = '.[if $cancell then 'NO' else 'YES']" />
                    <param name="DebugChance" value="0" />
                </run_actions>

            </actions>
            <delay exact="1ms"/>
            <!-- luadan construct verdiğimiz anda luadan çıkamadan burası tetikleniyor 
                parente delay koyarak 2 parça yaptık böylece alt cueler 1. action başladığında etkin olacak,
                pause halinde iken cancelbuild edilirse build ve buildercomponents değişkenlerinin tanımlı olması gerekiyor (1.kısma koyduk)
                alt cuelerin condition kontrol eklemesi yapalım
            -->
            <actions>
                <set_value name="$testdebugchance" exact="0" />

                <debug_text text="'PLAYER     BUILD     ADD   Part 2 - buildtask = %s , buildingcontainer = %s'.[event.param, event.param2]" chance="0"/>


                <do_if value="not $cancell and event.param.exists">

                    <do_if value="Main.$BuildTaskIDs? and (typeof Main.$BuildTaskIDs == datatype.list)">

                        <do_for_each name="$entry" in="Main.$BuildTaskIDs" counter="$i">
                            <set_value name="$a" exact="$build"/>
                            <set_value name="$b" exact="$entry.$build"/>
                            <do_if value="$a == $b">
                                <do_if value="$entry.$RFMKey?">
                                    <set_value name="$que" exact="$i" />
                                    <break />
                                </do_if>
                                <do_else>
                                    <debug_text text="'  BuildTaskIDs listesinde build %s için RFMKey propertysi bulunamadı.(@_Fikret)'.[@$a]" />
                                </do_else>
                            </do_if>
                        </do_for_each>

                        <do_if value="$que?">

                            <set_value name="$shipyard" exact="event.param2"/>
                            <set_value name="$buildprocessor" exact="event.param.buildprocessor"/>
                            
                            <set_value name="$price" exact="$build.price"/>

                            <add_to_group groupname="$buildercomponents" object="$shipyard" chance="if $shipyard != null then 100 else 0"/>
                            <add_to_group groupname="$buildercomponents" object="$buildprocessor" chance="if $buildprocessor != null then 100 else 0"/>

                            <!-- taskı liteden, started içinde finish ya da cancel olduğundada sileceğiz -->
                            <set_value name="Main.$BuildTaskIDs.{$que}.$build" exact="$build" />

                            <set_value name="$entry" exact="Main.$BuildTaskIDs.{$que}" />
                            <set_value name="$RFMKey" exact="$entry.$RFMKey"/>
                            <set_value name="$ShipKey" exact="$entry.$ShipKey"/>
                            <set_value name="$ShipIDX" exact="$ShipKey"/>
                            
                            <set_value name="$batchprocessing" exact="@$entry.$batchprocessing"/>
                            <do_if value="$batchprocessing == null">
                                <set_value name="$batchprocessing" exact="false" />
                            </do_if>

                            <debug_text text="'PLAYER BUILD ADD RFM_%s_%s , [que %s] build.&lt;%s&gt; , buildingcontainer = %s %s &lt;%s&gt; , macro = %s'.[$RFMKey, $ShipKey, $que, $build, $build.object.knownname, $build.object.idcode, $build.object, $build.macro]" chance="Main.$DebugChance"/>
                            
                            <do_if value="Main.$RebuildCues.{$RFMKey}.{$ShipKey}?">
                                <do_if value="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue.exists">
                                    <debug_text text="'  RFMKey_%s_%s  rebuild.cue.%s İptal ediliyor..'.[$RFMKey, $ShipKey, @Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue]" chance="(Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue != null) * Main.$DebugChance"/>
                                    <cancel_cue cue="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue" />
                                </do_if>
                                <do_else>
                                    <debug_text text="'  RFMKey_%s_%s  no rebuild.cue.exists..'.[$RFMKey, $ShipKey]" chance="Main.$DeepDebug"/>
                                </do_else>
                            </do_if>
                            
                            <debug_text text="'  RFMKey_%s_%s  new rebuild.cue.%s Set ediliyor..'.[$RFMKey, $ShipKey, $cue]" chance="Main.$DeepDebug"/>
                            <run_actions ref="Set_RebuildCueTable">
                                <param name="RFMKey"                value="$RFMKey" />
                                <param name="ShipKey"               value="$ShipKey" />
                                <param name="cue"                   value="$cue" />
                                <param name="shipyard"              value="$shipyard" />
                                <param name="build"                 value="$build" />
                                <param name="isWaitingForRebuild"   value="false" />
                                <param name="respondMsg"            value="readtext.{Main.$tPage}.{9057}" />
                                <param name="respond"               value="table[]" />
                            </run_actions>

                            <run_actions ref="Check_FleetLockStatus">
                                <param name="RFMKey" value="$RFMKey" />
                                <param name="batchprocessing" value="$batchprocessing" />
                                <param name="isdebug" value="false" />
                            </run_actions>
            
                            <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                                    $fleetID = $RFMKey,
                                    $shipID = $ShipKey,
                                    $Record = Main.$FleetRecords.{$RFMKey}.{$ShipKey},
                                    $RebuildCue = Main.$RebuildCues.{$RFMKey}.{$ShipKey},
                                    $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                                    $description = 'Build Task Added'
                                ]" chance="player.entity.$Flag_RFM_Menu? * 100 * ( not $batchprocessing )"/>

                            <debug_text text="'Build added [%s_%s] build.&lt;%s&gt; , buildingcontainer = %s %s &lt;%s&gt; , macro = %s, $batchprocessing = %s'.[$RFMKey, $ShipKey, $build, $build.object.knownname, $build.object.idcode, $build.object, $build.macro, $batchprocessing]" chance="Main.$DeepDebug"/>

                            <!--  DEBUG -->
                            <include_actions ref="Let_RFM_LogFileNames" />
                            <debug_to_file text="'    ( %s ) Build Task Added to RFM_%s_ $build = %s - , macro = %s , buildprocessor = %s , buildingcontainer = &lt;%s&gt; %s %s  Age: %s'.[$ShipKey, $RFMKey, $build, $build.macro, $buildprocessor, $shipyard, $shipyard.knownname, $shipyard.idcode, player.age]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                            <do_if value="not $batchprocessing">
                                <include_actions ref="PrintBuildTaskIDs" />
                                <!-- ALL REBUILD CUES -->
                                <run_actions ref="Debug_AllRebuildCues"/>
                                <!-- REBUILD CUES -->
                                <run_actions ref="Debug_RebuildCue">
                                    <param name="RFMKey" value="$RFMKey" />
                                </run_actions>
                            </do_if>
    
                        </do_if>
                        <do_else>
                            <set_value name="$cancell" exact="true" />
                        </do_else>

                    </do_if>
                    <do_else>
                        <set_value name="$cancell" exact="true" />
                    </do_else>

                </do_if>

                <do_if value="$cancell">
                    <debug_text text="'    MISMATCH TASK. CANCELLING BUILD ADD CUE. (exists = %s , isshipbuild = %s) (%s, %s RFM_%s_%s)'.[$build.exists, @$build.isshipbuild, @$build.faction, @$build.macro.name, $RFMKey, $ShipKey]" chance="Main.$DeepDebug"/>
                    <cancel_cue cue="this" />
                </do_if>

            </actions>
            <cues>
                
                <cue name="Player_Build_Added_Cancel_Build">
                    <conditions>
                        <check_all>
                            <check_any>
                                <event_player_build_cancelled build="$build"/>
                                <event_object_destroyed group="$buildercomponents"/>
                            </check_any>
                            <check_value value="$build?" />
                            <check_value value="$buildercomponents?" />
                            <check_value value="$que?" />
                            <!-- oyun pausedeyken parentin 2.parçası etkin olmuyor ve alt cueler kontrole başlıyor
                                $que almış isek bu cue çalışsın 
                            
                            <debug_text text="'CHECK Conditions $que? %s %s %s  ,  @$build = %s, @$buildercomponents = %s'.[$que?, $build?, $buildercomponents?, @$build, @$buildercomponents]" />    
                            -->
                        </check_all>
                    </conditions>
                    <actions>
                        <set_value name="$event"        exact="'Build %s was CANCELLED'.[$build]"/>
                        <do_if value="event.name == 'event_object_destroyed'">
                            <set_value name="$event"    exact="'Station %s was DESTROYED. %s'.[(if $buildprocessor != null then 'buildprocessor %s'.[$buildprocessor] else '') , $event]"/>
                        </do_if>

                        <do_for_each name="$entry" in="Main.$BuildTaskIDs" counter="$i" reverse="true">
                            <do_if value="not $entry.$build?">
                                <remove_value name="$entry" />
                            </do_if>
                            <do_else>
                                <do_if value="$entry.$build == $build">
                                    <set_value name="$que" exact="$i" />
                                    <break />
                                </do_if>
                            </do_else>
                        </do_for_each>
                        <debug_text text="'  RFMKey_%s_%s  removing BuildTaskIDs[%s]..'.[$RFMKey, $ShipKey, $que]" chance="Main.$DeepDebug"/>
                        <remove_value name="Main.$BuildTaskIDs.{$que}" />
                        <signal_cue_instantly cue="ClearBuildTaskStacks" param="table[$fleetID = $RFMKey, $shipID = $ShipKey]"/>

                        <!-- Lost Shipe çevireceğiz -->
                        <debug_text text="'  RFMKey_%s_%s  cue.%s İptal ediliyor..'.[$RFMKey, $ShipKey, Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue]" chance="Main.$DeepDebug"/>
                        <cancel_cue cue="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue" />
                        
                        <set_value name="$Ship_Name" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$name"/>
                        <!-- İstasyon destroy olduğunda oyunun normalinde parayı geri vermiyor, biz geri alacağız -->
                        <do_if value="event.name == 'event_object_destroyed'">
                            <!-- '%s was destroyed.' -->
                            <set_value name="$finishStatus" exact="readtext.{Main.$tPage}.{6049}.[if not $shipyard.iswreck then 'Station build processor' else 'station']" />

                            <transfer_money from="$shipyard" to="faction.player" amount="$price"/>
                            
                            <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4015}">
                                <replace string="'$COMMANDER$'" with="readtext.{Main.$tPage}.{500} + '_' + $RFMKey + '_' "/>
                                <replace string="'$SHIP$'" with="$Ship_Name + ' ( ' + $ShipKey + ' )' "/>
                                <replace string="'$STATUS$'" with="$finishStatus"/>
                            </substitute_text>
                            <write_to_logbook category="upkeep" title="'\033' + Main.$normalColor + readtext.{Main.$tPage}.{2} + '\033X'" text="$LogMsg" money="$price" chance="if global.$upbRF_DATA.$Editing.$write_to_logbook then 100 else 0"/>
                        </do_if>

                        
                        <set_value name="$finishStatus" exact="readtext.{Main.$tPage}.{6047}" />
                        <!-- Lost Ship oluşturacağız-->
                        <debug_text text="'  RFMKey_%s_%s  RebuildCues table kaldırılıyor..'.[$RFMKey, $ShipKey, Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue]" chance="Main.$DeepDebug * Main.$RebuildCues.{$RFMKey}.{$ShipIDX}?"/>
                        <remove_value name="Main.$RebuildCues.{$RFMKey}.{$ShipIDX}" chance="Main.$RebuildCues.{$RFMKey}.{$ShipIDX}? * 100" />

                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildTryNum" exact="0" />
                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildStartTime" exact="null" />

                        <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                                $fleetID = $RFMKey,
                                $shipID = $ShipIDX,
                                $Record = Main.$FleetRecords.{$RFMKey}.{$ShipIDX},
                                $RebuildCue = null,
                                $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                                $description = 'Build Task Cancelled %s_%s'.[$RFMKey, $ShipIDX]
                            ]" chance="player.entity.$Flag_RFM_Menu? * 100"/>

                        <cancel_cue cue="parent" />

                        <run_actions ref="Check_FleetLockStatus">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="isdebug" value="false" />
                        </run_actions>

                        <debug_text text="'%s. (RFM_%s_%s) Shipyard = %s %s &lt;%s&gt; [que = %s]'.[$event, $RFMKey, $ShipKey, $build.object.knownname, $build.object.idcode, $build.object, $que]" chance="Main.$DebugChance"/>

                        <!--  DEBUG -->
                        <!-- FLEET RECORD TABLE -->
                        <run_actions ref="Debug_FleetRecord_NoOthers">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                        <!-- ALL REBUILD CUES -->
                        <run_actions ref="Debug_AllRebuildCues"/>
                        <!-- REBUILD CUES -->
                        <run_actions ref="Debug_RebuildCue">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>

                    </actions>
                </cue>


            </cues>
        </cue>
        <!--START BUILD TASK     
            Yalnızca shipbuild işlemlerini ve Main.$BuildTaskIDs listesinde olan tasklar için çalıştıracağız
                bekleme sırası = 0  (malzeme sorunu yok, progress işliyor)s
        -->
        <cue name="Player_Build_Started" instantiate="true" namespace="this">
            <conditions>
                <check_all>
                    <event_player_build_started />
                    <check_value value="event.param3.exists and event.param3.isshipbuild" />
                    <check_value value="event.param3.faction == faction.player" />
                </check_all>
            </conditions>
            <actions>
                <set_value name="$buildprocessor" exact="event.param" comment="ya da $build.buildprocessor"/>
                <set_value name="$build"    exact="event.param3"/>
                <set_value name="$shipyard" exact="if not $build.exists then (if $buildprocessor.build.exists then $buildprocessor.build.object else null) else $build.object" comment="ya da $buildprocessor.build.object"/>
                <set_value name="$RFMKey"   exact="0"/>
                <set_value name="$ShipKey"  exact="0"/>
                <set_value name="$ShipIDX"  exact="0"/>
                <set_value name="$cue"      exact="this" />
                <set_value name="$NewShip"  exact="@$buildprocessor.buildanchor" comment="ya da $build.buildobject ya da $build.construction"/>
                <set_value name="$cancell"  exact="not (event.param3.exists and event.param3.isshipbuild)" />

                <set_value name="$Ship_CommanderKey" exact="0"/>
                <set_value name="$Ship_Commander" exact="null"/>
                <set_value name="$Ship_Name"    exact="$NewShip.name" />
                <set_value name="$Ship_IdCode" exact="$NewShip.idcode"/>
                <set_value name="$price" exact="0"/>
            
                <set_value name="$testdebugchance" exact="0" />

            </actions>
            <delay exact="1ms"/>
            <actions>
                <debug_text text="'PLAYER   BUILD   STARTED cancell = %s , buildtask = %s , buildprocessor = %s , constructionsequence = %s'.[$cancell, event.param3, event.param, event.param2]" chance="$testdebugchance"/>

                <set_value name="$extrBuild" exact="table[
                    $base                           = @$build.base,
                    $buildmodule                    = @$build.buildmodule,
                    $buildobject	                = @$build.buildobject,
                    $buildprocessor	                = @$build.buildprocessor,
                    $construction	                = @$build.construction,
                    $constructionsequence	        = @$build.constructionsequence,
                    $consumables	                = @$build.consumables,
                    $exists	                        = @$build.exists,
                    $faction	                    = @$build.faction,
                    $isexpansion	                = @$build.isexpansion,
                    $isprocessing	                = @$build.isprocessing,
                    $isrecycleshipbuild	            = @$build.isrecycleshipbuild,
                    $isrestock	                    = @$build.isrestock,
                    $isshipbuild	                = @$build.isshipbuild,
                    $isshipmodification	            = @$build.isshipmodification,
                    $issoftwareonlyupgrade	        = @$build.issoftwareonlyupgrade,
                    $isupgrade	                    = @$build.isupgrade,
                    $loadout	                    = @$build.loadout,
                    $macro	                        = @$build.macro,
                    $mayrequireconstructionvessel   = @$build.mayrequireconstructionvessel,
                    $object	                        = @$build.object,
                    $position	                    = @$build.position,
                    $price	                        = @$build.price,
                    $rotation	                    = @$build.rotation,
                    $time	                        = @$build.time,
                    $transferredamount	            = @$build.transferredamount,
                    $zone                           = @$build.zone, 
                    $cancell                        = if $cancell then 'YES' or 'NO'
                    ]" />
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$extrBuild" />
                    <param name="recursiondepth" value="2" />
                    <param name="nodename" value="' Build START Info  (Check BuildTaskIDs = %s) = '.[if $cancell then 'NO' else 'YES']" />
                    <param name="DebugChance" value="$testdebugchance" />
                </run_actions>

                <do_if value="not $cancell">
                    
                    <do_if value="Main.$BuildTaskIDs? and (typeof Main.$BuildTaskIDs == datatype.list)">
                        
                        <do_for_each name="$entry" in="Main.$BuildTaskIDs" counter="$i">
                            <set_value name="$a" exact="event.param3"/>
                            <set_value name="$b" exact="$entry.$build"/>
                            <do_if value="$a == $b">
                                <set_value name="$que" exact="$i" />
                                <break />
                            </do_if>
                        </do_for_each>
                    </do_if>

                    <!-- üretim alırken rfm kapatılmış olabilir-->
                    <do_if value="$que? and (not Main.$FleetRecords.{Main.$BuildTaskIDs.{$que}.$RFMKey}?)">

                        <set_value name="$RFMKey" exact="Main.$BuildTaskIDs.{$que}.$RFMKey"/>
                        
                        <set_value name="$BuildAbortPassedShips" exact="table[]" />
                        <set_value name="$BuildAbortPassedShips.{$RFMKey}" exact="table[]" />
                        <set_value name="$BuildAbortPassedShips.{$RFMKey}.{$shipyard}" exact="[]" />
                        <append_to_list name="$BuildAbortPassedShips.{$RFMKey}.{$shipyard}" exact="table[
                            $shipID = Main.$BuildTaskIDs.{$que}.$ShipKey,
                            $buildobject = $build.buildobject
                        ]" />

                        <include_actions ref="Log_ClosedRFMConstructs" />

                        <remove_value name="Main.$BuildTaskIDs.{$que}" />
                        <remove_value name="$que" />
                        <signal_cue_instantly cue="ClearBuildTaskStacks" param="table[$fleetID = $RFMKey, $shipID = $ShipKey]"/>
                    </do_if>

                    <do_if value="$que?">
                        <set_value name="$entry" exact="Main.$BuildTaskIDs.{$que}" />
                        <set_value name="$RFMKey" exact="$entry.$RFMKey"/>
                        <set_value name="$ShipKey" exact="$entry.$ShipKey"/>

                        <set_value name="$price" exact="$build.price"/>

                        <debug_text text="'MATCHING SHIP_%s_%s BUILD STARTED param(buildprocessor) = %s, param2(constructionsquance) = %s, param3(buildtask) = %s, $build = %s'.[$RFMKey, $ShipKey, event.param, event.param2, event.param3, $build]" chance="Main.$DebugChance"/>

                        <debug_text text="'  [%s_%s]  cue.%s İptal ediliyor..'.[$RFMKey, $ShipKey, Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue]" chance="Main.$DeepDebug"/>
                        <cancel_cue cue="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue" />
                        
                        <debug_text text="'  [%s_%s]  New cue.%s Set ediliyor..'.[$RFMKey, $ShipKey, $cue]" chance="Main.$DeepDebug"/>
                        <run_actions ref="Set_RebuildCueTable">
                            <param name="RFMKey"                value="$RFMKey" />
                            <param name="ShipKey"               value="$ShipKey" />
                            <param name="cue"                   value="$cue" />
                            <param name="shipyard"              value="$shipyard" />
                            <param name="build"                 value="$build" />
                            <param name="isWaitingForRebuild"   value="false" />
                            <param name="respondMsg"            value="''" />
                            <param name="respond"               value="table[]" />
                        </run_actions>

                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$object" exact="$NewShip"/>
                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$idcode" exact="$NewShip.idcode"/>

                        <run_actions ref="Check_FleetLockStatus">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="isdebug" value="false" />
                        </run_actions>
        
                        <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                                $fleetID = $RFMKey,
                                $shipID = $ShipKey,
                                $Record = Main.$FleetRecords.{$RFMKey}.{$ShipKey},
                                $RebuildCue = Main.$RebuildCues.{$RFMKey}.{$ShipKey},
                                $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                                $description = 'Build Started'
                            ]" chance="player.entity.$Flag_RFM_Menu? * 100"/>

                        <debug_text text="'Build started [%s_%s] %s %s &lt;%s&gt;'.[$RFMKey, $ShipKey, @$NewShip.knownname, @$NewShip.idcode, @$NewShip]" chance="Main.$DeepDebug"/>

                        <!--  DEBUG -->
                        <include_actions ref="Let_RFM_LogFileNames" />
                        <debug_to_file text="'    ( %s ) Build Started to RFM_%s_ $build = %s - Age: %s'.[$ShipKey, $RFMKey, $build, player.age]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                        <!-- FLEET RECORD TABLE -->
                        <run_actions ref="Debug_FleetRecord_NoOthers">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>

                        <!-- ALL REBUILD CUES -->
                        <run_actions ref="Debug_AllRebuildCues"/>
                        <!-- REBUILD CUES -->
                        <run_actions ref="Debug_RebuildCue">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>

                    </do_if>
                    <do_else>
                        <set_value name="$cancell" exact="true" />
                    </do_else>

                    <!--  BuildTaskIDs silinecek ve -->
                    <!-- burdan sonraki değişkenler alt culere için açıldı -->

                    <do_if value="$que?">
                        <set_value name="$ShipIDX" exact="$ShipKey" />
                        <set_value name="$Ship_CommanderKey" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$commanderidx"/>
                        <set_value name="$Ship_Commander" exact="@$RFMCue.$fleetshipsByIdx.{$Ship_CommanderKey}"/>
                        
                        <set_value name="$Ship_Name" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$name"/>
                        <set_value name="$Ship_IdCode" exact="$NewShip.idcode"/>
    
                        <remove_value name="Main.$BuildTaskIDs.{$que}" />
                        <remove_value name="$que" />
                        <signal_cue_instantly cue="ClearBuildTaskStacks" param="table[$fleetID = $RFMKey, $shipID = $ShipKey]"/>
                    </do_if>
                    
                    <set_value name="$lastErrMsg" exact="''" />
                    <set_value name="$finishStatus" exact="''" />

                    <include_actions ref="PrintBuildTaskIDs" />
                    
                </do_if>
                
                <do_if value="$cancell">
                    <debug_text text="'  MISMATCH TASK. CANCELLING BUILD START CUE. isshipbuild = %s, exists = %s (faction = %s) (%s %s&lt;%s&gt; RFM_%s_%s)'.[$build.isshipbuild, $build.exists, $build.faction.shortname, $Ship_Name, @$NewShip.idcode, @$NewShip, $RFMKey, $ShipKey]" chance="Main.$DeepDebug"/>
                    <cancel_cue cue="this" />
                </do_if>
                
            </actions>
            <cues>
                <!-- Start almış bir gemi için dikkat edilecekler;
                    1 - bu esnada rfm kaydından çıkarılmış olabilir
                    3 - istasyon patlayabilir
                -->
                <cue name="Player_Build_Started_Build_Finished">
                    <conditions>
                        <check_any>
                            <event_player_build_finished build="$build"/>
                        </check_any>
                    </conditions>
                    <actions>
                        <!-- PaintMod-->
                        <!-- 
                        <do_if value="Main.$FleetRecords.{$RFMKey}?">
                            <set_value name="$paintmodware" exact="null" />
                            <do_if value="@Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tPaintModWareId.$installed != null">
                                <set_value name="$wareid" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tPaintModWareId.$installed"/>
                                <set_value name="$ware" exact="ware.{$wareid}"/>
                                <debug_text text="'installed paint mod $wareid = %s converted ware = %s'.[$wareid, @$ware.name]" chance="Main.$DeepDebug"/>
                                <do_if value="@Main.$PaintModWares.{$ware} != null">
                                    <set_value name="$paintmodware" exact="$ware" />
                                    <debug_text text="'RFM_%s_%s,  [ %s ] Found Installed Paint Mod. [ %s ]   %s %s&lt;%s&gt;'.[$RFMKey, $ShipIDX, $paintmodware.name, $paintmodware.id, $Ship_Name, $NewShip.idcode, $NewShip]" chance="Main.$DeepDebug"/>
                                </do_if>
                                <do_else>
                                    <debug_text text="'RFM_%s_%s,  [ %s ] Paint Mod is no longer used in the game.. Skipping...  %s %s&lt;%s&gt;'.[$RFMKey, $ShipIDX, Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tPaintModWareId.$installed, $Ship_Name, $NewShip.idcode, $NewShip]" />
                                </do_else>
                            </do_if>
                            <do_else>
                                <debug_text text="'RFM_%s_%s,  No Have Installed PaintMod Record. Skipping.. %s %s&lt;%s&gt;'.[$RFMKey, $ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" />
                            </do_else>

                            <do_if value="$paintmodware != null">
                                <add_paint_mod object="$NewShip" ware="$paintmodware" />
                                <debug_text text="'RFM_%s_%s,  [ %s ] Paint Mod Installed on %s %s&lt;%s&gt;'.[$RFMKey, $ShipIDX, $paintmodware, $Ship_Name, $NewShip.idcode, $NewShip]" chance="Main.$DebugChance"/>
                            </do_if>
                        </do_if>
                        -->
                    </actions>
                    <!-- üretildikten sonra istasyonun gemiye modifikasyon, pilot vs.. aktarma işi için bekliyoruz.
                        restock, shipmodification işlemleri için build_started build<0x0> ile tekrar başlayacak, beklemek yerine orda da yapzılabilirdi.
                    -->
                    <delay exact="1s" />
                    <actions>
                        
                        <debug_text text="'RFM_%s_%s  Build Finished.  %s %s&lt;%s&gt;'.[$RFMKey, $ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" chance="Main.$DebugChance"/>
                        
                        <!-- üretim esnasında rfm kapatılmış olabilir-->
                        <do_if value="not Main.$FleetRecords.{$RFMKey}?">

                            <set_value name="$BuildAbortPassedShips" exact="table[]" />
                            <set_value name="$BuildAbortPassedShips.{$RFMKey}" exact="table[]" />
                            <set_value name="$BuildAbortPassedShips.{$RFMKey}.{$shipyard}" exact="[]" />
                            <append_to_list name="$BuildAbortPassedShips.{$RFMKey}.{$shipyard}" exact="table[
                                $shipID = Main.$BuildTaskIDs.{$que}.$ShipKey,
                                $buildobject = $build.buildobject
                            ]" />
                            <include_actions ref="Log_ClosedRFMConstructs" />

                        </do_if>
                        <do_else>

                            <!-- param = table [ $object = object , $RFMKey = number , $ShipKey = number , $oldShipName = '', $updateUIData = boolean ] -->
                            <signal_cue_instantly cue="BuildedShip_PrepareAndAssignToFleet" param="table[ $object = $NewShip , $RFMKey = $RFMKey , $ShipKey = $ShipIDX , $oldShipName = $Ship_Name, $updateUIData = true]" />
                        </do_else>

                        <!-- diğer alt culerin beklemesini sonlandırıyoruz -->
                        <cancel_cue cue="parent"/>

                    </actions>
                </cue>

                <cue name="Player_Build_Started_Building_Destroyed">
                    <conditions>
                        <event_object_destroyed object="$buildprocessor"/>
                    </conditions>
                    <actions>
                        <debug_text text="'Station &lt;%s&gt; %s %s was DESTROYED, object = &lt;%s&gt; == buildprocessor = &lt;%s&gt;, Cancelling RFM_%s_%s - %s &lt;%s&gt;'.[@$shipyard, @$shipyard.knownname, @$shipyard.idcode, event.object, @$buildprocessor, $RFMKey, $ShipIDX, $Ship_Name, $NewShip]" chance="$testdebugchance"/>
                        <do_if value="$shipyard != null and event.object == $buildprocessor">
                            <set_value name="$event" exact="''" />
                            <set_value name="$event"    exact="'Station %s was DESTROYED. %s'.[(if $buildprocessor != null then 'buildprocessor %s'.[$buildprocessor] else '') , $event]"/>
                            <debug_text text="'%s. Shipyard = &lt;%s&gt; %s %s (Cancelling build.. RFM_%s_%s)'.[$event, $shipyard, $shipyard.knownname, $shipyard.idcode, $RFMKey, $ShipIDX]" chance="Main.$DebugChance"/>
                            
                            <!-- Üretim tamamlanamadan istyasyon yokedildi 
                                LOST Ship oluşturacağız
                                Tabloları sileceğiz 
                                    recorda atanmış object ve idcode
                                    rebuildcue tablosunda shipkey kaydı
                                parent cueyi kapatıyoruz
                            -->
                            <!-- İstasyon destroy olduğunda oyunun normalinde parayı geri vermiyor, biz geri alacağız -->
                            <transfer_money from="$shipyard" to="faction.player" amount="$price"/>

                            <!-- Lost Ship oluşturacağız-->                            
                            <set_value name="$finishStatus" exact="'the %s was destroyed'.[if not $shipyard.iswreck then 'Station build processor' else 'station']" />
                            <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4013}">
                                <replace string="'$COMMANDER$'" with="readtext.{Main.$tPage}.{500} + '_' + $RFMKey + '_' "/>
                                <replace string="'$SHIP$'" with="$Ship_Name + ' ' + $Ship_IdCode + ' ( ' + $ShipIDX + ' )' "/>
                                <replace string="'$STATUS$'" with="$finishStatus"/>
                            </substitute_text>
                            <write_to_logbook category="upkeep" title="'\033' + Main.$normalColor + readtext.{Main.$tPage}.{2} + '\033X'" text="$LogMsg" money="$price" chance="if global.$upbRF_DATA.$Editing.$write_to_logbook then 100 else 0"/>
                            
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$object" exact="null"/>
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$idcode" exact="''"/>
    
                            <remove_value name="Main.$RebuildCues.{$RFMKey}.{$ShipIDX}" />
    
                            <run_actions ref="Check_FleetLockStatus">
                                <param name="RFMKey" value="$RFMKey" />
                            </run_actions>
        

                            <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                                    $fleetID = $RFMKey,
                                    $shipID = $ShipKey,
                                    $Record = Main.$FleetRecords.{$RFMKey}.{$ShipKey},
                                    $RebuildCue = null,
                                    $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                                    $description = 'Building Ship Container Destroyed'
                                ]" chance="player.entity.$Flag_RFM_Menu? * 100"/>

                            <!-- DEBUG -->
                            <include_actions ref="PrintBuildTaskIDs" />
                            <set_value name="$pText" exact="'    REMOVED RFM_%s_( %s ) %s  from RebuildCues Table , Station was Destroyed ,  Age: %s, %s'.[$RFMKey, $ShipIDX, $Ship_Name, player.age, player.systemtime.{'%F-%X'}]" />
                            <!--  DEBUG -->
                            <debug_to_file text="'    ( %s ) Build Cancelling to RFM_%s_ $build = %s , Station Destroyed - Age: %s'.[$ShipKey, $RFMKey, $build, player.age]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                            <!-- FLEET RECORD TABLE -->
                            <run_actions ref="Debug_FleetRecord_NoOthers">
                                <param name="RFMKey" value="$RFMKey" />
                            </run_actions>
    
                            <!-- ALL REBUILD CUES -->
                            <run_actions ref="Debug_AllRebuildCues"/>
                            <!-- REBUILD CUES -->
                            <run_actions ref="Debug_RebuildCue">
                                <param name="RFMKey" value="$RFMKey" />
                                <param name="inserttext" value="$pText" />
                            </run_actions>
    
                            <!-- Diğer alt cuelerin çalışmasını sonlandırıyoruz-->
                            <cancel_cue cue="parent"/>
    
                        </do_if>
                        <do_else>
                            <debug_text text="'  MISMATCH OBJECT.  object = &lt;%s&gt; == buildprocessor = &lt;%s&gt;   , RESETTING BUILD START CUE.  (RFM_%s_%s) Ship = %s %s&lt;%s&gt;'.[event.object, $buildprocessor, $RFMKey, $ShipKey, $Ship_Name, @$NewShip.idcode, @$NewShip]" chance="Main.$DeepDebug"/>
                            <reset_cue cue="this" />
                        </do_else>
                    </actions>
                </cue>
            </cues>
        </cue>


        <!-- PREPARE FOR ASSIGN 
            param = table [ $object = object , $RFMKey = number , $ShipKey = number , $oldShipName = '', $updateUIData = boolean ] -->
        <!-- Üretilen gemi record kaydında mevcutsa tüm tabloları güncelle ve filoya bağla 
            IN : param = table [ $object = object , $RFMKey = number , $ShipKey = number , $oldShipName = '', $updateUIData = boolean ]
            resultmessage {$finishStatus, $lastErrMsg}  $lastErrMsg = '' ise bağlama başaltıldı.
        -->
        <cue name="BuildedShip_PrepareAndAssignToFleet" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled />
            </conditions>
            <actions>
                <set_value name="$object" exact="event.param.$object" />
                <set_value name="$RFMKey" exact="event.param.$RFMKey" />
                <set_value name="$ShipKey" exact="event.param.$ShipKey" />
                <set_value name="$updateUIData" exact="event.param.$updateUIData" />
                <set_value name="$oldShipName" exact="event.param.$oldShipName" />

                <do_if value="$oldShipName == ''">
                    <set_value name="$oldShipName" exact="$object.knownname" />
                </do_if>
                <set_object_name object="$object" name="$oldShipName"/>
                <set_value name="$locshiptext" exact="'%s %s&lt;%s&gt;'.[$object.knownname, $object.idcode, $object]" />
                <include_actions ref="Let_RFM_LogFileNames" />

                <!-- 1 -->
                <debug_text text="'RFM_%s_%s  Build Finished.  %s'.[$RFMKey, $ShipKey, $locshiptext]" chance="Main.$DebugChance"/>

                <debug_to_file text="'    ( %s ) Build Finished.  %s'.[$ShipKey, $locshiptext]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommandsDeep"/>
                <debug_to_file text="'    ( %s ) Build Finished.  %s'.[$ShipKey, $locshiptext]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$CommandDeep"/>
                <debug_to_file text="'  ( %s ) Build Finished.  %s'.[$ShipKey, $locshiptext]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                <set_value name="$finishStatus" exact="'Build Finished'" />
                <set_value name="$lastErrMsg" exact="''" />

                <do_if value="Main.$FleetRecords.{$RFMKey}.keys.list.indexof.{$ShipKey}" comment="Filo kaydı mevcutsa bağla">

                    <!-- transferring people didn't work and there's no way to get at the DB to generate any, so we'll just clone the pilot and set skills manually -->
                    <debug_text text="'  RFM_%s_%s  Changing People Skills.  %s'.[$RFMKey, $ShipKey, $locshiptext]" chance="Main.$DeepDebug"/>
                    <debug_to_file text="'    ( %s ) Changing People Skills ...'.[$ShipKey]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                    <run_actions ref="Set_Personel_Skills_ToObject_FromRecord">
                        <param name="object" value="$object" />
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="ShipKey" value="$ShipKey" />
                        <param name="resetskills" value="not global.$upbRF_DATA.$Editing.$personnelcloning" />
                    </run_actions>
                    
                    <debug_text text="'  RFM_%s_%s  Records updating.  %s'.[$RFMKey, $ShipKey, $locshiptext]" chance="Main.$DeepDebug"/>
                    <!-- loadout tablosunu güncelle -->
                    <set_value name="Main.$Loadouts.{$RFMKey}.{$ShipKey}" exact="$object.loadout"/>
                    <!-- RFM Managere gemiyi ekle-->
                    <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>
                    <add_to_group groupname="$RFMCue.$Subordinates" object="$object"/>
                    <set_value name="$RFMCue.$fleetshipsByIdx.{$ShipKey}" exact="$object"/>
                    <set_value name="$RFMCue.$fleetshipsByComp.{$object}" exact="$ShipKey"/>
                    <!-- Record tablosunu güncelle-->
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$object" exact="$object"/>
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$idcode" exact="$object.idcode"/>
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$destroyed" exact="false"/>
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$destroyedtime" exact="null"/>
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$reBuildTryNum" exact="0" />
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$reBuildStartTime" exact="null"/>
                    
                    <!-- RFM Fleet tablosunu güncelle -->
                    <!-- sonraki satırlar Add Remove olayları içinde yazıldığı için kaldırıldı
                    <set_value name="$index" exact="Main.$RMFleets.{$RFMKey}.$destroyedShipKeys.indexof.{$ShipKey}" />
                    <do_if value="$index > 0">
                        <remove_value name="Main.$RMFleets.{$RFMKey}.$destroyedShipKeys.{$index}" />
                    </do_if>
                    -->
                    <do_if value="$ShipKey == 1">
                        <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$object" exact="$object"/>
                    </do_if>

                    <!-- CHECK tPilot ve tBulkCrew and other record.tables -->
                    <!-- patlamış gemilerin tPilot ve tBulkCrew kayıtlarını güncelleyelim, ayrıca son olarak içerde record.tablosu check edilecek -->
                    <run_actions ref="UpdatePersonelTable">
                        <param name="object" value="$object" />
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="ShipKey" value="$ShipKey" />
                    </run_actions>

                    <!-- CHECK tShipPlan ve Individual -->
                    <!-- patlamış gemilerin tShipPlan ve Individual kayıtları olmayabilir. üretimden çıkanı kontrol edelim -->
                    <debug_text text="'  RFM_%s_%s  Checking tShipPlan.  %s'.[$RFMKey, $ShipKey, $locshiptext]" chance="Main.$DeepDebug"/>
                    <!-- { RFMKey = RFMKey , ShipKey = ShipKey [, Record = Main.$FleetRecords.{$RFMKey}.{$ShipKey}][, isFleetCheck = false][, FleetRecord = Main.$FleetRecords.{$RFMKey}][, isdebug = true] }-->
                    <signal_cue_instantly cue="Fix_Ship_tShipPlan2" param="table[
                        $RFMKey = $RFMKey, 
                        $ShipKey = $ShipKey,
                        $isdebug = true
                    ]" />
                    <!-- _Check_Ship_Record UpdatePersonelTable edildiğinde kontrol edilmiş olacak-->
                    <debug_text text="'  RFM_%s_%s  Setting Individuals.  %s'.[$RFMKey, $ShipKey, $locshiptext]" chance="Main.$DeepDebug"/>
                    <!-- Gemiye ait Indivudual Kaydını Set edelim-->
                    <do_if value="not player.entity.$IIStack?">
                        <set_value name="player.entity.$IIStack" exact="[]"/>
                    </do_if>
                    <!-- luadan boşaltılan liste, yapı olarak md içinde table olarak algılanıyor-->
                    <do_if value="typeof player.entity.$IIStack == datatype.table">
                        <set_value name="player.entity.$IIStack" exact="[]"/>
                    </do_if>
                    <set_value name="$IndividualInstructions" exact="table[
                        $controllable = $object,
                        $RFMKey = $RFMKey,
                        $ShipKey = $ShipKey,
                        $tIndividualInstructions = Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$tIndividualInstructions,
                        $isdebug = (if Main.$DeepDebug == 100 then true else false)
                    ]" />
                    <append_to_list name="player.entity.$IIStack" exact="$IndividualInstructions" />
                    <raise_lua_event name="'Set_IndividualInstructions'" />


                    <debug_text text="'  RFM_%s_%s  Check And Assign To Fleet.  %s'.[$RFMKey, $ShipKey, $locshiptext]" chance="Main.$DeepDebug"/>
                    <debug_to_file text="'    ( %s ) Check and Assign to RFM_%s_'.[$ShipKey, $RFMKey]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>

                    <signal_cue_instantly cue="CheckPromoteAndAssignToFleet" param="[$RFMKey, $ShipKey, $object]" />

                    <debug_text text="' RFM_%s_%s  DONE...  %s'.[$RFMKey, $ShipKey, $locshiptext]" chance="Main.$DeepDebug"/>

                    <debug_to_file text="'RFM_%s_( %s ) ..DONE.. NewShip = %s   Age: %s'.[$RFMKey, $ShipKey, $locshiptext, player.age]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommands"/>
                    <debug_to_file text="'( %s ) ..DONE.. NewShip = %s .   Age: %s'.[$ShipKey, $locshiptext, player.age]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command"/>
                    <debug_to_file text="'( %s ) ..DONE.. NewShip = %s .   Age: %s'.[$ShipKey, $locshiptext, player.age]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuild"/>

                </do_if>
                <do_else>
                    <!-- 2 -->
                    <debug_text text="'RFM_%s_%s  Record Kaydı yok. Fleet Kaydından çıkarılmış..'.[$RFMKey, $ShipKey]" chance="Main.$DebugChance"/>

                    <debug_to_file text="'    ( %s ) Record Kaydı yok. Fleet Kaydından çıkarılmış.'.[$ShipKey]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuild"/>

                    <set_value name="$rText" exact="'( -%s ) %s - %s  %s : %s %s'.[$ShipKey, $locshiptext, $finishStatus, $lastErrMsg, @$object.station.knownname, @$object.station.idcode]" />

                    <debug_to_file text="'RFM_%s_%s  Age: %s'.[$RFMKey, $rText, player.age]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommandsDeep"/>
                    <debug_to_file text="'%s  Age: %s'.[$rText, player.age]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$CommandDeep"/>
                    <debug_to_file text="'%s  Age: %s'.[$rText, player.age]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>

                </do_else>
                
                <!-- RebuildCues Tablosundan kaldırıyoruz-->
                <remove_value name="Main.$RebuildCues.{$RFMKey}.{$ShipKey}" />
                <set_value name="$pText" exact="'    REMOVED RFM_%s_( %s ) %s  from RebuildCues Table ,  Age: %s, %s'.[$RFMKey, $ShipKey, $locshiptext, player.age, player.systemtime.{'%F-%X'}]" />

                <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                        $fleetID = $RFMKey,
                        $shipID = $ShipKey,
                        $Record = Main.$FleetRecords.{$RFMKey}.{$ShipKey},
                        $RebuildCue = null,
                        $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                        $description = 'Builded Ship Prepared and Assigned'
                    ]" chance="player.entity.$Flag_RFM_Menu? * 100"/>


                <debug_text text="'Prepare And Assign To Fleet %s_%s  $Flag_RFM_Menu? = %s'.[$RFMKey, $ShipKey, player.entity.$Flag_RFM_Menu? ]" chance="Main.$DebugChance"/>

            </actions>
            <delay exact="(player.entity.$Flag_RFM_Menu? * 10)ms" />
            <actions>
                <!-- DEBUG -->
                <!-- ALL REBUILD CUES -->
                <run_actions ref="Debug_AllRebuildCues"/>
                <!-- FLEET RECORD TABLE -->
                <run_actions ref="Debug_FleetRecord">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>
                <!-- REBUILD CUES -->
                <run_actions ref="Debug_RebuildCue">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="inserttext" value="$pText" />
                </run_actions>
            </actions>
        </cue>

        <!-- ASSIGN SHIP TO FLEET
            param List [ RFMKey  a value for fleet Key, ShipKey  a value for Ship Key, NewShip  an object for Assign ] -->
        <cue name="CheckPromoteAndAssignToFleet" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled />
            </conditions>
            <actions>
                <set_value name="$RFMKey" exact="event.param.{1}" />
                <set_value name="$ShipKey" exact="event.param.{2}" />
                <set_value name="$NewShip" exact="event.param.{3}" />

                <include_actions ref="Let_RFM_LogFileNames" />

                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>

                <set_value name="$FComp" exact="$RFMCue.$fleetshipsByComp.clone"/>
                <set_value name="$FIndx" exact="$RFMCue.$fleetshipsByIdx.clone"/>
                <set_value name="$FRec" exact="Main.$FleetRecords.{$RFMKey}.clone"/>

                <debug_to_file text="'Checking New Promote .......... [ %s ] NewShip = &lt;%s&gt; %s %s , RFM.Commander = ( %s ) &lt;%s&gt; %s %s (%s)  Age: %s
                '.[$ShipKey, $NewShip, $NewShip.knownname, $NewShip.idcode, 
                if @$FComp.{$RFMCue.$PromotedCommander} != null then $FComp.{$RFMCue.$PromotedCommander} else 'dead',
                $RFMCue.$PromotedCommander, 
                if $RFMCue.$RMCommanderName == '' then 
                    if @$RFMCue.$PromotedCommander != null then
                        $RFMCue.$PromotedCommander.knownname 
                    else ''
                else $RFMCue.$RMCommanderName,
                if $RFMCue.$RMCommanderIdCode == '' then 
                    if @$RFMCue.$PromotedCommander != null then
                        $RFMCue.$PromotedCommander.idcode 
                    else ''
                else $RFMCue.$RMCommanderIdCode,
                if $RFMCue.$PromotedCommander != null then $RFMCue.$PromotedCommander.sector.knownname else '',
                player.age
                ]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignment"/>

                <do_if value="$ShipKey == 1" comment="RFM nin Gerçek Commanderı Üretildi">
                    <debug_to_file text="'      &quot;RFM Real Commander (1) Promote edilecek...&quot;'.[]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignment"/>
                    <debug_text text="'      &quot;RFM Real Commander (1) Promote edilecek...&quot;'.[]" chance="Main.$ChangesOnFleetDebug"/>
                    <do_if value="$RFMCue.$PromotedCommander == null">
                    <!-- destroyedShipKeys den ekleme/silme işi subordinate add/remove olayları içinde yazıldı
                        filo boş olduğundan add olayı çalışmayacak, burda silme işini yapıyoruz -->
                        <remove_from_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$ShipKey" />
                    </do_if>
                    <set_value name="$isPromote" exact="true" />
                </do_if>
                <do_elseif value="$RFMCue.$PromotedCommander == null" comment="Fleet Boş">
                    <debug_to_file text="'      &quot;Fleet Boş. Üretilen Gemi Promote Commander edilecek...&quot;'.[]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignment"/>
                    <debug_text text="'      &quot;Fleet Boş. Üretilen Gemi Promote Commander edilecek...&quot;'.[]" chance="Main.$ChangesOnFleetDebug"/>
                    <!-- destroyedShipKeys den ekleme/silme işi subordinate add/remove olayları içinde yazıldı
                        filo boş olduğundan add olayı çalışmayacak, bu yüzden burda silme işini yapıyoruz -->
                    <remove_from_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$ShipKey" />
                    <set_value name="$isPromote" exact="true" />
                </do_elseif>
                <do_elseif value="$FRec.{$FComp.{$RFMCue.$PromotedCommander}}.$commanderidx == $FComp.{$NewShip}" comment="Üretilen gemi şu anki promotedin commanderi">
                    <debug_to_file text="'      &quot;Üretilen Gemi, şu anki filo commanderinin Commanderi olduğundan üretilen gemi Promote Commander edilecek...&quot;'.[]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignment"/>
                    <debug_text text="'      &quot;Üretilen Gemi, şu anki filo commanderinin Commanderi olduğundan üretilen gemi Promote Commander edilecek...&quot;'.[]" chance="Main.$ChangesOnFleetDebug"/>
                    <set_value name="$isPromote" exact="true" />
                </do_elseif>
                <do_else>
                    <!-- real commander yoksa promoted olarak mainsublardan yaşayanlardan en iyi olan seçilecek -->
                    <do_if value="$FRec.{1}.$destroyed">
                        <run_actions ref="GetBestCommander" result="$newRMCommanderKey">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="isInMainSubs" value="true" />
                            <param name="isIncludeExploded" value="false" />
                        </run_actions>
                    </do_if>
                    <do_if value="$newRMCommanderKey? and $newRMCommanderKey gt 0">
                        <set_value name="$newRMCommander" exact="$FIndx.{$newRMCommanderKey}" />
                        <debug_to_file text="'      &quot;Yaşayan mainsublardan Yeni RMCommander key[%s] &lt;%s&gt; %s %s olarak belirlendi.&quot;'.[$newRMCommanderKey, $newRMCommander, $newRMCommander.name, $newRMCommander.idcode]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignment"/>
                        <debug_text text="'  Yeni Promoted RFM[%s][%s] %s %s &lt;%s&gt; olarak belirlendi.'.[$RFMKey, $newRMCommanderKey, $newRMCommander.name, $newRMCommander.idcode, $newRMCommander]" chance="Main.$ChangesOnFleetDebug"/>
                        <run_actions ref="PromoteToCommander">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="Commander" value="$newRMCommander" />
                            <param name="oldCommander" value="$RFMCue.$PromotedCommander" />
                            <param name="forceCaptionUpdate" value="true" />
                        </run_actions>
                        <set_value name="$RFMCue.$RMCommander" exact="$newRMCommander" />
                        <remove_value name="$newRMCommanderKey" />
                        <remove_value name="$newRMCommander" />
                    </do_if>
                </do_else>

                <do_if value="$isPromote?">
                    <debug_to_file text="'  ( %s ) PROMOTED TopLevelCommander &lt;%s&gt; %s %s (%s)'.[$ShipKey, $NewShip, $NewShip.name, $NewShip.idcode, $NewShip.sector.knownname]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command" />

                    <run_actions ref="PromoteToCommander">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="Commander" value="$NewShip" />
                        <param name="oldCommander" value="$RFMCue.$PromotedCommander" />
                        <param name="forceCaptionUpdate" value="true" />
                    </run_actions>
                    <set_value name="$RFMCue.$RMCommander" exact="$NewShip" />
                    
                </do_if>
                <remove_value name="$isPromote" />

                <signal_cue_instantly cue="Adjust_Fleet_Formations" param="table[$RFMKey = $RFMKey]" />

                <debug_text text="'RFM_' + $RFMKey + '_' + $ShipKey + '_ ReAssign Ok and BEFORE Check : ' + if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'KAPALI' else 'AÇIK'"  chance="Main.$ChangesOnFleetDebug"/>
            </actions>
            <!-- Filo kilit olayı Manuel Ekleme-Çıkarma işi için;
                    addsignment order dan kaynaklı add-remove olaylarını yakalayıp 
                    filo kaydının bozulmaması için konuldu.
                Burdaki sign işleminin oluşturduğu Add ve remove olaylarının tamamlanmasını bekleyeceğiz.
                üretilen geminin filo içi değişiminden kaynaklı
                    kontrol edilen en geç add-remove olayı 30 ms
                Bu yüzden bu değerden biraz fazla beklemek gerekiyor ki filo kilidi kaldırılsın
                    Böylece filoya manuel ekleme çıkarma sorunsuz yapılabilir.
                    * * * Add ve Remove olaylarına kontrol kondu. 
                -->
            <delay exact="1ms" comment="assign tamamlanması ve gerçek order oluşması için beliyoruz. böylece eski warebasket_override bilgisini aktarabiliriz "/>
            <actions>
                
                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>
                <!-- -->
                <debug_text text="'RFM_' + $RFMKey + '_' + $ShipKey + '_ ReAssign Ok and AFTER Check : ' + if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'KAPALI' else 'AÇIK'"  chance="Main.$ChangesOnFleetDebug"/>
                <!--Record kaydında order bilgisi  olmayan Üretilen geminin order bilgi kaydını tekrar oluşturacağız,
                        Promoted türündeki gemiler için;
                             action1 de işlem yapıldı.
                        Diğer gemiler için ise ; 
                            order kaydı olmayan gemiler üretim bittiğinde checkrecord ile order kaydı çıkartılıyordu. 
                            ancak gemi o sırada henüz commanderine bağlı olmadığı için wait orderı ile kayıt çıkarılıyordu.
                            Bu durumda üretilen geminin order bilgisi Wait oluyor. 
                            Halbuki assign edilmiş order bilgisi gerekiyor. 
                            action1 de Assign işlemi sonrası Add ve Remove olayları bitmesi ardından burada yeni order bilgisi güncellenmesini bekliyoruz ve kaydı yeniden çıkartıyoruz.
                    
                        Üretilen gemi CheckRecord'a sokuluyor ancak order, Wait konumunda olacaktır. 
                        Burda yaptığımız ise assigment işleminin bitmesini beklemek. 
                        Böylece üretim sonrası CheckRecord içinde alınması gereken asıl order kaydı burda çıkartılacak.
                    -->
                <do_if value="$FRec.{$ShipKey}.$defaultorder.$id == 'Wait' ">
                    <run_actions ref="md.Upb_Library_Orders.Get_Defaultorder_Orders_Sector_From_Ship" result="$result">
                        <param name="ship" value="$NewShip" />
                    </run_actions>
                    <set_value name="$FRec.{$ShipKey}.$defaultorder" exact="$result.{1}"/>
                    <set_value name="$FRec.{$ShipKey}.$orders" exact="$result.{2}"/>
                    <!-- Order bilgisi olmayan gemi gerçek Filo Komutanı olması durumunda, istasyonda beklemek yerine üretim sektöründe safe pozisyonda  MoveWait emri verilir-->
                    <do_if value="$ShipKey == 1">
                        <run_actions ref="md.Upb_Library_Orders.Create_Order_MoveWait_Table" result="$temporder">
                            <param name="sector" value="$NewShip.sector" />
                        </run_actions>
                        <run_actions ref="md.Upb_Library_Orders.CreteOrder_To_Ship">
                            <param name="ship" value="$NewShip" />
                            <param name="recordedorder" value="$temporder" />
                            <param name="default" value="false" />
                        </run_actions>
                    </do_if>
                </do_if>
                
                <!-- Üretilen gemiye ait main subların order kayıtları içindeki commander ve ship nesnelerini güncelleyelim. -->
                <run_actions ref="Get_SubKeys_From_FleetRecord" result="$mainsubs">
                    <param name="CommanderKey" value="$ShipKey" />
                    <param name="FleetRecord" value="Main.$FleetRecords.{$RFMKey}" />
                </run_actions>
                <do_for_each name="$id" in="$mainsubs">
                    <set_value name="$record"  exact="Main.$FleetRecords.{$RFMKey}.{$id}"/>
                    <do_if value="$record.$defaultorder? and $record.$defaultorder.$params?" >
                        <run_actions ref="md.Upb_Library_Orders.Restore_Param_CommanderValue">
                            <param name="ship" value="$record.$object" />
                            <param name="uiparams" value="$record.$defaultorder.$params" />
                            <param name="commander" value="$NewShip" />
                        </run_actions>
                    </do_if>
                </do_for_each>

                <!--1- Record kaydında order bilgisi varsa bu durumda;
                        üretilen gemiyi action1 de assign ederek bağlamıştık (record.defaultorder yani kayıtlı order yerine assign emri ile gemiyi bağladık ).
                        ancak ticaret, miner vb.. gemilerdeki warebasket gibi propertisi olan orderlar 
                        scriptin default değerleri ile başlayacağından,
                        bu default değerleri kayıtdaki (kullanıcının yaptığı özel değişiklikler) ile değştiriyoruz. (warebasketoverride gibi)
                    2- Escort vb orderlar için commander valueleri düzeltilecek.
                        Üretilen geminin kayıttaki commanderi yaşıyorsa commander değerini düzelteceğiz.
                -->
                <set_value name="$commanderidx" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$commanderidx" />
                <set_value name="$commander" exact="if $commanderidx gt 0 then Main.$FleetRecords.{$RFMKey}.{$commanderidx}.$object else null" />
                <!-- 1- Override orderları düzeltiyoruz, 2- uygun orderlar için commander, target vs.. bilgisini düzeltiyoruz -->
                <run_actions ref="md.Upb_Library_Orders.EditOrderParam">
                    <param name="ship" value="$NewShip" />
                    <param name="recordedorder" value="$FRec.{$ShipKey}.$defaultorder" />
                    <param name="commander" value="$commander" />
                </run_actions>
                
                <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                    $fleetID = $RFMKey,
                    $shipID = $ShipKey,
                    $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                    $Record = Main.$FleetRecords.{$RFMKey}.{$ShipKey},
                    $description = 'Check And Assigned Orders Completed'
                ]" chance="player.entity.$Flag_RFM_Menu? * 100"/>


                <remove_value name="$FComp" />
                <remove_value name="$FIndx" />
                <remove_value name="$FRec" />
                <remove_value name="$RFMCue" />
            </actions>
        </cue>

        <!--CONSTRUCT SHIP MAIN 
            param table[ 
            $RFMKey = RFMKey, $ShipKey 
            (, $passingcriterias = [] ) (, $rebuildtimerstatus = Main.$RM_Fleets.{$RFMKey}.$rebuildtimerstatus) (, $destroyedobject = null) 
            (, $batchprocessing = false) (, $lastbatchprocessing = false) 
            ] 
        -->
        <cue name="Check_Add_ConstructionShip_ForFleet" instantiate="true" namespace="this" >
            <conditions>
                <event_cue_signalled />
                <check_value value="typeof event.param == datatype.table" />
                <check_value value="not Main.$RebuildCues.{event.param.$RFMKey}.keys.list.indexof.{event.param.$ShipKey}" />
            </conditions>
            <actions>
                
                <set_value name="$paramtable" exact="event.param"/>

                <set_value name="$RFMKey"               exact="$paramtable.$RFMKey" />
                <set_value name="$ShipIDX"              exact="$paramtable.$ShipKey" />
                <set_value name="$rebuildtimerstatus"   exact="@$paramtable.$rebuildtimerstatus"/>
                <set_value name="$passingcriterias"     exact="@$paramtable.$passingcriterias"/>
                <set_value name="$batchprocessing"      exact="@$paramtable.$batchprocessing"/>
                <set_value name="$lastbatchprocessing"  exact="@$paramtable.$lastbatchprocessing"/>
                <set_value name="$destroyedobject"      exact="@$paramtable.$destroyedobject"/>

                <do_if value="typeof $rebuildtimerstatus == datatype.null">
                    <set_value name="$rebuildtimerstatus" exact="Main.$RM_Fleets.{$RFMKey}.$rebuildtimerstatus" />
                </do_if>
                <do_if value="typeof $batchprocessing == datatype.null">
                    <set_value name="$batchprocessing" exact="false" />
                </do_if>
                <do_if value="typeof $lastbatchprocessing == datatype.null">
                    <set_value name="$lastbatchprocessing" exact="false" />
                </do_if>
                <do_if value="$passingcriterias == null or typeof $passingcriterias != datatype.list">
                    <create_list name="$passingcriterias" />
                </do_if>

                <set_value name="$debugchance" exact="Main.$DebugChance"/>
                <set_value name="$deepdebug"    exact="Main.$DeepDebug"/>

                <!-- $ShipIDX == -1 olma durumu yalnızca üretilen gemi üretilirken filo kaydından çıkarılmışsa 
                    (SpecRemove olayı içinden gönderilecek) (RFM kapatılmış olabilir) olur .
                    ShipIDX e -1 değeri göndererek bu durumu bildireceğiz
                    oldShipIDX ve ShipIDX bu durumda farklı olacaktır.
                    bilgilendirme mesajlarında oldShipIDX i kullanmak daha uygun olur.
                     -->
                <set_value name="$oldShipIDX" exact="$ShipIDX" />
                <set_value name="$ShipKey"              exact="$ShipIDX" />

                <set_value name="$Ship_IdCode" exact="if $destroyedobject != null then $destroyedobject.idcode else ''"/>

                <include_actions ref="Let__failcasesOptions" />
                
                <!-- ŞU an sadece 'price' keyi için değişiklik izni var. 
                    respond tablo keyleri ile liste tutacağız ve name den alacağız bu key isimlerini, listede olan keyler pass olayında devreye girecek 
                    tanımlı pass keyleri : 
                    sectorisknown, relationdockge, shiptrader, buildclass, buildmacro, m_ship_licence, c_ship_licence, software, equipment, price
                -->
                <do_for_each name="$key" valuename="$entry" in="global.$upbRF_DATA.$Editing.$failcases">
                    <do_if value="not $entry.$check">
                        <do_if value="not $passingcriterias.indexof.{$entry.$name}">
                            <append_to_list name="$passingcriterias" exact="$entry.$name" />
                        </do_if>
                    </do_if>
                </do_for_each>
                <do_if value="not $passingcriterias.indexof.{'software'}">
                    <append_to_list name="$passingcriterias" exact="'software'" />
                </do_if>
                <!-- <debug_text text="'After $passingcriterias = %s'.[$passingcriterias]" />-->

                <do_if value="$ShipIDX == null">
                    <debug_text text="'ShipIDX NULL geldi. NEDEN?'" />
                    <cancel_cue cue="this" />
                </do_if>

                <set_value name="$RFMCue" exact="@Main.$RM_Fleets.{$RFMKey}.$cue"/>
                <do_if value="$RFMCue == null">
                    <debug_text text="'RFMCue NULL geldi. NEDEN?'" />
                    <cancel_cue cue="this" />
                </do_if>

                <set_value name="$reBuildTryNum" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildTryNum" />
                <set_value name="$Ship_CommanderKey" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$commanderidx "/>
                <set_value name="$Ship_Commander" exact="@$RFMCue.$fleetshipsByIdx.{$Ship_CommanderKey}"/>
                <set_value name="$Ship_Assignment" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$assignment"/>
                <set_value name="$Ship_Subordinategroupid" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$subordinategroupid"/>

                <set_value name="$Ship_Name" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$name"/>
                <set_value name="$Ship_Macro" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$macro"/>
                <set_value name="$Ship_Type" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$type"/>
                <set_value name="$Ship_Loadout" exact="Main.$Loadouts.{$RFMKey}.{$ShipIDX}"/>
                <!-- 
                <set_value name="$Ship_Loadout" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$sLoadout"/>
                -->
                <set_value name="$Ship_WareTable" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tWare"/>
                <set_value name="$Ship_Pilot" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tPilot"/>
                <set_value name="$Ship_BulkCrew" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tBulkCrew"/>
                
                <do_if value="$Ship_Macro.isclass.station">
                    <debug_text text="'  OBJECT IS CLASS STATION = %s'.[$Ship_Macro]" chance="0"/>
                    <cancel_cue cue="this" />
                </do_if>

                <include_actions ref="Let_RFM_LogFileNames" />

                
                <!-- ADD RebuildCues TABLE-->
                <set_value name="$cue" exact="this" />
                <set_value name="$shipyard" exact="@$Shipyard" />
                <set_value name="$build" exact="@$Build" />
                <set_value name="$isWaitingForRebuild" exact="false" />
                <set_value name="$respondMsg" exact="''" />
                <set_value name="$respond" exact="table[]" />

                <run_actions ref="Set_RebuildCueTable">
                    <param name="RFMKey"                value="$RFMKey" />
                    <param name="ShipKey"               value="$ShipIDX" />
                    <param name="cue"                   value="$cue" />
                    <param name="shipyard"              value="$shipyard" />
                    <param name="build"                 value="$build" />
                    <param name="isWaitingForRebuild"   value="$isWaitingForRebuild" />
                    <param name="respondMsg"            value="$respondMsg" />
                    <param name="respond"               value="$respond" />
                </run_actions>

                <set_value name="$NextRetryTime" exact="0s"/>
                
                <set_value name="$reBuildStartTime" exact="null" />

                
                <do_if value="$Ship_Macro.isclass.station">
                    <!-- YAPILACAK-->
                    <!-- ISTASYON patlarsa sublardan herhangi biri promote oluyor -->
                    <!-- İstasyon inşa rutinlerini yazıncaya kadar RFM'yi kapatacağız 
                        Kalan gemiler ne olacak ?
                        Yöntemler:
                        1- Promote olan gemiye istasyonun bulunduğu pozisyona protect order verilecek,
                            sub gemilere, bulundukalrı subordinate groupidleri korunarak defans assigmentı atanacak
                            istasyon, managerdan çıkarılıp RFM korunacak
                        2- Direk kapatıyoruz. record yapısından ölü gemi çıkarma rutini yazılınca 1.yöntem devam edebilir.
                    -->
                    <!-- param : $RFMKey Or a list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false) ]-->
                    <!-- mormalde RFM Cue içinden geliyoruz ve kendisini kapatmaya çalışıyoruz, zorlayacağız-->
                    <signal_cue_instantly cue="Disable__RFM" param="[ $RFMKey, 'Commander Station Destroyed' ]" />
                </do_if>
                <do_else>
                    <debug_text text="'Starting cue.RebuildShipCheck [%s_%s] %s,  $batchprocessing = %s, $lastbatchprocessing = %s'.[$RFMKey, $ShipIDX, $Ship_Name, $batchprocessing, $lastbatchprocessing]" chance="Main.$DebugChance" />
                    <do_if value="not $batchprocessing or $lastbatchprocessing">
                        <!--        DEBUG   -->
                        <!-- FLEET RECORD TABLE -->
                        <run_actions ref="Debug_FleetRecord">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                        <!-- REBUILD CUES -->
                        <set_value name="$pText" exact="'    ADDED RFM_%s_( %s ) %s to RebuildCues Table ,  Age: %s, %s'.[$RFMKey, $ShipIDX, $Ship_Name, player.age, player.systemtime.{'%F-%X'}]" />
                        <run_actions ref="Debug_RebuildCue">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="inserttext" value="$pText" />
                        </run_actions>
                        <!-- ALL REBUILD CUES -->
                        <run_actions ref="Debug_AllRebuildCues"/>
                    </do_if>
                </do_else>

            </actions>
            <cues>
                <!-- SEARCHING A SHIPYARD-->
                <cue name="RebuildShipCheck" checkinterval="30s" >
                    <conditions>
                        <check_any>
                            <check_age min="$NextRetryTime"/>
                        </check_any>
                    </conditions>
                    <actions>

                        <do_if value="@$oldShipIDX != null and @$oldShipIDX != @$ShipIDX">
                            <debug_text text="'   A L E R T    $oldShipIDX = %s , $ShipIDX = %s'.[$oldShipIDX,$ShipIDX]" />
                            <play_sound object="player.entity" sound="'ui_notification_player_alert_04'"/>
                        </do_if>

                        <debug_to_file text="'- - - Age: ' + player.age + '- Cue[%s] - RFM_%s_( %s ) %s %s'.[this.name, $RFMKey, $ShipIDX, $Ship_Name, $Ship_IdCode]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommandsDeep"/>
                        
                        <set_value name="$RFMCue" exact="@Main.$RM_Fleets.{$RFMKey}.$cue"/>
                        <set_value name="$cue" exact="parent" />
                        <do_if value="not $batchprocessing?">
                            <set_value name="$batchprocessing" exact="false" />
                        </do_if>
                        <do_if value="not $lastbatchprocessing?">
                            <set_value name="$lastbatchprocessing" exact="false" />
                        </do_if>
                        
                        <set_value name="$reBuildTryNum" operation="add" exact="1" />
                        <set_value name="$reBuildStartTime" exact="player.age" />
                        <set_value name="$NextRetryTime" exact="$reBuildStartTime + (global.$upbRF_DATA.$Editing.$NextRetryTime)min"/>

                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildTryNum" exact="$reBuildTryNum" />
                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildStartTime" exact="$reBuildStartTime"/>

                        <debug_to_file text="' - - - NOW [%s], NextRetryTime[%s] (%smin), checkinterval = 30sec - RFM_%s_( %s ) Destroyed = %s %s'.[player.age, $NextRetryTime, global.$upbRF_DATA.$Editing.$NextRetryTime, $RFMKey, $ShipIDX, $Ship_Name, $Ship_IdCode]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuild"/>

                        <debug_to_file text="'        RFM_%s_( %s ) %s (%s) Starting reBuild  trynum = %s'.[$RFMKey, $ShipIDX, $Ship_Name, $Ship_Macro, $reBuildTryNum]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommandsDeep"/>
                        <debug_to_file text="'  ( %s ) %s (%s) Starting reBuild  trynum = %s'.[$ShipIDX, $Ship_Name, $Ship_Macro, $reBuildTryNum]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command"/>
                        <debug_to_file text="'( %s ) %s (%s) Starting reBuild  trynum = %s'.[$ShipIDX, $Ship_Name, $Ship_Macro, $reBuildTryNum]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuild"/>
                        
                        <set_value name="$finishStatus" exact="''" />
                        <set_value name="$lastErrMsg" exact="''" />

                        <set_value name="$Yards" exact="[]" />
                        <!-- GET POSSIBLE YARDS 
                            Keşfedilmemiş veya dock yapamayacağımız istasyonları kesinlikle burda istemiyoruz
                        -->
                        <debug_to_file text="'    *** Collecting Shipyards..'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>

                        <run_actions ref="Get_ActiveStations" result="$Yards" >
                            <param name="addUnknown" value="false" />
                            <param name="addEnemy" value="false" />
                            <param name="debugchance" value="0" />
                        </run_actions>
                        <run_actions ref="Update_BlacklistStations" chance="(not $batchprocessing) * 100" >
                            <param name="sendIt" value="false" />
                        </run_actions>

                        <do_for_each name="$yard" in="$Yards" reverse="true">
                            <do_if value="Main.$blacklist_stations.indexof.{$yard} > 0">
                                <remove_from_list name="$Yards" exact="$yard" />
                                <continue />
                            </do_if>
                            <do_if value="($yard.trueowner == faction.player) and (not global.$upbRF_DATA.$Editing.$UsePlayerYards)">
                                <remove_from_list name="$Yards" exact="$yard" />
                                <continue />
                            </do_if>
                            <do_if value="($yard.trueowner != faction.player) and (not global.$upbRF_DATA.$Editing.$UseNPCYards)">
                                <remove_from_list name="$Yards" exact="$yard" />
                                <continue />
                            </do_if>
                        </do_for_each>
                            
                        <!-- 
                        <do_for_each name="$yard" in="$Yards" counter="$i">
                            <debug_text text="' %s - %s %s'.[$i, $yard.knownname, $yard.idcode]" />
                        </do_for_each>
                        -->
                        <!-- Player yardları en sona alıyoruz. Böylece tarama reverse yapıldığı için ilk player hipyardlar kontrol edilecek-->
                        <sort_list list="$Yards" sortbyvalue="loop.element.trueowner == faction.player" sortdescending="false"/>
                        <!-- 
                        <do_for_each name="$yard" in="$Yards" counter="$i">
                            <debug_text text="' %s - %s %s'.[$i, $yard.knownname, $yard.idcode]" />
                        </do_for_each>
                        -->

                        <include_actions ref="Let__failcasesOptions" />

                        <set_value name="$testchance" exact="0"/>
                        <debug_text text="'CHECK CRITERIAS RFM_%s_( %s ) %s'.[$RFMKey, $ShipIDX, $Ship_Name]" chance="$testchance"/>

                        <!-- CHECK CRITERIAS-->
                        <do_if value="$Yards.count gt 0 ">
                            <!--checkcase [shipyard, buildclass, buildmacro, sectorisknown, relationdockge, shiptrader, licences, software, equipment, selectbest, price ]
                                -->
                            <do_for_each name="$TestYard" in="$Yards" counter="$i" reverse="true">

                                <debug_to_file text="'  %s/%s Checking %s %s &lt;%s&gt;  passingcriterias %s'.[$i, $Yards.count, $TestYard.knownname, $TestYard.idcode, $TestYard, $passingcriterias]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                <debug_text text="'  %s/%s Checking %s %s &lt;%s&gt;  passingcriterias %s'.[$i, $Yards.count, $TestYard.knownname, $TestYard.idcode, $TestYard, $passingcriterias]" chance="$testchance"/>

                                <!--Kontrollerin sırasını burda ayarlıyoruz 
                                    daha sonra sonuçları analiz ederken en son hata kaydına bakacağız
                                -->
                                <!-- check Sector isKnown -->
                                <do_if value="not $passingcriterias.indexof.{'sectorisknown'}">
                                    <do_if value="not $TestYard.sector.isknown">
                                        <set_value name="$buildresponds.$sectorisknown" exact="table[ 
                                            $checkcase = $failcases.$sectorisknown.$id, 
                                            $unknown = $TestYard, 
                                            $statusmsg = $failcases.$sectorisknown.$text
                                        ]" />
                                        <remove_value name="$Yards.{$i}"/>
                                        <debug_to_file text="'        [remove] %s - %s %s &lt;%s&gt; Sector = %s %s %s'.[$failcases.$sectorisknown.$name, $TestYard.knownname, $TestYard.idcode, $TestYard, $TestYard.sector.name, $TestYard.sector.knownname, $TestYard.sector]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                        <continue />
                                    </do_if>
                                    <debug_to_file text="'     Ok .Check Sector is known.'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                </do_if>
                                <do_else>
                                    <debug_to_file text="'        [ pass ] %s - %s %s &lt;%s&gt; Sector = %s %s %s'.[$failcases.$sectorisknown.$name, $TestYard.knownname, $TestYard.idcode, $TestYard, $TestYard.sector.name, $TestYard.sector.knownname, $TestYard.sector]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                </do_else>

                                <!-- check relationdockge -->
                                <do_if value="not $passingcriterias.indexof.{'relationdockge'}">
                                    <do_if value="not $TestYard.hasrelation.dock.{faction.player}">
                                        <set_value name="$buildresponds.$relationdockge" exact="table[ 
                                            $checkcase = $failcases.$relationdockge.$id, 
                                            $faction = $TestYard.trueowner,
                                            $statusmsg = $failcases.$relationdockge.$text
                                        ]" />
                                        <remove_value name="$Yards.{$i}"/>
                                        <debug_to_file text="'        [remove] %s - %s %s &lt;%s&gt;'.[$failcases.$relationdockge.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                        <continue />
                                    </do_if>
                                    <debug_to_file text="'     Ok .Check Relation Dock To Player.'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                </do_if>
                                <do_else>
                                    <debug_to_file text="'        [ pass ] %s - %s %s &lt;%s&gt;'.[$failcases.$relationdockge.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                </do_else>

                                <!-- check shiptrader -->
                                <do_if value="not $passingcriterias.indexof.{'shiptrader'}">
                                    <do_if value="not $TestYard.shiptrader.exists">
                                        <set_value name="$buildresponds.$shiptrader" exact="table[ 
                                            $checkcase = $failcases.$shiptrader.$id, 
                                            $yard = $TestYard, 
                                            $statusmsg = $failcases.$shiptrader.$text 
                                        ]" />
                                        <remove_value name="$Yards.{$i}"/>
                                        <debug_to_file text="'        [remove] %s - %s %s &lt;%s&gt;'.[$failcases.$shiptrader.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                        <continue />
                                    </do_if>
                                    <debug_to_file text="'     Ok .Check shiptader.'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                </do_if>
                                <do_else>
                                    <debug_to_file text="'        [ pass ] %s - %s %s &lt;%s&gt;'.[$failcases.$shiptrader.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                </do_else>

                                <!-- check buildclass  -->
                                <do_if value="not $passingcriterias.indexof.{'buildclass'}">
                                    <do_for_each name="$Processor" in="$TestYard.buildprocessors">
                                        <do_if value="$Processor.canbuildclass.{$Ship_Macro.class} ">
                                            <set_value name="$canbuildclass" />
                                        </do_if>
                                    </do_for_each>
                                    <do_if value="not $canbuildclass?">
                                        <set_value name="$buildresponds.$buildclass" exact="table[ 
                                            $checkcase = $failcases.$buildclass.$id, 
                                            $class = $Ship_Macro.class,
                                            $statusmsg = $failcases.$buildclass.$text 
                                        ]" />
                                        <remove_value name="$Yards.{$i}"/>
                                        <debug_to_file text="'        [remove] %s - %s %s &lt;%s&gt;'.[$failcases.$buildclass.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                        <continue />
                                    </do_if>
                                    <debug_to_file text="'     Ok .Check class.'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                    <remove_value name="$canbuildclass" />
                                </do_if>
                                <do_else>
                                    <debug_to_file text="'        [ pass ] %s - %s %s &lt;%s&gt;'.[$failcases.$buildclass.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                </do_else>
                                
                                <!-- Öncelikli olarak bu macro yu üretebilecek olan factionu belirlememiz gerekiyor -->
                                <!-- check buildmacro  -->
                                <do_if value="not $passingcriterias.indexof.{'buildmacro'}">
                                    <do_for_each name="$Processor" in="$TestYard.buildprocessors">
                                        <do_if value="$Processor.canbuildmacro.{$Ship_Macro}">
                                            <set_value name="$canbuildmacro" />
                                        </do_if>
                                    </do_for_each>
                                    <do_if value="not $canbuildmacro?">
                                        <set_value name="$buildresponds.$buildmacro" exact="table[ 
                                            $checkcase = $failcases.$buildmacro.$id, 
                                            $chassis = $Ship_Macro,
                                            $statusmsg = $failcases.$buildmacro.$text
                                        ]" />
                                        <remove_value name="$Yards.{$i}"/>
                                        <debug_to_file text="'        [remove] %s - %s %s &lt;%s&gt;'.[$failcases.$buildmacro.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                        <continue />
                                    </do_if>
                                    <debug_to_file text="'     Ok .Check macro.'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                    <remove_value name="$canbuildmacro" />
                                </do_if>
                                <do_else>
                                    <debug_to_file text="'        [ pass ] %s - %s %s &lt;%s&gt;'.[$failcases.$buildmacro.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                </do_else>
                                
                                <run_actions ref="Get_FactionWares_ByLicencedTable" result="$factionwaresbylicencedtable">
                                    <param name="faction" value="$TestYard.trueowner" />
                                    <param name="debugchance" value="0" />
                                </run_actions>

                                <!-- check ship licences  -->
                                <do_if value="$Ship_Macro.class == class.ship_l or $Ship_Macro.class == class.ship_xl">
                                    <do_if value="not $passingcriterias.indexof.{'c_ship_licence'}">
                                        <set_value name="$licence" exact="$TestYard.trueowner.licence.capitalship" />
                                        <do_if value="($factionwaresbylicencedtable.{$licence}? and $factionwaresbylicencedtable.{$licence}.indexof.{$Ship_Macro.ware} ) and not faction.player.haslicence.{$licence.type}.{$TestYard.trueowner}">
                                            <set_value name="$buildresponds.$c_ship_licence" exact="table[ 
                                                $checkcase = $failcases.$c_ship_licence.$id, 
                                                $faction = $TestYard.trueowner,
                                                $statusmsg = $failcases.$c_ship_licence.$text.[$licence.type , $licence.name] ]" />
                                            <remove_value name="$Yards.{$i}"/>
                                            <debug_to_file text="'        [remove] &lt;%s&gt;%s - %s %s &lt;%s&gt;'.[$licence.type , $licence.name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                            <continue />
                                        </do_if>
                                    </do_if>
                                    <do_else>
                                        <debug_to_file text="'        [ pass ] &lt;%s&gt;%s - %s %s &lt;%s&gt;'.[$licence.type , $licence.name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                    </do_else>
                                </do_if>
                                <do_else>
                                    <do_if value="not $passingcriterias.indexof.{'m_ship_licence'}">
                                        <set_value name="$licence" exact="$TestYard.trueowner.licence.militaryship" />
                                        <do_if value="($factionwaresbylicencedtable.{$licence}? and $factionwaresbylicencedtable.{$licence}.indexof.{$Ship_Macro.ware}) and not faction.player.haslicence.{$licence.type}.{$TestYard.trueowner}">
                                            <set_value name="$buildresponds.$m_ship_licence" exact="table[ 
                                                $checkcase = $failcases.$m_ship_licence.$id, 
                                                $faction = $TestYard.trueowner,
                                                $statusmsg = $failcases.$m_ship_licence.$text.[$licence.type , $licence.name] ]" />
                                            <remove_value name="$Yards.{$i}"/>
                                            <debug_to_file text="'        [remove] .Check &lt;%s&gt; %s. - %s %s &lt;%s&gt;'.[$licence.type , $licence.name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                            <continue />
                                        </do_if>
                                    </do_if>
                                    <do_else>
                                        <debug_to_file text="'        [ pass ] .Check &lt;%s&gt;%s. - %s %s &lt;%s&gt;'.[$licence.type , $licence.name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                    </do_else>
                                </do_else>
                                <debug_to_file text="'     Ok .Check Ship licence.'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                
                                <!-- check Equipment wares  -->
                                <set_value name="$failedSoftWares" exact="[]" />
                                <set_value name="$failedEquipments" exact="[]" />
                                <set_value name="$resultwares" exact="table[]" />
                                <set_value name="$allwares" exact="[]" />
                                <do_for_each name="$ware" valuename="$amount" in="$Ship_WareTable">
                                    <!--equipmentlar pass edilecekse; 
                                        istasyonun bu gemiye en az 1 tane takabileceği engine olmalı 
                                    -->
                                    <set_value name="$resultwares.{$ware}" exact="$amount" />
                                    <append_to_list name="$allwares" exact="$ware" />
                                    <debug_text text="'   $ware = %s , transport tag = %s , tags = %s'.[$ware, $ware.transporttag, $ware.tags]" chance="0"/>
                                    <!-- result table[ $failed = true for failed or success false, $chkcase = return case for false status, $ware = ware ] -->
                                    <run_actions ref="CkeckShipyard_ForWare" result="$result">
                                        <param name="ware" value="$ware" />
                                        <param name="shipyard" value="$TestYard" />
                                        <param name="checkSoftware" value="false"/>
                                        <param name="checkEquipment" value="true" />
                                        <param name="DebugChance" value="$testchance" />
                                    </run_actions>                                        
                                    <do_if value="$result.$failed">
                                        <remove_value name="$resultwares.{$ware}" />
                                        <do_if value="$ware.hastag.equipment">
                                            <append_to_list name="$failedEquipments" exact="$ware" />
                                        </do_if>
                                        <do_else>
                                            <append_to_list name="$failedSoftWares" exact="$ware" />
                                        </do_else>
                                        <set_value name="$fail" />
                                        <debug_to_file text="'        [ fail ] .Check %s %s. - %s %s &lt;%s&gt;'.[$result.$chkcase, $result.$ware.id, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                    </do_if>
                                    <do_else>
                                        <debug_to_file text="'          Ok. Shipyard for ware %s'.[$ware.name]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                    </do_else>
                                </do_for_each>
                                
                                <do_if value="$fail?">
                                    <remove_value name="$fail" />
                                    <do_if value="not $passingcriterias.indexof.{'equipment'}">
                                        <do_if value="$failedSoftWares.count > 0 or $failedEquipments.count > 0 ">
                                            <set_value name="$buildresponds.$equipment" exact="table[ 
                                                $checkcase      = $failcases.$equipment.$id , 
                                                $yard           = $TestYard, 
                                                $softwares      = $failedSoftWares,
                                                $equipmentwares = $failedEquipments,
                                                $statusmsg      = $failcases.$equipment.$text
                                            ]" />
                                        </do_if>
                                        <remove_value name="$Yards.{$i}"/>
                                        <continue />
                                    </do_if>
                                </do_if>
                                <debug_to_file text="'     Ok .Check Softwares and Equipments.'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>

                                <!-- check Equipment Licence  -->
                                <set_value name="$missinglicencedwares" exact="[]" />
                                <do_for_each name="$ware" valuename="$amount" in="$Ship_WareTable">
                                    <do_if value="$ware.transporttag == tag.equipment">
                                        
                                        <do_if value="not $passingcriterias.indexof.{'m_equipment_licence'}">
                                            <set_value name="$m_licence" exact="$TestYard.trueowner.licence.militaryequipment" />
                                            <do_if value="($factionwaresbylicencedtable.{$licence}? and $factionwaresbylicencedtable.{$m_licence}.indexof.{$ware}) and not faction.player.haslicence.{$m_licence.type}.{$TestYard.trueowner}">
                                                <append_to_list name="$missinglicencedwares" exact="table[ $ware = $ware.id , $licencetype = $m_licence.type ]" />
                                                <set_value name="$buildresponds.$m_equipment_licence" exact="table[ 
                                                    $checkcase = $failcases.$m_equipment_licence.$id, 
                                                    $faction = $TestYard.trueowner,
                                                    $missinglicencedwares = $missinglicencedwares,
                                                    $statusmsg = $failcases.$m_equipment_licence.$text.['licence(s)'] ]" />
                                                <set_value name="$fail" />
                                                <debug_to_file text="'        [remove] .Check &lt;%s&gt;%s equipment.&lt;%s&gt;. - %s %s &lt;%s&gt;'.[$m_licence.type , $m_licence.name, $ware.name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                            </do_if>
                                        </do_if>

                                        <do_if value="not $passingcriterias.indexof.{'c_equipment_licence'}">
                                            <set_value name="$c_licence" exact="$TestYard.trueowner.licence.capitalequipment" />
                                            <do_if value="($factionwaresbylicencedtable.{$licence}? and $factionwaresbylicencedtable.{$c_licence}.indexof.{$ware}) and not faction.player.haslicence.{$c_licence.type}.{$TestYard.trueowner}">
                                                <remove_value name="$c_licenced" />
                                                <append_to_list name="$missinglicencedwares" exact="table[ $ware = $ware.id , $licencetype = $m_licence.type ]" />
                                                <set_value name="$buildresponds.$c_equipment_licence" exact="table[ 
                                                    $checkcase = $failcases.$c_equipment_licence.$id, 
                                                    $faction = $TestYard.trueowner,
                                                    $missinglicencedwares = $missinglicencedwares,
                                                    $statusmsg = $failcases.$c_equipment_licence.$text.['licence(s)'] ]" />
                                                <set_value name="$fail" />
                                                <debug_to_file text="'        [remove] .Check &lt;%s&gt;%s equipment.&lt;%s&gt;. - %s %s &lt;%s&gt;'.[$c_licence.type , $c_licence.name, $ware.name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                            </do_if>
                                        </do_if>

                                        <do_if value="not $fail?">
                                            <debug_to_file text="'        [ pass ] .Check licence equipment.&lt;%s&gt;. - %s %s &lt;%s&gt;'.[$ware.name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                        </do_if>

                                    </do_if>
                                </do_for_each>

                                <do_if value="$fail?">
                                    <remove_value name="$fail" />
                                    <remove_value name="$Yards.{$i}"/>
                                    <continue />
                                </do_if>

                                <!-- Başka kriter kalmadı, bundan sonra kalan istasyonlara göre best ve price onayı alacağız -->
                                <debug_text text="'  OK %s  %s %s &lt;%s&gt;'.[$i, $TestYard.knownname, $TestYard.idcode, $TestYard]" chance="$testchance" />
                                <debug_to_file text="'  OK %s  %s %s &lt;%s&gt;'.[$i, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                            </do_for_each>

                            <!-- Select best yard and calculate price-->
                            <do_if value="$Yards.count gt 0">
                                <!-- SELECT BESTYARD -->
                                <include_actions ref="Select__BestYard" />

                                <do_if value="@$Shipyard.exists">
                                    <debug_to_file text="'  Shipyard Select is OK. %s %s (%s) , Build Price Factor = %s'.[$Shipyard, $Shipyard.knownname, $Shipyard.idcode, $Shipyard.buildpricefactor]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                    <!-- is there any better way to figure out the price...? -->
                                    <set_value name="$Price" exact="0Cr"/>
                                    
                                    <do_if value="not $Shipyard.isplayerowned">

                                        <run_actions ref="GetProductionCostByWaresTable" result="$Price">
                                            <param name="container" value="$Shipyard" />
                                            <param name="objectmacro" value="$Ship_Macro" />
                                            <param name="waresTable" value="$Ship_WareTable" />
                                            <param name="crewcount" value="$Ship_BulkCrew.{entityrole.service}.count + $Ship_BulkCrew.{entityrole.marine}.count" />
                                            <param name="isdebug" value="true" />
                                            <param name="logfile" value="$reBuild_logF" />
                                        </run_actions>

                                        <!-- 
                                        <set_value name="$pricetable" exact="table[]" />
                                        <set_value name="$pricetable.$warelist" exact="[]" />
                                        -->
                                        <!-- Chassis Price-->
                                        <!-- 
                                        <set_value name="$ware" exact="$Ship_Macro.ware"/>
                                        <set_value name="$ItemPrice" exact="(($Shipyard.buyprice.{$ware})LF * ($Shipyard.buildpricefactor)LF * 0.01LF)Cr"/>
                                        <debug_to_file text="'     Chassis  %s Cr'.[$ItemPrice.formatted.default]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                        <set_value name="$Price" exact="$ItemPrice" operation="add"/>
                                        <append_to_list name="$pricetable.$warelist" exact="table[ $ware = $ware, $price = $ItemPrice, $eachprice = $ItemPrice, $count = 1 ]" />
                                        <set_value name="$pricetable.$totalprice" exact="$Price" />
                                        -->
                                        <!-- wares Price -->
                                        <!-- 
                                        <do_for_each name="$ware" valuename="$count" in="$Ship_WareTable">
                                            <set_value name="$EachPrice" exact="(($Shipyard.buyprice.{$ware})LF * ($Shipyard.buildpricefactor)LF * 0.01LF)Cr"/>
                                            <set_value name="$ItemPrice" exact="$EachPrice * $count"/>
                                            <debug_to_file text="'     %sx %s is %s Cr ( each price = %s Cr )'.[$count, $ware, $ItemPrice.formatted.default, $EachPrice.formatted.default]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                            <set_value name="$Price" exact="$ItemPrice" operation="add"/>
                                            <append_to_list name="$pricetable.$warelist" exact="table[ $ware = $ware, $price = $ItemPrice, $eachprice = $EachPrice, $count = $count ]" />
                                            <set_value name="$pricetable.$totalprice" exact="$Price" />
                                        </do_for_each>
                                        -->
                                        <!-- Crews Price-->
                                        <!-- 
                                        <set_value name="$count" exact="$Ship_BulkCrew.{entityrole.service}.count + $Ship_BulkCrew.{entityrole.marine}.count" />
                                        <set_value name="$ware" exact="ware.{'crew'}" />
                                        <set_value name="$minprice" exact="$ware.minprice"/>
                                        <set_value name="$maxprice" exact="$ware.maxprice"/>
                                        <set_value name="$workforceavailable" exact="( $Shipyard.workforce.amount - ($Shipyard.workforce.bonus * $Shipyard.workforce.amount)LF ) " />
                                        <set_value name="$workforceavailable" exact=" ($workforceavailable)i + ( ($workforceavailable - ($workforceavailable)i )f + 0.5 )i" />
                                        <set_value name="$st1" exact="($maxprice - $minprice)f * 0.01f" />
                                        <set_value name="$st2" exact="($workforceavailable)LF / ($Shipyard.workforce.capacity)LF " />
                                        <set_value name="$st3" exact="$st2 * $st1" />
                                        <set_value name="$st4" exact="( (($maxprice)f * 0.01f) - $st3)LF " />
                                        <set_value name="$st5" exact="$Shipyard.buildpricefactor * $st4 " />
                                        <set_value name="$st6" exact=" ($st5)i + ( ($st5 - ($st5)i )f + 0.5 )i" />
                                        -->
                                        <!-- x = 5 Cr  dendiğinde x = 500 değeri alıyor çünkü birim artık 500ct şeklinde
                                            <debug_text text="'$workforceavailable = %s ,  workforce.capacity = %s \n
                                            $minprice = %s [%s] , $maxprice = %s [%s] \n
                                            , st1 = %s , st2 = %s , $st3 = %s , $st4 = %s , $st5 = %s , $st6 = %s
                                            '.[$workforceavailable, $Shipyard.workforce.capacity, 
                                            $minprice, $minprice.formatted.default,
                                            $maxprice, $maxprice.formatted.default,
                                            $st1, $st2, $st3, $st4, $st5, $st6]" />
                                            <debug_text text="'     %sx %s is %s Cr ( each price = %s Cr )'.[$crewcount, $crewware, $ItemPrice.formatted.default, $EachPrice.formatted.default]" />
                                        -->
                                        <!-- 
                                            <set_value name="$ItemPrice" exact="(($Shipyard.buyprice.{$crewware})LF * ($Shipyard.buildpricefactor)LF * 0.01LF)Cr"/>
                                            <debug_text text="'1 CREW PRICE $ItemPrice = %s , min = %s , max = %s , buy = %s , sell = %s , buildpricefactor = %s'.[$ItemPrice, $crewware.minprice, $crewware.maxprice, $Shipyard.buyprice.{$crewware}, $Shipyard.sellprice.{$crewware}, $Shipyard.buildpricefactor]" />
                                            <debug_text text="'workforce.amount = %s , workforce.capacity = %s , workforce.bonus = %s , workforce.min = %s , workforce.optimal = %s '.[$Shipyard.workforce.amount, $Shipyard.workforce.capacity, $Shipyard.workforce.bonus, $Shipyard.workforce.min , $Shipyard.workforce.optimal ]" />
                                            <debug_text text="'workforce.available = %s'.[$workforceavailable  ]" />
                                        -->
                                        <!-- 
                                        <set_value name="$EachPrice" exact="($st6)Cr"/>
                                        <set_value name="$ItemPrice" exact="$EachPrice * $count "/>
                                        <debug_to_file text="'     %sx %s is %s Cr ( each price = %s Cr )'.[$count, $ware, $ItemPrice.formatted.default, $EachPrice.formatted.default]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                        <set_value name="$Price" exact="$ItemPrice" operation="add"/>

                                        <append_to_list name="$pricetable.$warelist" exact="table[ $ware = $ware, $price = $ItemPrice, $eachprice = $EachPrice, $count = $count ]" />
                                        <set_value name="$pricetable.$totalprice" exact="$Price" />

                                        <remove_value name="$ItemPrice" />
                                        <remove_value name="$EachPrice" />
                                        -->
                                    </do_if>

                                    <set_value name="$maxallowedpricepership_ct" exact="(global.$upbRF_DATA.$Editing.$maxallowedpricepership)Cr" />
                                    <set_value name="$playermoneythreshold_ct" exact="(global.$upbRF_DATA.$Editing.$playermoneythreshold)Cr" />
                                    <set_value name="$playermoney" exact="faction.player.money" />
                                    
                                    <!-- 
                                    <debug_text text="'\n
                                        player money            = &lt;%s&gt;    &lt;%s&gt;                \n
                                        playermoneythreshold_ct = &lt;%s&gt;    &lt;%s&gt;                \n
                                        maxallowedpricepership_ct  = &lt;%s&gt;    &lt;%s&gt;                \n
                                        ship price              = &lt;%s&gt;    &lt;%s&gt;                \n
                                        player.money - $Price   = &lt;%s&gt;    &lt;%s&gt;                \n
                                        Price gt maxallowedpricepership = %s
                                    '.[
                                        player.money.formatted.default, player.money,
                                        $playermoneythreshold_ct.formatted.default, $playermoneythreshold_ct,
                                        $maxallowedpricepership_ct.formatted.default, $maxallowedpricepership_ct,
                                        $Price.formatted.default, $Price,
                                        ($playermoney - $Price).formatted.default, ($playermoney - $Price),
                                        if ($Price gt $maxallowedpricepership_ct) then 'Maliyet FAZLA' else 'maliyet UYGUN'
                                    ]" chance="0"/>
                                    -->
                                    <debug_to_file text="'    Total price for %s is %s Cr'.[$Ship_Name, $Price.formatted.default]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>

                                    <set_value name="$buildresponds" exact="table[]" />
                                    <do_if value="$Price gt 0Cr">
                                        <do_if value="$playermoney lt $Price">
                                            <!-- The calculated ship cost (%s Cr) exceeded the players available funds (%s Cr).-->
                                            <set_value name="$buildresponds.$price" exact="table[ 
                                                $checkcase = $failcases.$price.$id, 
                                                $price      = $Price, 
                                                $fundsmoney = $playermoney,
                                                $yard       = $Shipyard,
                                                $statusmsg = readtext.{Main.$tPage}.{9012}.[$Price.formatted.default, $playermoney.formatted.default]
                                                ]" />
                                        </do_if>
                                        <do_else>
                                            <do_if value="not $passingcriterias.indexof.{'price'}">
                                                <do_if value="$playermoney gt $playermoneythreshold_ct and ( ($playermoney - $Price) ge $playermoneythreshold_ct)" comment="CONSTRUCT SHIP ...">
                                                    <do_if value="($maxallowedpricepership_ct gt 0Cr) and ($Price gt $maxallowedpricepership_ct)">
                                                        <!-- The calculated ship cost (%s Cr) exceeded the ship production allowed cost (%s Cr).-->
                                                        <set_value name="$buildresponds.$price" exact="table[ 
                                                            $checkcase = $failcases.$price.$id, 
                                                            $price = $Price, 
                                                            $checkmoney = $maxallowedpricepership_ct,
                                                            $yard       = $Shipyard,
                                                            $statusmsg = readtext.{Main.$tPage}.{9013}.[$Price.formatted.default, $maxallowedpricepership_ct.formatted.default]
                                                            ]" />
                                                    </do_if>
                                                </do_if>
                                                <do_else>
                                                    <do_if value="$playermoneythreshold_ct gt 0Cr">
                                                        <!-- After the calculated ship fee (%s Cr) is deducted from the player\'s money, (%s Cr) the remaining amount is less than the set money threshold %s Cr.-->
                                                        <set_value name="$buildresponds.$price" exact="table[ 
                                                        $checkcase   = $failcases.$price.$id, 
                                                        $price       = $Price, 
                                                        $playermoney = $playermoney,
                                                        $checkmoney  = $playermoneythreshold_ct,
                                                        $statusmsg   = readtext.{Main.$tPage}.{9014}.[$Price.formatted.default, ($playermoney - $Price).formatted.default, $playermoneythreshold_ct.formatted.default]
                                                        ]" />
                                                    </do_if>
                                                </do_else>
                                            </do_if>
                                        </do_else>
                                    </do_if>
                                </do_if>
                                <do_else>
                                    <!-- Bestyard dan sonuç gelmedi -->
                                    <set_value name="$buildresponds.$selectbest" exact="table[ 
                                        $checkcase = $failcases.$selectbest.$id, 
                                        $objects = $Yards, 
                                        $statusmsg = $failcases.$selectbest.$text
                                    ]" />
                                    <debug_to_file text="'      Cant select a Best Shipyard in yards. %s'.[$Yards]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                </do_else>
                            </do_if>
                        </do_if>
                        <do_else>
                            <!-- !!!! No have any compability Shipyard for construction-->
                            <set_value name="$buildresponds.$shipyard" exact="table[ 
                                $checkcase = $failcases.$shipyard.$id, 
                                $statusmsg = $failcases.$shipyard.$text 
                            ] " />
                        </do_else>
                            
                        <!-- DEBUG TEST RESPOND -->
                        <debug_text text="'$Yards.count = %s , $buildresponds RFM_%s_%s = '.[$Yards.count, $RFMKey, $ShipIDX]" chance="$testchance"/>
                        <run_actions ref="DebugPrintValue">
                            <param name="value" value="$buildresponds" />
                            <param name="recursiondepth" value="2" />
                            <param name="DebugChance" value="$testchance" />
                        </run_actions>
                        
                        <!-- SELECT LAST RESPOND -->
                        <do_if value="$buildresponds.keys.count > 0">
                            <!-- Başarısız çıkış, Üretim oluşamadı -->
                            <set_value name="$selectedid" exact="0" />
                            <set_value name="$selectedkey" exact="''"/>
                            <do_for_each name="$key" valuename="$value" in="$buildresponds" >
                                <!-- <debug_text text="'key = %s , .id =  %s , selectedid = %s'.[$key, $value.$checkcase, $selectedid]" />-->
                                <do_if value="$value.$checkcase > $selectedid">
                                    <set_value name="$selectedid" exact="$value.$checkcase" />
                                    <set_value name="$selectedkey" exact="$key"/>
                                    <!-- <debug_text text="' Saved selectedid = %s, $selectedkey = %s'.[$selectedid, $selectedkey]" />-->
                                </do_if>
                            </do_for_each>
                            <set_value name="$respond" exact="$buildresponds.{$selectedkey}"/>
                            <set_value name="$finishStatus" exact="$respond.$statusmsg" />
                            <debug_text text="'= = = Selected (RFM_%s_%s) Last Entry Big Key = %s , message = %s '.[$RFMKey, $ShipIDX, $selectedkey, $finishStatus ]" chance="Main.$DeepDebug"/>
                            
                            <!-- Özel Durum hatalı Çıkışlar -->
                            <do_if value="$selectedid == $failcaseOrders.$price">
                                <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4011}">
                                    <replace string="'$COMMANDER$'" with="readtext.{Main.$tPage}.{500} + '_' + $RFMKey + '_' "/>
                                    <replace string="'$SHIP$'" with="$Ship_Name + ' ' + $Ship_IdCode + (if Main.$DebugChance == 100 then ' (' + $ShipIDX + ')' else '') "/>
                                    <replace string="'$PRICE$'" with="$respond.$price"/>
                                    <replace string="'$MONEY$'" with="faction.player.money"/>
                                </substitute_text>
                                <write_to_logbook category="upkeep" title="'\033' + Main.$normalColor + readtext.{Main.$tPage}.{2} + '\033X'" text="$LogMsg" chance="if global.$upbRF_DATA.$Editing.$write_to_logbook then 100 else 0"/>
                            </do_if>
                            <do_elseif value="$selectedid == $failcaseOrders.$selectbest">
                                <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4012}">
                                    <replace string="'$COMMANDER$'" with="readtext.{Main.$tPage}.{500} + '_' + $RFMKey + '_' "/>
                                    <replace string="'$SHIP$'" with="$Ship_Name + ' ' + $Ship_IdCode + (if Main.$DebugChance == 100 then ' (' + $ShipIDX + ')' else '') "/>
                                </substitute_text>
                                <write_to_logbook category="upkeep" title="'\033' + Main.$normalColor + readtext.{Main.$tPage}.{2} + '\033X'" text="$LogMsg" chance="if global.$upbRF_DATA.$Editing.$write_to_logbook then 100 else 0"/>
                            </do_elseif>
                            <!-- Standart Hatalı çıkışlar-->
                            <do_else>
                                <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4013}">
                                    <replace string="'$COMMANDER$'" with="readtext.{Main.$tPage}.{500} + '_' + $RFMKey + '_' "/>
                                    <replace string="'$SHIP$'" with="$Ship_Name + ' ' + $Ship_IdCode + (if Main.$DebugChance == 100 then ' (' + $ShipIDX + ')' else '') "/>
                                    <replace string="'$STATUS$'" with="$finishStatus"/>
                                </substitute_text>
                                <write_to_logbook category="upkeep" title="'\033' + Main.$normalColor + readtext.{Main.$tPage}.{2} + '\033X'" text="$LogMsg" chance="if global.$upbRF_DATA.$Editing.$write_to_logbook then 100 else 0"/>
                            </do_else>
                            
                            <include_actions ref="Reset__RebuildShipCheck" />
                        </do_if>
                        <!-- ! OK ! ADD BUILD TO CONSTRUCT SHIP-->
                        <do_else>
                            <!-- Başarılı çıkış, Üretim İsteği Verilecek  -->
                            
                            <!-- tShipPlan varsa direk lua build çağrı yapılacak yoksa MD yöntemi ile build yapılıp tasklara eklenecek
                            -->
                            <debug_text text="'BUILD Rebuild Check %s_%s Cue = %s, $Flag_RFM_Menu? = %s, $batchprocessing = %s, $lastbatchprocessing = %s'.[$RFMKey, $ShipIDX, this, player.entity.$Flag_RFM_Menu?, $batchprocessing, $lastbatchprocessing ]" chance="Main.$DebugChance"/>

                            <do_if value="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tShipPlan?">

                                <signal_cue_instantly cue="Request_Buildtask_From_Lua" param="table[
                                    $fleetID = $RFMKey,
                                    $shipID = $ShipIDX,
                                    $shipyard = $Shipyard,
                                    $name                       = Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$name,
                                    $macro                      = Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$macro,
                                    $tShipPlan                  = Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tShipPlan,
                                    $tIndividualInstructions    = Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tIndividualInstructions,
                                    $paintmodwareid             = @Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tPaintModWareId.$installed,
                                    $tBulkCrew                  = Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tBulkCrew,
                                    $respondMsg         = readtext.{Main.$tPage}.{9056},
                                    $respond            = table[],
                                    $batchprocessing    = $batchprocessing,
                                    $isdebug            = (if Main.$DeepDebug == 100 then true else false)
                                ]"/>

                                <do_if value="not $batchprocessing">
                                    <!-- DEBUG -->
                                    <!-- FLEET RECORD TABLE -->
                                    <run_actions ref="Debug_FleetRecord_NoOthers">
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>
                                    <!-- ALL REBUILD CUES -->
                                    <run_actions ref="Debug_AllRebuildCues"/>
                                    <!-- REBUILD CUES -->
                                    <run_actions ref="Debug_RebuildCue">
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>
                                </do_if>

                                <cancel_cue cue="parent" />

                            </do_if>
                            <do_else>

                                <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildTryNum" exact="0" />
                                <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildStartTime" exact="null" />

                                <transfer_money from="faction.player" to="$Shipyard" amount="$Price" />
                                <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4010}">
                                    <replace string="'$COMMANDER$'" with="readtext.{Main.$tPage}.{500} + '_' + $RFMKey + '_' "/>
                                    <replace string="'$SHIP$'" with="$Ship_Name + ' ' + $Ship_IdCode + (if Main.$DebugChance == 100 then ' (' + $ShipIDX + ')' else '') "/>
                                    <replace string="'$SHIPYARD$'" with="$Shipyard.knownname + ' ' + $Shipyard.idcode"/>
                                    <replace string="'$SECTOR$'" with="$Shipyard.sector.knownname"/>
                                </substitute_text>
                                <write_to_logbook object="$Shipyard" category="upkeep" interaction="showonmap" title="'\033' + Main.$normalColor + readtext.{Main.$tPage}.{2} + '\033X'" text="$LogMsg" money="if $Price gt 0Cr then ($Price * -1) else $Price" chance="if global.$upbRF_DATA.$Editing.$write_to_logbook then 100 else 0"/>

                                <do_if value="typeof $Ship_Loadout == datatype.loadout">
                                    <debug_text text="'    OK   loadout, macro = %s , loadout = %s , wares.list = %s , yard = %s %s'.[$Ship_Macro, $Ship_Loadout, $Ship_Loadout.wares.list, $Shipyard.idcode, $Shipyard.knownname]" chance="Main.$DeepDebug" />
                                </do_if>
                                <do_else>
                                    <debug_text text="'MISMATCH loadout, macro = %s , wares.list = %s , yard = %s %s. Generating new loadout..'.[$Ship_Macro, @$Ship_Loadout.wares.list, $Shipyard.idcode, $Shipyard.knownname]" chance="Main.$DebugChance" />
                                    <run_actions ref="Create_Loadout_AndSetTo" result="Main.$Loadouts.{$RFMKey}.{$ShipIDX}" comment="tshipplan üretim bitince denetlenecek ve yeni loadout bilgisine göre alınacak">
                                        <param name="ship"      value="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$object"/>
                                        <param name="macro"     value="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$macro" />
                                        <param name="wares"     value="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tWare" />
                                        <param name="FleetRec"  value="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}"/>
                                    </run_actions>
                                    <remove_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tShipPlan" />

                                    <set_value name="$Ship_Loadout" exact="Main.$Loadouts.{$RFMKey}.{$ShipIDX}"/>

                                    <debug_text text="' NEW loadout = %s , wares.list = %s'.[$Ship_Loadout, $Ship_Loadout.wares.list]" chance="Main.$DeepDebug" />
                                    
                                    <run_actions ref="Debug_FleetRecord">
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>
                                </do_else>                            
                                
                                <add_build_to_construct_ship result="$Build" object="$Shipyard" macro="$Ship_Macro" faction="faction.player" loadout="$Ship_Loadout" />

                                <signal_objects 
                                    object="player.entity" 
                                    param="'rfm_buildtask_added'" 
                                    param2="table[
                                        $fleetID = $RFMKey,
                                        $shipID = $ShipIDX,
                                        $id = $Build,
                                        $buildingcontainer = $Shipyard,
                                        $macro = Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$macro.id,
                                        $batchprocessing = $batchprocessing
                                        ]" />
                                
                                <debug_text text="' RFM[%s][%s] Added build.&lt;%s&gt; to construct ship. object.&lt;%s&gt;%s %s'.[$RFMKey, $ShipIDX, $Build, $Shipyard, $Shipyard.idcode, $Shipyard.knownname]" chance="Main.$DeepDebug" />

                                <debug_to_file text="'           RFM_%s_( %s ) add_build_to_construct_ship, $Build = %s - Age %s'.[$RFMKey, $ShipIDX, $Build, player.age]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DFD.$MainCommandsDeep"/>
                                <debug_to_file text="'        ( %s ) add_build_to_construct_ship, $Build = %s - Age %s'.[$ShipIDX, $Build, player.age]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$CommandDeep"/>
                                <debug_to_file text="' ( %s ) add_build_to_construct_ship, $Build = %s - Age %s, Money = %sCr, Sended logbook.upkeep Msg.. '.[$ShipIDX, $Build, player.age, (if $Price gt 0Cr then ($Price * -1) else $Price).formatted.default]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuild"/>
                                
                                <do_if value="not $batchprocessing">
                                    <!-- DEBUG -->
                                    <include_actions ref="PrintBuildTaskIDs" />
                                    <!-- FLEET RECORD TABLE -->
                                    <run_actions ref="Debug_FleetRecord_NoOthers">
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>
                                    <!-- ALL REBUILD CUES -->
                                    <run_actions ref="Debug_AllRebuildCues"/>
                                    <!-- REBUILD CUES -->
                                    <run_actions ref="Debug_RebuildCue">
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>
                                </do_if>

                                <cancel_cue cue="parent" />
                            </do_else>
                        </do_else>

                    </actions>
                </cue>

                <library name="Let__failcasesOptions" purpose="include_actions">
                    <actions>
                        <!--buildresponds; build üretim işlemi boyunca oluşacak hata ile ilgili bilgiyi saklayacağız 
                            ordersdaki değerin büyüklüğü bilgilendirmek istediğimiz en son hatayı yakalamamızı sağlayacak
                            * (shipyarddestroyed, buildcanceled, buildfallback taranacak criterler arasında değil)
                            -->
                        <set_value name="$failcaseOrders" exact="global.$upbRF_DATA.$Default.$failcaseOrders" />
                        <set_value name="$failcases" exact="global.$upbRF_DATA.$Default.$failcases" />
                        <set_value name="$buildresponds" exact="table[]"/>
                        <set_value name="$respond" exact="table[]"/>
                        <set_value name="$respondMsg" exact="''" />
                    </actions>
                </library>

                <library name="Stop__RebuildShipCheck" purpose="include_actions">
                    <actions>

                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildTryNum" exact="0" />
                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildStartTime" exact="null" />

                        <run_actions ref="Check_FleetLockStatus">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="batchprocessing" value="$batchprocessing or $lastbatchprocessing" />
                        </run_actions>

                        <do_if value="$lastbatchprocessing">
                            <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                                $fleetID = $RFMKey,
                                $shipID = null,
                                $Record = Main.$FleetRecords.{$RFMKey},
                                $RebuildCue = Main.$RebuildCues.{$RFMKey},
                                $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                                $description = 'Rebuild Ship Check Stopped (LAST ENTRY) %s_%s'.[$RFMKey, $ShipIDX]
                            ]" chance="player.entity.$Flag_RFM_Menu? * 100 "/>
                        </do_if>
                        <do_else>
                            <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                                $fleetID = $RFMKey,
                                $shipID = $ShipIDX,
                                $Record = Main.$FleetRecords.{$RFMKey}.{$ShipIDX},
                                $RebuildCue = Main.$RebuildCues.{$RFMKey}.{$ShipIDX},
                                $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                                $description = 'Rebuild Ship Check Stopped %s_%s'.[$RFMKey, $ShipIDX]
                            ]" chance="player.entity.$Flag_RFM_Menu? * 100 * ( not $batchprocessing )"/>
                        </do_else>

                        <debug_text text="'EXIT RebuildShipCheck STOPPED %s_%s  $Flag_RFM_Menu? = %s, $batchprocessing = %s, $lastbatchprocessing = %s'.[$RFMKey, $ShipIDX, player.entity.$Flag_RFM_Menu?, $batchprocessing, $lastbatchprocessing]" chance="Main.$DeepDebug"/>                

                        <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4015}">
                            <replace string="'$COMMANDER$'" with="readtext.{Main.$tPage}.{500} + '_' + $RFMKey + '_' "/>
                            <replace string="'$SHIP$'" with="$Ship_Name + ' ( ' + $ShipIDX + ' )' "/>
                            <replace string="'$STATUS$'" with="$finishStatus"/>
                        </substitute_text>
                        <write_to_logbook category="upkeep" title="'\033' + Main.$normalColor + readtext.{Main.$tPage}.{2} + '\033X'" text="$LogMsg" chance="if global.$upbRF_DATA.$Editing.$write_to_logbook then 100 else 0"/>
                        
                        <do_if value="not $batchprocessing or $lastbatchprocessing">
                            <!-- DEBUG -->
                            <!-- FLEET RECORD TABLE -->
                            <run_actions ref="Debug_FleetRecord_NoOthers">
                                <param name="RFMKey" value="$RFMKey" />
                            </run_actions>
                            <!-- ALL REBUILD CUES -->
                            <run_actions ref="Debug_AllRebuildCues"/>
                            <!-- REBUILD CUES -->
                            <run_actions ref="Debug_RebuildCue">
                                <param name="RFMKey" value="$RFMKey" />
                            </run_actions>
                        </do_if>

                    </actions>
                </library>

                <library name="Reset__RebuildShipCheck" purpose="include_actions">
                    <actions>

                        <debug_to_file text="' - - %s Resetting Cue(RebuildShipCheck)... Sended Logbook.upkeep Msg '.[$finishStatus]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DFD.$Command"/>
                        <debug_to_file text="' - - %s Resetting Cue(RebuildShipCheck)... Sended Logbook. Msg '.[$finishStatus]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuild"/>
                        
                        <remove_value name="$Shipyard" />
                        <remove_value name="$Build" />

                        <set_value name="$shipyard" exact="@$Shipyard" />
                        <set_value name="$build" exact="@$Build" />
                        <set_value name="$isWaitingForRebuild" exact="true" />
                        <set_value name="$respondMsg" exact="if $finishStatus? then $finishStatus else ''" />

                        <run_actions ref="Set_RebuildCueTable">
                            <param name="RFMKey"                value="$RFMKey" />
                            <param name="ShipKey"               value="$ShipIDX" />
                            <param name="cue"                   value="if $rebuildtimerstatus then $cue else null" />
                            <param name="shipyard"              value="$shipyard" />
                            <param name="build"                 value="$build" />
                            <param name="isWaitingForRebuild"   value="if $rebuildtimerstatus then $isWaitingForRebuild else false" />
                            <param name="respondMsg"            value="$respondMsg" />
                            <param name="respond"               value="$respond" />
                        </run_actions>

                        <do_if value="not $rebuildtimerstatus">
                            <include_actions ref="Stop__RebuildShipCheck" />
                            <cancel_cue cue="parent" />
                        </do_if>
                        <do_else>

                            <run_actions ref="Check_FleetLockStatus">
                                <param name="RFMKey" value="$RFMKey" />
                                <param name="batchprocessing" value="$batchprocessing or $lastbatchprocessing" />
                            </run_actions>

                            <do_if value="$lastbatchprocessing">
                                <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                                    $fleetID = $RFMKey,
                                    $shipID = null,
                                    $Record = Main.$FleetRecords.{$RFMKey},
                                    $RebuildCue = Main.$RebuildCues.{$RFMKey},
                                    $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                                    $description = 'Reset Rebuild Check (LAST ENTRY) %s_%s'.[$RFMKey, $ShipIDX]
                                ]" chance="player.entity.$Flag_RFM_Menu? * 100 "/>
                            </do_if>
                            <do_else>
                                <signal_cue_instantly cue="SendLua_DataChanged" param="table[
                                    $fleetID = $RFMKey,
                                    $shipID = $ShipIDX,
                                    $Record = Main.$FleetRecords.{$RFMKey}.{$ShipIDX},
                                    $RebuildCue = Main.$RebuildCues.{$RFMKey}.{$ShipIDX},
                                    $RM_Fleet = Main.$RM_Fleets.{$RFMKey},
                                    $description = 'Reset Rebuild Check %s_%s'.[$RFMKey, $ShipIDX]
                                ]" chance="player.entity.$Flag_RFM_Menu? * 100 * ( not $batchprocessing ) "/>
                            </do_else>

                            <debug_text text="'RESET Rebuild Check %s_%s Cue = %s, $Flag_RFM_Menu? = %s, $batchprocessing = %s, $lastbatchprocessing = %s'.[$RFMKey, $ShipIDX, this, player.entity.$Flag_RFM_Menu?, $batchprocessing, $lastbatchprocessing ]" chance="Main.$DebugChance"/>
                            <reset_cue cue="this"/>
                            <!-- <reset_cue cue="RebuildShipCheck"/>-->

                            <do_if value="not $batchprocessing or $lastbatchprocessing">
                                <!-- DEBUG -->
                                <!-- FLEET RECORD TABLE -->
                                <run_actions ref="Debug_FleetRecord_NoOthers">
                                    <param name="RFMKey" value="$RFMKey" />
                                </run_actions>
                                <!-- ALL REBUILD CUES -->
                                <run_actions ref="Debug_AllRebuildCues"/>
                                <!-- REBUILD CUES -->
                                <run_actions ref="Debug_RebuildCue">
                                    <param name="RFMKey" value="$RFMKey" />
                                </run_actions>
                            </do_if>

                        </do_else>

                    </actions>
                </library>

                <library name="Select__BestYard" purpose="include_actions">
                    <actions>
                        <!-- lower is better -->
                        <debug_to_file text="'  Select Lower is Better ...'" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                        <set_value name="$BestRating" exact="100000"/>
                        
                        <set_value name="$suitablestations" exact="[]"/>
                        <set_value name="$freeStations" exact="[]" />
                        <set_value name="$quedStations" exact="[]" />

                        <do_for_each name="$TestYard" in="$Yards" counter="$iy">
                            <debug_to_file text="'    %s- %s %s &lt;%s&gt; Checking rating..'.[$iy, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                            <set_value name="$CommandSector" exact="@Main.$FleetRecords.{$RFMKey}.{1}.$sectorid" />
                            <do_if value="$CommandSector == null">
                                <set_value name="$CommandSector" exact="$TestYard.sector" />
                                <debug_to_file text="'       ! Command Sector is null, Skipping this criteria..'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                                <!-- 
                                <do_if value="player.sector != null">
                                    <set_value name="$CommandSector" exact="player.sector" />
                                </do_if>
                                <do_else>
                                    <set_value name="$CommandSector" exact="player.zone.sector" />
                                </do_else>
                                -->
                            </do_if>

                            <set_value name="$gateDistance" exact="$CommandSector.gatedistance.{$TestYard}" />
                            <set_value name="$buildprocessors" exact="$TestYard.buildprocessors.count" />
                            <set_value name="$inprogress" exact="$TestYard.builds.inprogress.count" />
                            <set_value name="$queued" exact="$TestYard.builds.queued.count" />
                            <set_value name="$free" exact="if ($buildprocessors - ($queued + $inprogress)) le 0 then 0 else ($buildprocessors - ($queued + $inprogress))" />

                            <run_actions ref="GetProductionCostByWaresTable" result="$price">
                                <param name="container" value="$TestYard" />
                                <param name="objectmacro" value="$Ship_Macro" />
                                <param name="waresTable" value="$Ship_WareTable" />
                                <param name="crewcount" value="$Ship_BulkCrew.{entityrole.service}.count + $Ship_BulkCrew.{entityrole.marine}.count" />
                                <param name="logfile" value="$reBuild_logF" />
                                <param name="isdebug" value="false" />
                            </run_actions>

                            <append_to_list name="$suitablestations" exact="table[
                                $container = $TestYard,
                                $buildprocessors = table[ $queued = $queued, $inprogress = $inprogress, $free = $free ],
                                $gateDistance = $gateDistance,
                                $price = if $TestYard.isplayerowned then 0 else $price
                            ]" />
                            <do_if value="$queued == 0 and $free gt 0">
                                    <append_to_list name="$freeStations" exact="table[
                                        $container = $TestYard,
                                        $name = $TestYard.knownname,
                                        $buildprocessors = table[ $queued = $queued, $inprogress = $inprogress, $free = $free ],
                                        $gateDistance = $gateDistance,
                                        $price = if $TestYard.isplayerowned then 0 else $price
                                    ]" />
                            </do_if>
                            <do_else>
                                    <append_to_list name="$quedStations" exact="table[
                                        $container = $TestYard,
                                        $name = $TestYard.knownname,
                                        $buildprocessors = table[ $queued = $queued, $inprogress = $inprogress, $free = $free ],
                                        $gateDistance = $gateDistance,
                                        $price = if $TestYard.isplayerowned then 0 else $price
                                    ]" />
                            </do_else>

                            <debug_to_file text="'
             Gate Distance     = %s                                               * [ gate distance ] will be assigned as rating value \n
             Build Processors  = %s  [ Queued = %s , Inprogress = %s , free = %s ]  * If there is no free processor,   [ 100] will be added to the rating. \n
             %s                                                       * If not player station,           [ 50 ] will be added to the rating. \n
             price             = %s Cr \n
             Result Rating = %s
                            '.[
                            if $gateDistance gt 9 then $gateDistance else ' %s'.[$gateDistance], 
                            $buildprocessors, $queued, $inprogress, $free, 
                            if $TestYard.isplayerowned then 'Player Station' else 'NPC           ',
                            if $TestYard.isplayerowned then 0 else $price.formatted.default,
                            $gateDistance + (if $free == 0 then 100 else 0) + (if not $TestYard.isplayerowned then 50 else 0)
                            ]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>

                            <set_value name="$Rating" exact="$gateDistance"/> 
                            <do_if value="$free == 0">
                                <set_value name="$Rating" exact="100" operation="add"/>
                            </do_if>
                            <do_if value="not $TestYard.isplayerowned">
                                <set_value name="$Rating" exact="50" operation="add"/>
                            </do_if>
                            <do_if value="$Rating lt $BestRating">
                                <set_value name="$Shipyard" exact="$TestYard"/>
                                <set_value name="$BestRating" exact="$Rating"/>
                            </do_if>

                            <debug_to_file text="'        * BestRating = %s'.[$BestRating]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep"/>
                        </do_for_each>

                        
                        <debug_text text="'$freeStations #%s = %s'.[$freeStations.count, $freeStations]" />
                        <debug_text text="'$quedStations #%s = %s'.[$quedStations.count, $quedStations]" />

                        <do_if value="$freeStations.count gt 0">

                            <set_value name="$selectedinfree" />
                            <set_value name="$distance" exact="$freeStations.{$freeStations.count}.$gateDistance"/>
                            <set_value name="$beststation" exact="$freeStations.{$freeStations.count}"/>

                            <do_all exact="$freeStations.count - 1" counter="$i">
                                <do_if value="$freeStations.{$i}.$gateDistance lt $distance">
                                    <set_value name="$isReplace" />
                                </do_if>
                                <do_elseif value="$freeStations.{$i}.$gateDistance == $distance">
                                    <do_if value="$freeStations.{$i}.$price lt $beststation.$price">
                                        <set_value name="$isReplace" />
                                    </do_if>
                                </do_elseif> 

                                <do_if value="$isReplace?">
                                    <remove_value name="$isReplace" />
                                    <do_if value="$freeStations.{$i}.$container.isplayerowned">
                                        <set_value name="$isReplace" />
                                    </do_if>
                                    <do_elseif value="not $beststation.$container.isplayerowned">
                                        <set_value name="$isReplace" />
                                    </do_elseif>
                                </do_if>

                                <do_if value="$isReplace?">
                                    <remove_value name="$isReplace" />
                                    <set_value name="$distance" exact="$freeStations.{$i}.$gateDistance"/>
                                    <set_value name="$beststation" exact="$freeStations.{$i}"/>
                                </do_if>
                            </do_all>

                        </do_if>
                        <do_else>
                            <do_if value="$quedStations.count gt 0">

                                <set_value name="$queued" exact="$quedStations.{$quedStations.count}.$buildprocessors.$queued"/>
                                <set_value name="$beststation" exact="$quedStations.{$quedStations.count}"/>

                                <do_all exact="$quedStations.count - 1" counter="$i">

                                    <do_if value="$quedStations.{$i}.$buildprocessors.$queued lt $queued">
                                        <set_value name="$isReplace" />
                                    </do_if>
                                    <do_elseif value="$quedStations.{$i}.$buildprocessors.$queued == $queued">
                                        <do_if value="$quedStations.{$i}.$price lt $beststation.$price">
                                            <set_value name="$isReplace" />
                                        </do_if>
                                    </do_elseif> 

                                    <do_if value="$isReplace?">
                                        <remove_value name="$isReplace" />
                                        <do_if value="$quedStations.{$i}.$container.isplayerowned">
                                            <set_value name="$isReplace" />
                                        </do_if>
                                        <do_elseif value="not $beststation.$container.isplayerowned">
                                            <set_value name="$isReplace" />
                                        </do_elseif>
                                    </do_if>

                                    <do_if value="$isReplace?">
                                        <remove_value name="$isReplace" />
                                        <set_value name="$queued" exact="$quedStations.{$i}.$buildprocessors.$queued"/>
                                        <set_value name="$beststation" exact="$quedStations.{$i}"/>
                                    </do_if>

                                </do_all>

                            </do_if>
                        </do_else>

                        <do_if value="$beststation?">
                            <debug_text text="'SELECTED BEST in %s List [gate %s, queued = %s] = %s %s , price = %s Cr'.[if $selectedinfree? then 'FREE' else 'QUED', $beststation.$gateDistance, $beststation.$buildprocessors.$queued, $beststation.$container.knownname, $beststation.$container.idcode, if $beststation.$container.isplayerowned then 0 else $beststation.$price.formatted.default]" />
                        </do_if>
                        <do_else>
                            <debug_text text="'ERROR Why Clear all list? @_Fikret'.[]" />
                        </do_else>
                        

                    </actions>
                </library>

            </cues>
        </cue>

        <!-- 
            container   : shipyard 
            objectmacro : ship.macro
            waresTable  : table[ {ware} = count, ..... ]
            crewcount   : total crew count
            return value TotalPrice for this container
        -->
        <library name="GetProductionCostByWaresTable" purpose="run_actions">
            <params>
                <param name="container" />
                <param name="objectmacro" />
                <param name="waresTable" />
                <param name="crewcount" />
                <param name="isdebug" default="true"/>
                <param name="logfile" />
            </params>
            <actions>

                <set_value name="$pricetable" exact="table[]" />
                <set_value name="$pricetable.$warelist" exact="[]" />

                <!-- Chassis Price-->
                <set_value name="$ware" exact="$objectmacro.ware"/>
                <set_value name="$ItemPrice" exact="(($container.buyprice.{$ware})LF * ($container.buildpricefactor)LF * 0.01LF)Cr"/>
                <debug_to_file text="'     Chassis  %s Cr'.[$ItemPrice.formatted.default]" name="$logfile" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep * $isdebug"/>
                <set_value name="$Price" exact="$ItemPrice" operation="add"/>

                <append_to_list name="$pricetable.$warelist" exact="table[ $ware = $ware, $price = $ItemPrice, $eachprice = $ItemPrice, $count = 1 ]" />
                <set_value name="$pricetable.$totalprice" exact="$Price" />

                <!-- wares Price -->
                <do_for_each name="$ware" valuename="$count" in="$waresTable">
                    <set_value name="$EachPrice" exact="(($container.buyprice.{$ware})LF * ($container.buildpricefactor)LF * 0.01LF)Cr"/>
                    <set_value name="$ItemPrice" exact="$EachPrice * $count"/>
                    <debug_to_file text="'     %sx %s is %s Cr ( each price = %s Cr )'.[$count, $ware, $ItemPrice.formatted.default, $EachPrice.formatted.default]" name="$logfile" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep * $isdebug"/>
                    <set_value name="$Price" exact="$ItemPrice" operation="add"/>

                    <append_to_list name="$pricetable.$warelist" exact="table[ $ware = $ware, $price = $ItemPrice, $eachprice = $EachPrice, $count = $count ]" />
                    <set_value name="$pricetable.$totalprice" exact="$Price" />
                </do_for_each>

                <!-- Crews Price-->
                <set_value name="$count" exact="$crewcount" />
                <set_value name="$ware" exact="ware.{'crew'}" />
                <set_value name="$minprice" exact="$ware.minprice"/>
                <set_value name="$maxprice" exact="$ware.maxprice"/>
                <set_value name="$workforceavailable" exact="( $container.workforce.amount - ($container.workforce.bonus * $container.workforce.amount)LF ) " />
                <set_value name="$workforceavailable" exact=" ($workforceavailable)i + ( ($workforceavailable - ($workforceavailable)i )f + 0.5 )i" />
                <set_value name="$st1" exact="($maxprice - $minprice)f * 0.01f" />
                <set_value name="$st2" exact="($workforceavailable)LF / ($container.workforce.capacity)LF " />
                <set_value name="$st3" exact="$st2 * $st1" />
                <set_value name="$st4" exact="( (($maxprice)f * 0.01f) - $st3)LF " />
                <set_value name="$st5" exact="$container.buildpricefactor * $st4 " />
                <set_value name="$st6" exact=" ($st5)i + ( ($st5 - ($st5)i )f + 0.5 )i" />
                <!-- x = 5 Cr  dendiğinde x = 500 değeri alıyor çünkü birim artık 500ct şeklinde
                    <debug_text text="'$workforceavailable = %s ,  workforce.capacity = %s \n
                    $minprice = %s [%s] , $maxprice = %s [%s] \n
                    , st1 = %s , st2 = %s , $st3 = %s , $st4 = %s , $st5 = %s , $st6 = %s
                    '.[$workforceavailable, $container.workforce.capacity, 
                    $minprice, $minprice.formatted.default,
                    $maxprice, $maxprice.formatted.default,
                    $st1, $st2, $st3, $st4, $st5, $st6]" />
                    <debug_text text="'     %sx %s is %s Cr ( each price = %s Cr )'.[$crewcount, $crewware, $ItemPrice.formatted.default, $EachPrice.formatted.default]" />
                -->
                <!-- 
                    <set_value name="$ItemPrice" exact="(($container.buyprice.{$crewware})LF * ($container.buildpricefactor)LF * 0.01LF)Cr"/>
                    <debug_text text="'1 CREW PRICE $ItemPrice = %s , min = %s , max = %s , buy = %s , sell = %s , buildpricefactor = %s'.[$ItemPrice, $crewware.minprice, $crewware.maxprice, $container.buyprice.{$crewware}, $container.sellprice.{$crewware}, $container.buildpricefactor]" />
                    <debug_text text="'workforce.amount = %s , workforce.capacity = %s , workforce.bonus = %s , workforce.min = %s , workforce.optimal = %s '.[$container.workforce.amount, $container.workforce.capacity, $container.workforce.bonus, $container.workforce.min , $container.workforce.optimal ]" />
                    <debug_text text="'workforce.available = %s'.[$workforceavailable  ]" />
                -->
                <set_value name="$EachPrice" exact="($st6)Cr"/>
                <set_value name="$ItemPrice" exact="$EachPrice * $count "/>
                <debug_to_file text="'     %sx %s is %s Cr ( each price = %s Cr )'.[$count, $ware, $ItemPrice.formatted.default, $EachPrice.formatted.default]" name="$logfile" directory="Main.$logDIR" chance="Main.$DFD.$reBuildDeep * $isdebug"/>
                <set_value name="$Price" exact="$ItemPrice" operation="add"/>

                <append_to_list name="$pricetable.$warelist" exact="table[ $ware = $ware, $price = $ItemPrice, $eachprice = $EachPrice, $count = $count ]" />
                <set_value name="$pricetable.$totalprice" exact="$Price" />

                <return value="$Price" />
            </actions>
        </library>

        <!-- param="table[$RFMKey = $RFMKey[, $excludeShip = event.object] ]" /> 
            
            excludeShip : bu objeyi hariç tutacağız verilirse, şimdilik kullanmadık
        -->
        <cue name="Adjust_Fleet_Formations" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled />
                <check_value value="event.param != null" />
            </conditions>
            <actions>
                
                <set_value name="$params" exact="event.param" />

                <set_value name="$RFMKey"       exact="$params.$RFMKey" />
                <set_value name="$excludeShip"  exact="@$params.$excludeShip" />
                
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>

                <set_value name="$FComp" exact="$RFMCue.$fleetshipsByComp"/>
                <set_value name="$FIndx" exact="$RFMCue.$fleetshipsByIdx"/>
                <set_value name="$FRec" exact="Main.$FleetRecords.{$RFMKey}"/>

                <include_actions ref="Let_RFM_LogFileNames" />

                <debug_text text="'Adjusting Fleet Formation RFM_%s'.[$RFMKey]" chance="Main.$ChangesOnFleetDebug"/>

                <debug_to_file text="'.. Adjusting Fleet Formation .... RFM.PromotedCommander [%s], %s = &lt;%s&gt; %s %s (promoted sector %s) %s Age: %s
                '.[
                if @$FComp.{$RFMCue.$PromotedCommander} != null then $FComp.{$RFMCue.$PromotedCommander} else 'dead',
                $RFMCue.$PromotedCommander, 
                if $RFMCue.$RMCommanderName == '' then 
                    if @$RFMCue.$PromotedCommander != null then
                        'PromotedCommander'
                    else 
                        'dead'
                else 
                    'RMCommander'
                ,
                if $RFMCue.$RMCommanderName == '' then 
                    if @$RFMCue.$PromotedCommander != null then
                        $RFMCue.$PromotedCommander.knownname 
                    else ''
                else 
                    $RFMCue.$RMCommanderName
                ,
                if $RFMCue.$RMCommanderIdCode == '' then 
                    if @$RFMCue.$PromotedCommander != null then
                        $RFMCue.$PromotedCommander.idcode 
                    else ''
                else 
                    $RFMCue.$RMCommanderIdCode
                ,
                if $RFMCue.$PromotedCommander != null then $RFMCue.$PromotedCommander.sector.knownname else '',
                if $excludeShip != null then 'excludeShip = %s'.[$excludeShip] else '' ,
                player.age
                ]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignment"/>

                <!-- PromotedCommander hariç gemilerin assigmentlarını düzenleyeceğiz -->
                <debug_to_file text="'      Filo Commanderinin altındaki gemilerin bağlantıları düzenleniyor...'.[]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignmentDeep"/>
                <do_for_each name="$iCnt" in="$FIndx.keys.list">
                    <do_if value="$iCnt != $FComp.{$RFMCue.$PromotedCommander}" comment="RFM Commander dışındaki gemileri kontrol et" >
                        <set_value name="$aNewShip" exact="@$FIndx.{$iCnt}"/>
                        
                        <!-- construction altındaysa idx lere eklenmiştir ancak henüz oprational bir gemi değildir -->
                        <do_if value="@$aNewShip.state == componentstate.operational">
                            <set_value name="$IsAssign" exact="true"/>
                            <set_value name="$tComIdx" exact="$FRec.{$iCnt}.$commanderidx"/>
                            <set_value name="$tCom" exact="@$FIndx.{$tComIdx}"/>
                            <set_value name="$IsAliveCom" exact="if ($tCom == null) then false else (if $FRec.{$tComIdx}.$destroyed then false else true) "/>
    
                            <set_value name="$aAssignment" exact="$FRec.{$iCnt}.$assignment"/>
                            <set_value name="$aSubordinategroupid" exact="$FRec.{$iCnt}.$subordinategroupid"/>
                            <set_value name="$commander_subordinategroupassignment" exact="@$tCom.subordinategroupassignment.{$aSubordinategroupid}" />
                            <run_actions ref="GetNameSubordinateGroupId" result="$recGroupName" chance="Main.$DFD.$reAssignmentDeep">
                                <param name="subordinategroupid" value="$FRec.{$iCnt}.$subordinategroupid" />
                            </run_actions>
                            <run_actions ref="GetNameSubordinateGroupId" result="$nowGroupName" chance="Main.$DFD.$reAssignmentDeep">
                                <param name="subordinategroupid" value="$aNewShip.subordinategroupid" />
                            </run_actions>
                            
                            <do_if value="$aSubordinategroupid != $aNewShip.subordinategroupid or $aAssignment != $aNewShip.assignment">
                                <set_value name="$differentassignment" />
                            </do_if>

                            <do_if value="$IsAliveCom" comment="ship.commander yaşıyorsa " >
                                <do_if value="$FIndx.{$iCnt}.commander != $tCom" comment="başka ship.commander a bağlıysa " >
                                    <debug_to_file text="'        &quot;%s %s. Kendi commanderına bağlanacak...&quot;'.[
                                    $iCnt, if $FIndx.{$iCnt}.commander == null then 'Commandersiz' else 'Başka bir Commandera Bağlı',
                                    ]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignment"/>
                                    <set_value name="$aCommander" exact="$tCom"/>
                                </do_if>
                                <do_else comment="zaten olması gereken commandera bağlı. pass geç">
                                    <do_if value="$differentassignment?">
                                        <debug_to_file text="'        &quot;%s subordinategroupid veya aAssignment farklılığı algılandı. Bağlanacak...&quot;'.[$iCnt]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignmentDeep"/>
                                        <set_value name="$aCommander" exact="$tCom"/>
                                    </do_if>
                                    <do_else>
                                        <debug_to_file text="'        &quot;%s Olması gereken commandera bağlı. Atlanacak...&quot;'.[$iCnt]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignmentDeep"/>
                                        <set_value name="$aCommander" exact="null"/>
                                        <set_value name="$IsAssign" exact="false"/>
                                    </do_else>
                                </do_else>
                            </do_if>
                            <do_else comment="ship.commanderi ölü ise RM_Commandera bağla">
                                <do_if value="$FIndx.keys.count == 1">
                                    <debug_to_file text="'        &quot;%s Commanderı ölü ve Kendisi Promote Filo Commander. Atlanacak...&quot;'.[$iCnt]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignmentDeep"/>
                                    <set_value name="$aCommander" exact="null"/>
                                    <set_value name="$IsAssign" exact="false"/>
                                </do_if>
                                <do_else>
                                    <do_if value="$FIndx.{$iCnt}.commander != $RFMCue.$PromotedCommander">
                                        <debug_to_file text="'        &quot;%s Commanderi ölü ancak Filo commanderine bağlı değil. Filo Commanderine bağlanacak...&quot;'.[$iCnt]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignment"/>
                                        <set_value name="$aCommander" exact="$RFMCue.$PromotedCommander" />
                                    </do_if>
                                    <do_else>
                                        <do_if value="$differentassignment?">
                                            <debug_to_file text="'        &quot;%s subordinategroupid veya Assignment farklılığı algılandı. Bağlanacak...&quot;'.[$iCnt]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignmentDeep"/>
                                            <set_value name="$aCommander" exact="$RFMCue.$PromotedCommander" />
                                        </do_if>
                                        <do_else>
                                            <debug_to_file text="'        &quot;%s Commanderı ölü ve Filo commanderine zaten bağlı. Atlanacak...&quot;'.[$iCnt]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignmentDeep"/>
                                            <set_value name="$aCommander" exact="null"/>
                                            <set_value name="$IsAssign" exact="false"/>
                                        </do_else>
                                    </do_else>
                                </do_else>
                            </do_else>
                            
                            <!-- 
                            <do_if value="$RFMCue.$takedControl? and (@$RFMCue.$takedControl == $aNewShip)">
                                <debug_to_file text="'        &quot;%s Taked Control Object. Atlanacak...&quot;'.[$iCnt]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignmentDeep"/>
                                <set_value name="$IsAssign" exact="false"/>
                            </do_if>
                            -->

                            <do_if value="($excludeShip != null and $excludeShip == $aNewShip)">
                                <debug_to_file text="'        &quot;%s excludeShip Object. Atlanacak...&quot;'.[$iCnt]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignmentDeep"/>
                                <set_value name="$IsAssign" exact="false"/>
                            </do_if>


                            <debug_to_file text="'
                            [ %s ] - &lt;%s&gt; %s %s \n
                                     Rec.CommanderIdx [ %s ] %s \n
                                       Şu anki Bağlı Commander %s \n
                                         Rec(subordinategroup %s &lt;%s&gt;, assignment &lt;%s&gt;) \n
                                         Now(subordinategroup %s &lt;%s&gt;, assignment &lt;%s&gt;) \n
                                           %s \n
                                         Commanderin subordinategroup [%s]  assignmenti &lt;%s&gt; \n
                                         Player takedControl %s \n
                                     %s [ %s ] %s
                            '.[
                            $iCnt, $aNewShip, $aNewShip.knownname, $aNewShip.idcode,
                            $tComIdx, if $IsAliveCom then '%s %s &lt;%s&gt;'.[$tCom.knownname, $tCom.idcode, $tCom] else 'ÖLÜ', 
                            if not $FIndx.{$iCnt}.commander then 'YOK' else '( ' + @$FComp.{$FIndx.{$iCnt}.commander} + ' ) &lt;' + $FIndx.{$iCnt}.commander + '&gt;',
                            $recGroupName, $aSubordinategroupid, $aAssignment,
                            $nowGroupName, $aNewShip.subordinategroupid, $aNewShip.assignment,
                            if $differentassignment? then 'Kayıtlar Farklı' else '',
                            $recGroupName, $commander_subordinategroupassignment,
                            if $RFMCue.$takedControl? then '%s &lt;%s&gt;'.[$FComp.{$RFMCue.$takedControl}, $RFMCue.$takedControl] else 'none',
                            if $IsAssign then 'BAĞLA  aCommander ' else 'ATLA',
                            if $IsAssign then $FComp.{$aCommander} else '', 
                            if $IsAssign then '%s %s &lt;%s&gt;'.[$aCommander.knownname, $aCommander.idcode, $aCommander] else ''
                            ]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignmentDeep"/>
    
                        </do_if>

                        <do_if value="@$IsAssign">
                            <debug_text text="'[%s_%s] (&lt;%s&gt;%s %s) .order.state:&lt;%s&gt; .orders %s'.[$RFMKey, $iCnt, $aNewShip, $aNewShip.knownname, $aNewShip.idcode, $aNewShip.order.state, $aNewShip.orders]"  chance="Main.$ChangesOnFleetDebug"/>
                            <debug_text text="'  Before order queue list:'"  chance="Main.$ChangesOnFleetDebug"/>
                            <do_all exact="$aNewShip.orders.count" counter="$d" reverse="true">
                                <debug_text text="'    [%1] = %2 (%3) (state:%s) %s'.[$d, $aNewShip.orders.{$d}.id, $aNewShip.orders.{$d}, $aNewShip.orders.{$d}.state, if $aNewShip.orders.{$d}.id == 'AssignCommander' then '(commander= %s %s, subordinategroup=%s, assignment=%s)'.[$aNewShip.orders.{$d}.$commander.knownname, $aNewShip.orders.{$d}.$commander.idcode, $aNewShip.orders.{$d}.$subordinategroup, $aNewShip.orders.{$d}.$assignment] else '' ]"  chance="Main.$ChangesOnFleetDebug"/>
                                <do_if value="$aNewShip.orders.{$d}.id == 'AssignCommander'">
                                    <debug_text text="'        Canceling order[%s] %s %s'.[$d, $aNewShip.orders.{$d}.id, $aNewShip.orders.{$d} ]"  chance="Main.$ChangesOnFleetDebug"/>
                                    <do_if value="@$RFMCue.$reAssignedShips.indexof.{$aNewShip} gt 0">
                                        <remove_from_list name="$RFMCue.$reAssignedShips" exact="$aNewShip"/>
                                        <debug_text text="'        Removed %s from  .reAssignedShips = %s '.[$aNewShip, $RFMCue.$reAssignedShips]"  chance="Main.$ChangesOnFleetDebug"/>
                                    </do_if>
                                    <cancel_order order="$aNewShip.orders.{$d}" />
                                </do_if>
                            </do_all>
                            <create_order object="$aNewShip" id="'AssignCommander'" name="$order">
                                <param name="commander" value="$aCommander"/>
                                <param name="subordinategroup" value="$aSubordinategroupid"/>
                                <param name="setgroupassignment" value="true"/>
                                <param name="assignment" value="$aAssignment"/>
                                <param name="cancelorders" value="false" />
                            </create_order>
                            <debug_text text="'  Created an AssignOrder[%s_%s] : %s[%s] (%s %s) (sg %s, a %s)'.[$RFMKey, $iCnt, $order.id, $order, $aCommander.knownname, $aCommander.idcode, $aSubordinategroupid, $aAssignment]"  chance="Main.$ChangesOnFleetDebug"/>
                            <move_order order="$order" newindex="1" result="$movesuccess"/>
                            <debug_text text="'  [%s] Try Move to top order.'.[if $movesuccess then 'SUCCESS' else 'FAILED']"  chance="Main.$ChangesOnFleetDebug"/>

                            <debug_text text="'  Updated order queue list:'"  chance="Main.$ChangesOnFleetDebug"/>
                            <do_all exact="$aNewShip.orders.count" counter="$d">
                                <debug_text text="'    [%1] = %2 (%3) (state:%s) %s'.[$d, $aNewShip.orders.{$d}.id, $aNewShip.orders.{$d}, $aNewShip.orders.{$d}.state, if $aNewShip.orders.{$d}.id == 'AssignCommander' then '(commander= %s %s, subordinategroup=%s, assignment=%s)'.[$aNewShip.orders.{$d}.$commander.knownname, $aNewShip.orders.{$d}.$commander.idcode, $aNewShip.orders.{$d}.$subordinategroup, $aNewShip.orders.{$d}.$assignment] else '' ]"  chance="Main.$ChangesOnFleetDebug"/>
                            </do_all>

                            <do_if value="not $RFMCue.$reAssignedShips?">
                                <create_list name="$RFMCue.$reAssignedShips" />
                            </do_if>
                            <append_to_list name="$RFMCue.$reAssignedShips" exact="$aNewShip" />
                            <debug_text text="'        Append %s to  .reAssignedShips = %s '.[$aNewShip, $RFMCue.$reAssignedShips]"  chance="Main.$ChangesOnFleetDebug"/>

                        </do_if>
                        <remove_value name="$IsAssign" />
                        <remove_value name="$differentassignment" />

                    </do_if>
                </do_for_each>

                <debug_to_file text="'Ended.................................................. Age: %s'.[player.age]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DFD.$reAssignment"/>

            </actions>
        </cue>

        <library name="Set_RebuildCueTable" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ShipKey" />
                <param name="cue" />
                <param name="shipyard"              default="null" />
                <param name="build"                 default="null" />
                <param name="isWaitingForRebuild"   default="false" />
                <param name="respondMsg"            default="''" />
                <param name="respond"               default="table[]" />
            </params>
            <actions>
                
                <set_value name="$cue.$RFMKey" exact="$RFMKey" comment="Restart ile geldiyse rfmkey değişmiş olabilir." chance="($cue != null)"/>
                <do_if value="not Main.$RebuildCues?">
                    <set_value name="Main.$RebuildCues" exact="table[]" />
                </do_if>
                <do_if value="not Main.$RebuildCues.{$RFMKey}?">
                    <set_value name="Main.$RebuildCues.{$RFMKey}" exact="table[]" />
                </do_if>

                <set_value name="Main.$RebuildCues.{$RFMKey}.{$ShipKey}" exact="table[
                    $cue                    = $cue,
                    $shipyard               = table[ $object = $shipyard ],
                    $build                  = $build,
                    $isWaitingForRebuild    = $isWaitingForRebuild,
                    $respondMsg             = $respondMsg,
                    $respond                = $respond
                ]"/>
            </actions>
        </library>








        <!-- PERSONEL FUNCTIONS 
        -->
        <!-- FleetRecords.{$RFMKey}.{$ShipKey}.$tPilot ve $tBulkCrew tablolarındaki skill değerlerini object.pilot object.people{} a aktarır -->
        <library name="Set_Personel_Skills_ToObject_FromRecord" purpose="run_actions">
            <params>
                <param name="object" />
                <param name="RFMKey" />
                <param name="ShipKey" />
                <param name="resetskills" default="not global.$upbRF_DATA.$Editing.$personnelcloning" />
            </params>
            <actions>
                <!-- transferring people, 
                    üretilen gemide pilot olacak ancak personel olmayacak, 
                    pilotu kaldırıp yerine ayarlardaki gibi oluşturacağız,
                    personel için de ayarlardaki kadar create edip atayacağız
                -->
                <run_actions ref="Set_Pilot_Skills_ToObject_FromRecord">
                    <param name="object" value="$object" />
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="ShipKey" value="$ShipKey" />
                </run_actions>
                <run_actions ref="Set_Crews_Skills_ToObject_FromRecord">
                    <param name="object" value="$object" />
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="ShipKey" value="$ShipKey" />
                    <param name="resetskills" value="$resetskills" />
                </run_actions>
            </actions>
        </library>
        <!-- FleetRecords.{$RFMKey}.{$ShipKey}.$tPilot tablosundaki skill değerlerini object.pilot aktarır -->
        <library name="Set_Pilot_Skills_ToObject_FromRecord" purpose="run_actions">
            <params>
                <param name="object" />
                <param name="RFMKey" />
                <param name="ShipKey" />
                <param name="resetskills" default="not @global.$upbRF_DATA.$Editing.$pilotcloning" />
            </params>
            <actions>
                <set_value name="$Ship_Pilot" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$tPilot"/>
                
                <debug_text text="'  RFM_%s_%s  Changing pilot.  %s %s&lt;%s&gt;'.[$RFMKey, $ShipKey, $object.knownname, $object.idcode, $object]" chance="Main.$DeepDebug"/>

                <set_value name="$skillEngineering" exact="$Ship_Pilot.$skill.{skilltype.engineering}" />
                <set_value name="$skillMorale" exact="$Ship_Pilot.$skill.{skilltype.morale}" />
                <set_value name="$skillBoarding" exact="$Ship_Pilot.$skill.{skilltype.boarding}" />
                <set_value name="$skillManagement" exact="$Ship_Pilot.$skill.{skilltype.management}" />
                <set_value name="$skillPiloting" exact="$Ship_Pilot.$skill.{skilltype.piloting}" />

                <do_if value="$resetskills">
                    <set_value name="$skillEngineering" exact="$object.pilot.skill.{skilltype.engineering}" />
                    <set_value name="$skillMorale" exact="$object.pilot.skill.{skilltype.morale}" />
                    <set_value name="$skillBoarding" exact="$object.pilot.skill.{skilltype.boarding}" />
                    <set_value name="$skillManagement" exact="$object.pilot.skill.{skilltype.management}" />
                    <set_value name="$skillPiloting" exact="$object.pilot.skill.{skilltype.piloting}" />
                </do_if>

                <destroy_object object="$object.pilot" />
                <create_control_entity object="$object" post="controlpost.aipilot" macro="$Ship_Pilot.$macro">
                    <owner exact="faction.player"/>
                </create_control_entity>
                <set_skill type="skilltype.engineering" entity="$object.pilot" exact="$skillEngineering"/>
                <set_skill type="skilltype.morale" entity="$object.pilot" exact="$skillMorale"/>
                <set_skill type="skilltype.boarding" entity="$object.pilot" exact="$skillBoarding"/>
                <set_skill type="skilltype.management" entity="$object.pilot" exact="$skillManagement"/>
                <set_skill type="skilltype.piloting" entity="$object.pilot" exact="$skillPiloting"/>

            </actions>
        </library>
        <!-- FleetRecords.{$RFMKey}.{$ShipKey}.$tBulkCrew tablosundaki skill değerlerini object.people{}a aktarır -->
        <library name="Set_Crews_Skills_ToObject_FromRecord" purpose="run_actions">
            <params>
                <param name="object" />
                <param name="RFMKey" />
                <param name="ShipKey" />
                <param name="resetskills" default="not global.$upbRF_DATA.$Editing.$personnelcloning" />
            </params>
            <actions>

                <debug_text text="'  RFM_%s_%s  Changing peoples.  %s %s&lt;%s&gt;'.[$RFMKey, $ShipKey, $object.knownname, $object.idcode, $object]" chance="Main.$DeepDebug"/>

                <set_value name="$Ship_BulkCrew" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$tBulkCrew"/>
                <!-- Peoples-->
                <set_value name="$mediumskills" exact="[3, 1, 3, 4, 3, 4, 2, 3, 2, 5]" />
                <set_value name="$lowskills"    exact="[1, 2, 1, 3, 1, 1, 1, 2, 1, 2]" />
                <set_value name="$Roles" exact="[entityrole.service, entityrole.marine]"/>
                <do_all exact="$Roles.count" counter="$i">
                    <do_for_each name="$Crew" in="$Ship_BulkCrew.{$Roles.{$i}}">
                        <create_npc_template name="$NPC" object="$object" role="$Roles.{$i}" macro="$Crew.$macro"/>
                        <!-- Setup crew skills -->
                        <set_value name="$skillEngineering" exact="$Crew.$skill.{skilltype.engineering}" />
                        <set_value name="$skillMorale" exact="$Crew.$skill.{skilltype.morale}" />
                        <set_value name="$skillBoarding" exact="$Crew.$skill.{skilltype.boarding}" />
                        <set_value name="$skillManagement" exact="$Crew.$skill.{skilltype.management}" />
                        <set_value name="$skillPiloting" exact="$Crew.$skill.{skilltype.piloting}" />
                        <do_if value="$resetskills">
                            <set_value name="$skillEngineering" exact="if $Roles.{$i} == entityrole.service then $mediumskills.random else $lowskills.random" />
                            <set_value name="$skillMorale" exact="$mediumskills.random" />
                            <set_value name="$skillBoarding" exact="$lowskills.random" />
                            <set_value name="$skillManagement" exact="$lowskills.random" />
                            <set_value name="$skillPiloting" exact="if $Roles.{$i} == entityrole.marine then $mediumskills.random else $lowskills.random" />
                        </do_if>
                        <set_skill type="skilltype.engineering" object="$object" template="$NPC" exact="$skillEngineering"/>
                        <set_skill type="skilltype.morale" object="$object" template="$NPC" exact="$skillMorale"/>
                        <set_skill type="skilltype.boarding" object="$object" template="$NPC" exact="$skillBoarding"/>
                        <set_skill type="skilltype.management" object="$object" template="$NPC" exact="$skillManagement"/>
                        <set_skill type="skilltype.piloting" object="$object" template="$NPC" exact="$skillPiloting"/>
                    </do_for_each>
                </do_all>

            </actions>
        </library>
        <!-- Object üzerinden FleetRecords.{$RFMKey}.{$ShipKey}.tPilot ve tBulkCrew tablolarını günceller -->
        <library name="UpdatePersonelTable" purpose="run_actions">
            <params>
                <param name="object" />
                <param name="RFMKey" />
                <param name="ShipKey" />
            </params>
            <actions>
                <!-- Update record.Tables-->
                <run_actions ref="GetPilotTable_From_Object" result="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$tPilot">
                    <param name="object" value="$object" />
                </run_actions>
                <run_actions ref="GetCrewsTable_From_Object" result="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$tBulkCrew">
                    <param name="object" value="$object" />
                </run_actions>
                <!--  _Check_Ship_Record ship record data fix -->
                <debug_text text="'  RFM_%s_%s  Checking record for structure.'.[$RFMKey, $ShipKey]" chance="Main.$DeepDebug"/>
                <run_actions ref="Check_Ship_Record">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="ShipKey" value="$ShipKey" />
                </run_actions>
            </actions>
        </library>




        <!-- CREATE RECORD
        -->
        <!-- 
            REENABLE RECORD FUNCTIONS
         -->
        <!--Verilen FleetRec ve filo commander bilgilerini kullanarak HeaderData oluşturur.
            IN :
                Commander
                FleetRec
            OUT :   [] liste
                HeaderData [ $Promoted grp, $fleetshipsByComp table, $fleetshipsByIdx table, $Subordinates grp ]
        -->
        <library name="Create_RFMHeaderData_From_FleetRec" purpose="run_actions">
            <params>
                <param name="FleetRec"  comment="okunacak Filoya ait record tablosu örn. Main.FleetRecords.{RFM}"/>
                <param name="Commander" comment="Promoted group bilgisi için o anki fleetcommander kimse" />
            </params>
            <actions>

                <set_value name="$result"  exact="[]"/>

                <!-- Create RFM Header Values -->
                <create_group groupname="$Promoted" />
                <set_value name="$fleetshipsByComp" exact="table[]" />
                <set_value name="$fleetshipsByIdx" exact="table[]" />
                <create_group groupname="$Subordinates"/>
                
                <do_if value="$Commander != null">
                    <add_to_group groupname="$Promoted" object="$Commander"/>
                </do_if>

                <do_for_each name="$tShipKey" valuename="$entry" in="$FleetRec"  >
                    <do_if value="($entry.$object != null) and (not $entry.$destroyed)">
                        <set_value name="$fleetshipsByComp.{$entry.$object}" exact="$tShipKey" />
                        <set_value name="$fleetshipsByIdx.{$tShipKey}" exact="$entry.$object" />
                        <add_to_group groupname="$Subordinates" object="$entry.$object"/>
                    </do_if>
                </do_for_each>

                <set_value name="$result" exact="[ $Promoted, $fleetshipsByComp, $fleetshipsByIdx, $Subordinates ]" />
                <return value="$result"/>

            </actions>
        </library>
        <!--RFMKey e ait $RFMCue deki DataHeader bilgilerini günceller 
            (ilgili cue çalışıyor olması gerek ve biz HeaderDATA sını değiştireceğiz)
            IN : 
                $RFMKey
                $HeaderData [Promoted (group), fleetshipsByComp (table), fleetshipsByIdx (table), Subordinates (group) ]
            Out :  none
        -->
        <library name="Let_HeaderData_To_RFM_HeaderValues" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="HeaderData" />
            </params>
            <actions>
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />

                <do_if value="not $RFMCue.$Promoted?">
                    <create_group groupname="$RFMCue.$Promoted" />
                </do_if>
                <clear_group group="$RFMCue.$Promoted" />
                <do_if value="$HeaderData.{1}.count > 0">
                    <add_to_group groupname="$RFMCue.$Promoted" object="$HeaderData.{1}.list.{1}" />
                </do_if>

                <do_if value="not $RFMCue.$fleetshipsByComp?">
                    <set_value name="$RFMCue.$fleetshipsByComp" exact="table[]" />
                </do_if>
                <clear_table table="$RFMCue.$fleetshipsByComp" />
                <set_value name="$RFMCue.$fleetshipsByComp" exact="$HeaderData.{2}" />

                <do_if value="not $RFMCue.$fleetshipsByIdx?">
                    <set_value name="$RFMCue.$fleetshipsByIdx" exact="table[]" />
                </do_if>
                <clear_table table="$RFMCue.$fleetshipsByIdx" />
                <set_value name="$RFMCue.$fleetshipsByIdx" exact="$HeaderData.{3}" />

                <do_if value="not $RFMCue.$Subordinates?">
                    <create_group groupname="$RFMCue.$Subordinates" />
                </do_if>
                <clear_group group="$RFMCue.$Subordinates" />
                <do_all exact="$HeaderData.{4}.count" counter="$i">
                    <add_to_group groupname="$RFMCue.$Subordinates" object="$HeaderData.{4}.list.{$i}" />
                </do_all>

            </actions>
        </library>
        <!--Verilen FleetRec kaydından RFMKey.Cue DataHeader bilgilerini günceller  
            IN :
                RFMKey
                FleetRec
            OUT : none
        -->
        <library name="Set_ToRFM_HeaderValues_From_FleetRec" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="FleetRec" />
            </params>
            <actions>
                <!--Promote bilgisi fleetrec kaydından bulmak istersek 
                    kayıt içinde patlamamış bir gemi buluruz ve fleetcommander bilgisine ulaşabiliriz. 
                 -->
                <run_actions ref="Create_RFMHeaderData_From_FleetRec" result="$HeaderData">
                    <param name="Commander" value="Main.$RM_Fleets.{$RFMKey}.$object" />
                    <param name="FleetRec" value="$FleetRec" />
                </run_actions>
                <run_actions ref="Let_HeaderData_To_RFM_HeaderValues">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="HeaderData" value="$HeaderData" />
                </run_actions>
            </actions>
        </library>
        <!-- STANDART 
             RECORD FUNCTIONS
            IN :    
                Commander object, Kaydı oluşturulacak TopLevel Gemi
            OUT :   
                [] liste
                [ $Promoted grp, $fleetshipsByComp rable , $fleetshipsByIdx table, $Subordinates grp ]
        -->
        <library name="Create_RFM_HeaderData_From_Commander" purpose="run_actions">
            <params>
                <param name="Commander" />
            </params>
            <actions>
                <set_value name="$result"  exact="[]"/>

                <!-- Create RFM Header Values -->
                <create_group groupname="$Promoted" />
                <set_value name="$fleetshipsByComp" exact="table[]" />
                <set_value name="$fleetshipsByIdx" exact="table[]" />
                <create_group groupname="$Subordinates"/>
                <!-- Set to Start Key -->
                <set_value name="$tShipKey" exact="1" />

                <do_if value="$Commander != null">
                    <!-- Prepare RFM Header Values -->
                    <add_to_group groupname="$Promoted" object="$Commander"/>

                    <set_value name="$fleetshipsByComp.{$Commander}" exact="$tShipKey" />
                    <set_value name="$fleetshipsByIdx.{$tShipKey}" exact="$Commander" />
                    <add_to_group groupname="$Subordinates" object="$Commander"/>

                    <do_for_each name="$tShip" in="$Commander.allsubordinates" >
                        <do_if value="not $tShip.isunit and not $tShip.isclass.ship_xs">
                            <set_value name="$tShipKey" operation="add" exact="1" />
                            <set_value name="$fleetshipsByComp.{$tShip}" exact="$tShipKey" />
                            <set_value name="$fleetshipsByIdx.{$tShipKey}" exact="$tShip" />
                            <add_to_group groupname="$Subordinates" object="$tShip"/>
                        </do_if>
                    </do_for_each>
                </do_if>

                <set_value name="$result" exact="[ $Promoted, $fleetshipsByComp, $fleetshipsByIdx, $Subordinates ]" />
                <return value="$result"/>
            </actions>
        </library>
        <!-- 
            IN : 
                $HeaderData [Promoted (group), fleetshipsByComp (table), fleetshipsByIdx (table), Subordinates (group) ]
            Out : 
                $fleetshipsByComp, $fleetshipsByIdx, $Subordinates ve $FleetRec 
        -->
        <library name="Let_HeaderData_To_HeaderValues">
            <actions>
                <create_group groupname="$Promoted" />
                <set_value name="$fleetshipsByComp" exact="table[]" />
                <set_value name="$fleetshipsByIdx" exact="table[]" />
                <create_group groupname="$Subordinates"/>

                <clear_group group="$Promoted" />
                <add_to_group groupname="$Promoted" object="$HeaderData.{1}.list.{1}" />
                <clear_table table="$fleetshipsByComp" />
                <set_value name="$fleetshipsByComp" exact="$HeaderData.{2}" />
                <clear_table table="$fleetshipsByIdx" />
                <set_value name="$fleetshipsByIdx" exact="$HeaderData.{3}" />
                <clear_group group="$Subordinates" />
                <do_all exact="$HeaderData.{4}.count" counter="$i">
                    <add_to_group groupname="$Subordinates" object="$HeaderData.{4}.list.{$i}" />
                </do_all>
            </actions>
        </library>

        <!-- İlgili Commandera bağlı gemilerin HeaderDatayı ve FleetRecord kayıtlarını geri verir
            IN  :
                Commander       :  Kaydı çıkarılacak fleet commander
                RFMKey          :      
                    verilirse  
                        FleetRec = Main.$FleetRecords.{$RFMKey} 
                        Loadout  = Main.$Loadout.{$RFMKey}      olarak belirlenir ve 
                    Verilmez ise bağımsız bir FleetRec kaydı açılır ve istenilen değerler return içinden okunur.
                SendPlanData    : RFMKey verilmiş ise ve SendPlanData true ise lua yolu ile ShipPlan oluşturup ekleme istekleri gönderilir. (default true)
            OUT :
                [$HeaderData, $FleetRec, $Loadouts]
         -->
        <library name="CreateAndGet_Records_By_Commander" purpose="run_actions">
            <params>
                <param name="Commander" />
                <param name="RFMKey" default="null"/>
                <param name="SendPlanData" default="true" />
            </params>
            <actions>
                <!-- Create RFM Header Values -->

                <do_if value="$RFMKey == null">
                </do_if>
                <do_else>
                </do_else>

                <run_actions ref="Create_RFM_HeaderData_From_Commander" result="$HeaderData">
                    <param name="Commander" value="$Commander" />
                </run_actions>
                <include_actions ref="Let_HeaderData_To_HeaderValues" />

                <do_if value="$RFMKey == null">
                    <set_value name="$FleetRec" exact="table[]" />
                    <set_value name="$Loadouts" exact="table[]" />
                </do_if>
                <do_else>
                    <do_if value="not Main.$FleetRecords.{$RFMKey}?">
                        <set_value name="Main.$FleetRecords.{$RFMKey}" exact="table[]" />    
                    </do_if>
                    <set_value name="$FleetRec" exact="Main.$FleetRecords.{$RFMKey}" />
                    <do_if value="not Main.$Loadouts.{$RFMKey}?">
                        <set_value name="Main.$Loadouts.{$RFMKey}" exact="table[]" />    
                    </do_if>
                    <set_value name="$Loadouts" exact="Main.$Loadouts.{$RFMKey}" />
                </do_else>

                <do_for_each name="$ShipKey" in="$fleetshipsByIdx.keys.list" counter="$index" >

                    <set_value name="$Ship" exact="$fleetshipsByIdx.{$ShipKey}" />
                    <set_value name="$fleetunit" exact="@$Ship.fleetunit" />
                    <set_value name="$fleetunits" exact="@$Ship.fleetunits" />
                    <debug_text text="'%s - Ship %s , fleetunits = %s , exists = %s , object = %s , macro = %s'.[$ShipKey, $Ship, $fleetunits, @$fleetunit.exists, @$fleetunit.object, @$fleetunit.macro]" />

                    <set_value name="$FleetRec.{$ShipKey}" exact="table[]" />
                    
                    <run_actions ref="Set_ShipPropertiesToFleetRec">
                        <param name="FleetRec" value="$FleetRec.{$ShipKey}" />
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="Ship" value="$Ship"/>
                        <param name="ShipKey" value="$ShipKey" />
                        <param name="commanderidx" value="
                            if $Ship.commander then 
                                if $fleetshipsByComp.{$Ship.commander} then
                                    $fleetshipsByComp.{$Ship.commander}
                                else
                                -1
                            else 
                                -1
                        " />
                    </run_actions>
                    
                    <set_value name="$Loadouts.{$ShipKey}" exact="0"  />
                    <run_actions ref="Create_Loadout_AndSetTo" result="$Loadouts.{$ShipKey}">
                        <param name="ship"      value="$Ship"/>
                        <param name="macro"     value="$Ship.macro" />
                        <param name="FleetRec"  value="$FleetRec.{$ShipKey}"/>
                    </run_actions>

                    <set_value name="$stack" exact = "table[ 
                            $RFMKey     = $RFMKey, 
                            $ShipKey    = $ShipKey, 
                            $object     = $Ship, 
                            $isGetShipPlan                = true, 
                            $isGetIndividualInstructions  = true,
                            $isGetCapacity  = true,
                            $isGetPaintMod  = true,
                            $isChangeCrewAmounts    = false,
                            $isdebug                = if $index == $fleetshipsByIdx.keys.list.count then (if Main.$DeepDebug == 100 then true else false) else false
                    ]"/>
                    <signal_cue_instantly cue="Get_PlanData_FromLua2" param="$stack" chance="$SendPlanData * 100"/>
                </do_for_each>

                <return value="[$HeaderData, $FleetRec, $Loadouts]"/>
            </actions>
        </library>

        <library name="Set_ShipPropertiesToFleetRec" purpose="run_actions">
            <params>
                <param name="FleetRec" />
                <param name="RFMKey" />
                <param name="Ship" />
                <param name="ShipKey" />
                <param name="commanderidx" />
            </params>
            <actions>

                <run_actions ref="GetNameSubordinateGroupId" result="$subordinategrouptext">
                    <param name="subordinategroupid" value="$Ship.subordinategroupid" />
                </run_actions>
                
                <set_value name="$FleetRec.$id" exact="$ShipKey"/>

                <set_value name="$FleetRec.$assignment" exact="$Ship.assignment"/>
                <set_value name="$FleetRec.$commanderidx" exact="$commanderidx" comment="if $Ship.commander then $fleetshipsByComp.{$Ship.commander} else -1"/>
                <set_value name="$FleetRec.$subordinategroupid" exact="$Ship.subordinategroupid"/>
                <set_value name="$FleetRec.$subordinategrouptext" exact="$subordinategrouptext"/>

                <set_value name="$FleetRec.$object" exact="$Ship"/>
                
                <include_actions ref="SetFleetRec_ShipMainProps" />

                <include_actions ref="SetFleetRec_ShipOrderProps" />

                <!-- Loadout bilgileri ayrı yerde sonra eklenecek-->
                
            </actions>
        </library>
        
        <library name="SetFleetRec_ShipMainProps" purpose="include_actions">
            <actions>

                <run_actions ref="Get_NoneColor_ShipName" result="$name">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="ship" value="$Ship" />
                </run_actions>
                <set_value name="$FleetRec.$name" exact="$name" comment="tag içermeyen isim gerekiyor"/>
                <set_value name="$FleetRec.$idcode" exact="$Ship.idcode"/>
                
                <set_value name="$FleetRec.$class" exact="$Ship.class"/>
                <set_value name="$FleetRec.$issupplyship" exact="if $Ship.macro.isclass.ship then $Ship.issupplyship else false"/>
                <set_value name="$FleetRec.$purpose" exact="$Ship.primarypurpose"/>
                <set_value name="$FleetRec.$loadoutlevel" exact="$Ship.loadoutlevel"/>
                <set_value name="$FleetRec.$macro" exact="$Ship.macro"/>
                <set_value name="$FleetRec.$icon" exact="if $Ship.isclass.ship then $Ship.macro.icon else 'maptr_hexagon'"/>
                <set_value name="$FleetRec.$type" exact="if $Ship.isclass.ship then $Ship.type else null"/>
                <set_value name="$FleetRec.$reBuildTryNum" exact="0"/>
                <set_value name="$FleetRec.$reBuildStartTime" exact="null"/>
                <set_value name="$FleetRec.$destroyed" exact="false"/>
                <set_value name="$FleetRec.$destroyedtime" exact="null"/>
                
                <run_actions ref="GetCapacityTable" result="$FleetRec.$tCapacity">
                    <param name="object" value="$Ship" />
                </run_actions>

            </actions>
        </library>

        <library name="SetFleetRec_ShipOrderProps" purpose="include_actions">
            <actions>

                <!-- İstasyonların defaultorder ları yoktur
                    Shipler için;
                        $FleetRec.$defaultorder
                        $FleetRec.$orders
                        1 nolu kayıt için
                            $FleetRec.$sectorid
                            $FleetRec.$sector
                    bilgileri ekleniyor
                -->
                <!-- <debug_text text="'%s %s , .defaultorder? = %s , @.defaultorder = %s , @.defaultorder.id = %s'.[$Ship.knownname, $Ship.idcode, $Ship.defaultorder?, @$Ship.defaultorder, @$Ship.defaultorder.id]" /> -->
                <set_value name="$sectorid" />
                <set_value name="$sector" exact="''"/>
                <set_value name="$FleetRec.$defaultorder" exact="table[]"/>
                <set_value name="$FleetRec.$orders" exact="[]"/>
                <do_if value="$Ship.defaultorder.id?">
                    <run_actions ref="md.Upb_Library_Orders.Get_Defaultorder_Orders_Sector_From_Ship" result="$orderTable">
                        <param name="ship" value="$Ship" />
                    </run_actions>
                    <set_value name="$FleetRec.$defaultorder" exact="$orderTable.{1}"/>
                    <set_value name="$FleetRec.$orders" exact="$orderTable.{2}"/>
                    <do_if value="$ShipKey == 1">
                        <set_value name="$sectorid" exact="$orderTable.{3}"/>
                        <set_value name="$sector" exact="if $orderTable.{3} != null then $orderTable.{3}.knownname else ''"/>
                    </do_if>
                </do_if>
                <do_else>
                    <!-- İstasyon ise order bilgisi yoktur -->
                    <set_value name="$sectorid" exact="$Ship.sector"/>
                    <set_value name="$sector" exact="if $sectorid != null then $sectorid.knownname else ''"/>
                </do_else>

                <do_if value="$ShipKey == 1">
                    <set_value name="$FleetRec.$sectorid" exact="$sectorid"/>
                    <set_value name="$FleetRec.$sector" exact="$sector"/>
                </do_if>

            </actions>
        </library>

        <library name="Log_ClosedRFMConstructs" purpose="include_actions">
            <actions>
                <do_if value="global.$upbRF_DATA.$Editing.$write_to_logbook">
                    <set_value name="$fleetID" exact="$RFMKey" />
                    <do_for_each name="$shipyard" valuename="$passedShips" in="$BuildAbortPassedShips.{$fleetID}" >
                        <set_value name="$textships" exact="''" />
                        <do_for_each name="$passedship" in="$passedShips" counter="$k">
                            <set_value name="$shipID" exact="$passedship.$shipID" />
                            <set_value name="$buildobject" exact="$passedship.$buildobject" />
                            <set_value name="$textships" exact="$textships + '  %s - %s %s %s\n'.[$k, $buildobject.name, $buildobject.idcode, (if Main.$DebugChance == 100 then ' (' + $shipID + ')' else '')]"/>

                            <debug_text text="'RFM_%s kapatılmış olduğundan üretim alan [%s] %s %s gemisi üretim sonrası %s %s (Sector %s) istasyonunda olacaktır.'.[$fleetID, $shipID, $buildobject.knownname, $buildobject.idcode, $shipyard.knownname, $shipyard.idcode,  $shipyard.sector.knownname ]" />
                        </do_for_each>

                        <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4016}">
                            <replace string="'$COMMANDER$'" with="readtext.{Main.$tPage}.{500} + '_' + $fleetID + '_' "/>
                            <replace string="'$SHIP$'"      with="$textships"/>
                            <replace string="'$SHIPYARD$'"  with="$shipyard.knownname + ' ' + $shipyard.idcode"/>
                            <replace string="'$SECTOR$'"    with="$shipyard.sector.knownname"/>
                        </substitute_text>
                        <write_to_logbook object="$shipyard" category="upkeep" interaction="showonmap" title="'\033' + Main.$normalColor + readtext.{Main.$tPage}.{2} + '\033X'" text="$LogMsg" />
                    </do_for_each>
                </do_if>
            </actions>
        </library>







        <!-- LIBRARY
        -->
        <!-- Verilen sayısal liste verilerini table key yaparak sıralar ve sıralı key listesini geri verir.
            IN  : list
            OUT : sorted list
        -->
        <library name="Sort_ListKeys" purpose="run_actions">
            <params>
                <param name="list" />
            </params>
            <actions>
                <set_value name="$result"  exact="$list"/>
                <set_value name="$tListKeys"  exact="table[]"/>

                <do_for_each name="$value" in="$list">
                    <set_value name="$tListKeys.{$value}" exact="1" />
                </do_for_each>

                <do_if value="$tListKeys.keys.count">
                    <set_value name="$result" exact="$tListKeys.keys.sorted" />
                </do_if>

                <return value="$result"/>
            </actions>
        </library>

        <library name="Get_FirstFreeShipKey_From_FleetRecord" purpose="run_actions">
            <params>
                <param name="FleetRecord" />
            </params>
            <actions>
                <set_value name="$retKey" exact="$FleetRecord.keys.list.last + 1" />
                <set_value name="$counter" exact="0" />
                <do_for_each name="$shipKey" in="$FleetRecord.keys.list"  >
                    <set_value name="$counter" operation="add" />
                    <do_if value="$counter != $shipKey">
                        <set_value name="$retKey" exact="$counter" />
                        <break />
                    </do_if>
                </do_for_each>
                <return value="$retKey" />
            </actions>
        </library>
        <!--IN  : none 
            OUT : 
                free RFMKey
        -->
        <library name="Get_New_RFMKey" purpose="run_actions">
            <actions>
                <!-- RM_Fleets TABLE KEY lerinde  boştaki index e göre yeni index alınacak-->
                <do_all exact="Main.$RM_Fleets.keys.count" counter="$iCnt">
                    <do_if value="Main.$RM_Fleets.keys.list.indexof.{$iCnt} == 0" >
                        <set_value name="$RFMKey" exact="$iCnt"/>
                        <break />
                    </do_if>
                </do_all>
                <do_if value="not $RFMKey?">
                    <set_value name="$RFMKey" exact="Main.$RM_Fleets.keys.count + 1"/>
                </do_if>

                <return value="$RFMKey"/>
            </actions>
        </library>
        <!-- FleetRecord dan istenen CommanderKey e bağlı mainsub gemilerin (1.seviye subordinatlar) keylerini toplar-->
        <library name="Get_SubKeys_From_FleetRecord" purpose="run_actions">
            <params>
                <param name="CommanderKey" />
                <param name="FleetRecord" />
            </params>
            <actions>
                <set_value name="$result" exact="[]" />

                <do_for_each name="$recKey" in="$FleetRecord.keys.list">
                    <do_if value="$FleetRecord.{$recKey}.$commanderidx == $CommanderKey">
                        <append_to_list name="$result" exact="$recKey" />
                    </do_if>
                </do_for_each>
                <return value="$result"/>
            </actions>
        </library>
        <!-- FleetRecord dan belirlenen CommanderKey'e bağlı tüm sub gemilerin (alt sublar da dahil) keylerin listesini verir -->
        <library name="Get_AllSubKeys_From_FleetRecord" purpose="run_actions">
            <params>
                <param name="FleetRecord" />
                <param name="CommanderKey" />
                <param name="debugchance" default="0" />
            </params>
            <actions>

                <set_value name="$collectedKeys" exact="[]" />
                <set_value name="$searchKeys" exact="[]" />
                <set_value name="$AllSubKeys" exact="[]" />

                <append_to_list name="$collectedKeys" exact="$CommanderKey" />

                <debug_text text="'appended start $collectedKeys:%s'.[$collectedKeys]" chance="$debugchance"/>
                <do_while value="$collectedKeys.count gt 0" >
                    <debug_text text="'started while $collectedKeys:%s (count:%s)'.[$collectedKeys, $collectedKeys.count]" chance="$debugchance"/>
                    <set_value name="$searchKeys" exact="$collectedKeys"/>
                    <debug_text text="'set $searchKeys:%s (count:%s)'.[$searchKeys, $searchKeys.count]" chance="$debugchance"/>
                    <do_for_each name="$sKey" in="$searchKeys">
                        <debug_text text="'$sKey=%s'.[$sKey]" chance="$debugchance"/>
                        <append_to_list name="$AllSubKeys" exact="$sKey" />
                        <debug_text text="'append %s , now $AllSubKeys:%s'.[$sKey, $AllSubKeys]" chance="$debugchance"/>
                        <remove_from_list name="$collectedKeys" exact="$sKey"/>
                        <debug_text text="'removed %s, now $collectedKeys:%s'.[$sKey, $collectedKeys]" chance="$debugchance"/>
                        <run_actions ref="Get_SubKeys_From_FleetRecord" result="$resultKeys">
                            <param name="FleetRecord" value="$FleetRecord" />
                            <param name="CommanderKey" value="$sKey"/>
                        </run_actions>
                        <debug_text text="'returned $resultKeys:%s'.[$resultKeys]" chance="$debugchance"/>

                        <do_all exact="$resultKeys.count" counter="$i">
                            <append_to_list name="$collectedKeys" exact="$resultKeys.{$i}"/>
                        </do_all>
                        <debug_text text="'appended result:%s to now $collectedKeys:%s'.[$resultKeys, $collectedKeys]" chance="$debugchance"/>
                    </do_for_each>
                </do_while>

                <remove_from_list name="$AllSubKeys" exact="$CommanderKey" />
                
                <return value="$AllSubKeys"/>
            </actions>
        </library>

        <library name="GetFaction_From_CharacterMacro" purpose="run_actions">
            <params>
                <param name="macro" />
                <param name="debugchance" default="0"/>
                <param name="deepdebug" default="0"/>
            </params>
            <actions>
                <set_value name="$faction" exact="''" />
				<set_value name="$allFactionsByRaceTable" exact="table[]" />
				<run_actions ref="Get_ByRace_AllFactionsTable" result="$allFactionsByRaceTable">
                    <param name="debugchance" value="$deepdebug" />
                </run_actions>
                <do_for_each name="$race" valuename="$rfactionlist" in="$allFactionsByRaceTable">
                    <do_for_each name="$nfaction" in="$rfactionlist" counter="$ifaction">
                        <get_character_definition macro="$fmacrolar" faction="$nfaction" multiple ="true" />
                        <debug_text text="'$fmacrolar = %s '.[$fmacrolar]" chance="$deepdebug"/>
                        <do_if value="$fmacrolar.indexof.{$macro} > 0">
                            <set_value name="$faction" exact="$nfaction"/>
                            <debug_text text="'BULUNDU.. macro = %s  , faction = %s'.[$macro, $nfaction]" chance="$debugchance" />
                            <break />
                        </do_if>
                    </do_for_each>
                    <do_if value="$faction != '' ">
                        <break />
                    </do_if>
                    <do_else>
                        <debug_text text="'BULAMADIK.. macro = %s'.[$macro]" chance="$debugchance" />
                    </do_else>
                </do_for_each>

                <return value="$faction"/>
            </actions>
        </library>
		<!-- Return  = $FactionsTable  -->
		<library name="Get_ByRace_AllFactionsTable" namespace="this" purpose="run_actions">
			<params>
				<param name="debugchance" default="0" />
                <param name="deepdebug" default="0" />
			</params>
            <actions>

                <!-- Yaki factionu normal oyunda ekonomic sınıfında ama isactive özelliği false olduğu 
                    için racelere ait factionlar listesini oluştururken
                        1- StarWars Mod aktifse isactive denetimi yapacağız
                        2- Normal oyun modunda ise isactive denetimi yapmayacağız her factrionu göremek istiyoruz
                -->
                <set_value name="$swmod" exact="false" />
                <do_if value="md.SW_Maintenance?">
                    <set_value name="$swmod" exact="true" />
                </do_if>

                <debug_text text="'- Lib Get_ByRace_AllFactionsTable [%s] started -'.[this.name]" chance="$debugchance"/>
                <!--Table containing a list of allied factions by race. key: race, value: faction list-->
                <!--
                $FactionList : [faction.court,faction.argon,faction.scavenger,faction.antigone,faction.pioneers,faction.freesplit,faction.split,faction.alliance,faction.holyorder,faction.scaleplate,faction.ministry,faction.loanshark,faction.trinity,faction.paranid,faction.buccaneers,faction.terran,...]
                -->
                <set_value name="$FactionsTable" exact="table[]"/>
                <!--List containing all allied factions-->
                <!--
                $FactionsTable : table[{race.argon}=[faction.argon,faction.scavenger,faction.antigone,faction.loanshark,faction.hatikvah,faction.yaki],{race.paranid}=[faction.alliance,faction.holyorder,faction.trinity,faction.paranid,faction.buccaneers],{race.split}=[faction.court,faction.freesplit,faction.split],{race.teladi}=[faction.scaleplate,faction.ministry,faction.teladi],{race.terran}=[faction.pioneers,faction.terran]]
                -->
        
                <debug_text text="'  Total factions : %s '.[lookup.faction.list.count]" chance="$debugchance" />
                <debug_text text="'   Criterias : iseconomic %sand None Player'.[if $swmod then 'and isactive ' else '']" chance="$debugchance"  />
                <!--1- Önce race keyleri oluşturalım, 
                        iseconomic olan faction varsa ilgili primaryrace i key alalım , player race hariç
                    2- oluşan race key tablosu içine o race keye ait factionların hepsini koyalım, player faction hariç
                -->
                <set_value name="$FactionList" exact="[]"/>
                <do_for_each name="$PotentialFaction" in="lookup.faction.list">
                    <do_if value="($PotentialFaction.iseconomic and $PotentialFaction != faction.player)">
                        <do_if value="not $FactionsTable.{$PotentialFaction.primaryrace}?">
                            <set_value name="$FactionsTable.{$PotentialFaction.primaryrace}" exact="[]"/>
                        </do_if>
                    </do_if>
                </do_for_each>

                <do_for_each name="$PotentialFaction" in="lookup.faction.list">
                    <do_if value="$FactionsTable.{$PotentialFaction.primaryrace}? and $PotentialFaction != faction.player">
                        <do_if value="$swmod">
                            <do_if value="$PotentialFaction.isactive">
                                <append_to_list name="$FactionList" exact="$PotentialFaction"/>
                                <append_to_list name="$FactionsTable.{$PotentialFaction.primaryrace}" exact="$PotentialFaction"/>
                            </do_if>
                        </do_if>
                        <do_else>
                            <append_to_list name="$FactionList" exact="$PotentialFaction"/>
                            <append_to_list name="$FactionsTable.{$PotentialFaction.primaryrace}" exact="$PotentialFaction"/>
                        </do_else>
                    </do_if>
                </do_for_each>

                <debug_text text="'    found Total Potential factions : %s '.[$FactionList.count]" chance="$debugchance" />
                <debug_text text="' Result '" chance="$debugchance" />
                <debug_text text="'  FactionsTable %s '.[$FactionsTable]" chance="$debugchance" />
                
                    <run_actions ref="DebugPrintValue" chance="$debugchance">
                        <param name="value" value="$FactionsTable" />
						<param name="recursiondepth" value="if $deepdebug == 100 then 3 else 2" />
                    </run_actions>
                
        
                <remove_value name="$FactionList"/>
                <remove_value name="$PotentialFaction"/>
				
			    <return value="$FactionsTable"/>
				
            </actions>
        </library>
        <!-- IN :   subordinategroupid            : as subordinategroupid
		    OUT :   return value as string
		-->
        <library name="GetNameSubordinateGroupId" purpose="run_actions">
            <params>
                <param name="subordinategroupid"/>
            </params>
            <actions>
                <do_if value="$subordinategroupid == 1">
                    <set_value name="$name" exact="'Alpha'"/>
                </do_if>
                <do_elseif value="$subordinategroupid == 2">
                    <set_value name="$name" exact="'Beta'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 3">
                    <set_value name="$name" exact="'Gamma'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 4">
                    <set_value name="$name" exact="'Delta'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 5">
                    <set_value name="$name" exact="'Epsilon'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 6">
                    <set_value name="$name" exact="'Zeta'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 7">
                    <set_value name="$name" exact="'Eta'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 8">
                    <set_value name="$name" exact="'Theta'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 9">
                    <set_value name="$name" exact="'Iota'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 10">
                    <set_value name="$name" exact="'Kappa'"/>
                </do_elseif>
                <do_else>
                    <set_value name="$name" exact="''"/>
                </do_else>
                <return value="$name"/>
            </actions>
        </library>
        <!-- KULLANILMIYOR. 
            bunun yerine Get_FactionWares_ByLicencedTable üzerinden sorgulanıyor
            belirtilen ware için belirtilen lisans olup olmadığını sorgular 
            ware = ware.xxx
            licence = $faction.licence.militaryship  yapısında
        -->
        <library name="CheckWare_For_Licence" purpose="run_actions">
            <params>
                <param name="ware" />
                <param name="licence" />
                <param name="debugchance" default="0" />
            </params>
            <actions>
                <set_value name="$islicenced" exact="false"/>

                <get_ware_definition result="$factionwares" >
                    <owner licence= "$licence"  />
                </get_ware_definition>

                <debug_text text="'faction = %s, licence = %s, checkware = ware.%s , wares = '.[$licence.faction.id, $licence.type, $ware.id]" chance="0"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$factionwares" />
                    <param name="recursiondepth" value="0" />
                    <param name="DebugChance" value="0" />
                </run_actions>
                
                <do_for_each name="$factionware" in="$factionwares">
                    <do_if value="$factionware == $ware">
                        <set_value name="$islicenced" exact="true"/>
                        <break />
                    </do_if>
                </do_for_each>
                <debug_text text="'This ware.&lt;%s&gt; %s a &lt;%s&gt;licence on this &lt;faction.%s&gt;.'.[$ware.name, if $islicenced then 'has' else 'does not have', $licence.type, $licence.faction.id]" chance="$debugchance"/>

                <return value="$islicenced"/>
            </actions>
        </library>
        <!--  
            istenilen factiona ait ware listesini licence bazında tablolayarak geri verir
            result factionwares table :
            {licence.<capitalequipment,Argon Federation>} = [
                [1]=ARG L Plasma Turret Mk1,
                [2]=ARG L Beam Turret Mk1,
                [3]=ARG L Dumbfire Turret Mk1,
                [4]=ARG Behemoth Main Battery,
                [5]=ARG L Tracking Turret Mk1
            ],
            ...
            {licence.<militaryship,Argon Federation>} = 
                [
                    [1]=Nomad Vanguard,
                    [2]=Eclipse Vanguard,
                    [3]=Quasar Vanguard,
                    [4]=Cerberus Vanguard,
                    [5]=Minotaur Vanguard
                ],
            ...
        -->
        <library name="Get_FactionWares_ByLicencedTable" purpose="run_actions">
            <params>
                <param name="faction" />
                <param name="isships" default="true"/>
                <param name="isequipments" default="true"/>
                <param name="ismodules" default="true" />
                <param name="debugchance" default="0"/>
            </params>
            <actions>
                <set_value name="$factionwares" exact="table[]"/>
                <do_for_each name="$licence" in="$faction.licences">
                    
                    <set_value name="$wares" />

                    <do_if value="$isships">
                        <get_ware_definition result="$wares" flags="ship" >
                            <owner licence= "$licence"  />
                        </get_ware_definition>
                        <do_if value="$wares.count">
                            <set_value name="$factionwares.{$licence}"  exact="$wares"/>
                            <continue />
                        </do_if>
                    </do_if>
                    
                    <do_if value="$isequipments">
                        <get_ware_definition result="$wares" flags="equipment" faction="$faction">
                            <owner licence= "$licence"  />
                        </get_ware_definition>
                        <do_if value="$wares.count">
                            <set_value name="$factionwares.{$licence}"  exact="$wares"/>
                            <continue />
                        </do_if>
                    </do_if>

                    <do_if value="$ismodules">
                        <get_ware_definition result="$wares" flags="module" >
                            <owner licence= "$licence"  />
                        </get_ware_definition>
                        <do_if value="$wares.count">
                            <set_value name="$factionwares.{$licence}"  exact="$wares"/>
                            <continue />
                        </do_if>
                    </do_if>

                    <do_if value="not $wares.count">
                        <set_value name="$factionwares.{$licence}" exact="[]"/>
                    </do_if>

                    <remove_value name="$wares" />
                </do_for_each>

                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$factionwares" />
                    <param name="recursiondepth" value="3" />
                    <param name="DebugChance" value="$debugchance" />
                </run_actions>

                <return value="$factionwares"/>
            </actions>
        </library>
        <!-- owner null ise player + tüm npcler, [] ise sadece tüm npcler,  ya da belli bir liste verilebilir.-->
        <library name="FindBuildStations" purpose="run_actions">
            <params>
                <param name="yards"                                 comment="yards değişkeni append modda çalışıyor"/>
                <param name="buildclass"                            comment="verilen class uygun sınırlama yapar, null atarnırsa tüm tür istasyonlar dahil olur"/>
                <param name="owner" default="null"                  comment="faction.player ya da diğer factionlar"/>
                <param name="buildmacro" default="null"             comment="macro idsi, blueprint owner macro sınırlaması yapar"/>
                <param name="reachablefrom" default="null"          comment="object, örn. player.entity konumundan güzergaha ulaşılabilir mi"/>
                <param name="relation_to_faction" default="null"    comment="faction, örn. faction.player için en az dock izni verenler"/>
            </params>
            <actions>
                <do_if value="$owner == null or $owner == []">
                    <do_if value="$owner == null">
                        <set_value name="$all"  />
                    </do_if>
                    <set_value name="$owner" exact="[]" />
                    <!-- $faction.iseconomic and  -->
                    <do_for_each name="$faction" in="lookup.faction.list">
                        <do_if value="(($faction.isactive and $faction != faction.player) or $faction == @faction.yaki) or $all?">
                            <append_to_list name="$owner" exact="$faction"/>
                        </do_if>
                    </do_for_each>
                </do_if>
                <!-- DİKKAT: 
                    find_station_by_true_owner kullanamayacağız çünkü faction zorunlu parametresi sadece 1 faction istiyor. liste gönderemiyoruz
                 -->
                    
                <do_if value="$reachablefrom == null or $buildmacro == null or $relation_to_faction == null " comment=" x x x">
                    <do_if value="$reachablefrom != null " comment=" 1 x x ">
                        <do_if value="$buildmacro != null and $relation_to_faction == null" comment=" _ 1 0">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" reachablefrom="$reachablefrom" append="true">
                                <match canbuildclass="$buildclass" />
                                <match canbuildmacro="$buildmacro"/>
                            </find_station>    
                        </do_if>
                        <do_elseif value="$buildmacro == null and $relation_to_faction != null" comment="_ 0 1">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" reachablefrom="$reachablefrom" append="true">
                                <match canbuildclass="$buildclass"/>
                                <match_relation_to faction="$relation_to_faction" relation="dock" comparison="ge"/>
                            </find_station>    
                        </do_elseif>
                        <do_else comment="_ 0 0">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" reachablefrom="$reachablefrom" append="true">
                                <match canbuildclass="$buildclass"/>
                            </find_station>    
                        </do_else>
                    </do_if>
                    <do_elseif value="$buildmacro != null " comment="x 1 x">
                        <do_if value="$reachablefrom != null and $relation_to_faction == null" comment="1 _ 0">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" reachablefrom="$reachablefrom" append="true">
                                <match canbuildclass="$buildclass" />
                                <match canbuildmacro="$buildmacro"/>
                            </find_station>    
                        </do_if>
                        <do_elseif value="$reachablefrom == null and $relation_to_faction != null" comment="0 _ 1">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" append="true">
                                <match canbuildclass="$buildclass" />
                                <match canbuildmacro="$buildmacro"/>
                                <match_relation_to faction="$relation_to_faction" relation="dock" comparison="ge"/>
                            </find_station>    
                        </do_elseif>
                        <do_else comment="0 _ 0">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" append="true">
                                <match_any canbuildclass="$buildclass" canbuildmacro="$buildmacro"/>
                            </find_station>    
                        </do_else>
                    </do_elseif>
                    <do_elseif value="$relation_to_faction != null " comment="x x 1">
                        <do_if value="$reachablefrom != null and $buildmacro == null" comment="1 0 _">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" reachablefrom="$reachablefrom" append="true">
                                <match canbuildclass="$buildclass"/>
                                <match_relation_to faction="$relation_to_faction" relation="dock" comparison="ge"/>
                            </find_station>    
                        </do_if>
                        <do_elseif value="$reachablefrom == null and $buildmacro != null" comment="0 1 _">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" append="true">
                                <match_any canbuildclass="$buildclass" canbuildmacro="$buildmacro"/>
                                <match_relation_to faction="$relation_to_faction" relation="dock" comparison="ge"/>
                            </find_station>    
                        </do_elseif>
                        <do_else comment="0 0 _">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" append="true">
                                <match canbuildclass="$buildclass"/>
                                <match_relation_to faction="$relation_to_faction" relation="dock" comparison="ge"/>
                            </find_station>    
                        </do_else>
                    </do_elseif>
                    <do_else comment="0 0 0">
                        <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" append="true">
                            <match canbuildclass="$buildclass"/>
                        </find_station>    
                    </do_else>
                </do_if>
                <do_else comment="1 1 1">
                    <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" reachablefrom="$reachablefrom" append="true">
                        <match canbuildclass="$buildclass" />
                        <match canbuildmacro="$buildmacro"/>
                        <match_relation_to faction="$relation_to_faction" relation="dock" comparison="ge"/>
                    </find_station>
                </do_else>
                
                <remove_value name="$all" />
            </actions>
        </library>
        <!-- Gemi ile Shipyard arasındaki Software ve Equipment Testi-->
        <!-- result table[ $status = sucsess for true or failed false, $chkcase = return case for false status, $errmsg = error message for false, $ware = ware ] -->
        <library name="CkeckShipyard_ForWare" purpose="run_actions">
            <params>
                <param name="ware" />
                <param name="shipyard" />
                <param name="checkSoftware" default="false"/>
                <param name="checkEquipment" default="true" />
                <param name="DebugChance" default="0" />
            </params>
            <actions>
                
                <set_value name="$chkS" exact="$ware.tags.indexof.{tag.software} > 0"  comment="ware software olmayacak"/>
                <set_value name="$chkE" exact="$ware.tags.indexof.{tag.equipment} > 0" comment="ware equipment waresi olacak"/>
                <set_value name="$chkYard" exact="$shipyard.buildequipment.wares.{$ware}.exists" comment="shipyardın build edebildiği ware listesinde bu ware var mı"/>
                <!--Kontrol etmeyeceğimiz değer için, SKIP  , onay aldı     [ false, '', '', $ware ]
                    Kontrolden geçen değer için     , SKIP  , onay aldı     [ false, '', '', $ware ]
                    Kontrolden geçemeyen değer için , ERROR , onay alamadı  [ true, 'check case', $errmsg, $ware ]
                -->
                <set_value name="$failed" exact="false" />
                <set_value name="$chkcase" exact="''"/>

                <do_if value="$chkS">
                    <set_value name="$chkcase" exact="'software'"/>
                    <do_if value="$checkSoftware">
                        <do_if value="$chkYard">
                            <debug_text text="'OK .%s %s bu %s ile çalışabiliyor.  (%s)'.[$shipyard.knownname, $shipyard.idcode, $chkcase, $ware.name]" chance="$DebugChance"/>
                        </do_if>
                        <do_else>
                            <set_value name="$failed" exact="true" />
                            <debug_text text="'ERROR .%s %s için geçerli bir %s değil. (%s)'.[$shipyard.knownname, $shipyard.idcode, $chkcase, $ware.name]" chance="$DebugChance"/>
                        </do_else>
                    </do_if>
                    <do_else>
                        <debug_text text="'SKIP .%s Kontrol Edilmeyecek.  (%s)'.[$chkcase, $ware.name]" chance="$DebugChance"/>
                    </do_else>
                </do_if>
                <do_elseif value="$chkE">
                    <set_value name="$chkcase" exact="'equipment'"/>
                    <!-- equipmentlarda engine pass kriterine takılmayacak, yoksa gemi üretilince istasyondan ayrılamaz -->
                    <do_if value="$checkEquipment or $ware.hastag.engine">
                        <do_if value="$chkYard">
                            <debug_text text="'OK .%s %s bu %s ile çalışabiliyor.  (%s)'.[$shipyard.knownname, $shipyard.idcode, $chkcase, $ware.name]" chance="$DebugChance"/>
                        </do_if>
                        <do_else>
                            <set_value name="$failed" exact="true" />
                            <debug_text text="'ERROR .%s %s için geçerli bir %s değil. (%s)'.[$shipyard.knownname, $shipyard.idcode, $chkcase, $ware.name]" chance="$DebugChance"/>
                        </do_else>
                    </do_if>
                    <do_else>
                        <debug_text text="'SKIP .%s Kontrol Edilmeyecek.  (%s)'.[$chkcase, $ware.name]" chance="$DebugChance"/>
                    </do_else>
                </do_elseif>
                <do_else>
                    <!-- YAPILACAK : 
                        Yeni oyun açıp ters mühendislikle öğrenmediğimiz şemalar varken bu satıra uğrayacak bir ware var mı görmemiz gerekiyor 
                        * Şimdilik SKIP durumu yapacağız
                    -->
                    <set_value name="$chkcase" exact="@$ware.tag"/>
                    <debug_text text="'ERROR .Bilinmeyen Tag. (%s)'.[$ware.name]" />
                </do_else>

                <set_value name="$result" exact="table[ $failed = $failed, $chkcase = $chkcase, $ware = $ware ]" />
                <return value="$result"/>
            </actions>
        </library>
        <!-- all buildable stations in galaxy
            IN : 
                addUnknown  (false)     oyuncunun bilmediği istasyonlar dahil olacak mı
                addEnemy    (false)     oyuncuya düşman istasyonlar da eklensin mi
                debugchance (0)
            OUT: active stations list
        -->
        <library name="Get_ActiveStations" purpose="run_actions">
            <params>
                <param name="addUnknown"       default="false" />
                <param name="addEnemy"      default="false"/>
                <param name="debugchance"   default="0" />
            </params>
            <actions>
                <!-- , class.ship_l, class.ship_xl class.ship_s, class.ship_m -->
                <set_value name="$tyards" exact="[]"/>
                
                <set_value name="$classes" exact="[class.ship_s, class.ship_m, class.ship_l, class.ship_xl]" />
                <do_for_each name="$class" in="$classes">
                    <run_actions ref="FindBuildStations">
                        <param name="yards"                 value="$tyards" />
                        <param name="buildclass"            value="$class"/>
                        <param name="reachablefrom"         value="player.entity" />
                        <param name="relation_to_faction"   value="if $addEnemy then null else faction.player" />
                    </run_actions>
                </do_for_each>
                
                <!-- class taramasını s ve m için 2 kere yapmış olduk. bu yüzden aynı istasyon 2 kere listeye alınmış olabilir. 
                    aynı durum l ve xl için de geçerli. Listedeki aynı elemanları çıkaracağız
                -->
                <debug_text text="'=================================================================='.[]" chance="$debugchance"/>
                <set_value name="$yards" exact="[]" />
                <set_value name="$cnt" exact="0"  />
                <do_for_each name="$tyard" in="$tyards" counter="$iy">
                    <do_if value="$yards.indexof.{$tyard} == 0">
                        <do_if value="$addUnknown">
                            <set_value name="$cnt" exact="1" operation="add" />
                            <debug_text text="'%s - %s %s === %s %s'.[$cnt, $tyard.idcode, $tyard.knownname, (if $tyard.isknown then '' else 'UNKNOWN'), $tyard.sector.knownname]" chance="$debugchance"/>
                            <append_to_list name="$yards" exact="$tyard"/>
                        </do_if>
                        <do_else>
                            <do_if value="$tyard.isknown">
                                <set_value name="$cnt" exact="1" operation="add" />
                                <debug_text text="'%s - %s %s === %s %s'.[$cnt, $tyard.idcode, $tyard.knownname, (if $tyard.isknown then '' else 'UNKNOWN'), $tyard.sector.knownname]" chance="$debugchance"/>
                                <append_to_list name="$yards" exact="$tyard"/>
                            </do_if>
                            <do_else>
                                <debug_text text="'   SKIPPING - %s %s === %s %s'.[$tyard.idcode, $tyard.knownname, (if $tyard.isknown then '' else 'UNKNOWN'), $tyard.sector.knownname]" chance="$debugchance"/>
                            </do_else>
                        </do_else>
                    </do_if>
                </do_for_each>
                <debug_text text="'=================================================================='.[]" chance="$debugchance"/>

                <return value="$yards"/>
            </actions>
        </library>
        <library name="SetRecord_DestroyedObject" purpose="run_actions">
            <params>
                <param name="record" />
            </params>
            <actions>
                <set_value name="$record.$object" exact="null"/>
                <set_value name="$record.$idcode" exact="''"/>

                <set_value name="$record.$destroyed" exact="true"/>
                <set_value name="$record.$destroyedtime" exact="player.age"/>
                
                <set_value name="$record.$reBuildStartTime" exact="null" />
                <set_value name="$record.$reBuildTryNum" exact="0" />

            </actions>
        </library>
        <!-- Entity e ait [RFMKey, ShipKey] yoksa [0,0]-->
        <library name="Get_RFM_Ship_Keys_From_Entity" purpose="run_actions">
            <params>
                <param name="entity" />
            </params>
            <actions>
                <set_value name="$RFMKey" exact="0"/>
                <set_value name="$ShipKey" exact="0"/>
                <set_value name="$ship" exact="$entity.assignedcontrolled" />
                <set_value name="$toplevelcommander" exact="$ship.toplevelcommander"/>
                <set_value name="$commander" exact="$ship.commander"/>
                
                <do_if value="$ship.isplayerowned and $entity.isplayerowned">
                    <do_if value="$ship.isrealclass.ship and $ship.pilot == $entity">
                        <do_if value="not $commander">
                            <!-- Commanderi yok.   -->
                            <set_value name="$checkobject" exact="$ship" />
                        </do_if>
                        <do_else>
                            <!-- topcommanderı var-->
                            <set_value name="$checkobject" exact="$toplevelcommander" />
                        </do_else>
                        <run_actions ref="Get_RFMKey_From_ShipObject" result="$RFMKey">
                            <param name="ship" value="$checkobject" />
                        </run_actions>
                    </do_if>
                    <do_elseif value="$ship.isrealclass.station and $ship.tradenpc == $entity">
                        <!-- event.object.assignedcontrolled.isclass.station and event.object.assignedcontrolled.tradenpc == event.object -->
                        <run_actions ref="Get_RFMKey_From_ShipObject" result="$RFMKey">
                            <param name="ship" value="$ship" />
                        </run_actions>
                    </do_elseif>
                </do_if>

                <do_if value="$RFMKey gt 0">
                    <!-- ShipKeyi bul-->
                    <run_actions ref="Get_ShipKey_From_Record" result="$ShipKey">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="ship" value="$ship" />
                    </run_actions>
                </do_if>

                <return value="[ $RFMKey, $ShipKey ]" />
            </actions>
        </library>
        <!-- IN :   ship          , RM Fleet  promoted commander objec ti
            OUT :   RFMKey          , RM Fleet numarası yoksa 0
        -->
        <library name="Get_RFMKey_From_ShipObject" purpose="run_actions">
            <params>
                <param name="ship" />
            </params>
            <actions>
                <set_value name="$RFMKey" exact="0" />
                <do_for_each name="$xRFMKey" in="Main.$RM_Fleets.keys.list" >
                    <do_if value="Main.$RM_Fleets.{$xRFMKey}.$object == $ship">
                        <set_value name="$RFMKey" exact="$xRFMKey" />
                        <break />
                    </do_if>
                </do_for_each>
                <return value="$RFMKey"/>
            </actions>
        </library>
        <!-- IN :   RFMKey           , Record içinde aranacak RFMKey
                    ship             , ship objec ti
            OUT :   ShipKey          , Record.id numarası yoksa 0
        -->
        <library name="Get_ShipKey_From_Record" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ship" />
            </params>
            <actions>
                <set_value name="$ShipKey" exact="0" />
                <do_for_each name="$idx" valuename="$entry" in="Main.$FleetRecords.{$RFMKey}">
                    <do_if value="$entry.$object == $ship">
                        <set_value name="$ShipKey" exact="$entry.$id" />
                        <break />
                    </do_if>
                </do_for_each>
                <return value="$ShipKey"/>
            </actions>
        </library>
        <!-- Bunu kullanmadan önce Update_BlacklistStations ile Main.$active_stations lar hesaplatılsın-->
        <library name="Get_Converted_Active_Stations" purpose="run_actions">
            <params>
                <param name="skipnewcalculate" default="false"/>
                <param name="debugchance" default="0"/>
            </params>
            <actions>
                <do_if value="not $skipnewcalculate">
                    <run_actions ref="Get_ActiveStations" result="Main.$active_stations" >
                        <param name="addUnknown" value="true" />
                        <param name="addEnemy" value="true" />
                        <param name="debugchance" value="$debugchance" />
                    </run_actions>
                    <debug_text text="'  Updated active_stations # %s'.[Main.$active_stations.count]" chance="Main.$DeepDebug"/>
                </do_if>

                <set_value name="$active_stations" exact="[]" />
                <do_for_each name="$object" in="Main.$active_stations">
                    <set_value name="$entry" exact="table[
                        $object = $object,
                        $name = $object.knownname,
                        $sector = $object.sector.knownname
                    ]" />
                    <append_to_list name="$active_stations" exact="$entry" />
                </do_for_each>
                <return value="$active_stations"/>
            </actions>
        </library>
        <!-- BlacklistStations grubuna Güncelleme yapacak -->
        <library name="Update_BlacklistStations" purpose="run_actions">
            <params>
                <param name="sendIt" default="false" />
                <param name="debugchance" default="0" />
            </params>
            <actions>
                
                <run_actions ref="Get_ActiveStations" result="Main.$active_stations" >
                    <param name="addUnknown" value="true" />
                    <param name="addEnemy" value="true" />
                    <param name="debugchance" value="$debugchance" />
                </run_actions>
                <debug_text text="'  Updated active_stations # %s'.[Main.$active_stations.count]" chance="Main.$DeepDebug"/>

                <!-- blacklist stations -->
                <set_value name="$ia" exact="0" />
                <set_value name="$ib" exact="0" />
                <do_for_each name="$yard" in="Main.$active_stations" counter="$iy">
                    <set_value name="$ia" exact="if Main.$blacklist_stations.indexof.{$yard} then 1 else 0" operation="add" />
                    <debug_text text="'%s %s %s === %s%s'.[if Main.$blacklist_stations.indexof.{$yard} then ' ' + $iy + ' ' + $ia + ' -BLACLIST ' else $iy + ' -',$yard.idcode, $yard.knownname, (if $yard.isknown then '' else 'UNKNOWN '), $yard.sector.knownname]" chance="$debugchance"/>
                    <!-- Unknown Sectors -->
                    <do_if value="not $yard.isknown">
                        <do_if value="not Main.$blacklist_stations.indexof.{$yard}">
                            <set_value name="$ib" exact="1" operation="add" />
                            <debug_text text="'  %s ADDED Blacklist = %s %s = %s%s'.[$ib, $yard.idcode, $yard.knownname, (if $yard.isknown then '' else 'UNKNOWN '), $yard.sector.knownname]" chance="$debugchance"/>
                            <add_to_group groupname="Main.$blacklist_stations" object="$yard" />
                            <continue />
                        </do_if>
                    </do_if>
                    <!-- Enemy Stations -->
                    <do_if value="not $yard.hasrelation.dock.{faction.player}">
                        <do_if value="not Main.$blacklist_stations.indexof.{$yard}">
                            <set_value name="$ib" exact="1" operation="add" />
                            <debug_text text="'  %s ADDED Blacklist = %s %s = %s%s'.[$ib, $yard.idcode, $yard.knownname, (if $yard.isknown then '' else 'UNKNOWN '), $yard.sector.knownname]" chance="$debugchance"/>
                            <add_to_group groupname="Main.$blacklist_stations" object="$yard" />
                            <continue />
                        </do_if>
                    </do_if>
                </do_for_each>
                
                <debug_text text="'  Updated blacklist_stations # %s'.[Main.$blacklist_stations.list.count]" chance="Main.$DeepDebug"/>

                <!-- lua manager açıksa bilgileri gönder -->
                <do_if value="player.entity.$Flag_RFM_Menu?">
                    <!-- Keşfedilmemiş veya dock yapamayacağımız istasyonları da luaya göndereceğiz
                        Ancak blacklist içinde de olması gerekiyor.
                        lua içinde bu istasyonların check özelliğini kilitleyeceğiz.
                        Bunun haricinde Blacklist güncellemesi md içinde 2 yerde daha gerçekleştirilecek. Relation_Changed ve Object_Known_To_Player olayları
                    -->
                    <!-- direk listeyi göndermiyoruz. 
                        listeyi tablolara çevireceğiz. lua içinde unknow nesnelerin orijinal isimlerini bulamadım
                        station ve sector için,
                        hazırlayacağımız liste içindeki veri tabloları object bilgisi ile knownname bilgilerini de içerecek
                    -->
                    <run_actions ref="Get_Converted_Active_Stations" result="$active_stations">
                        <param name="skipnewcalculate" value="true" />
                        <param name="debugchance" value="$debugchance" />
                    </run_actions>
                    <!-- 
                    <set_value name="player.entity.$build_stations" exact="table[
                        $blacklist_stations = Main.$blacklist_stations,
                        $active_stations    = $active_stations
                        ]" />
                    -->
                    <set_value name="player.entity.$blacklist_stations" exact="Main.$blacklist_stations" />
                    <set_value name="player.entity.$active_stations" exact="$active_stations" />

                    <do_if value="$sendIt">
                        <debug_text text="'  buildstations.changed SEND ...'.[]" chance="Main.$DeepDebug"/>
                        <raise_lua_event name="'buildstations.changed'" />
                    </do_if>

                </do_if>
            </actions>
        </library>
        <!-- building container build tasklarını buildhex stringi ile karşılaştırarak build objesini geri verir. 
            buildHexID, '0xABCD' şeklinde string ya da build.<0xABCD> şeklinde verilebilir.
        -->
        <library name="GetBuild_FromContainer" purpose="run_actions">
            <params>
                <param name="buildingcontainer" />
                <param name="buildHexID" />
            </params>
            <actions>
                <set_value name="$build" exact="null"/>
                <do_if value="typeof $buildHexID != datatype.string">
                    <set_value name="$buildHexID" exact="'%s'.[$buildHexID]" />
                </do_if>
                <do_for_each name="$taskbuild" in="$buildingcontainer.builds.queued" counter="$k">
                    <do_if value="'%s'.[$taskbuild] == $buildHexID">
                        <set_value name="$build" exact="$taskbuild" />
                        <set_value name="$buildstatus" exact="'queued'"/>
                        <break />
                    </do_if>
                </do_for_each>
                <do_for_each name="$taskbuild" in="$buildingcontainer.builds.inprogress" counter="$k" chance="($build != null) * 100">
                    <do_if value="'%s'.[$taskbuild] == $buildHexID">
                        <set_value name="$build" exact="$taskbuild" />
                        <set_value name="$buildstatus" exact="'inprogress'"/>
                        <break />
                    </do_if>
                </do_for_each>
                <do_for_each name="$taskbuild" in="$buildingcontainer.builds.todelete" chance="($build != null) * 100">
                    <do_if value="'%s'.[$taskbuild] == $buildHexID">
                        <set_value name="$build" exact="$taskbuild" />
                        <set_value name="$buildstatus" exact="'todelete'"/>
                        <break />
                    </do_if>
                </do_for_each>
                <return value="[$build, $buildstatus]"/>
            </actions>
        </library>

        <library name="GetBestCommander" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="isInMainSubs"      default="true"/>
                <param name="isIncludeExploded" default="false"/>
                <param name="checkPromoted"     default="true" />
                <param name="excludeShip"       default="null" />
            </params>
            <actions>
                
                <set_value name="$debugchance"  exact="Main.$DebugChance"/>
                <set_value name="$deepdebug"    exact="Main.$DeepDebug"/>

                <debug_text text="' Calculating Best Commander in RFM[%s]. isInMainSubs = %s, isIncludeExploded = %s'.[$RFMKey, $isInMainSubs, $isIncludeExploded]" chance="$deepdebug"/>

                <do_if value="$isInMainSubs">
                    <run_actions ref="Get_SubKeys_From_FleetRecord" result="$shipkeys">
                        <param name="FleetRecord" value="Main.$FleetRecords.{$RFMKey}" />
                        <param name="CommanderKey" value="1" />
                    </run_actions>
                </do_if>
                <do_else>
                    <run_actions ref="Get_AllSubKeys_From_FleetRecord" result="$shipkeys">
                        <param name="FleetRecord" value="Main.$FleetRecords.{$RFMKey}" />
                        <param name="CommanderKey" value="1" />
                    </run_actions>
                </do_else>

                <set_value name="$RFM_Cue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />

                <set_value name="$newRMCommanderKey" exact="0" />
                <set_value name="$lastscore" exact="0" />
                
                <set_value name="$PromotedCommander" exact="null" />
                <do_if value="$checkPromoted and $RFM_Cue.$PromotedCommander != null">
                    <set_value name="$PromotedCommander" exact="$RFM_Cue.$PromotedCommander"/>
                </do_if>
                <do_if value="$PromotedCommander != null">
                    <set_value name="$oldRMCommanderKey" exact="$RFM_Cue.$fleetshipsByComp.{$PromotedCommander}" />
                    <set_value name="$macro" exact="Main.$FleetRecords.{$RFMKey}.{$oldRMCommanderKey}.$macro" />
                    <get_threat_score class="$macro.class" purpose="$macro.primarypurpose" result="$oldscore" />
                    <set_value name="$newRMCommanderKey" exact="$oldRMCommanderKey" />
                    <set_value name="$lastscore" exact="$oldscore" />
                </do_if>
                
                <do_for_each name="$sKey" in="$shipkeys">
                    
                    <set_value name="$macro" exact="Main.$FleetRecords.{$RFMKey}.{$sKey}.$macro" />
                    <set_value name="$checkIt" exact="$isIncludeExploded"/>
                    
                    <do_if value="$RFM_Cue.$fleetshipsByIdx.{$sKey}?">
                        <do_if value="$excludeShip != $RFM_Cue.$fleetshipsByIdx.{$sKey}">
                            <set_value name="$checkIt" exact="true"/>
                        </do_if>
                    </do_if>

                    <get_threat_score class="$macro.class" purpose="$macro.primarypurpose" result="$score" />
                    <debug_text text="'   [%s] - %s , score = %s'.[$sKey, $macro.name, $score]" chance="$deepdebug"/>

                    <do_if value="$checkIt">
                        <do_if value="$score gt $lastscore">
                            <set_value name="$lastscore" exact="$score" />
                            <set_value name="$newRMCommanderKey" exact="$sKey" />
                            <debug_text text="'     Selected New Best [%s] - %s , score = %s, $lastscore = %s'.[$sKey, $macro.name, $score, $lastscore]" chance="$deepdebug"/>
                        </do_if>
                    </do_if>
                    <do_else>
                        <debug_text text="'           Skipp isIncludeExploded = %s, fleetshipsByIdx = %s, excludeShip = %s'.[$isIncludeExploded, $RFM_Cue.$fleetshipsByIdx.{$sKey}?, if $excludeShip then '[%s] &lt;%s&gt;'.[$RFM_Cue.$fleetshipsByComp.{$excludeShip}, $excludeShip] else 'none']" chance="$deepdebug"/>
                    </do_else>
                </do_for_each>

                <do_if value="$oldscore?">
                    <do_if value="$oldscore != $lastscore">
                        <debug_text text="' Selected Best RFM[%s]new[%s] old[%s]. (newscore = %s, oldscore = %s)'.[$RFMKey, $newRMCommanderKey, $oldRMCommanderKey, $lastscore, $oldscore]" chance="$debugchance"/>
                    </do_if>
                    <do_else>
                        <set_value name="$newRMCommanderKey" exact="0" />
                        <debug_text text="' RFM[%s] is Same Score %s'.[$RFMKey, $oldscore]" chance="$debugchance"/>
                    </do_else>
                </do_if>
                <do_else>
                    <debug_text text="' Selected Best RFM[%s]new[%s]. (newscore = %s)'.[$RFMKey, $newRMCommanderKey, $lastscore]" chance="$debugchance"/>
                </do_else>

                <return value="$newRMCommanderKey" />
            </actions>
        </library>









        <!-- DEBUGS
        -->
        <!-- IN RFMKey e göre Fleet log dosyalarının adlarını oluşturur-->
        <library name="Let_RFM_LogFileNames">
            <actions>
                <set_value name="$Command_logF" exact="'RFM_' + $RFMKey + Main.$logTAG_Command "/>
                <set_value name="$FleetRecord_logF" exact="'RFM_' + $RFMKey + Main.$logTAG_FleetRecord  " />
                <set_value name="$reBuildCues_logF" exact="'RFM_' + $RFMKey + Main.$logTAG_RebuildCues " />
                <set_value name="$reBuild_logF" exact="'RFM_' + $RFMKey + Main.$logTAG_reBuild"/>
                <set_value name="$reAssign_logF" exact="'RFM_' + $RFMKey + Main.$logTAG_reAssignment"/>
            </actions>
        </library>


        <!--       : $printlogF  as log file name, default 'RFM_' + $RFMKey + Main.$logTAG_Command-->
        <library name="Print_Subordinates">
            <actions>
                <set_value name="$RFM_Cue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />
                <do_if value="@$printlogF == null">
                    <set_value name="$printlogF" exact="'RFM_' + $RFMKey + Main.$logTAG_Command"/>
                </do_if>
                <do_if value="not $printAppend?">
                    <set_value name="$printAppend" exact="true"/>
                </do_if>
                <debug_to_file text="' RFM_%s_ , Commander: &lt;%s&gt; %s %s (%s)'.[$RFMKey, @$RFM_Cue.$RMCommander, $RFM_Cue.$RMCommanderName, $RFM_Cue.$RMCommanderIdCode, @$RFM_Cue.$RMCommander.sector.knownname]" name="$printlogF" directory="Main.$logDIR" chance="Main.$isDebugFileMode * 100" append="$printAppend"/>
                <debug_to_file text="' Subordanates ( count %s ) :'.[$RFM_Cue.$Subordinates.count]" name="$printlogF" directory="Main.$logDIR" chance="Main.$isDebugFileMode * 100" />
                <debug_to_file text="' Subordinates = %s'.[$RFM_Cue.$Subordinates]" name="$printlogF" directory="Main.$logDIR" chance="Main.$isDebugFileMode * 100" />
                <do_for_each name="$subObj" in="$RFM_Cue.$Subordinates" counter="$iSubOrd">
                    <debug_to_file text="'   %s- &lt;%s&gt; %s %s '.[$iSubOrd, $subObj, $subObj.name, $subObj.idcode]" name="$printlogF" directory="Main.$logDIR" chance="Main.$isDebugFileMode * Main.$DeepDebug" />
                </do_for_each>
                <debug_to_file text="' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - '" name="$printlogF" directory="Main.$logDIR" chance="Main.$isDebugFileMode * 100" />
                <remove_value name="$subObj"/>
                <remove_value name="$iSubOrd"/>
                <remove_value name="$printlogF"/>
                <remove_value name="$printAppend"/>
                <remove_value name="$RFM_Cue"/>
                
            </actions>
        </library>

        <library name="PrintBuildTaskIDs" purpose="include_actions">
            <actions>
                <debug_to_file text="'%s %s'.[player.age, player.systemtime.{'%F-%X'}]" name="'_BuildTaskIDs'" directory="Main.$logDIR" chance="Main.$BuildTasksChance" append="false"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="if Main.$BuildTaskIDs? then Main.$BuildTaskIDs else []" />
                    <param name="recursiondepth" value="1" />
                    <param name="nodename" value="'Main.$BuildTaskIDs = %s'.[(if Main.$BuildTaskIDs? then '' else 'Main.$BuildTaskIDs YOK. @_Fikret')]" />
                    <param name="showindex" value="true" />
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="'_BuildTaskIDs'" />
                    <param name="debugFileDir" value="Main.$logDIR" />
                    <param name="DebugChance" value="Main.$BuildTasksChance" />
                </run_actions>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="if player.entity.$BuildTaskStacks? then player.entity.$BuildTaskStacks else []" />
                    <param name="recursiondepth" value="1" />
                    <param name="nodename" value="'player.entity.$BuildTaskStacks %s'.[(if player.entity.$BuildTaskStacks? then 'have value' else 'no value')]" />
                    <param name="showindex" value="true" />
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="'_BuildTaskIDs'" />
                    <param name="debugFileDir" value="Main.$logDIR" />
                    <param name="DebugChance" value="Main.$BuildTasksChance" />
                </run_actions>
                
            </actions>
        </library>


        <!-- RFM_xx_RebuildCue dosyasına döküm yapar
            IN  : 
                RFMKey
                inserttext      (Default ''  )  dosya başına ekstra satır eklemek için
                recursiondepth  (Default null)  verilmemişse  deepdebug için 2 yoksa 1
                logfile         (Default null)  verilmemişse 'RFM_' + $RFMKey + Main.$logTAG_RebuildCues üretir
                append          (Default false) dosyayı ilk açma yöntemi
        -->
        <library name="Debug_RebuildCue" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="inserttext" default="''" />
                <param name="recursiondepth" default="null"/>
                <param name="logfile" default="null" />
                <param name="append" default="false"/>
            </params>
            <actions>
                <set_value name="$printlogF" exact="'RFM_' + $RFMKey + Main.$logTAG_RebuildCues"/>
                <set_value name="$debugchance" exact="Main.$DFD.$reBuildCue" />
                <set_value name="$deepdebug" exact="Main.$DFD.$reBuildCueDeep" />
                <do_if value="$logfile != null and $printlogF != $logfile">
                    <set_value name="$printlogF" exact="$logfile"/>
                    <set_value name="$debugchance" exact="Main.$isDebugFileMode * 100" />
                </do_if>

                <do_if value="$inserttext != ''">
                    <debug_to_file text="$inserttext" name="$printlogF" directory="Main.$logDIR" chance="$debugchance" append="$append"/>
                    <set_value name="$append" exact="true" />
                </do_if>

                <do_if value="Main.$RebuildCues.{$RFMKey}?">
                    <debug_to_file text="'RebuildCues.{ %s } ( count %s ) =   Age: %s, %s'.[$RFMKey, Main.$RebuildCues.{$RFMKey}.keys.count, player.age, player.systemtime.{'%F-%X'}]" name="$printlogF" directory="Main.$logDIR" chance="$debugchance" append="$append"/>

                    <run_actions ref="DebugPrintValue">
                        <param name="value" value="Main.$RebuildCues.{$RFMKey}" />
                        <param name="recursiondepth" value="if $deepdebug then 2 else 1" />
                        <param name="debugToFile" value="true" />
                        <param name="debugFileName" value="$printlogF" />
                        <param name="debugFileDir" value="Main.$logDIR" />
                        <param name="DebugChance" value="$debugchance" />
                    </run_actions>
                </do_if>
                <do_else>
                    <debug_to_file text="'Main.$RebuildCues.{%s} NO TABLE [@_Fikret]'.[$RFMKey]" name="$printlogF" directory="Main.$logDIR" chance="$debugchance" append="$append"/>
                    <debug_text text="'Main.$RebuildCues.{%s} TABLO YOK [@_Fikret]'.[$RFMKey]" chance="Main.$DebugChance"/>
                </do_else>
            </actions>
        </library>

        <!-- RebuildCues dosyasına döküm yapar
            IN  : 
                inserttext      (Default ''  )  dosya başına ekstra satır eklemek için
                recursiondepth  (Default null)  verilmemişse  deepdebug için 3 yoksa 2
                logfile         (Default null)  verilmemişse Main.$logTAG_RebuildCues  üretir
                append          (Default false) dosyayı ilk açma yöntemi                
        -->
        <library name="Debug_AllRebuildCues" purpose="run_actions">
            <params>
                <param name="inserttext" default="''" />
                <param name="recursiondepth" default="null"/>
                <param name="logfile" default="null" />
                <param name="append" default="false"/>
            </params>
            <actions>
                <set_value name="$printlogF" exact="Main.$logTAG_RebuildCues"/>
                <set_value name="$debugchance" exact="Main.$DFD.$RebuildCues" />
                <do_if value="$logfile != null and $logfile != $printlogF">
                    <set_value name="$debugchance" exact="Main.$DFD.$RebuildCues" />
                    <set_value name="$printlogF" exact="$logfile"/>
                </do_if>

                <do_if value="$inserttext != ''">
                    <debug_to_file text="$inserttext" name="$printlogF" directory="Main.$logDIR" chance="$debugchance" append="$append"/>
                    <set_value name="$append" exact="true" />
                </do_if>

                <debug_to_file text="'All RebuildCues for %s RM Fleets  Age: %s, %s'.[Main.$RebuildCues.keys.count, player.age, player.systemtime.{'%F-%X'}]" name="$printlogF" directory="Main.$logDIR" append="$append"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="Main.$RebuildCues" />
                    <param name="recursiondepth" value="2" />
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="$printlogF" />
                    <param name="debugFileDir" value="Main.$logDIR" />
                    <param name="DebugChance" value="$debugchance" />
                </run_actions>
            </actions>
        </library>

        <!-- RFM_Fleets dosyasına döküm yapar
            IN  : 
                inserttext      (Default ''  )  dosya başına ekstra satır eklemek için
                recursiondepth  (Default null)  Main.$DFD.Fleets açıksa ve  verilmemişse deepdebug için 2 yoksa 1
                logfile         (Default null)  verilmemişse Main.$logTAG_RFMleets  üretir
                append          (Default false) dosyayı ilk açma yöntemi                
        -->
        <library name="Debug_RM_Fleets" purpose="run_actions">
            <params>
                <param name="inserttext" default="''" />
                <param name="recursiondepth" default="null"/>
                <param name="logfile" default="null" />
                <param name="append" default="false"/>
            </params>
            <actions>
                <do_if value="Main.$isDebugFileMode">
                    <set_value name="$printlogF" exact="Main.$logTAG_RFMleets"/>
                    <set_value name="$debugchance" exact="Main.$DFD.$Fleets" />
                    <set_value name="$deepdebug" exact="Main.$DFD.$FleetsDeep" />
                    <do_if value="$logfile != null and $printlogF != $logfile">
                        <set_value name="$printlogF" exact="$logfile"/>
                    </do_if>

                    <do_if value="$inserttext != ''">
                        <debug_to_file text="$inserttext" name="$printlogF" directory="Main.$logDIR" chance="$debugchance" append="$append"/>
                        <set_value name="$append" exact="true" />
                    </do_if>

                    <debug_to_file text="'RM Fleets (count %s)  Age: %s, %s'.[Main.$RM_Fleets.keys.count, player.age, player.systemtime.{'%F-%X'}]" name="$printlogF" directory="Main.$logDIR" append="$append"/>
                    
                    <run_actions ref="GetBasamak" result="$maxbasamak">
                        <param name="value" value="Main.$RM_Fleets.keys.count" />
                    </run_actions>

                    <do_for_each name="$xRFMKey" in="Main.$RM_Fleets.keys.list" counter="$icount" chance="$debugchance">

                        <run_actions ref="GetStringValue" result="$strIdx">
                            <param name="value" value="$icount" />
                            <param name="maxbasamak" value="$maxbasamak" />
                        </run_actions>
                        <run_actions ref="GetStringValue" result="$strRFMKey">
                            <param name="value" value="$xRFMKey" />
                            <param name="maxbasamak" value="$maxbasamak" />
                        </run_actions>
                        
                        <set_value name="$ERR" exact="''" />
                        <do_if value="Main.$RM_Fleets.{$xRFMKey}.$object == null or Main.$RM_Fleets.{$xRFMKey}.$entity">
                            <do_if value="Main.$RM_Fleets.{$xRFMKey}.$entity != @Main.$RM_Fleets.{$xRFMKey}.$cue.$Entity">
                                <set_value name="$ERR" exact="'err Dif Cue'"/>
                            </do_if>
                            <do_elseif value="Main.$RM_Fleets.{$xRFMKey}.$isStation or @Main.$RM_Fleets.{$xRFMKey}.$object.realclass == class.station">
                                <do_if value="@Main.$RM_Fleets.{$xRFMKey}.$object.assignedcontrolentity.{controlpost.manager} != Main.$RM_Fleets.{$xRFMKey}.$entity">
                                    <set_value name="$ERR" exact="'err MANAGER'"/>
                                </do_if>
                            </do_elseif>
                            <do_else>
                                <do_if value="@Main.$RM_Fleets.{$xRFMKey}.$object.assignedcontrolentity.{controlpost.aipilot} != Main.$RM_Fleets.{$xRFMKey}.$entity">
                                    <set_value name="$ERR" exact="'err ENTITY'"/>
                                </do_if>
                                <do_elseif value="@Main.$RM_Fleets.{$xRFMKey}.$object.assignedpilot != Main.$RM_Fleets.{$xRFMKey}.$entity">
                                    <set_value name="$ERR" exact="'no PILOT'"/>
                                    <do_if value="Main.$RM_Fleets.{$xRFMKey}.$object.assignedpilot == player.entity">
                                        <set_value name="$ERR" exact="''"/>
                                    </do_if>
                                </do_elseif>
                            </do_else>
                        </do_if>

                        <do_if value="Main.$RM_Fleets.{$xRFMKey}.$object != @Main.$RM_Fleets.{$xRFMKey}.$cue.$Promoted.{1}">
                            <set_value name="$ERR" exact=" $ERR + ' GRP PROMOTED'" />
                        </do_if>
                        <do_if value="Main.$RM_Fleets.{$xRFMKey}.$object != Main.$RM_Fleets.{$xRFMKey}.$cue.$PromotedCommander">
                            <set_value name="$ERR" exact=" $ERR + ' PROMOTEDCOM'"/>
                        </do_if>
                        <do_if value="Main.$RM_Fleets.{$xRFMKey}.$commander.$object != null and Main.$RM_Fleets.{$xRFMKey}.$commander.$object != Main.$RM_Fleets.{$xRFMKey}.$object">
                            <set_value name="$ERR" exact=" $ERR + ' REALCOM'"/>
                        </do_if>

                        <debug_to_file text="'
%s  %s/%s %s RFM_%s_ Promoted= %s%s %s %s%s Entity= %s %s %s
                        '.[
                        $ERR, $strIdx, Main.$RM_Fleets.keys.count, 
                        if Main.$RM_Fleets.{$xRFMKey}.$isLockedFleet then
                            if @Main.$RM_Fleets.{$xRFMKey}.$destroyedShipKeys.count gt 0 then
                                '   +   '
                            else
                                'err dSK'
                        else
                            if @Main.$RM_Fleets.{$xRFMKey}.$destroyedShipKeys.count gt 0 then
                                'err dSK'
                            else
                                '   -   '
                        ,
                        $strRFMKey, 
                        if Main.$RM_Fleets.{$xRFMKey}.$object != null then
                            if Main.$RM_Fleets.{$xRFMKey}.$cue.$fleetshipsByComp.{Main.$RM_Fleets.{$xRFMKey}.$object}? then
                                if Main.$RM_Fleets.{$xRFMKey}.$cue.$fleetshipsByComp.{Main.$RM_Fleets.{$xRFMKey}.$object} != 1 then
                                    '[%s] '.[Main.$RM_Fleets.{$xRFMKey}.$cue.$fleetshipsByComp.{Main.$RM_Fleets.{$xRFMKey}.$object}]
                                else
                                    ''
                            else
                                '[err] '
                        else
                            ''
                        ,
                        Main.$RM_Fleets.{$xRFMKey}.$name, 
                        if Main.$RM_Fleets.{$xRFMKey}.$object != null then
                            '(%s) &lt;%s&gt;-%s'.[Main.$RM_Fleets.{$xRFMKey}.$object.idcode, Main.$RM_Fleets.{$xRFMKey}.$object, Main.$RM_Fleets.{$xRFMKey}.$object.sector.knownname]
                        else
                            '',
                        if Main.$RM_Fleets.{$xRFMKey}.$object == null then
                            '[REAL= %s]'.[Main.$RM_Fleets.{$xRFMKey}.$commander.$name]
                        else '', 
                        if Main.$RM_Fleets.{$xRFMKey}.$commander.$object != null then
                            if Main.$RM_Fleets.{$xRFMKey}.$commander.$object != Main.$RM_Fleets.{$xRFMKey}.$object then
                                '[ERROR (%s) &lt;%s&gt;]'.[Main.$RM_Fleets.{$xRFMKey}.$commander.$object.idcode, Main.$RM_Fleets.{$xRFMKey}.$commander.$object]
                            else ''
                        else
                            '',
                        if Main.$RM_Fleets.{$xRFMKey}.$entity != null then
                            '%s &lt;%s&gt; (controlpos %s)'.[Main.$RM_Fleets.{$xRFMKey}.$entity.knownname, Main.$RM_Fleets.{$xRFMKey}.$entity, Main.$RM_Fleets.{$xRFMKey}.$entity.controlpost]
                        else
                            '',
                        if Main.$RM_Fleets.{$xRFMKey}.$cue.$takedControl? then 
                            '(takedControl = RFM_%s_%s &lt;%s&gt;)'.[$xRFMKey, Main.$RM_Fleets.{$xRFMKey}.$cue.$fleetshipsByComp.{Main.$RM_Fleets.{$xRFMKey}.$cue.$takedControl}, Main.$RM_Fleets.{$xRFMKey}.$cue.$takedControl] 
                        else '',
                        if @Main.$RM_Fleets.{$xRFMKey}.$destroyedShipKeys.count gt 0 then
                            'destroyedShipKeys=%s'.[Main.$RM_Fleets.{$xRFMKey}.$destroyedShipKeys]
                        else
                            ''
                        ]" name="$printlogF" directory="Main.$logDIR" />
                    </do_for_each>

                    <do_if value="$deepdebug">
                        <run_actions ref="DebugPrintValue">
                            <param name="value" value="Main.$RM_Fleets" />
                            <param name="recursiondepth" value="if $debugchance then 2 else 1" />
                            <param name="debugToFile" value="true" />
                            <param name="debugFileName" value="$printlogF" />
                            <param name="debugFileDir" value="Main.$logDIR" />
                            <param name="DebugChance" value="100" />
                        </run_actions>
                    </do_if>
                    <debug_to_file text="' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - '" name="$printlogF" directory="Main.$logDIR" chance="$debugchance" />
                </do_if>
            </actions>
        </library>

        <!-- IN     : $pFSByIdx as RF Manager.$fleetshipsByIdx Table-->    
        <!--        : $printlogF  as log file name
                    : $debugchance, $deepdebug
        -->
        <library name="Print_fleetshipsByIdx">
            <actions>
                <!-- 
                <set_value name="$RFM_Cue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />
                -->
                <!-- 
                <set_value name="$pFSByIdx" exact="Main.$RM_Fleets.{$RFMKey}.$cue.$fleetshipsByIdx.clone"/>
                -->
                <!-- FLEET ALIVE SHIPS TABLE -->
                <set_value name="$ERR" exact="table[]" />
                <do_if value="(Main.$RM_Fleets.{$RFMKey}.$cue.$fleetshipsByIdx.keys.count != Main.$RM_Fleets.{$RFMKey}.$cue.$fleetshipsByComp.keys.count) or (Main.$RM_Fleets.{$RFMKey}.$cue.$fleetshipsByComp.keys.count != Main.$RM_Fleets.{$RFMKey}.$cue.$Subordinates.count)">
                    <set_value name="$ERR.{1}" />
                </do_if>
                <set_value name="$aliveShips" exact="table[
                    $ByIndx = Main.$RM_Fleets.{$RFMKey}.$cue.$fleetshipsByIdx.clone,
                    $ByComp = Main.$RM_Fleets.{$RFMKey}.$cue.$fleetshipsByComp.clone,
                ]" />
                <do_if value="$ERR.{1}?">
                    <set_value name="$aliveShips.$Subs" exact="[]"/>
                    <do_for_each name="$subObj" in="Main.$RM_Fleets.{$RFMKey}.$cue.$Subordinates" counter="$iSubOrd">
                        <append_to_list name="$aliveShips.$Subs" exact="table[
                            $object = $subObj,
                            $name = $subObj.knownname,
                            $idcode = $subObj.idcode
                        ]" />
                    </do_for_each>
                </do_if>
                <debug_to_file text="'   [%s] Fleet Alive Ship Tables ( #I=%s, #C=%s, #S=%s  #R=%s)'.[
                    if not $ERR.{1}? then '  OK ' else 'ERROR',
                    Main.$RM_Fleets.{$RFMKey}.$cue.$fleetshipsByIdx.keys.count,
                    Main.$RM_Fleets.{$RFMKey}.$cue.$fleetshipsByComp.keys.count,
                    Main.$RM_Fleets.{$RFMKey}.$cue.$Subordinates.count,
                    Main.$FleetRecords.{$RFMKey}.keys.count
                    ]" 
                    name="$printlogF" directory="Main.$logDIR" chance="if @$debugchance != null then $debugchance else 0"/>

                <set_value name="$isFleetNormal" exact="(Main.$RM_Fleets.{$RFMKey}.$cue.$fleetshipsByIdx.keys.count == Main.$FleetRecords.{$RFMKey}.keys.count)" />
                <do_if value="$isFleetNormal and Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.count gt 0">
                    <set_value name="$ERR.{2}" />
                </do_if>
                <do_if value="$isFleetNormal and Main.$RM_Fleets.{$RFMKey}.$cue.$reAssignedShips.count != 0">
                    <set_value name="$ERR.{3}" />
                </do_if>
                <debug_to_file text="'   [%s] RFM %s = %s, %s = %s'.[
                    if $ERR.{2}? or $ERR.{3}? then 'ERROR' else '  OK ',
                    if $ERR.{2}? then '{ destroyedShipKeys }' else 'destroyedShipKeys',
                    Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys,
                    if $ERR.{3}? then '{ reAssignedShips }' else 'reAssignedShips',
                    Main.$RM_Fleets.{$RFMKey}.$cue.$reAssignedShips
                ]" name="$printlogF" directory="Main.$logDIR" />

                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$aliveShips" />
                    <param name="recursiondepth" value="if $ERR.{1}? then 2 else 1" />
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="$printlogF" />
                    <param name="debugFileDir" value="Main.$logDIR" />
                    <param name="DebugChance" value="if $ERR.{1}? then 100 else $deepdebug" />
                </run_actions>
                <remove_value name="$aliveShips" />
                
            </actions>
        </library>
        <!-- RFM_xx_FleetRecord dosyasına döküm yapar
            IN  : 
                RFMKey
                inserttext      (Default ''  )  dosya başına ekstra satır eklemek için
                recursiondepth  (Default null)  Main.$DFD.Records açıksa ve  verilmemişse  debugchance için +2 deepdebug için +2 yoksa 1
                logfile         (Default null)  verilmemişse 'RFM_' + $RFMKey + Main.$logTAG_FleetRecord üretir
                append          (Default false) dosyayı ilk açma yöntemi
        -->
        <library name="Debug_FleetRecord" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="inserttext" default="''" />
                <param name="recursiondepth" default="null"/>
                <param name="logfile" default="null" />
                <param name="append" default="false"/>
            </params>
            <actions>
                <do_if value="Main.$isDebugFileMode">
                    <do_if value="( not Main.$RM_Fleets.{$RFMKey}? ) or ( not Main.$FleetRecords.{$RFMKey}? )" >
                        <do_if value="not Main.$RM_Fleets.{$RFMKey}?">
                            <debug_text text="'Main.$RM_Fleets.{%s} NO TABLE [@_Fikret]'.[$RFMKey]" />
                        </do_if>
                        <do_else>
                            <debug_text text="'Main.$FleetRecords.{%s} NO TABLE [@_Fikret]'.[$RFMKey]" />
                        </do_else>
                    </do_if>
                    <do_else>

                        <run_actions ref="Debug_FleetRecord_Header" result="$resulterr" >
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="inserttext" value="$inserttext" />
                            <param name="logfile" value="$logfile" />
                            <param name="append" value="$append" />
                        </run_actions>

                        <run_actions ref="Debug_FleetRecord_MainKeys" chance="if @$resulterr then 100 else Main.$DFD.$Records">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="recursiondepth" value="$recursiondepth" />
                            <param name="logfile" value="$logfile" />
                            <param name="append" value="true" />
                        </run_actions>

                        <run_actions ref="Debug_FleetRecord_tShipPlan" chance="Main.$DFD.$tShipPlan">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="recursiondepth" value="$recursiondepth" />
                            <param name="logfile" value="$logfile" />
                        </run_actions>

                        <run_actions ref="Debug_FleetRecord_tIndividualInstructions" chance="Main.$DFD.$tIndividualInstructions">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="recursiondepth" value="$recursiondepth" />
                            <param name="logfile" value="$logfile" />
                        </run_actions>

                        <run_actions ref="Debug_FleetRecord_tBulkCrew" chance="Main.$DFD.$tBulkCrew">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="recursiondepth" value="$recursiondepth" />
                            <param name="logfile" value="$logfile" />
                        </run_actions>

                    </do_else>
                </do_if>
            </actions>
        </library>

        <library name="Debug_FleetRecord_NoPlan" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="inserttext" default="''" />
                <param name="recursiondepth" default="null"/>
                <param name="logfile" default="null" />
                <param name="append" default="false"/>
            </params>
            <actions>
                <do_if value="Main.$isDebugFileMode">
                    <do_if value="( not Main.$RM_Fleets.{$RFMKey}? ) or ( not Main.$FleetRecords.{$RFMKey}? )" >
                        <do_if value="not Main.$RM_Fleets.{$RFMKey}?">
                            <debug_text text="'Main.$RM_Fleets.{%s} NO TABLE [@_Fikret]'.[$RFMKey]" />
                        </do_if>
                        <do_else>
                            <debug_text text="'Main.$FleetRecords.{%s} NO TABLE [@_Fikret]'.[$RFMKey]" />
                        </do_else>
                    </do_if>
                    <do_else>

                        <run_actions ref="Debug_FleetRecord_Header" result="$resulterr" >
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="inserttext" value="$inserttext" />
                            <param name="logfile" value="$logfile" />
                            <param name="append" value="$append" />
                        </run_actions>

                        <run_actions ref="Debug_FleetRecord_MainKeys" chance="if @$resulterr then 100 else Main.$DFD.$Records">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="recursiondepth" value="$recursiondepth" />
                            <param name="logfile" value="$logfile" />
                            <param name="append" value="true" />
                        </run_actions>

                        <run_actions ref="Debug_FleetRecord_tBulkCrew" chance="Main.$DFD.$tBulkCrew">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="recursiondepth" value="$recursiondepth" />
                            <param name="logfile" value="$logfile" />
                        </run_actions>

                    </do_else>
                </do_if>
            </actions>
        </library>

        <library name="Debug_FleetRecord_NoOthers" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="inserttext" default="''" />
                <param name="recursiondepth" default="null"/>
                <param name="logfile" default="null" />
                <param name="append" default="false"/>
            </params>
            <actions>
                <do_if value="Main.$isDebugFileMode">
                    <do_if value="( not Main.$RM_Fleets.{$RFMKey}? ) or ( not Main.$FleetRecords.{$RFMKey}? )" >
                        <do_if value="not Main.$RM_Fleets.{$RFMKey}?">
                            <debug_text text="'Main.$RM_Fleets.{%s} NO TABLE [@_Fikret]'.[$RFMKey]" />
                        </do_if>
                        <do_else>
                            <debug_text text="'Main.$FleetRecords.{%s} NO TABLE [@_Fikret]'.[$RFMKey]" />
                        </do_else>
                    </do_if>
                    <do_else>

                        <run_actions ref="Debug_FleetRecord_Header" result="$resulterr" >
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="inserttext" value="$inserttext" />
                            <param name="logfile" value="$logfile" />
                            <param name="append" value="$append" />
                        </run_actions>

                        <run_actions ref="Debug_FleetRecord_MainKeys" chance="if @$resulterr then 100 else Main.$DFD.$Records">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="recursiondepth" value="$recursiondepth" />
                            <param name="logfile" value="$logfile" />
                            <param name="append" value="true" />
                        </run_actions>

                    </do_else>
                </do_if>
            </actions>
        </library>

        <library name="Debug_FleetRecord_Header" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="inserttext" default="''" />
                <param name="logfile" default="null" />
                <param name="append" default="false"/>
            </params>
            <actions>
                <do_if value="Main.$isDebugFileMode">
                    <do_if value="( not Main.$RM_Fleets.{$RFMKey}? ) or ( not Main.$FleetRecords.{$RFMKey}? )" >
                        <do_if value="not Main.$RM_Fleets.{$RFMKey}?">
                            <debug_text text="'Main.$RM_Fleets.{%s} NO TABLE [@_Fikret]'.[$RFMKey]" />
                        </do_if>
                        <do_else>
                            <debug_text text="'Main.$FleetRecords.{%s} NO TABLE [@_Fikret]'.[$RFMKey]" />
                        </do_else>
                    </do_if>
                    <do_else>

                        <set_value name="$debugchance" exact="Main.$isDebugFileMode * 100" />
                        <set_value name="$deepdebug" exact="Main.$DFD.$RecordsDeep * 100" />
                        <set_value name="$pRFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />
                        <set_value name="$printlogF" exact="'RFM_' + $RFMKey + Main.$logTAG_FleetRecord"/>
                        <do_if value="$logfile != null and $printlogF != $logfile">
                            <set_value name="$printlogF" exact="$logfile"/>
                        </do_if>
        
                        <!-- FLEET ALIVE SHIPS TABLE -->
                        <do_if value="$inserttext != ''">
                            <debug_to_file text="$inserttext" name="$printlogF" directory="Main.$logDIR" append="$append" chance="$debugchance"/>
                            <set_value name="$append" exact="true" />
                        </do_if>

                        <debug_to_file text="'RFM_%s_ , Commander &lt;%s&gt; %s %s (%s),  Age: %s, %s'.[$RFMKey, @$pRFMCue.$RMCommander, $pRFMCue.$RMCommanderName, $pRFMCue.$RMCommanderIdCode, @$pRFMCue.$RMCommander.sector.knownname, player.age, player.systemtime.{'%F-%X'}]" name="$printlogF" directory="Main.$logDIR" chance="$debugchance" append="$append"/>

                        <include_actions ref="Print_fleetshipsByIdx" />

                        <do_if value="$debugchance">
                            <set_value name="$pFRec" exact="Main.$FleetRecords.{$RFMKey}.clone"/>                        
                            <set_value name="$pFSByIdx" exact="$pRFMCue.$fleetshipsByIdx.clone"/>
                            <set_value name="$pFSByComp" exact="$pRFMCue.$fleetshipsByComp.clone"/>

                            <run_actions ref="GetBasamak" result="$maxbasamak">
                                <param name="value" value="$pFRec.keys.list.count" />
                            </run_actions>
                            
                            <do_for_each name="$xId" in="$pFRec.keys.list"  >
                                <run_actions ref="GetNameSubordinateGroupId" result="$groupName">
                                    <param name="subordinategroupid" value="$pFRec.{$xId}.$subordinategroupid" />
                                </run_actions>
                                
                                <run_actions ref="GetStringValue" result="$strIdx">
                                    <param name="value" value="$xId" />
                                    <param name="maxbasamak" value="$maxbasamak" />
                                </run_actions>

                                <remove_value name="$ERR.{4}" />
                                <remove_value name="$ERR.{5}" />
                                <remove_value name="$ERR.{6}" />
                                <do_if value="@$pFSByComp.{@$pFSByIdx.{$xId}}">
                                    <do_if value="$pFSByComp.{@$pFSByIdx.{$xId}} != $xId">
                                        <set_value name="$ERR.{4}" />
                                    </do_if>
                                </do_if>
                                <do_else>
                                    <do_if value="@$pFSByIdx.{$xId}">
                                        <set_value name="$ERR.{5}" />
                                    </do_if>
                                </do_else>
                                <do_if value="$pFRec.{$xId}.$commanderidx == $xId">
                                    <set_value name="$ERR.{6}" />
                                </do_if>
                                <set_value name="$strIsTakedControl" exact="' '"/>
                                <set_value name="$strTakedControl" exact="''" />
                                <do_if value="$pRFMCue.$takedControl?">
                                    <do_if value="$pFSByComp.{$pRFMCue.$takedControl} == $xId">
                                        <set_value name="$strTakedControl" exact="'[takedControl = &lt;%s&gt;]'.[$pRFMCue.$takedControl]" />
                                        <set_value name="$strIsTakedControl" exact="'*'"/>
                                    </do_if>
                                </do_if>
                                <debug_to_file text="' %s [%s/%s] %s = &lt;%s&gt; %s %s .commanderidx: %s%s &lt;%s&gt;, subordinategroupid: %s (%s), assignment: %s, %s %s
                                '.[
                                if $ERR.{6}? or $ERR.{5}? or $ERR.{4}? then
                                    'ERROR ' + $strIsTakedControl
                                else
                                    '  OK  ' + $strIsTakedControl,
                                $strIdx, $pFRec.keys.list.count,
                                if $ERR.{5}? or $ERR.{4}? then 
                                    'ERR'
                                else 
                                    $strIdx,
                                if @$pFSByIdx.{$xId}.exists then $pFSByIdx.{$xId} else ' DEAD  ',
                                $pFRec.{$xId}.$name, 
                                if @$pFSByIdx.{$xId}.exists then $pFSByIdx.{$xId}.idcode else '',  
                                if $ERR.{6}? then 
                                    ' { ERR } ' 
                                    else 
                                    '',
                                $pFRec.{$xId}.$commanderidx,
                                if @$pFSByIdx.{$pFRec.{$xId}.$commanderidx} then $pFSByIdx.{$pFRec.{$xId}.$commanderidx} else (if $xId == 1 then 'null' else 'dead'), 
                                $pFRec.{$xId}.$subordinategroupid, $groupName, @$pFRec.{$xId}.$assignment.name,
                                if Main.$Loadouts.{$RFMKey}.{$xId}? then
                                    if typeof Main.$Loadouts.{$RFMKey}.{$xId} != datatype.loadout then
                                        '[ERROR loadout]'
                                    else
                                        ''
                                else
                                    '[loadout NONE]'
                                ,
                                $strTakedControl
                                ]" name="$printlogF" directory="Main.$logDIR" />

                                <remove_value name="$strTakedControl" />
                                <remove_value name="$strTakedControl" />

                                <do_if value="$ERR.keys.count">
                                    <set_value name="$resulterr" />
                                </do_if>
                            </do_for_each>
                        
                        </do_if>

                    </do_else>
                </do_if>

                <return value="$resulterr?"/>
            </actions>
        </library>

        <library name="GetStringValue" purpose="run_actions">
            <params>
                <param name="value" />
                <param name="maxbasamak" />
            </params>
            <actions>
                <run_actions ref="GetBasamak" result="$basamak">
                    <param name="value" value="$value" />
                </run_actions>
                <set_value name="$strIdx" exact="'%s'.[$value]" />
                <do_all counter="$i" exact="($maxbasamak - $basamak)i">
                    <set_value name="$strIdx" exact="' ' + $strIdx"/>
                </do_all>
                <return value="$strIdx"/>
            </actions>
        </library>

        <library name="GetBasamak" purpose="run_actions">
            <params>
                <param name="value" />
            </params>
            <actions>
                <set_value name="$basamak" exact="1" />
                <do_if value="$value ge 10">
                    <set_value name="$basamak" exact="1" operation="add" />
                </do_if>
                <do_if value="$value ge 100">
                    <set_value name="$basamak" exact="1" operation="add" />
                </do_if>
                <do_if value="$value ge 1000">
                    <set_value name="$basamak" exact="1" operation="add" />
                </do_if>
                <return value="$basamak" />
            </actions>
        </library>

        <library name="Debug_FleetRecord_MainKeys" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="recursiondepth" default="null"/>
                <param name="logfile" default="null" />
                <param name="append" default="false"/>
            </params>
            <actions>
                <do_if value="Main.$isDebugFileMode">
                    <do_if value="( not Main.$RM_Fleets.{$RFMKey}? ) or ( not Main.$FleetRecords.{$RFMKey}? )" >
                        <do_if value="not Main.$RM_Fleets.{$RFMKey}?">
                            <debug_text text="'Main.$RM_Fleets.{%s} NO TABLE [@_Fikret]'.[@$RFMKey]" />
                        </do_if>
                        <do_else>
                            <debug_text text="'Main.$FleetRecords.{%s} NO TABLE [@_Fikret]'.[@$RFMKey]" />
                        </do_else>
                    </do_if>
                    <do_else>
                        <set_value name="$debugchance" exact="Main.$DFD.$Records" />
                        <set_value name="$deepdebug" exact="Main.$DFD.$RecordsDeep" />
                        <set_value name="$pRFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />
                        <set_value name="$printlogF" exact="'RFM_' + $RFMKey + Main.$logTAG_FleetRecord"/>
                        <do_if value="$logfile != null and $printlogF != $logfile">
                            <set_value name="$printlogF" exact="$logfile"/>
                        </do_if>
                        <do_if value="$debugchance">
                            <do_if value="$recursiondepth == null">
                                <set_value name="$recursiondepth" exact="0" />
                                <do_if value="$debugchance > 0">
                                    <set_value name="$recursiondepth" exact="2" operation="add"/>
                                </do_if>
                                <do_if value="$deepdebug > 0">
                                    <set_value name="$recursiondepth" exact="2" operation="add"/>
                                </do_if>
                                <do_if value="$recursiondepth == 0">
                                    <set_value name="$recursiondepth" exact="1" />
                                </do_if>
                            </do_if>
                            <set_value name="$pFRec" exact="Main.$FleetRecords.{$RFMKey}.clone"/>
                            <debug_to_file text="' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - '" name="$printlogF" directory="Main.$logDIR"  />
                            <debug_to_file text="'Fleet Record Table : '" name="$printlogF" directory="Main.$logDIR"  />
                            <run_actions ref="DebugPrintValue">
                                <param name="value" value="$pFRec" />
                                <param name="skipKeysList" value="['$tBulkCrew', '$tShipPlan', '$tIndividualInstructions']" />
                                <param name="recursiondepth" value="$recursiondepth" />
                                <param name="debugToFile" value="true" />
                                <param name="debugFileName" value="$printlogF" />
                                <param name="debugFileDir" value="Main.$logDIR" />
                                <param name="DebugChance" value="100" />
                            </run_actions>
                        </do_if>
                    </do_else>
                </do_if>
            </actions>
        </library>


        <library name="Debug_FleetRecord_tShipPlan" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="recursiondepth" default="null"/>
                <param name="logfile" default="null" />
            </params>
            <actions>
                <do_if value="Main.$isDebugFileMode">
                    <do_if value="( not Main.$RM_Fleets.{$RFMKey}? ) or ( not Main.$FleetRecords.{$RFMKey}? )" >
                        <do_if value="not Main.$RM_Fleets.{$RFMKey}?">
                            <debug_text text="'Main.$RM_Fleets.{%s} NO TABLE [@_Fikret]'.[@$RFMKey]" />
                        </do_if>
                        <do_else>
                            <debug_text text="'Main.$FleetRecords.{%s} NO TABLE [@_Fikret]'.[@$RFMKey]" />
                        </do_else>
                    </do_if>
                    <do_else>
                        <set_value name="$debugchance" exact="Main.$DFD.$tShipPlan" />
                        <set_value name="$deepdebug" exact="Main.$DFD.$tShipPlanDeep" />
                        <set_value name="$pRFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />
                        <set_value name="$printlogF" exact="'RFM_' + $RFMKey + Main.$logTAG_FleetRecord"/>
                        <do_if value="$logfile != null">
                            <set_value name="$printlogF" exact="$logfile"/>
                            <set_value name="$debugchance" exact="Main.$isDebugFileMode * 100" />
                        </do_if>
                        <set_value name="$printlogF" exact="$printlogF + '_tShipPlan'"/>
                        <do_if value="$debugchance">
                            <do_if value="$recursiondepth == null">
                                <set_value name="$recursiondepth" exact="0" />
                                <do_if value="$debugchance > 0">
                                    <set_value name="$recursiondepth" exact="2" operation="add"/>
                                </do_if>
                                <do_if value="$deepdebug > 0">
                                    <set_value name="$recursiondepth" exact="1" operation="add"/>
                                </do_if>
                                <do_if value="$recursiondepth == 0">
                                    <set_value name="$recursiondepth" exact="1" />
                                </do_if>
                            </do_if>
                            <set_value name="$pFRec" exact="Main.$FleetRecords.{$RFMKey}.clone"/>
                            <set_value name="$dRecord" exact="table[]" />
                            <do_for_each name="$i" valuename="$rEntry" in="$pFRec">
                                <do_if value="$rEntry.$tShipPlan?">
                                    <set_value name="$dRecord.{'$' + 'shipID_%s'.[$rEntry.$id]}" exact="$rEntry.$tShipPlan" />
                                </do_if>
                            </do_for_each>

                            <debug_to_file text="'RFM_%s_ , Commander &lt;%s&gt; %s %s (%s),  Age: %s, %s'.[$RFMKey, @$pRFMCue.$RMCommander, $pRFMCue.$RMCommanderName, $pRFMCue.$RMCommanderIdCode, @$pRFMCue.$RMCommander.sector.knownname, player.age, player.systemtime.{'%F-%X'}]" name="$printlogF" directory="Main.$logDIR" append="false"/>
                            <run_actions ref="DebugPrintValue" >
                                <param name="value" value="$dRecord" />
                                <param name="skipKeysList" value="[]" />
                                <param name="recursiondepth" value="$recursiondepth" />
                                <param name="debugToFile" value="true" />
                                <param name="debugFileName" value="$printlogF" />
                                <param name="debugFileDir" value="Main.$logDIR" />
                                <param name="DebugChance" value="100" />
                            </run_actions>
                        </do_if>
                    </do_else>
                </do_if>
            </actions>
        </library>

        <library name="Debug_FleetRecord_tIndividualInstructions" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="recursiondepth" default="null"/>
                <param name="logfile" default="null" />
            </params>
            <actions>
                <do_if value="Main.$isDebugFileMode">
                    <do_if value="( not Main.$RM_Fleets.{$RFMKey}? ) or ( not Main.$FleetRecords.{$RFMKey}? )" >
                        <do_if value="not Main.$RM_Fleets.{$RFMKey}?">
                            <debug_text text="'Main.$RM_Fleets.{%s} NO TABLE [@_Fikret]'.[@$RFMKey]" />
                        </do_if>
                        <do_else>
                            <debug_text text="'Main.$FleetRecords.{%s} NO TABLE [@_Fikret]'.[@$RFMKey]" />
                        </do_else>
                    </do_if>
                    <do_else>
                        <set_value name="$debugchance" exact="Main.$DFD.$tIndividualInstructions" />
                        <set_value name="$deepdebug" exact="Main.$DFD.$tIndividualInstructionsDeep" />
                        <set_value name="$pRFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />
                        <set_value name="$printlogF" exact="'RFM_' + $RFMKey + Main.$logTAG_FleetRecord"/>
                        <do_if value="$debugchance">
                            <do_if value="$logfile != null">
                                <set_value name="$printlogF" exact="$logfile"/>
                                <set_value name="$debugchance" exact="Main.$isDebugFileMode * 100" />
                            </do_if>
                            <set_value name="$printlogF" exact="$printlogF + '_tIndividualInstructions'"/>

                            <do_if value="$recursiondepth == null">
                                <set_value name="$recursiondepth" exact="0" />
                                <do_if value="$debugchance > 0">
                                    <set_value name="$recursiondepth" exact="2" operation="add"/>
                                </do_if>
                                <do_if value="$deepdebug > 0">
                                    <set_value name="$recursiondepth" exact="1" operation="add"/>
                                </do_if>
                                <do_if value="$recursiondepth == 0">
                                    <set_value name="$recursiondepth" exact="1" />
                                </do_if>
                            </do_if>

                            <set_value name="$pFRec" exact="Main.$FleetRecords.{$RFMKey}.clone"/>
                            <set_value name="$dRecord" exact="table[]" />
                            <do_for_each name="$i" valuename="$rEntry" in="$pFRec">
                                <do_if value="$rEntry.$tIndividualInstructions?">
                                    <set_value name="$dRecord.{'$' + 'shipID_%s'.[$rEntry.$id]}" exact="$rEntry.$tIndividualInstructions" />
                                </do_if>
                            </do_for_each>

                            <debug_to_file text="'RFM_%s_ , Commander &lt;%s&gt; %s %s (%s),  Age: %s, %s'.[$RFMKey, @$pRFMCue.$RMCommander, $pRFMCue.$RMCommanderName, $pRFMCue.$RMCommanderIdCode, @$pRFMCue.$RMCommander.sector.knownname, player.age, player.systemtime.{'%F-%X'}]" name="$printlogF" directory="Main.$logDIR" append="false"/>
                            <run_actions ref="DebugPrintValue" >
                                <param name="value" value="$dRecord" />
                                <param name="skipKeysList" value="[]" />
                                <param name="recursiondepth" value="$recursiondepth" />
                                <param name="debugToFile" value="true" />
                                <param name="debugFileName" value="$printlogF" />
                                <param name="debugFileDir" value="Main.$logDIR" />
                                <param name="DebugChance" value="100" />
                            </run_actions>
                        </do_if>
                    </do_else>
                </do_if>
            </actions>
        </library>

        <library name="Debug_FleetRecord_tBulkCrew" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="recursiondepth" default="null"/>
                <param name="logfile" default="null" />
            </params>
            <actions>
                <do_if value="Main.$isDebugFileMode">
                    <do_if value="( not Main.$RM_Fleets.{$RFMKey}? ) or ( not Main.$FleetRecords.{$RFMKey}? )" >
                        <do_if value="not Main.$RM_Fleets.{$RFMKey}?">
                            <debug_text text="'Main.$RM_Fleets.{%s} NO TABLE [@_Fikret]'.[@$RFMKey]" />
                        </do_if>
                        <do_else>
                            <debug_text text="'Main.$FleetRecords.{%s} NO TABLE [@_Fikret]'.[@$RFMKey]" />
                        </do_else>
                    </do_if>
                    <do_else>
                        <set_value name="$debugchance" exact="Main.$DFD.$tBulkCrew" />
                        <set_value name="$deepdebug" exact="Main.$DFD.$RecordsDeep" />
                        <set_value name="$pRFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />
                        <set_value name="$printlogF" exact="'RFM_' + $RFMKey + Main.$logTAG_FleetRecord"/>
                        <do_if value="$logfile != null">
                            <set_value name="$printlogF" exact="$logfile"/>
                            <set_value name="$debugchance" exact="Main.$isDebugFileMode * 100" />
                        </do_if>
                        <set_value name="$printlogF" exact="$printlogF + '_tBulkCrew'" />
                        <do_if value="$debugchance">
                            <do_if value="$recursiondepth == null">
                                <set_value name="$recursiondepth" exact="0" />
                                <do_if value="$debugchance > 0">
                                    <set_value name="$recursiondepth" exact="2" operation="add"/>
                                </do_if>
                                <do_if value="$deepdebug > 0">
                                    <set_value name="$recursiondepth" exact="2" operation="add"/>
                                </do_if>
                                <do_if value="$recursiondepth == 0">
                                    <set_value name="$recursiondepth" exact="1" />
                                </do_if>
                            </do_if>

                            <set_value name="$pFRec" exact="Main.$FleetRecords.{$RFMKey}.clone"/>
                            <set_value name="$dRecord" exact="table[]" />
                            <do_for_each name="$i" valuename="$rEntry" in="$pFRec">
                                <set_value name="$dRecord.{'$' + 'shipID_%s'.[$rEntry.$id]}" exact="$rEntry.$tBulkCrew" />
                            </do_for_each>

                            <debug_to_file text="'RFM_%s_ , Commander &lt;%s&gt; %s %s (%s),  Age: %s, %s'.[$RFMKey, @$pRFMCue.$RMCommander, $pRFMCue.$RMCommanderName, $pRFMCue.$RMCommanderIdCode, @$pRFMCue.$RMCommander.sector.knownname, player.age, player.systemtime.{'%F-%X'}]" name="$printlogF" directory="Main.$logDIR" append="false"/>
                            <run_actions ref="DebugPrintValue" >
                                <param name="value" value="$dRecord" />
                                <param name="skipKeysList" value="[]" />
                                <param name="recursiondepth" value="$recursiondepth" />
                                <param name="debugToFile" value="true" />
                                <param name="debugFileName" value="$printlogF" />
                                <param name="debugFileDir" value="Main.$logDIR" />
                                <param name="DebugChance" value="100" />
                            </run_actions>
                        </do_if>
                    </do_else>
                </do_if>
            </actions>
        </library>


        <library name="TableCopy" purpose="run_actions">
            <params>
                <param name="t" />
            </params>
            <actions>
                <set_value name="$t2" exact="table[]" />
                <do_for_each name="$k" valuename="$v" in="$t">
                    <do_if value="typeof $v == datatype.table">
                        <run_actions ref="TableCopy" result="$x">
                            <param name="t" value="$v" />
                        </run_actions>
                        <set_value name="$t2.{$k}" exact="$x" />
                    </do_if>
                    <do_else>
                        <set_value name="$t2.{$k}" exact="$v" />
                    </do_else>
                </do_for_each>
                <return value="$t2"/>
            </actions>
        </library>

        <!-- IN : value is a table or list value-->
        <!-- OUT : none, to debug -->
        <library name="DebugPrintValue" purpose="run_actions" >
            <params>
                <param name="value" />
                <!-- Standart 2-->
                <param name="recursiondepth" default="1" />
                <param name="nodename" default="''" />
                <param name="showindex" default="true" />
                <param name="skipKeysList"  default="[]"/>
                <!-- debug mode-->
                <param name="DebugChance" default="100" />
                <param name="debugToFile" default="false" />
                <param name="debugFileName" default="''" />
                <param name="debugFileDir" default="''" />
                <!-- iç parametreler, dışardan parametre girme -->
                <param name="indent" default="''" />
                <param name="prefix" default="''" />
                <param name="postfix" default="''" />
                <param name="textindex" default="''"  comment="iç komut, dışardan parametre verme"/>
            </params>
            <actions>
                <!-- <debug_text text="'nodename = _%s_ , indent = _%s_ nextindent = _%s _ -%s %s- recursiondepth = %s , $value = %s'.[$nodename, $indent, $nextindent, $debugToFile, $debugFileName, $recursiondepth, $value]" />-->

                <do_if value="$recursiondepth" min="1">
                    <do_if value="typeof $value == datatype.table">
                        <do_if value="$value.keys.count">
                            
                            <do_if value="$debugToFile">

                                <do_if value="$indent == ''">
                                    <debug_to_file text="$nodename + $indent + $prefix + (if $showindex then $textindex else '') + 'table['" name="$debugFileName" directory="$debugFileDir" chance="$DebugChance"/>
                                </do_if>
                                <do_else>
                                    <debug_to_file text="$indent + $prefix + 'table['" name="$debugFileName" directory="$debugFileDir" chance="$DebugChance"/>
                                </do_else>
                            
                            </do_if>
                            <do_else>
                                <do_if value="$indent == ''">
                                    <debug_text text="$nodename + $indent + $prefix + 'table['" context="false" chance="$DebugChance"/>
                                </do_if>
                                <do_else>
                                    <debug_text text="$indent + $prefix + (if $showindex then $textindex else '') + 'table['" context="false" chance="$DebugChance"/>
                                </do_else>
                            </do_else>
                            <set_value name="$nextindent" exact="$indent + '  '" />
                            <do_for_each in="$value">
                                <!-- <debug_text text="'loop.key = %s , type is string? = %s , skipKeysList = %s , isInList = %s'.[loop.key, (typeof loop.key == datatype.string), $skipKeysList, $skipKeysList.indexof.{loop.key} ]" />-->
                                <do_if value="$skipKeysList.indexof.{loop.key} == 0">
                                    <run_actions ref="DebugPrintValue">
                                        <param name="recursiondepth" value="$recursiondepth - 1" />
                                        <param name="indent" value="$nextindent" />
                                        <param name="prefix" value="(if typeof loop.key == datatype.string then loop.key else '{' + loop.key + '}' ) + ' = '" />
                                        <param name="value" value="loop.value" />
                                        <param name="skipKeysList" value="$skipKeysList" />
                                        <param name="postfix" value="','" />
                                        <param name="showindex" value="$showindex" />
                                        <param name="debugToFile" value="$debugToFile" />
                                        <param name="debugFileName" value="$debugFileName" />
                                        <param name="debugFileDir" value="$debugFileDir" />
                                        <param name="DebugChance" value="$DebugChance" />
                                    </run_actions>
                                </do_if>
                            </do_for_each>
                            <do_if value="$debugToFile">
                                <debug_to_file text="$indent + ']' + $postfix" name="$debugFileName" directory="$debugFileDir" chance="$DebugChance"/>
                            </do_if>
                            <do_else>
                                <debug_text text="$indent + ']' + $postfix" context="false" chance="$DebugChance"/>
                            </do_else>
                            <return />
                        </do_if>
                    </do_if>
                    <do_elseif value="typeof $value == datatype.list">
                        <do_if value="$value.count and ($value.count gt 1 or typeof $value.{1} == datatype.table or typeof $value.{1} == datatype.list)" comment="Skip recursion for trivial content">

                            <do_if value="$debugToFile">
                                <do_if value="$indent == ''">
                                    <debug_to_file text="$nodename + $indent + $prefix + '['" name="$debugFileName" directory="$debugFileDir" chance="$DebugChance"/>
                                </do_if>
                                <do_else>
                                    <debug_to_file text="$indent + $prefix + '['" name="$debugFileName" directory="$debugFileDir" chance="$DebugChance"/>
                                </do_else>
                                
                            </do_if>
                            <do_else>
                                <do_if value="$indent == ''">
                                    <debug_text text="$nodename + $indent + $prefix + '['" context="false" chance="$DebugChance"/>
                                </do_if>
                                <do_else>
                                    <debug_text text="$indent + $prefix + '['" context="false" chance="$DebugChance"/>
                                </do_else>
                                
                            </do_else>

                            <set_value name="$nextindent" exact="$indent + '  '" />
                            <do_for_each in="$value">
                                <run_actions ref="DebugPrintValue">
                                    <param name="recursiondepth" value="$recursiondepth - 1" />
                                    <param name="indent" value="$nextindent" />
                                    <param name="value" value="loop.element" />
                                    <param name="showindex" value="$showindex" />
                                    <param name="textindex" value=" '[' + loop.index + ']=' " />
                                    <param name="postfix" value="if loop.index == $value.count then '' else ','" />
                                    <param name="debugToFile" value="$debugToFile" />
                                    <param name="debugFileName" value="$debugFileName" />
                                    <param name="debugFileDir" value="$debugFileDir" />
                                    <param name="DebugChance" value="$DebugChance" />
                                </run_actions>
                            </do_for_each>
                            <do_if value="$debugToFile">
                                <debug_to_file text="$indent + ']' + $postfix" name="$debugFileName" directory="$debugFileDir" chance="$DebugChance"/>
                            </do_if>
                            <do_else>
                                <debug_text text="$indent + ']' + $postfix" context="false" chance="$DebugChance"/>
                            </do_else>
                            <return />
                        </do_if>
                    </do_elseif>
                    <!-- 
                    <do_else>
                        <debug_text text="$indent + $prefix + (if $showindex then $textindex else '') + (typeof $value) + $postfix" context="false" chance="$DebugChance"/>
                        <return />
                    </do_else>
                    -->
                </do_if>

                <do_if value="typeof $value == datatype.string  ">
                    <set_value name="$value" exact="'&quot;%s&quot;'.[$value]" />
                </do_if>

                <do_if value="$debugToFile">
                    <do_if value="$indent == ''">
                        <debug_to_file text="$nodename + $indent + $prefix + (if $showindex then $textindex else '') + $value + $postfix" name="$debugFileName" directory="$debugFileDir" chance="$DebugChance"/>
                    </do_if>
                    <do_else>
                        <debug_to_file text="$indent + $prefix + (if $showindex then $textindex else '') + $value + $postfix" name="$debugFileName" directory="$debugFileDir" chance="$DebugChance"/>
                    </do_else>
                    
                </do_if>
                <do_else>
                    <do_if value="$indent == ''">
                        <debug_text text="$nodename + $indent + $prefix + (if $showindex then $textindex else '') + $value + $postfix" context="false" chance="$DebugChance"/>
                    </do_if>
                    <do_else>
                        <debug_text text="$indent + $prefix + (if $showindex then $textindex else '') + $value + $postfix" context="false" chance="$DebugChance"/>
                    </do_else>
                    
                </do_else>
            </actions>
        </library>

    </cues>
</mdscript>